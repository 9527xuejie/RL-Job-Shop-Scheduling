2020-11-05 10:09:20,978	INFO services.py:1164 -- View the Ray dashboard at [1m[32mhttp://127.0.0.1:8265[39m[22m
== Status ==
Memory usage on this node: 12.8/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.15 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 RUNNING)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_f9ba8_00000 | RUNNING  |       |
+-------------------------+----------+-------+


[2m[36m(pid=45428)[0m 2020-11-05 10:09:23,708	INFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.
[2m[36m(pid=45393)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45393)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45393)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45393)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45393)[0m *** SIGSEGV (@0x0) received by PID 45393 (TID 0x7f9fbddca700) from PID 0; stack trace: ***
[2m[36m(pid=45393)[0m     @     0x7f9fbd9a3390 (unknown)
[2m[36m(pid=45393)[0m     @     0x7f70bd7f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45393)[0m     @     0x7f70bcf247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45393)[0m     @     0x7f70bcf278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45393)[0m     @     0x7f70bcf27ad3 at::TensorIterator::for_each()
[2m[36m(pid=45393)[0m     @     0x7f70bcf27d91 at::TensorIterator::for_each()
[2m[36m(pid=45393)[0m     @     0x7f70bd80ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45393)[0m     @     0x7f70bd82dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45393)[0m     @     0x7f70bcccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45393)[0m     @     0x7f70bcccd388 at::native::copy_impl()
[2m[36m(pid=45393)[0m     @     0x7f70bcccf5a4 at::native::copy_()
[2m[36m(pid=45393)[0m     @     0x7f70bd3ba4f5 at::Tensor::copy_()
[2m[36m(pid=45393)[0m     @     0x7f70bf88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45393)[0m     @     0x7f70bd3ba4f5 at::Tensor::copy_()
[2m[36m(pid=45393)[0m     @     0x7f70c346579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45393)[0m     @     0x5606108c6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45393)[0m     @     0x560610821b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45393)[0m     @     0x5606108acbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45393)[0m     @     0x5606108ada20 method_vectorcall
[2m[36m(pid=45393)[0m     @     0x560610821bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45393)[0m     @     0x5606108acbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45393)[0m     @     0x5606108ad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45393)[0m     @     0x560610822689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45393)[0m     @     0x5606108acbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45393)[0m     @     0x5606108ad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45393)[0m     @     0x560610822689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45393)[0m     @     0x5606108acbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45393)[0m     @     0x5606108ad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45393)[0m     @     0x560610822689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45393)[0m     @     0x5606108acbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45393)[0m     @     0x5606108ad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45393)[0m     @     0x560610822689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45422)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45422)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45422)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45422)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45422)[0m *** SIGSEGV (@0x0) received by PID 45422 (TID 0x7f07a7660700) from PID 0; stack trace: ***
[2m[36m(pid=45422)[0m     @     0x7f07a7239390 (unknown)
[2m[36m(pid=45422)[0m     @     0x7ed8a7124f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45422)[0m     @     0x7ed8a684f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45422)[0m     @     0x7ed8a68528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45422)[0m     @     0x7ed8a6852ad3 at::TensorIterator::for_each()
[2m[36m(pid=45422)[0m     @     0x7ed8a6852d91 at::TensorIterator::for_each()
[2m[36m(pid=45422)[0m     @     0x7ed8a7135b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45422)[0m     @     0x7ed8a7158c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45422)[0m     @     0x7ed8a65faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45422)[0m     @     0x7ed8a65f8388 at::native::copy_impl()
[2m[36m(pid=45422)[0m     @     0x7ed8a65fa5a4 at::native::copy_()
[2m[36m(pid=45422)[0m     @     0x7ed8a6ce54f5 at::Tensor::copy_()
[2m[36m(pid=45422)[0m     @     0x7ed8a91b88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45422)[0m     @     0x7ed8a6ce54f5 at::Tensor::copy_()
[2m[36m(pid=45422)[0m     @     0x7ed8acd9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45305)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45305)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45305)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45305)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45305)[0m *** SIGSEGV (@0x0) received by PID 45305 (TID 0x7f585804e700) from PID 0; stack trace: ***
[2m[36m(pid=45305)[0m     @     0x7f5857c27390 (unknown)
[2m[36m(pid=45305)[0m     @     0x7f2957af5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45305)[0m     @     0x7f29572207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45305)[0m     @     0x7f29572238f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45305)[0m     @     0x7f2957223ad3 at::TensorIterator::for_each()
[2m[36m(pid=45305)[0m     @     0x7f2957223d91 at::TensorIterator::for_each()
[2m[36m(pid=45305)[0m     @     0x7f2957b06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45305)[0m     @     0x7f2957b29c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45385)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45385)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45385)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45385)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45385)[0m *** SIGSEGV (@0x0) received by PID 45385 (TID 0x7f8b83947700) from PID 0; stack trace: ***
[2m[36m(pid=45385)[0m     @     0x7f8b83520390 (unknown)
[2m[36m(pid=45385)[0m     @     0x7f5c834cff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45385)[0m     @     0x7f5c82bfa7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45385)[0m     @     0x7f5c82bfd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45385)[0m     @     0x7f5c82bfdad3 at::TensorIterator::for_each()
[2m[36m(pid=45385)[0m     @     0x7f5c82bfdd91 at::TensorIterator::for_each()
[2m[36m(pid=45385)[0m     @     0x7f5c834e0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45385)[0m     @     0x7f5c83503c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45385)[0m     @     0x7f5c829a5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45385)[0m     @     0x7f5c829a3388 at::native::copy_impl()
[2m[36m(pid=45385)[0m     @     0x7f5c829a55a4 at::native::copy_()
[2m[36m(pid=45385)[0m     @     0x7f5c830904f5 at::Tensor::copy_()
[2m[36m(pid=45385)[0m     @     0x7f5c855638de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45385)[0m     @     0x7f5c830904f5 at::Tensor::copy_()
[2m[36m(pid=45385)[0m     @     0x7f5c8913b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45385)[0m     @     0x5589bde44fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45385)[0m     @     0x5589bdd9fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45385)[0m     @     0x5589bde2abaf _PyEval_EvalCodeWithName
[2m[36m(pid=45385)[0m     @     0x5589bde2ba20 method_vectorcall
[2m[36m(pid=45385)[0m     @     0x5589bdd9fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45385)[0m     @     0x5589bde2abaf _PyEval_EvalCodeWithName
[2m[36m(pid=45385)[0m     @     0x5589bde2b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45385)[0m     @     0x5589bdda0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45385)[0m     @     0x5589bde2abaf _PyEval_EvalCodeWithName
[2m[36m(pid=45385)[0m     @     0x5589bde2b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45385)[0m     @     0x5589bdda0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45385)[0m     @     0x5589bde2abaf _PyEval_EvalCodeWithName
[2m[36m(pid=45385)[0m     @     0x5589bde2b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45385)[0m     @     0x5589bdda0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45385)[0m     @     0x5589bde2abaf _PyEval_EvalCodeWithName
[2m[36m(pid=45385)[0m     @     0x5589bde2b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45385)[0m     @     0x5589bdda0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45363)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45363)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45363)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45363)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45363)[0m *** SIGSEGV (@0x0) received by PID 45363 (TID 0x7f7ef00ee700) from PID 0; stack trace: ***
[2m[36m(pid=45363)[0m     @     0x7f7eefcc7390 (unknown)
[2m[36m(pid=45363)[0m     @     0x7f4fefbf7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45363)[0m     @     0x7f4fef3227db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45363)[0m     @     0x7f4fef3258f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45363)[0m     @     0x7f4fef325ad3 at::TensorIterator::for_each()
[2m[36m(pid=45363)[0m     @     0x7f4fef325d91 at::TensorIterator::for_each()
[2m[36m(pid=45363)[0m     @     0x7f4fefc08b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45363)[0m     @     0x7f4fefc2bc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45363)[0m     @     0x7f4fef0cda93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45363)[0m     @     0x7f4fef0cb388 at::native::copy_impl()
[2m[36m(pid=45363)[0m     @     0x7f4fef0cd5a4 at::native::copy_()
[2m[36m(pid=45363)[0m     @     0x7f4fef7b84f5 at::Tensor::copy_()
[2m[36m(pid=45363)[0m     @     0x7f4ff1c8b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45363)[0m     @     0x7f4fef7b84f5 at::Tensor::copy_()
[2m[36m(pid=45363)[0m     @     0x7f4ff586379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45363)[0m     @     0x5576e9857fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45363)[0m     @     0x5576e97b2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45363)[0m     @     0x5576e983dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45363)[0m     @     0x5576e983ea20 method_vectorcall
[2m[36m(pid=45363)[0m     @     0x5576e97b2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45363)[0m     @     0x5576e983dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45363)[0m     @     0x5576e983e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45363)[0m     @     0x5576e97b3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45363)[0m     @     0x5576e983dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45363)[0m     @     0x5576e983e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45363)[0m     @     0x5576e97b3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45363)[0m     @     0x5576e983dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45363)[0m     @     0x5576e983e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45363)[0m     @     0x5576e97b3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45363)[0m     @     0x5576e983dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45363)[0m     @     0x5576e983e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45363)[0m     @     0x5576e97b3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45404)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45404)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45404)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45404)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45404)[0m *** SIGSEGV (@0x0) received by PID 45404 (TID 0x7ff16ba7d700) from PID 0; stack trace: ***
[2m[36m(pid=45404)[0m     @     0x7ff16b656390 (unknown)
[2m[36m(pid=45404)[0m     @     0x7fc26b5f2f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45404)[0m     @     0x7fc26ad1d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45404)[0m     @     0x7fc26ad208f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45404)[0m     @     0x7fc26ad20ad3 at::TensorIterator::for_each()
[2m[36m(pid=45404)[0m     @     0x7fc26ad20d91 at::TensorIterator::for_each()
[2m[36m(pid=45404)[0m     @     0x7fc26b603b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45404)[0m     @     0x7fc26b626c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45404)[0m     @     0x7fc26aac8a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45404)[0m     @     0x7fc26aac6388 at::native::copy_impl()
[2m[36m(pid=45404)[0m     @     0x7fc26aac85a4 at::native::copy_()
[2m[36m(pid=45404)[0m     @     0x7fc26b1b34f5 at::Tensor::copy_()
[2m[36m(pid=45404)[0m     @     0x7fc26d6868de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45404)[0m     @     0x7fc26b1b34f5 at::Tensor::copy_()
[2m[36m(pid=45404)[0m     @     0x7fc27125e79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45404)[0m     @     0x562fa7a2efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45404)[0m     @     0x562fa7989b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45404)[0m     @     0x562fa7a14baf _PyEval_EvalCodeWithName
[2m[36m(pid=45404)[0m     @     0x562fa7a15a20 method_vectorcall
[2m[36m(pid=45404)[0m     @     0x562fa7989bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45404)[0m     @     0x562fa7a14baf _PyEval_EvalCodeWithName
[2m[36m(pid=45404)[0m     @     0x562fa7a15643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45404)[0m     @     0x562fa798a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45404)[0m     @     0x562fa7a14baf _PyEval_EvalCodeWithName
[2m[36m(pid=45404)[0m     @     0x562fa7a15643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45404)[0m     @     0x562fa798a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45404)[0m     @     0x562fa7a14baf _PyEval_EvalCodeWithName
[2m[36m(pid=45404)[0m     @     0x562fa7a15643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45404)[0m     @     0x562fa798a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45404)[0m     @     0x562fa7a14baf _PyEval_EvalCodeWithName
[2m[36m(pid=45404)[0m     @     0x562fa7a15643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45404)[0m     @     0x562fa798a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45406)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45406)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45406)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45406)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45406)[0m *** SIGSEGV (@0x0) received by PID 45406 (TID 0x7fc0ae2e3700) from PID 0; stack trace: ***
[2m[36m(pid=45406)[0m     @     0x7fc0adebc390 (unknown)
[2m[36m(pid=45406)[0m     @     0x7f91ade24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45406)[0m     @     0x7f91ad54f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45406)[0m     @     0x7f91ad5528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45406)[0m     @     0x7f91ad552ad3 at::TensorIterator::for_each()
[2m[36m(pid=45406)[0m     @     0x7f91ad552d91 at::TensorIterator::for_each()
[2m[36m(pid=45406)[0m     @     0x7f91ade35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45406)[0m     @     0x7f91ade58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45406)[0m     @     0x7f91ad2faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45406)[0m     @     0x7f91ad2f8388 at::native::copy_impl()
[2m[36m(pid=45406)[0m     @     0x7f91ad2fa5a4 at::native::copy_()
[2m[36m(pid=45406)[0m     @     0x7f91ad9e54f5 at::Tensor::copy_()
[2m[36m(pid=45406)[0m     @     0x7f91afeb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45406)[0m     @     0x7f91ad9e54f5 at::Tensor::copy_()
[2m[36m(pid=45406)[0m     @     0x7f91b3a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45406)[0m     @     0x55dcde437fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45406)[0m     @     0x55dcde392b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45406)[0m     @     0x55dcde41dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45406)[0m     @     0x55dcde41ea20 method_vectorcall
[2m[36m(pid=45406)[0m     @     0x55dcde392bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45406)[0m     @     0x55dcde41dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45406)[0m     @     0x55dcde41e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45406)[0m     @     0x55dcde393689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45406)[0m     @     0x55dcde41dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45406)[0m     @     0x55dcde41e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45406)[0m     @     0x55dcde393689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45406)[0m     @     0x55dcde41dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45406)[0m     @     0x55dcde41e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45368)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45368)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45368)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45368)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45368)[0m *** SIGSEGV (@0x0) received by PID 45368 (TID 0x7f5159b39700) from PID 0; stack trace: ***
[2m[36m(pid=45368)[0m     @     0x7f5159712390 (unknown)
[2m[36m(pid=45368)[0m     @     0x7f22596b4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45368)[0m     @     0x7f2258ddf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45368)[0m     @     0x7f2258de28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45368)[0m     @     0x7f2258de2ad3 at::TensorIterator::for_each()
[2m[36m(pid=45368)[0m     @     0x7f2258de2d91 at::TensorIterator::for_each()
[2m[36m(pid=45368)[0m     @     0x7f22596c5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45368)[0m     @     0x7f22596e8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45368)[0m     @     0x7f2258b8aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45368)[0m     @     0x7f2258b88388 at::native::copy_impl()
[2m[36m(pid=45368)[0m     @     0x7f2258b8a5a4 at::native::copy_()
[2m[36m(pid=45368)[0m     @     0x7f22592754f5 at::Tensor::copy_()
[2m[36m(pid=45368)[0m     @     0x7f225b7488de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45368)[0m     @     0x7f22592754f5 at::Tensor::copy_()
[2m[36m(pid=45368)[0m     @     0x7f225f32079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45368)[0m     @     0x560800a1ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45368)[0m     @     0x56080097ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45368)[0m     @     0x560800a05baf _PyEval_EvalCodeWithName
[2m[36m(pid=45368)[0m     @     0x560800a06a20 method_vectorcall
[2m[36m(pid=45368)[0m     @     0x56080097abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45368)[0m     @     0x560800a05baf _PyEval_EvalCodeWithName
[2m[36m(pid=45368)[0m     @     0x560800a06643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45368)[0m     @     0x56080097b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45368)[0m     @     0x560800a05baf _PyEval_EvalCodeWithName
[2m[36m(pid=45368)[0m     @     0x560800a06643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45368)[0m     @     0x56080097b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45368)[0m     @     0x560800a05baf _PyEval_EvalCodeWithName
[2m[36m(pid=45368)[0m     @     0x560800a06643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45368)[0m     @     0x56080097b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45368)[0m     @     0x560800a05baf _PyEval_EvalCodeWithName
[2m[36m(pid=45368)[0m     @     0x560800a06643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45380)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45380)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45380)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45380)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45380)[0m *** SIGSEGV (@0x0) received by PID 45380 (TID 0x7fa09beed700) from PID 0; stack trace: ***
[2m[36m(pid=45380)[0m     @     0x7fa09bac6390 (unknown)
[2m[36m(pid=45380)[0m     @     0x7f719ba67f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45380)[0m     @     0x7f719b1927db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45380)[0m     @     0x7f719b1958f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45380)[0m     @     0x7f719b195ad3 at::TensorIterator::for_each()
[2m[36m(pid=45380)[0m     @     0x7f719b195d91 at::TensorIterator::for_each()
[2m[36m(pid=45380)[0m     @     0x7f719ba78b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45380)[0m     @     0x7f719ba9bc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45380)[0m     @     0x7f719af3da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45380)[0m     @     0x7f719af3b388 at::native::copy_impl()
[2m[36m(pid=45380)[0m     @     0x7f719af3d5a4 at::native::copy_()
[2m[36m(pid=45380)[0m     @     0x7f719b6284f5 at::Tensor::copy_()
[2m[36m(pid=45394)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45394)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45394)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45394)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45394)[0m *** SIGSEGV (@0x0) received by PID 45394 (TID 0x7fdee0320700) from PID 0; stack trace: ***
[2m[36m(pid=45394)[0m     @     0x7fdedfef9390 (unknown)
[2m[36m(pid=45394)[0m     @     0x7fafdfe89f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45394)[0m     @     0x7fafdf5b47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45394)[0m     @     0x7fafdf5b78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45394)[0m     @     0x7fafdf5b7ad3 at::TensorIterator::for_each()
[2m[36m(pid=45394)[0m     @     0x7fafdf5b7d91 at::TensorIterator::for_each()
[2m[36m(pid=45394)[0m     @     0x7fafdfe9ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45394)[0m     @     0x7fafdfebdc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45394)[0m     @     0x7fafdf35fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45394)[0m     @     0x7fafdf35d388 at::native::copy_impl()
[2m[36m(pid=45394)[0m     @     0x7fafdf35f5a4 at::native::copy_()
[2m[36m(pid=45394)[0m     @     0x7fafdfa4a4f5 at::Tensor::copy_()
[2m[36m(pid=45394)[0m     @     0x7fafe1f1d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45394)[0m     @     0x7fafdfa4a4f5 at::Tensor::copy_()
[2m[36m(pid=45394)[0m     @     0x7fafe5af579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45394)[0m     @     0x55af671f3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45394)[0m     @     0x55af6714eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45394)[0m     @     0x55af671d9baf _PyEval_EvalCodeWithName
[2m[36m(pid=45394)[0m     @     0x55af671daa20 method_vectorcall
[2m[36m(pid=45394)[0m     @     0x55af6714ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45394)[0m     @     0x55af671d9baf _PyEval_EvalCodeWithName
[2m[36m(pid=45394)[0m     @     0x55af671da643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45394)[0m     @     0x55af6714f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45394)[0m     @     0x55af671d9baf _PyEval_EvalCodeWithName
[2m[36m(pid=45394)[0m     @     0x55af671da643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45394)[0m     @     0x55af6714f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45394)[0m     @     0x55af671d9baf _PyEval_EvalCodeWithName
[2m[36m(pid=45394)[0m     @     0x55af671da643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45394)[0m     @     0x55af6714f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45394)[0m     @     0x55af671d9baf _PyEval_EvalCodeWithName
[2m[36m(pid=45394)[0m     @     0x55af671da643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45394)[0m     @     0x55af6714f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45370)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45370)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45370)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45370)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45370)[0m *** SIGSEGV (@0x0) received by PID 45370 (TID 0x7f26b1267700) from PID 0; stack trace: ***
[2m[36m(pid=45370)[0m     @     0x7f26b0e40390 (unknown)
[2m[36m(pid=45370)[0m     @     0x7ef7b0dc9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45370)[0m     @     0x7ef7b04f47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45370)[0m     @     0x7ef7b04f78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45370)[0m     @     0x7ef7b04f7ad3 at::TensorIterator::for_each()
[2m[36m(pid=45370)[0m     @     0x7ef7b04f7d91 at::TensorIterator::for_each()
[2m[36m(pid=45369)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45369)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45369)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45369)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45369)[0m *** SIGSEGV (@0x0) received by PID 45369 (TID 0x7f228bb59700) from PID 0; stack trace: ***
[2m[36m(pid=45369)[0m     @     0x7f228b732390 (unknown)
[2m[36m(pid=45369)[0m     @     0x7ef38b61ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45369)[0m     @     0x7ef38ad4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45369)[0m     @     0x7ef38ad4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45369)[0m     @     0x7ef38ad4dad3 at::TensorIterator::for_each()
[2m[36m(pid=45369)[0m     @     0x7ef38ad4dd91 at::TensorIterator::for_each()
[2m[36m(pid=45369)[0m     @     0x7ef38b630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45369)[0m     @     0x7ef38b653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45369)[0m     @     0x7ef38aaf5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45369)[0m     @     0x7ef38aaf3388 at::native::copy_impl()
[2m[36m(pid=45369)[0m     @     0x7ef38aaf55a4 at::native::copy_()
[2m[36m(pid=45369)[0m     @     0x7ef38b1e04f5 at::Tensor::copy_()
[2m[36m(pid=45369)[0m     @     0x7ef38d6b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45369)[0m     @     0x7ef38b1e04f5 at::Tensor::copy_()
[2m[36m(pid=45369)[0m     @     0x7ef39128b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45369)[0m     @     0x564331a94fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45369)[0m     @     0x5643319efb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45369)[0m     @     0x564331a7abaf _PyEval_EvalCodeWithName
[2m[36m(pid=45369)[0m     @     0x564331a7ba20 method_vectorcall
[2m[36m(pid=45369)[0m     @     0x5643319efbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45369)[0m     @     0x564331a7abaf _PyEval_EvalCodeWithName
[2m[36m(pid=45369)[0m     @     0x564331a7b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45369)[0m     @     0x5643319f0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45369)[0m     @     0x564331a7abaf _PyEval_EvalCodeWithName
[2m[36m(pid=45369)[0m     @     0x564331a7b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45369)[0m     @     0x5643319f0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45369)[0m     @     0x564331a7abaf _PyEval_EvalCodeWithName
[2m[36m(pid=45369)[0m     @     0x564331a7b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45369)[0m     @     0x5643319f0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45369)[0m     @     0x564331a7abaf _PyEval_EvalCodeWithName
[2m[36m(pid=45369)[0m     @     0x564331a7b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45369)[0m     @     0x5643319f0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45354)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45354)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45354)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45354)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45354)[0m *** SIGSEGV (@0x0) received by PID 45354 (TID 0x7fd842be5700) from PID 0; stack trace: ***
[2m[36m(pid=45354)[0m     @     0x7fd8427be390 (unknown)
[2m[36m(pid=45354)[0m     @     0x7fa9425a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45354)[0m     @     0x7fa941ccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45354)[0m     @     0x7fa941cd28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45354)[0m     @     0x7fa941cd2ad3 at::TensorIterator::for_each()
[2m[36m(pid=45354)[0m     @     0x7fa941cd2d91 at::TensorIterator::for_each()
[2m[36m(pid=45354)[0m     @     0x7fa9425b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45354)[0m     @     0x7fa9425d8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45398)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45398)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45398)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45398)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45398)[0m *** SIGSEGV (@0x0) received by PID 45398 (TID 0x7fc3e4d40700) from PID 0; stack trace: ***
[2m[36m(pid=45398)[0m     @     0x7fc3e4919390 (unknown)
[2m[36m(pid=45398)[0m     @     0x7f94e476df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45398)[0m     @     0x7f94e3e987db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45398)[0m     @     0x7f94e3e9b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45398)[0m     @     0x7f94e3e9bad3 at::TensorIterator::for_each()
[2m[36m(pid=45308)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45308)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45308)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45308)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45308)[0m *** SIGSEGV (@0x0) received by PID 45308 (TID 0x7fc8593c1700) from PID 0; stack trace: ***
[2m[36m(pid=45308)[0m     @     0x7fc858f9a390 (unknown)
[2m[36m(pid=45308)[0m     @     0x7f9958ea4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45308)[0m     @     0x7f99585cf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45308)[0m     @     0x7f99585d28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45308)[0m     @     0x7f99585d2ad3 at::TensorIterator::for_each()
[2m[36m(pid=45308)[0m     @     0x7f99585d2d91 at::TensorIterator::for_each()
[2m[36m(pid=45293)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45293)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45293)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45293)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45293)[0m *** SIGSEGV (@0x0) received by PID 45293 (TID 0x7fc6e7bee700) from PID 0; stack trace: ***
[2m[36m(pid=45293)[0m     @     0x7fc6e77c7390 (unknown)
[2m[36m(pid=45293)[0m     @     0x7f97e761ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45293)[0m     @     0x7f97e6d4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45293)[0m     @     0x7f97e6d4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45293)[0m     @     0x7f97e6d4dad3 at::TensorIterator::for_each()
[2m[36m(pid=45413)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45413)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45413)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45413)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45413)[0m *** SIGSEGV (@0x0) received by PID 45413 (TID 0x7f3f1bf6c700) from PID 0; stack trace: ***
[2m[36m(pid=45413)[0m     @     0x7f3f1bb45390 (unknown)
[2m[36m(pid=45413)[0m     @     0x7f101baf5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45413)[0m     @     0x7f101b2207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45413)[0m     @     0x7f101b2238f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45413)[0m     @     0x7f101b223ad3 at::TensorIterator::for_each()
[2m[36m(pid=45413)[0m     @     0x7f101b223d91 at::TensorIterator::for_each()
[2m[36m(pid=45413)[0m     @     0x7f101bb06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45413)[0m     @     0x7f101bb29c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45379)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45379)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45379)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45379)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45379)[0m *** SIGSEGV (@0x0) received by PID 45379 (TID 0x7f3975762700) from PID 0; stack trace: ***
[2m[36m(pid=45379)[0m     @     0x7f397533b390 (unknown)
[2m[36m(pid=45379)[0m     @     0x7f0a7528af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45379)[0m     @     0x7f0a749b57db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45379)[0m     @     0x7f0a749b88f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45379)[0m     @     0x7f0a749b8ad3 at::TensorIterator::for_each()
[2m[36m(pid=45379)[0m     @     0x7f0a749b8d91 at::TensorIterator::for_each()
[2m[36m(pid=45379)[0m     @     0x7f0a7529bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45379)[0m     @     0x7f0a752bec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45377)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45377)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45377)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45377)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45377)[0m *** SIGSEGV (@0x0) received by PID 45377 (TID 0x7f4bb77d3700) from PID 0; stack trace: ***
[2m[36m(pid=45377)[0m     @     0x7f4bb73ac390 (unknown)
[2m[36m(pid=45377)[0m     @     0x7f1cb7229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45377)[0m     @     0x7f1cb69547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45377)[0m     @     0x7f1cb69578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45377)[0m     @     0x7f1cb6957ad3 at::TensorIterator::for_each()
[2m[36m(pid=45377)[0m     @     0x7f1cb6957d91 at::TensorIterator::for_each()
[2m[36m(pid=45377)[0m     @     0x7f1cb723ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45377)[0m     @     0x7f1cb725dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45377)[0m     @     0x7f1cb66ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45377)[0m     @     0x7f1cb66fd388 at::native::copy_impl()
[2m[36m(pid=45377)[0m     @     0x7f1cb66ff5a4 at::native::copy_()
[2m[36m(pid=45377)[0m     @     0x7f1cb6dea4f5 at::Tensor::copy_()
[2m[36m(pid=45377)[0m     @     0x7f1cb92bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45391)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45391)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45391)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45391)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45391)[0m *** SIGSEGV (@0x0) received by PID 45391 (TID 0x7f341090e700) from PID 0; stack trace: ***
[2m[36m(pid=45391)[0m     @     0x7f34104e7390 (unknown)
[2m[36m(pid=45391)[0m     @     0x7f0510491f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45391)[0m     @     0x7f050fbbc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45391)[0m     @     0x7f050fbbf8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45391)[0m     @     0x7f050fbbfad3 at::TensorIterator::for_each()
[2m[36m(pid=45391)[0m     @     0x7f050fbbfd91 at::TensorIterator::for_each()
[2m[36m(pid=45391)[0m     @     0x7f05104a2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45391)[0m     @     0x7f05104c5c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45391)[0m     @     0x7f050f967a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45391)[0m     @     0x7f050f965388 at::native::copy_impl()
[2m[36m(pid=45391)[0m     @     0x7f050f9675a4 at::native::copy_()
[2m[36m(pid=45391)[0m     @     0x7f05100524f5 at::Tensor::copy_()
[2m[36m(pid=45391)[0m     @     0x7f05125258de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45391)[0m     @     0x7f05100524f5 at::Tensor::copy_()
[2m[36m(pid=45391)[0m     @     0x7f05160fd79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45391)[0m     @     0x55a06f4a3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45391)[0m     @     0x55a06f3feb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45391)[0m     @     0x55a06f489baf _PyEval_EvalCodeWithName
[2m[36m(pid=45391)[0m     @     0x55a06f48aa20 method_vectorcall
[2m[36m(pid=45391)[0m     @     0x55a06f3febfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45391)[0m     @     0x55a06f489baf _PyEval_EvalCodeWithName
[2m[36m(pid=45391)[0m     @     0x55a06f48a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45391)[0m     @     0x55a06f3ff689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45391)[0m     @     0x55a06f489baf _PyEval_EvalCodeWithName
[2m[36m(pid=45391)[0m     @     0x55a06f48a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45391)[0m     @     0x55a06f3ff689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45391)[0m     @     0x55a06f489baf _PyEval_EvalCodeWithName
[2m[36m(pid=45391)[0m     @     0x55a06f48a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45391)[0m     @     0x55a06f3ff689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45391)[0m     @     0x55a06f489baf _PyEval_EvalCodeWithName
[2m[36m(pid=45391)[0m     @     0x55a06f48a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45391)[0m     @     0x55a06f3ff689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45399)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45399)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45399)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45399)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45399)[0m *** SIGSEGV (@0x0) received by PID 45399 (TID 0x7ff2ccc62700) from PID 0; stack trace: ***
[2m[36m(pid=45399)[0m     @     0x7ff2cc83b390 (unknown)
[2m[36m(pid=45399)[0m     @     0x7fc3cc70ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45399)[0m     @     0x7fc3cbe397db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45399)[0m     @     0x7fc3cbe3c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45399)[0m     @     0x7fc3cbe3cad3 at::TensorIterator::for_each()
[2m[36m(pid=45410)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45410)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45410)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45410)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45410)[0m *** SIGSEGV (@0x0) received by PID 45410 (TID 0x7f95c45fd700) from PID 0; stack trace: ***
[2m[36m(pid=45410)[0m     @     0x7f95c41d6390 (unknown)
[2m[36m(pid=45410)[0m     @     0x7f66c3d2cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45410)[0m     @     0x7f66c34577db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45410)[0m     @     0x7f66c345a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45410)[0m     @     0x7f66c345aad3 at::TensorIterator::for_each()
[2m[36m(pid=45410)[0m     @     0x7f66c345ad91 at::TensorIterator::for_each()
[2m[36m(pid=45410)[0m     @     0x7f66c3d3db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45410)[0m     @     0x7f66c3d60c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45410)[0m     @     0x7f66c3202a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45410)[0m     @     0x7f66c3200388 at::native::copy_impl()
[2m[36m(pid=45410)[0m     @     0x7f66c32025a4 at::native::copy_()
[2m[36m(pid=45410)[0m     @     0x7f66c38ed4f5 at::Tensor::copy_()
[2m[36m(pid=45410)[0m     @     0x7f66c5dc08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45410)[0m     @     0x7f66c38ed4f5 at::Tensor::copy_()
[2m[36m(pid=45410)[0m     @     0x7f66c999879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45410)[0m     @     0x560b9ef9dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45410)[0m     @     0x560b9eef8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45410)[0m     @     0x560b9ef83baf _PyEval_EvalCodeWithName
[2m[36m(pid=45410)[0m     @     0x560b9ef84a20 method_vectorcall
[2m[36m(pid=45410)[0m     @     0x560b9eef8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45410)[0m     @     0x560b9ef83baf _PyEval_EvalCodeWithName
[2m[36m(pid=45410)[0m     @     0x560b9ef84643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45410)[0m     @     0x560b9eef9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45410)[0m     @     0x560b9ef83baf _PyEval_EvalCodeWithName
[2m[36m(pid=45410)[0m     @     0x560b9ef84643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45410)[0m     @     0x560b9eef9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45410)[0m     @     0x560b9ef83baf _PyEval_EvalCodeWithName
[2m[36m(pid=45410)[0m     @     0x560b9ef84643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45410)[0m     @     0x560b9eef9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45410)[0m     @     0x560b9ef83baf _PyEval_EvalCodeWithName
[2m[36m(pid=45410)[0m     @     0x560b9ef84643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45410)[0m     @     0x560b9eef9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45334)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45334)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45334)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45334)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45334)[0m *** SIGSEGV (@0x0) received by PID 45334 (TID 0x7f5e0d677700) from PID 0; stack trace: ***
[2m[36m(pid=45334)[0m     @     0x7f5e0d250390 (unknown)
[2m[36m(pid=45334)[0m     @     0x7f2f0d0b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45334)[0m     @     0x7f2f0c7e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45334)[0m     @     0x7f2f0c7e38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45334)[0m     @     0x7f2f0c7e3ad3 at::TensorIterator::for_each()
[2m[36m(pid=45334)[0m     @     0x7f2f0c7e3d91 at::TensorIterator::for_each()
[2m[36m(pid=45334)[0m     @     0x7f2f0d0c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45334)[0m     @     0x7f2f0d0e9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45334)[0m     @     0x7f2f0c58ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45291)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45291)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45291)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45291)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45291)[0m *** SIGSEGV (@0x0) received by PID 45291 (TID 0x7f29de5bc700) from PID 0; stack trace: ***
[2m[36m(pid=45291)[0m     @     0x7f29de195390 (unknown)
[2m[36m(pid=45291)[0m     @     0x7efade08af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45291)[0m     @     0x7efadd7b57db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45291)[0m     @     0x7efadd7b88f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45291)[0m     @     0x7efadd7b8ad3 at::TensorIterator::for_each()
[2m[36m(pid=45291)[0m     @     0x7efadd7b8d91 at::TensorIterator::for_each()
[2m[36m(pid=45427)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45427)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45427)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45427)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45427)[0m *** SIGSEGV (@0x0) received by PID 45427 (TID 0x7ffbe6ee7700) from PID 0; stack trace: ***
[2m[36m(pid=45427)[0m     @     0x7ffbe6ac0390 (unknown)
[2m[36m(pid=45427)[0m     @     0x7fcce6a21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45427)[0m     @     0x7fcce614c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45427)[0m     @     0x7fcce614f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45427)[0m     @     0x7fcce614fad3 at::TensorIterator::for_each()
[2m[36m(pid=45427)[0m     @     0x7fcce614fd91 at::TensorIterator::for_each()
[2m[36m(pid=45427)[0m     @     0x7fcce6a32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45378)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45378)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45378)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45378)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45378)[0m *** SIGSEGV (@0x0) received by PID 45378 (TID 0x7f287cfed700) from PID 0; stack trace: ***
[2m[36m(pid=45378)[0m     @     0x7f287cbc6390 (unknown)
[2m[36m(pid=45378)[0m     @     0x7ef97ca8bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45378)[0m     @     0x7ef97c1b67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45378)[0m     @     0x7ef97c1b98f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45375)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45375)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45375)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45375)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45375)[0m *** SIGSEGV (@0x0) received by PID 45375 (TID 0x7fc2b3a2d700) from PID 0; stack trace: ***
[2m[36m(pid=45375)[0m     @     0x7fc2b3606390 (unknown)
[2m[36m(pid=45375)[0m     @     0x7f93b35b2f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45375)[0m     @     0x7f93b2cdd7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45375)[0m     @     0x7f93b2ce08f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45375)[0m     @     0x7f93b2ce0ad3 at::TensorIterator::for_each()
[2m[36m(pid=45403)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45403)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45403)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45403)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45403)[0m *** SIGSEGV (@0x0) received by PID 45403 (TID 0x7fe086049700) from PID 0; stack trace: ***
[2m[36m(pid=45403)[0m     @     0x7fe085c22390 (unknown)
[2m[36m(pid=45403)[0m     @     0x7fb185b9ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45403)[0m     @     0x7fb1852ca7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45403)[0m     @     0x7fb1852cd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45364)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45364)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45364)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45364)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45364)[0m *** SIGSEGV (@0x0) received by PID 45364 (TID 0x7f77b01ae700) from PID 0; stack trace: ***
[2m[36m(pid=45364)[0m     @     0x7f77afd87390 (unknown)
[2m[36m(pid=45294)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45294)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45294)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45294)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45294)[0m *** SIGSEGV (@0x0) received by PID 45294 (TID 0x7f200591f700) from PID 0; stack trace: ***
[2m[36m(pid=45294)[0m     @     0x7f20054f8390 (unknown)
[2m[36m(pid=45294)[0m     @     0x7ef1054a3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45365)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45365)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45365)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45365)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45365)[0m *** SIGSEGV (@0x0) received by PID 45365 (TID 0x7f6878ac4700) from PID 0; stack trace: ***
[2m[36m(pid=45365)[0m     @     0x7f687869d390 (unknown)
[2m[36m(pid=45365)[0m     @     0x7f3978563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45365)[0m     @     0x7f3977c8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45365)[0m     @     0x7f3977c918f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45299)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45299)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45299)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45299)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45299)[0m *** SIGSEGV (@0x0) received by PID 45299 (TID 0x7f5f9afa3700) from PID 0; stack trace: ***
[2m[36m(pid=45299)[0m     @     0x7f5f9ab7c390 (unknown)
[2m[36m(pid=45299)[0m     @     0x7f309a9ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45299)[0m     @     0x7f309a0f77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45299)[0m     @     0x7f309a0fa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45408)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45408)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45408)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45408)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45408)[0m *** SIGSEGV (@0x0) received by PID 45408 (TID 0x7fa4adc03700) from PID 0; stack trace: ***
[2m[36m(pid=45408)[0m     @     0x7fa4ad7dc390 (unknown)
[2m[36m(pid=45408)[0m     @     0x7f75ad6f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45408)[0m     @     0x7f75ace1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45408)[0m     @     0x7f75ace228f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45316)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45316)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45316)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45316)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45316)[0m *** SIGSEGV (@0x0) received by PID 45316 (TID 0x7f681f814700) from PID 0; stack trace: ***
[2m[36m(pid=45316)[0m     @     0x7f681f3ed390 (unknown)
[2m[36m(pid=45316)[0m     @     0x7f391f229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45316)[0m     @     0x7f391e9547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45316)[0m     @     0x7f391e9578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45381)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45381)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45381)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45381)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45381)[0m *** SIGSEGV (@0x0) received by PID 45381 (TID 0x7f3734cbe700) from PID 0; stack trace: ***
[2m[36m(pid=45381)[0m     @     0x7f3734897390 (unknown)
[2m[36m(pid=45381)[0m     @     0x7f0834774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45381)[0m     @     0x7f0833e9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45381)[0m     @     0x7f0833ea28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45423)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45423)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45423)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45423)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45423)[0m *** SIGSEGV (@0x0) received by PID 45423 (TID 0x7f7c00171700) from PID 0; stack trace: ***
[2m[36m(pid=45423)[0m     @     0x7f7bffd4a390 (unknown)
[2m[36m(pid=45423)[0m     @     0x7f4cffcf9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45423)[0m     @     0x7f4cff4247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45423)[0m     @     0x7f4cff4278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45384)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45384)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45384)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45384)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45384)[0m *** SIGSEGV (@0x0) received by PID 45384 (TID 0x7fd03f78c700) from PID 0; stack trace: ***
[2m[36m(pid=45384)[0m     @     0x7fd03f365390 (unknown)
[2m[36m(pid=45384)[0m     @     0x7fa13f2e6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45384)[0m     @     0x7fa13ea117db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45384)[0m     @     0x7fa13ea148f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45384)[0m     @     0x7fa13ea14ad3 at::TensorIterator::for_each()
[2m[36m(pid=45384)[0m     @     0x7fa13ea14d91 at::TensorIterator::for_each()
[2m[36m(pid=45384)[0m     @     0x7fa13f2f7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45384)[0m     @     0x7fa13f31ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45332)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45332)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45332)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45332)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45332)[0m *** SIGSEGV (@0x0) received by PID 45332 (TID 0x7f501e64a700) from PID 0; stack trace: ***
[2m[36m(pid=45332)[0m     @     0x7f501e223390 (unknown)
[2m[36m(pid=45332)[0m     @     0x7f211e13af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45332)[0m     @     0x7f211d8657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45332)[0m     @     0x7f211d8688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45332)[0m     @     0x7f211d868ad3 at::TensorIterator::for_each()
[2m[36m(pid=45332)[0m     @     0x7f211d868d91 at::TensorIterator::for_each()
[2m[36m(pid=45332)[0m     @     0x7f211e14bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45332)[0m     @     0x7f211e16ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45327)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45327)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45327)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45327)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45327)[0m *** SIGSEGV (@0x0) received by PID 45327 (TID 0x7f4a9cade700) from PID 0; stack trace: ***
[2m[36m(pid=45327)[0m     @     0x7f4a9c6b7390 (unknown)
[2m[36m(pid=45327)[0m     @     0x7f1b9c339f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45327)[0m     @     0x7f1b9ba647db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45327)[0m     @     0x7f1b9ba678f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45327)[0m     @     0x7f1b9ba67ad3 at::TensorIterator::for_each()
[2m[36m(pid=45327)[0m     @     0x7f1b9ba67d91 at::TensorIterator::for_each()
[2m[36m(pid=45327)[0m     @     0x7f1b9c34ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45327)[0m     @     0x7f1b9c36dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45314)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45314)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45314)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45314)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45314)[0m *** SIGSEGV (@0x0) received by PID 45314 (TID 0x7f9c88bc3700) from PID 0; stack trace: ***
[2m[36m(pid=45314)[0m     @     0x7f9c8879c390 (unknown)
[2m[36m(pid=45314)[0m     @     0x7f6d88339f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45314)[0m     @     0x7f6d87a647db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45314)[0m     @     0x7f6d87a678f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45314)[0m     @     0x7f6d87a67ad3 at::TensorIterator::for_each()
[2m[36m(pid=45314)[0m     @     0x7f6d87a67d91 at::TensorIterator::for_each()
[2m[36m(pid=45314)[0m     @     0x7f6d8834ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45314)[0m     @     0x7f6d8836dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45312)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45312)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45312)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45312)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45312)[0m *** SIGSEGV (@0x0) received by PID 45312 (TID 0x7f31b2966700) from PID 0; stack trace: ***
[2m[36m(pid=45312)[0m     @     0x7f31b253f390 (unknown)
[2m[36m(pid=45312)[0m     @     0x7f02b24f7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45312)[0m     @     0x7f02b1c227db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45312)[0m     @     0x7f02b1c258f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45312)[0m     @     0x7f02b1c25ad3 at::TensorIterator::for_each()
[2m[36m(pid=45312)[0m     @     0x7f02b1c25d91 at::TensorIterator::for_each()
[2m[36m(pid=45312)[0m     @     0x7f02b2508b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45312)[0m     @     0x7f02b252bc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45290)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45290)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45290)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45290)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45290)[0m *** SIGSEGV (@0x0) received by PID 45290 (TID 0x7fcc1089f700) from PID 0; stack trace: ***
[2m[36m(pid=45290)[0m     @     0x7fcc10478390 (unknown)
[2m[36m(pid=45290)[0m     @     0x7f9d100c0f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45290)[0m     @     0x7f9d0f7eb7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45290)[0m     @     0x7f9d0f7ee8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45290)[0m     @     0x7f9d0f7eead3 at::TensorIterator::for_each()
[2m[36m(pid=45290)[0m     @     0x7f9d0f7eed91 at::TensorIterator::for_each()
[2m[36m(pid=45290)[0m     @     0x7f9d100d1b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45290)[0m     @     0x7f9d100f4c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45331)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45331)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45331)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45331)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45331)[0m *** SIGSEGV (@0x0) received by PID 45331 (TID 0x7fe462f0a700) from PID 0; stack trace: ***
[2m[36m(pid=45331)[0m     @     0x7fe462ae3390 (unknown)
[2m[36m(pid=45331)[0m     @     0x7fb5629ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45331)[0m     @     0x7fb5620f77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45331)[0m     @     0x7fb5620fa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45331)[0m     @     0x7fb5620faad3 at::TensorIterator::for_each()
[2m[36m(pid=45331)[0m     @     0x7fb5620fad91 at::TensorIterator::for_each()
[2m[36m(pid=45331)[0m     @     0x7fb5629ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45331)[0m     @     0x7fb562a00c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45374)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45374)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45374)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45374)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45374)[0m *** SIGSEGV (@0x0) received by PID 45374 (TID 0x7f8773457700) from PID 0; stack trace: ***
[2m[36m(pid=45374)[0m     @     0x7f8773030390 (unknown)
[2m[36m(pid=45374)[0m     @     0x7f5872faff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45374)[0m     @     0x7f58726da7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45374)[0m     @     0x7f58726dd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45374)[0m     @     0x7f58726ddad3 at::TensorIterator::for_each()
[2m[36m(pid=45374)[0m     @     0x7f58726ddd91 at::TensorIterator::for_each()
[2m[36m(pid=45374)[0m     @     0x7f5872fc0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45374)[0m     @     0x7f5872fe3c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45374)[0m     @     0x7f5872485a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45374)[0m     @     0x7f5872483388 at::native::copy_impl()
[2m[36m(pid=45418)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45418)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45418)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45418)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45418)[0m *** SIGSEGV (@0x0) received by PID 45418 (TID 0x7f27bf805700) from PID 0; stack trace: ***
[2m[36m(pid=45418)[0m     @     0x7f27bf3de390 (unknown)
[2m[36m(pid=45418)[0m     @     0x7ef8bf229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45418)[0m     @     0x7ef8be9547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45418)[0m     @     0x7ef8be9578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45418)[0m     @     0x7ef8be957ad3 at::TensorIterator::for_each()
[2m[36m(pid=45418)[0m     @     0x7ef8be957d91 at::TensorIterator::for_each()
[2m[36m(pid=45418)[0m     @     0x7ef8bf23ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45418)[0m     @     0x7ef8bf25dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45418)[0m     @     0x7ef8be6ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45418)[0m     @     0x7ef8be6fd388 at::native::copy_impl()
[2m[36m(pid=45418)[0m     @     0x7ef8be6ff5a4 at::native::copy_()
[2m[36m(pid=45418)[0m     @     0x7ef8bedea4f5 at::Tensor::copy_()
[2m[36m(pid=45418)[0m     @     0x7ef8c12bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45418)[0m     @     0x7ef8bedea4f5 at::Tensor::copy_()
[2m[36m(pid=45418)[0m     @     0x7ef8c4e9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45418)[0m     @     0x55b4b7b36fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45418)[0m     @     0x55b4b7a91b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45418)[0m     @     0x55b4b7b1cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45418)[0m     @     0x55b4b7b1da20 method_vectorcall
[2m[36m(pid=45418)[0m     @     0x55b4b7a91bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45418)[0m     @     0x55b4b7b1cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45418)[0m     @     0x55b4b7b1d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45418)[0m     @     0x55b4b7a92689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45418)[0m     @     0x55b4b7b1cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45418)[0m     @     0x55b4b7b1d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45418)[0m     @     0x55b4b7a92689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45418)[0m     @     0x55b4b7b1cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45418)[0m     @     0x55b4b7b1d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45418)[0m     @     0x55b4b7a92689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45418)[0m     @     0x55b4b7b1cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45418)[0m     @     0x55b4b7b1d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45418)[0m     @     0x55b4b7a92689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45421)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45421)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45421)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45421)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45421)[0m *** SIGSEGV (@0x0) received by PID 45421 (TID 0x7f63ae39b700) from PID 0; stack trace: ***
[2m[36m(pid=45421)[0m     @     0x7f63adf74390 (unknown)
[2m[36m(pid=45421)[0m     @     0x7f34ade24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45421)[0m     @     0x7f34ad54f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45421)[0m     @     0x7f34ad5528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45421)[0m     @     0x7f34ad552ad3 at::TensorIterator::for_each()
[2m[36m(pid=45421)[0m     @     0x7f34ad552d91 at::TensorIterator::for_each()
[2m[36m(pid=45421)[0m     @     0x7f34ade35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45421)[0m     @     0x7f34ade58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45421)[0m     @     0x7f34ad2faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45421)[0m     @     0x7f34ad2f8388 at::native::copy_impl()
[2m[36m(pid=45421)[0m     @     0x7f34ad2fa5a4 at::native::copy_()
[2m[36m(pid=45421)[0m     @     0x7f34ad9e54f5 at::Tensor::copy_()
[2m[36m(pid=45421)[0m     @     0x7f34afeb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45421)[0m     @     0x7f34ad9e54f5 at::Tensor::copy_()
[2m[36m(pid=45382)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45382)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45382)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45382)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45382)[0m *** SIGSEGV (@0x0) received by PID 45382 (TID 0x7ff0adc6e700) from PID 0; stack trace: ***
[2m[36m(pid=45382)[0m     @     0x7ff0ad847390 (unknown)
[2m[36m(pid=45382)[0m     @     0x7fc1ad6f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45382)[0m     @     0x7fc1ace1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45382)[0m     @     0x7fc1ace228f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45382)[0m     @     0x7fc1ace22ad3 at::TensorIterator::for_each()
[2m[36m(pid=45382)[0m     @     0x7fc1ace22d91 at::TensorIterator::for_each()
[2m[36m(pid=45382)[0m     @     0x7fc1ad705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45382)[0m     @     0x7fc1ad728c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45295)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45295)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45295)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45295)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45295)[0m *** SIGSEGV (@0x0) received by PID 45295 (TID 0x7fe2e0367700) from PID 0; stack trace: ***
[2m[36m(pid=45295)[0m     @     0x7fe2dff40390 (unknown)
[2m[36m(pid=45295)[0m     @     0x7fb3dfd2cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45295)[0m     @     0x7fb3df4577db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45295)[0m     @     0x7fb3df45a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45295)[0m     @     0x7fb3df45aad3 at::TensorIterator::for_each()
[2m[36m(pid=45295)[0m     @     0x7fb3df45ad91 at::TensorIterator::for_each()
[2m[36m(pid=45295)[0m     @     0x7fb3dfd3db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45295)[0m     @     0x7fb3dfd60c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45373)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45373)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45373)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45373)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45373)[0m *** SIGSEGV (@0x0) received by PID 45373 (TID 0x7fa776827700) from PID 0; stack trace: ***
[2m[36m(pid=45373)[0m     @     0x7fa776400390 (unknown)
[2m[36m(pid=45373)[0m     @     0x7f787634bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45373)[0m     @     0x7f7875a767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45373)[0m     @     0x7f7875a798f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45373)[0m     @     0x7f7875a79ad3 at::TensorIterator::for_each()
[2m[36m(pid=45373)[0m     @     0x7f7875a79d91 at::TensorIterator::for_each()
[2m[36m(pid=45373)[0m     @     0x7f787635cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45373)[0m     @     0x7f787637fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45371)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45371)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45371)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45371)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45371)[0m *** SIGSEGV (@0x0) received by PID 45371 (TID 0x7f8f183d4700) from PID 0; stack trace: ***
[2m[36m(pid=45371)[0m     @     0x7f8f17fad390 (unknown)
[2m[36m(pid=45371)[0m     @     0x7f6017e0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45371)[0m     @     0x7f60175367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45371)[0m     @     0x7f60175398f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45371)[0m     @     0x7f6017539ad3 at::TensorIterator::for_each()
[2m[36m(pid=45371)[0m     @     0x7f6017539d91 at::TensorIterator::for_each()
[2m[36m(pid=45371)[0m     @     0x7f6017e1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45371)[0m     @     0x7f6017e3fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45371)[0m     @     0x7f60172e1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45371)[0m     @     0x7f60172df388 at::native::copy_impl()
[2m[36m(pid=45371)[0m     @     0x7f60172e15a4 at::native::copy_()
[2m[36m(pid=45371)[0m     @     0x7f60179cc4f5 at::Tensor::copy_()
[2m[36m(pid=45371)[0m     @     0x7f6019e9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45371)[0m     @     0x7f60179cc4f5 at::Tensor::copy_()
[2m[36m(pid=45371)[0m     @     0x7f601da7779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45371)[0m     @     0x560f8c0ddfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45371)[0m     @     0x560f8c038b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45371)[0m     @     0x560f8c0c3baf _PyEval_EvalCodeWithName
[2m[36m(pid=45371)[0m     @     0x560f8c0c4a20 method_vectorcall
[2m[36m(pid=45371)[0m     @     0x560f8c038bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45371)[0m     @     0x560f8c0c3baf _PyEval_EvalCodeWithName
[2m[36m(pid=45371)[0m     @     0x560f8c0c4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45371)[0m     @     0x560f8c039689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45371)[0m     @     0x560f8c0c3baf _PyEval_EvalCodeWithName
[2m[36m(pid=45371)[0m     @     0x560f8c0c4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45371)[0m     @     0x560f8c039689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45371)[0m     @     0x560f8c0c3baf _PyEval_EvalCodeWithName
[2m[36m(pid=45371)[0m     @     0x560f8c0c4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45371)[0m     @     0x560f8c039689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45371)[0m     @     0x560f8c0c3baf _PyEval_EvalCodeWithName
[2m[36m(pid=45371)[0m     @     0x560f8c0c4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45371)[0m     @     0x560f8c039689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45405)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45405)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45405)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45405)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45405)[0m *** SIGSEGV (@0x0) received by PID 45405 (TID 0x7f192deb2700) from PID 0; stack trace: ***
[2m[36m(pid=45405)[0m     @     0x7f192da8b390 (unknown)
[2m[36m(pid=45405)[0m     @     0x7eea2da0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45405)[0m     @     0x7eea2d1357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45405)[0m     @     0x7eea2d1388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45366)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45366)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45366)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45366)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45366)[0m *** SIGSEGV (@0x0) received by PID 45366 (TID 0x7fcd27419700) from PID 0; stack trace: ***
[2m[36m(pid=45366)[0m     @     0x7fcd26ff2390 (unknown)
[2m[36m(pid=45366)[0m     @     0x7f9e26c15f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45366)[0m     @     0x7f9e263407db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45366)[0m     @     0x7f9e263438f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45323)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45323)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45323)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45323)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45323)[0m *** SIGSEGV (@0x0) received by PID 45323 (TID 0x7f04e8c25700) from PID 0; stack trace: ***
[2m[36m(pid=45323)[0m     @     0x7f04e87fe390 (unknown)
[2m[36m(pid=45323)[0m     @     0x7ed5e8339f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45323)[0m     @     0x7ed5e7a647db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45323)[0m     @     0x7ed5e7a678f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45387)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45387)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45387)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45387)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45387)[0m *** SIGSEGV (@0x0) received by PID 45387 (TID 0x7fef9fda7700) from PID 0; stack trace: ***
[2m[36m(pid=45387)[0m     @     0x7fef9f980390 (unknown)
[2m[36m(pid=45387)[0m     @     0x7fc09f8def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45387)[0m     @     0x7fc09f0097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45387)[0m     @     0x7fc09f00c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45387)[0m     @     0x7fc09f00cad3 at::TensorIterator::for_each()
[2m[36m(pid=45387)[0m     @     0x7fc09f00cd91 at::TensorIterator::for_each()
[2m[36m(pid=45387)[0m     @     0x7fc09f8efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45387)[0m     @     0x7fc09f912c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45306)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45306)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45306)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45306)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45306)[0m *** SIGSEGV (@0x0) received by PID 45306 (TID 0x7ff939837700) from PID 0; stack trace: ***
[2m[36m(pid=45306)[0m     @     0x7ff939410390 (unknown)
[2m[36m(pid=45306)[0m     @     0x7fca3939ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45306)[0m     @     0x7fca38aca7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45306)[0m     @     0x7fca38acd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45306)[0m     @     0x7fca38acdad3 at::TensorIterator::for_each()
[2m[36m(pid=45300)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45300)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45300)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45300)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45300)[0m *** SIGSEGV (@0x0) received by PID 45300 (TID 0x7f2635ea3700) from PID 0; stack trace: ***
[2m[36m(pid=45300)[0m     @     0x7f2635a7c390 (unknown)
[2m[36m(pid=45300)[0m     @     0x7ef7357f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45300)[0m     @     0x7ef734f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45300)[0m     @     0x7ef734f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45300)[0m     @     0x7ef734f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=45300)[0m     @     0x7ef734f27d91 at::TensorIterator::for_each()
[2m[36m(pid=45300)[0m     @     0x7ef73580ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45300)[0m     @     0x7ef73582dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45324)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45324)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45324)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45324)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45324)[0m *** SIGSEGV (@0x0) received by PID 45324 (TID 0x7fda97f74700) from PID 0; stack trace: ***
[2m[36m(pid=45324)[0m     @     0x7fda97b4d390 (unknown)
[2m[36m(pid=45324)[0m     @     0x7fab97af5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45324)[0m     @     0x7fab972207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45324)[0m     @     0x7fab972238f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45324)[0m     @     0x7fab97223ad3 at::TensorIterator::for_each()
[2m[36m(pid=45324)[0m     @     0x7fab97223d91 at::TensorIterator::for_each()
[2m[36m(pid=45289)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45289)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45289)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45289)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45289)[0m *** SIGSEGV (@0x0) received by PID 45289 (TID 0x7fdef0ec7700) from PID 0; stack trace: ***
[2m[36m(pid=45289)[0m     @     0x7fdef0aa0390 (unknown)
[2m[36m(pid=45289)[0m     @     0x7faff0940f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45289)[0m     @     0x7faff006b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45289)[0m     @     0x7faff006e8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45289)[0m     @     0x7faff006ead3 at::TensorIterator::for_each()
[2m[36m(pid=45289)[0m     @     0x7faff006ed91 at::TensorIterator::for_each()
[2m[36m(pid=45289)[0m     @     0x7faff0951b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45289)[0m     @     0x7faff0974c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45289)[0m     @     0x7fafefe16a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45289)[0m     @     0x7fafefe14388 at::native::copy_impl()
[2m[36m(pid=45350)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45350)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45350)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45350)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45350)[0m *** SIGSEGV (@0x0) received by PID 45350 (TID 0x7f948f8f4700) from PID 0; stack trace: ***
[2m[36m(pid=45350)[0m     @     0x7f948f4cd390 (unknown)
[2m[36m(pid=45350)[0m     @     0x7f658f46af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45350)[0m     @     0x7f658eb957db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45350)[0m     @     0x7f658eb988f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45301)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45301)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45301)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45301)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45301)[0m *** SIGSEGV (@0x0) received by PID 45301 (TID 0x7f7566b16700) from PID 0; stack trace: ***
[2m[36m(pid=45301)[0m     @     0x7f75666ef390 (unknown)
[2m[36m(pid=45301)[0m     @     0x7f46665a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45301)[0m     @     0x7f4665ccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45301)[0m     @     0x7f4665cd28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45301)[0m     @     0x7f4665cd2ad3 at::TensorIterator::for_each()
[2m[36m(pid=45376)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45376)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45376)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45376)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45376)[0m *** SIGSEGV (@0x0) received by PID 45376 (TID 0x7f040423e700) from PID 0; stack trace: ***
[2m[36m(pid=45376)[0m     @     0x7f0403e17390 (unknown)
[2m[36m(pid=45376)[0m     @     0x7ed503da6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45376)[0m     @     0x7ed5034d17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45376)[0m     @     0x7ed5034d48f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45376)[0m     @     0x7ed5034d4ad3 at::TensorIterator::for_each()
[2m[36m(pid=45376)[0m     @     0x7ed5034d4d91 at::TensorIterator::for_each()
[2m[36m(pid=45302)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45302)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45302)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45302)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45302)[0m *** SIGSEGV (@0x0) received by PID 45302 (TID 0x7fb8a728f700) from PID 0; stack trace: ***
[2m[36m(pid=45302)[0m     @     0x7fb8a6e68390 (unknown)
[2m[36m(pid=45302)[0m     @     0x7f89a6e03f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45302)[0m     @     0x7f89a652e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45302)[0m     @     0x7f89a65318f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45302)[0m     @     0x7f89a6531ad3 at::TensorIterator::for_each()
[2m[36m(pid=45396)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45396)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45396)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45396)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45396)[0m *** SIGSEGV (@0x0) received by PID 45396 (TID 0x7f655f5cc700) from PID 0; stack trace: ***
[2m[36m(pid=45396)[0m     @     0x7f655f1a5390 (unknown)
[2m[36m(pid=45396)[0m     @     0x7f365f124f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45396)[0m     @     0x7f365e84f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45396)[0m     @     0x7f365e8528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45396)[0m     @     0x7f365e852ad3 at::TensorIterator::for_each()
[2m[36m(pid=45396)[0m     @     0x7f365e852d91 at::TensorIterator::for_each()
[2m[36m(pid=45396)[0m     @     0x7f365f135b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45396)[0m     @     0x7f365f158c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45326)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45326)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45326)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45326)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45326)[0m *** SIGSEGV (@0x0) received by PID 45326 (TID 0x7f201170a700) from PID 0; stack trace: ***
[2m[36m(pid=45326)[0m     @     0x7f20112e3390 (unknown)
[2m[36m(pid=45326)[0m     @     0x7ef11124af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45326)[0m     @     0x7ef1109757db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45326)[0m     @     0x7ef1109788f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45326)[0m     @     0x7ef110978ad3 at::TensorIterator::for_each()
[2m[36m(pid=45326)[0m     @     0x7ef110978d91 at::TensorIterator::for_each()
[2m[36m(pid=45326)[0m     @     0x7ef11125bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45326)[0m     @     0x7ef11127ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45319)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45319)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45319)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45319)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45319)[0m *** SIGSEGV (@0x0) received by PID 45319 (TID 0x7f3317b41700) from PID 0; stack trace: ***
[2m[36m(pid=45319)[0m     @     0x7f331771a390 (unknown)
[2m[36m(pid=45319)[0m     @     0x7f041761ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45319)[0m     @     0x7f0416d4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45319)[0m     @     0x7f0416d4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45319)[0m     @     0x7f0416d4dad3 at::TensorIterator::for_each()
[2m[36m(pid=45319)[0m     @     0x7f0416d4dd91 at::TensorIterator::for_each()
[2m[36m(pid=45320)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45320)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45320)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45320)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45320)[0m *** SIGSEGV (@0x0) received by PID 45320 (TID 0x7f6de4a68700) from PID 0; stack trace: ***
[2m[36m(pid=45320)[0m     @     0x7f6de4641390 (unknown)
[2m[36m(pid=45320)[0m     @     0x7f3ee4563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45320)[0m     @     0x7f3ee3c8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45320)[0m     @     0x7f3ee3c918f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45320)[0m     @     0x7f3ee3c91ad3 at::TensorIterator::for_each()
[2m[36m(pid=45320)[0m     @     0x7f3ee3c91d91 at::TensorIterator::for_each()
[2m[36m(pid=45320)[0m     @     0x7f3ee4574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45320)[0m     @     0x7f3ee4597c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45320)[0m     @     0x7f3ee3a39a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45320)[0m     @     0x7f3ee3a37388 at::native::copy_impl()
[2m[36m(pid=45414)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45414)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45414)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45414)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45414)[0m *** SIGSEGV (@0x0) received by PID 45414 (TID 0x7f7ae54c6700) from PID 0; stack trace: ***
[2m[36m(pid=45414)[0m     @     0x7f7ae509f390 (unknown)
[2m[36m(pid=45414)[0m     @     0x7f4be5048f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45414)[0m     @     0x7f4be47737db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45414)[0m     @     0x7f4be47768f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45414)[0m     @     0x7f4be4776ad3 at::TensorIterator::for_each()
[2m[36m(pid=45414)[0m     @     0x7f4be4776d91 at::TensorIterator::for_each()
[2m[36m(pid=45414)[0m     @     0x7f4be5059b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45414)[0m     @     0x7f4be507cc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45414)[0m     @     0x7f4be451ea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45303)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45303)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45303)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45303)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45303)[0m *** SIGSEGV (@0x0) received by PID 45303 (TID 0x7f34f29ab700) from PID 0; stack trace: ***
[2m[36m(pid=45303)[0m     @     0x7f34f2584390 (unknown)
[2m[36m(pid=45303)[0m     @     0x7f05f24f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45303)[0m     @     0x7f05f1c247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45303)[0m     @     0x7f05f1c278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45303)[0m     @     0x7f05f1c27ad3 at::TensorIterator::for_each()
[2m[36m(pid=45430)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45430)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45430)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45430)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45430)[0m *** SIGSEGV (@0x0) received by PID 45430 (TID 0x7f744e6ba700) from PID 0; stack trace: ***
[2m[36m(pid=45430)[0m     @     0x7f744e293390 (unknown)
[2m[36m(pid=45430)[0m     @     0x7f454e13af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45430)[0m     @     0x7f454d8657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45430)[0m     @     0x7f454d8688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45430)[0m     @     0x7f454d868ad3 at::TensorIterator::for_each()
[2m[36m(pid=45430)[0m     @     0x7f454d868d91 at::TensorIterator::for_each()
[2m[36m(pid=45430)[0m     @     0x7f454e14bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45430)[0m     @     0x7f454e16ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45430)[0m     @     0x7f454d610a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45430)[0m     @     0x7f454d60e388 at::native::copy_impl()
[2m[36m(pid=45430)[0m     @     0x7f454d6105a4 at::native::copy_()
[2m[36m(pid=45372)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45372)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45372)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45372)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45372)[0m *** SIGSEGV (@0x0) received by PID 45372 (TID 0x7fbac2139700) from PID 0; stack trace: ***
[2m[36m(pid=45372)[0m     @     0x7fbac1d12390 (unknown)
[2m[36m(pid=45372)[0m     @     0x7f8bc1c0df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45372)[0m     @     0x7f8bc13387db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45372)[0m     @     0x7f8bc133b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45372)[0m     @     0x7f8bc133bad3 at::TensorIterator::for_each()
[2m[36m(pid=45372)[0m     @     0x7f8bc133bd91 at::TensorIterator::for_each()
[2m[36m(pid=45372)[0m     @     0x7f8bc1c1eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45372)[0m     @     0x7f8bc1c41c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45372)[0m     @     0x7f8bc10e3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45372)[0m     @     0x7f8bc10e1388 at::native::copy_impl()
[2m[36m(pid=45304)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45304)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45304)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45304)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45304)[0m *** SIGSEGV (@0x0) received by PID 45304 (TID 0x7f12b6d52700) from PID 0; stack trace: ***
[2m[36m(pid=45304)[0m     @     0x7f12b692b390 (unknown)
[2m[36m(pid=45304)[0m     @     0x7ee3b68baf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45304)[0m     @     0x7ee3b5fe57db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45304)[0m     @     0x7ee3b5fe88f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45304)[0m     @     0x7ee3b5fe8ad3 at::TensorIterator::for_each()
[2m[36m(pid=45304)[0m     @     0x7ee3b5fe8d91 at::TensorIterator::for_each()
[2m[36m(pid=45304)[0m     @     0x7ee3b68cbb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45304)[0m     @     0x7ee3b68eec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45304)[0m     @     0x7ee3b5d90a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45304)[0m     @     0x7ee3b5d8e388 at::native::copy_impl()
[2m[36m(pid=45304)[0m     @     0x7ee3b5d905a4 at::native::copy_()
[2m[36m(pid=45296)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45296)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45296)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45296)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45296)[0m *** SIGSEGV (@0x0) received by PID 45296 (TID 0x7f9988287700) from PID 0; stack trace: ***
[2m[36m(pid=45296)[0m     @     0x7f9987e60390 (unknown)
[2m[36m(pid=45296)[0m     @     0x7f6a87d2cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45296)[0m     @     0x7f6a874577db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45296)[0m     @     0x7f6a8745a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45296)[0m     @     0x7f6a8745aad3 at::TensorIterator::for_each()
[2m[36m(pid=45296)[0m     @     0x7f6a8745ad91 at::TensorIterator::for_each()
[2m[36m(pid=45296)[0m     @     0x7f6a87d3db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45296)[0m     @     0x7f6a87d60c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45296)[0m     @     0x7f6a87202a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45296)[0m     @     0x7f6a87200388 at::native::copy_impl()
[2m[36m(pid=45296)[0m     @     0x7f6a872025a4 at::native::copy_()
[2m[36m(pid=45309)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45309)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45309)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45309)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45309)[0m *** SIGSEGV (@0x0) received by PID 45309 (TID 0x7f3941982700) from PID 0; stack trace: ***
[2m[36m(pid=45309)[0m     @     0x7f394155b390 (unknown)
[2m[36m(pid=45309)[0m     @     0x7f0a414e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45309)[0m     @     0x7f0a40c0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45309)[0m     @     0x7f0a40c118f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45309)[0m     @     0x7f0a40c11ad3 at::TensorIterator::for_each()
[2m[36m(pid=45309)[0m     @     0x7f0a40c11d91 at::TensorIterator::for_each()
[2m[36m(pid=45309)[0m     @     0x7f0a414f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45309)[0m     @     0x7f0a41517c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45309)[0m     @     0x7f0a409b9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45309)[0m     @     0x7f0a409b7388 at::native::copy_impl()
[2m[36m(pid=45367)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45367)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45367)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45367)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45367)[0m *** SIGSEGV (@0x0) received by PID 45367 (TID 0x7f20ea07e700) from PID 0; stack trace: ***
[2m[36m(pid=45367)[0m     @     0x7f20e9c57390 (unknown)
[2m[36m(pid=45367)[0m     @     0x7ef1e9c11f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45367)[0m     @     0x7ef1e933c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45367)[0m     @     0x7ef1e933f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45367)[0m     @     0x7ef1e933fad3 at::TensorIterator::for_each()
[2m[36m(pid=45367)[0m     @     0x7ef1e933fd91 at::TensorIterator::for_each()
[2m[36m(pid=45367)[0m     @     0x7ef1e9c22b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45367)[0m     @     0x7ef1e9c45c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45367)[0m     @     0x7ef1e90e7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45367)[0m     @     0x7ef1e90e5388 at::native::copy_impl()
[2m[36m(pid=45351)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45351)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45351)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45351)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45351)[0m *** SIGSEGV (@0x0) received by PID 45351 (TID 0x7fca19e0e700) from PID 0; stack trace: ***
[2m[36m(pid=45351)[0m     @     0x7fca199e7390 (unknown)
[2m[36m(pid=45351)[0m     @     0x7f9b197f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45351)[0m     @     0x7f9b18f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45351)[0m     @     0x7f9b18f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45351)[0m     @     0x7f9b18f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=45351)[0m     @     0x7f9b18f27d91 at::TensorIterator::for_each()
[2m[36m(pid=45351)[0m     @     0x7f9b1980ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45351)[0m     @     0x7f9b1982dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45351)[0m     @     0x7f9b18ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45351)[0m     @     0x7f9b18ccd388 at::native::copy_impl()
[2m[36m(pid=45351)[0m     @     0x7f9b18ccf5a4 at::native::copy_()
[2m[36m(pid=45292)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45292)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45292)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45292)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45292)[0m *** SIGSEGV (@0x0) received by PID 45292 (TID 0x7f35e8e42700) from PID 0; stack trace: ***
[2m[36m(pid=45292)[0m     @     0x7f35e8a1b390 (unknown)
[2m[36m(pid=45292)[0m     @     0x7f06e8825f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45292)[0m     @     0x7f06e7f507db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45292)[0m     @     0x7f06e7f538f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45292)[0m     @     0x7f06e7f53ad3 at::TensorIterator::for_each()
[2m[36m(pid=45292)[0m     @     0x7f06e7f53d91 at::TensorIterator::for_each()
[2m[36m(pid=45292)[0m     @     0x7f06e8836b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45292)[0m     @     0x7f06e8859c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45361)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45361)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45361)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45361)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45361)[0m *** SIGSEGV (@0x0) received by PID 45361 (TID 0x7f32b08f8700) from PID 0; stack trace: ***
[2m[36m(pid=45361)[0m     @     0x7f32b04d1390 (unknown)
[2m[36m(pid=45361)[0m     @     0x7f03b0333f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45361)[0m     @     0x7f03afa5e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45361)[0m     @     0x7f03afa618f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45361)[0m     @     0x7f03afa61ad3 at::TensorIterator::for_each()
[2m[36m(pid=45361)[0m     @     0x7f03afa61d91 at::TensorIterator::for_each()
[2m[36m(pid=45361)[0m     @     0x7f03b0344b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45361)[0m     @     0x7f03b0367c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45361)[0m     @     0x7f03af809a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45361)[0m     @     0x7f03af807388 at::native::copy_impl()
[2m[36m(pid=45409)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45409)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45409)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45409)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45409)[0m *** SIGSEGV (@0x0) received by PID 45409 (TID 0x7faf26a16700) from PID 0; stack trace: ***
[2m[36m(pid=45409)[0m     @     0x7faf265ef390 (unknown)
[2m[36m(pid=45409)[0m     @     0x7f80264f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45409)[0m     @     0x7f8025c247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45409)[0m     @     0x7f8025c278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45409)[0m     @     0x7f8025c27ad3 at::TensorIterator::for_each()
[2m[36m(pid=45409)[0m     @     0x7f8025c27d91 at::TensorIterator::for_each()
[2m[36m(pid=45409)[0m     @     0x7f802650ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45409)[0m     @     0x7f802652dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45409)[0m     @     0x7f80259cfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45409)[0m     @     0x7f80259cd388 at::native::copy_impl()
[2m[36m(pid=45409)[0m     @     0x7f80259cf5a4 at::native::copy_()
[2m[36m(pid=45409)[0m     @     0x7f80260ba4f5 at::Tensor::copy_()
[2m[36m(pid=45353)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=45353)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=45353)[0m *** Aborted at 1604570969 (unix time) try "date -d @1604570969" if you are using GNU date ***
[2m[36m(pid=45353)[0m PC: @                0x0 (unknown)
[2m[36m(pid=45353)[0m *** SIGSEGV (@0x0) received by PID 45353 (TID 0x7fb08db4f700) from PID 0; stack trace: ***
[2m[36m(pid=45353)[0m     @     0x7fb08d728390 (unknown)
[2m[36m(pid=45353)[0m     @     0x7f818d4dff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45353)[0m     @     0x7f818cc0a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45353)[0m     @     0x7f818cc0d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45353)[0m     @     0x7f818cc0dad3 at::TensorIterator::for_each()
[2m[36m(pid=45353)[0m     @     0x7f818cc0dd91 at::TensorIterator::for_each()
[2m[36m(pid=45353)[0m     @     0x7f818d4f0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45353)[0m     @     0x7f818d513c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45353)[0m     @     0x7f818c9b5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45353)[0m     @     0x7f818c9b3388 at::native::copy_impl()
[2m[36m(pid=45353)[0m     @     0x7f818c9b55a4 at::native::copy_()
[2m[36m(pid=45353)[0m     @     0x7f818d0a04f5 at::Tensor::copy_()
[2m[36m(pid=45353)[0m     @     0x7f818f5738de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45422)[0m     @     0x55e8cf853fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45422)[0m     @     0x55e8cf7aeb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45422)[0m     @     0x55e8cf839baf _PyEval_EvalCodeWithName
[2m[36m(pid=45422)[0m     @     0x55e8cf83aa20 method_vectorcall
[2m[36m(pid=45422)[0m     @     0x55e8cf7aebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45422)[0m     @     0x55e8cf839baf _PyEval_EvalCodeWithName
[2m[36m(pid=45422)[0m     @     0x55e8cf83a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45422)[0m     @     0x55e8cf7af689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45422)[0m     @     0x55e8cf839baf _PyEval_EvalCodeWithName
[2m[36m(pid=45422)[0m     @     0x55e8cf83a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45422)[0m     @     0x55e8cf7af689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45422)[0m     @     0x55e8cf839baf _PyEval_EvalCodeWithName
[2m[36m(pid=45422)[0m     @     0x55e8cf83a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45422)[0m     @     0x55e8cf7af689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45422)[0m     @     0x55e8cf839baf _PyEval_EvalCodeWithName
[2m[36m(pid=45422)[0m     @     0x55e8cf83a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45422)[0m     @     0x55e8cf7af689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45305)[0m     @     0x7f2956fcba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45305)[0m     @     0x7f2956fc9388 at::native::copy_impl()
[2m[36m(pid=45305)[0m     @     0x7f2956fcb5a4 at::native::copy_()
[2m[36m(pid=45305)[0m     @     0x7f29576b64f5 at::Tensor::copy_()
[2m[36m(pid=45305)[0m     @     0x7f2959b898de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45406)[0m     @     0x55dcde393689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45406)[0m     @     0x55dcde41dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45406)[0m     @     0x55dcde41e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45406)[0m     @     0x55dcde393689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45368)[0m     @     0x56080097b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45380)[0m     @     0x7f719dafb8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45380)[0m     @     0x7f719b6284f5 at::Tensor::copy_()
[2m[36m(pid=45380)[0m     @     0x7f71a16d379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45380)[0m     @     0x557168000fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45380)[0m     @     0x557167f5bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45380)[0m     @     0x557167fe6baf _PyEval_EvalCodeWithName
[2m[36m(pid=45380)[0m     @     0x557167fe7a20 method_vectorcall
[2m[36m(pid=45380)[0m     @     0x557167f5bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45380)[0m     @     0x557167fe6baf _PyEval_EvalCodeWithName
[2m[36m(pid=45380)[0m     @     0x557167fe7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45380)[0m     @     0x557167f5c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45380)[0m     @     0x557167fe6baf _PyEval_EvalCodeWithName
[2m[36m(pid=45380)[0m     @     0x557167fe7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45380)[0m     @     0x557167f5c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45380)[0m     @     0x557167fe6baf _PyEval_EvalCodeWithName
[2m[36m(pid=45380)[0m     @     0x557167fe7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45380)[0m     @     0x557167f5c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45380)[0m     @     0x557167fe6baf _PyEval_EvalCodeWithName
[2m[36m(pid=45380)[0m     @     0x557167fe7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45380)[0m     @     0x557167f5c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45370)[0m     @     0x7ef7b0ddab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45370)[0m     @     0x7ef7b0dfdc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45370)[0m     @     0x7ef7b029fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45370)[0m     @     0x7ef7b029d388 at::native::copy_impl()
[2m[36m(pid=45370)[0m     @     0x7ef7b029f5a4 at::native::copy_()
[2m[36m(pid=45354)[0m     @     0x7fa941a7aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45354)[0m     @     0x7fa941a78388 at::native::copy_impl()
[2m[36m(pid=45354)[0m     @     0x7fa941a7a5a4 at::native::copy_()
[2m[36m(pid=45354)[0m     @     0x7fa9421654f5 at::Tensor::copy_()
[2m[36m(pid=45354)[0m     @     0x7fa9446388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45398)[0m     @     0x7f94e3e9bd91 at::TensorIterator::for_each()
[2m[36m(pid=45398)[0m     @     0x7f94e477eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45398)[0m     @     0x7f94e47a1c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45398)[0m     @     0x7f94e3c43a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45398)[0m     @     0x7f94e3c41388 at::native::copy_impl()
[2m[36m(pid=45398)[0m     @     0x7f94e3c435a4 at::native::copy_()
[2m[36m(pid=45308)[0m     @     0x7f9958eb5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45308)[0m     @     0x7f9958ed8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45308)[0m     @     0x7f995837aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45308)[0m     @     0x7f9958378388 at::native::copy_impl()
[2m[36m(pid=45308)[0m     @     0x7f995837a5a4 at::native::copy_()
[2m[36m(pid=45293)[0m     @     0x7f97e6d4dd91 at::TensorIterator::for_each()
[2m[36m(pid=45293)[0m     @     0x7f97e7630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45293)[0m     @     0x7f97e7653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45293)[0m     @     0x7f97e6af5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45293)[0m     @     0x7f97e6af3388 at::native::copy_impl()
[2m[36m(pid=45293)[0m     @     0x7f97e6af55a4 at::native::copy_()
[2m[36m(pid=45413)[0m     @     0x7f101afcba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45413)[0m     @     0x7f101afc9388 at::native::copy_impl()
[2m[36m(pid=45413)[0m     @     0x7f101afcb5a4 at::native::copy_()
[2m[36m(pid=45413)[0m     @     0x7f101b6b64f5 at::Tensor::copy_()
[2m[36m(pid=45379)[0m     @     0x7f0a74760a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45379)[0m     @     0x7f0a7475e388 at::native::copy_impl()
[2m[36m(pid=45379)[0m     @     0x7f0a747605a4 at::native::copy_()
[2m[36m(pid=45379)[0m     @     0x7f0a74e4b4f5 at::Tensor::copy_()
[2m[36m(pid=45377)[0m     @     0x7f1cb6dea4f5 at::Tensor::copy_()
[2m[36m(pid=45377)[0m     @     0x7f1cbce9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45377)[0m     @     0x5623b1c10fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45377)[0m     @     0x5623b1b6bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45377)[0m     @     0x5623b1bf6baf _PyEval_EvalCodeWithName
[2m[36m(pid=45377)[0m     @     0x5623b1bf7a20 method_vectorcall
[2m[36m(pid=45377)[0m     @     0x5623b1b6bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45377)[0m     @     0x5623b1bf6baf _PyEval_EvalCodeWithName
[2m[36m(pid=45377)[0m     @     0x5623b1bf7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45377)[0m     @     0x5623b1b6c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45377)[0m     @     0x5623b1bf6baf _PyEval_EvalCodeWithName
[2m[36m(pid=45377)[0m     @     0x5623b1bf7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45377)[0m     @     0x5623b1b6c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45377)[0m     @     0x5623b1bf6baf _PyEval_EvalCodeWithName
[2m[36m(pid=45377)[0m     @     0x5623b1bf7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45377)[0m     @     0x5623b1b6c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45377)[0m     @     0x5623b1bf6baf _PyEval_EvalCodeWithName
[2m[36m(pid=45377)[0m     @     0x5623b1bf7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45377)[0m     @     0x5623b1b6c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45399)[0m     @     0x7fc3cbe3cd91 at::TensorIterator::for_each()
[2m[36m(pid=45399)[0m     @     0x7fc3cc71fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45399)[0m     @     0x7fc3cc742c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45399)[0m     @     0x7fc3cbbe4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45399)[0m     @     0x7fc3cbbe2388 at::native::copy_impl()
[2m[36m(pid=45334)[0m     @     0x7f2f0c589388 at::native::copy_impl()
[2m[36m(pid=45334)[0m     @     0x7f2f0c58b5a4 at::native::copy_()
[2m[36m(pid=45334)[0m     @     0x7f2f0cc764f5 at::Tensor::copy_()
[2m[36m(pid=45334)[0m     @     0x7f2f0f1498de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45291)[0m     @     0x7efade09bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45291)[0m     @     0x7efade0bec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45291)[0m     @     0x7efadd560a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45291)[0m     @     0x7efadd55e388 at::native::copy_impl()
[2m[36m(pid=45427)[0m     @     0x7fcce6a55c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45427)[0m     @     0x7fcce5ef7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45427)[0m     @     0x7fcce5ef5388 at::native::copy_impl()
[2m[36m(pid=45427)[0m     @     0x7fcce5ef75a4 at::native::copy_()
[2m[36m(pid=45378)[0m     @     0x7ef97c1b9ad3 at::TensorIterator::for_each()
[2m[36m(pid=45378)[0m     @     0x7ef97c1b9d91 at::TensorIterator::for_each()
[2m[36m(pid=45378)[0m     @     0x7ef97ca9cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45378)[0m     @     0x7ef97cabfc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45378)[0m     @     0x7ef97bf61a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45375)[0m     @     0x7f93b2ce0d91 at::TensorIterator::for_each()
[2m[36m(pid=45375)[0m     @     0x7f93b35c3b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45375)[0m     @     0x7f93b35e6c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45375)[0m     @     0x7f93b2a88a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45375)[0m     @     0x7f93b2a86388 at::native::copy_impl()
[2m[36m(pid=45403)[0m     @     0x7fb1852cdad3 at::TensorIterator::for_each()
[2m[36m(pid=45403)[0m     @     0x7fb1852cdd91 at::TensorIterator::for_each()
[2m[36m(pid=45403)[0m     @     0x7fb185bb0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45403)[0m     @     0x7fb185bd3c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45364)[0m     @     0x7f48afd1ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=45364)[0m     @     0x7f48af4497db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45364)[0m     @     0x7f48af44c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45364)[0m     @     0x7f48af44cad3 at::TensorIterator::for_each()
[2m[36m(pid=45294)[0m     @     0x7ef104bce7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=45294)[0m     @     0x7ef104bd18f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=45365)[0m     @     0x7f3977c91ad3 at::TensorIterator::for_each()
[2m[36m(pid=45365)[0m     @     0x7f3977c91d91 at::TensorIterator::for_each()
[2m[36m(pid=45365)[0m     @     0x7f3978574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45365)[0m     @     0x7f3978597c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45365)[0m     @     0x7f3977a39a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45365)[0m     @     0x7f3977a37388 at::native::copy_impl()
[2m[36m(pid=45299)[0m     @     0x7f309a0faad3 at::TensorIterator::for_each()
[2m[36m(pid=45299)[0m     @     0x7f309a0fad91 at::TensorIterator::for_each()
[2m[36m(pid=45299)[0m     @     0x7f309a9ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45299)[0m     @     0x7f309aa00c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45408)[0m     @     0x7f75ace22ad3 at::TensorIterator::for_each()
[2m[36m(pid=45408)[0m     @     0x7f75ace22d91 at::TensorIterator::for_each()
[2m[36m(pid=45408)[0m     @     0x7f75ad705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45408)[0m     @     0x7f75ad728c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45408)[0m     @     0x7f75acbcaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45316)[0m     @     0x7f391e957ad3 at::TensorIterator::for_each()
[2m[36m(pid=45316)[0m     @     0x7f391e957d91 at::TensorIterator::for_each()
[2m[36m(pid=45316)[0m     @     0x7f391f23ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45316)[0m     @     0x7f391f25dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45316)[0m     @     0x7f391e6ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45316)[0m     @     0x7f391e6fd388 at::native::copy_impl()
[2m[36m(pid=45381)[0m     @     0x7f0833ea2ad3 at::TensorIterator::for_each()
[2m[36m(pid=45381)[0m     @     0x7f0833ea2d91 at::TensorIterator::for_each()
[2m[36m(pid=45381)[0m     @     0x7f0834785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45381)[0m     @     0x7f08347a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45381)[0m     @     0x7f0833c4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45423)[0m     @     0x7f4cff427ad3 at::TensorIterator::for_each()
[2m[36m(pid=45423)[0m     @     0x7f4cff427d91 at::TensorIterator::for_each()
[2m[36m(pid=45423)[0m     @     0x7f4cffd0ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45423)[0m     @     0x7f4cffd2dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45384)[0m     @     0x7fa13e7bca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45384)[0m     @     0x7fa13e7ba388 at::native::copy_impl()
[2m[36m(pid=45384)[0m     @     0x7fa13e7bc5a4 at::native::copy_()
[2m[36m(pid=45384)[0m     @     0x7fa13eea74f5 at::Tensor::copy_()
[2m[36m(pid=45384)[0m     @     0x7fa14137a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45332)[0m     @     0x7f211d610a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45332)[0m     @     0x7f211d60e388 at::native::copy_impl()
[2m[36m(pid=45332)[0m     @     0x7f211d6105a4 at::native::copy_()
[2m[36m(pid=45327)[0m     @     0x7f1b9b80fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45327)[0m     @     0x7f1b9b80d388 at::native::copy_impl()
[2m[36m(pid=45327)[0m     @     0x7f1b9b80f5a4 at::native::copy_()
[2m[36m(pid=45327)[0m     @     0x7f1b9befa4f5 at::Tensor::copy_()
[2m[36m(pid=45327)[0m     @     0x7f1b9e3cd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45314)[0m     @     0x7f6d8780fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45314)[0m     @     0x7f6d8780d388 at::native::copy_impl()
[2m[36m(pid=45314)[0m     @     0x7f6d8780f5a4 at::native::copy_()
[2m[36m(pid=45314)[0m     @     0x7f6d87efa4f5 at::Tensor::copy_()
[2m[36m(pid=45314)[0m     @     0x7f6d8a3cd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45312)[0m     @     0x7f02b19cda93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45312)[0m     @     0x7f02b19cb388 at::native::copy_impl()
[2m[36m(pid=45312)[0m     @     0x7f02b19cd5a4 at::native::copy_()
[2m[36m(pid=45312)[0m     @     0x7f02b20b84f5 at::Tensor::copy_()
[2m[36m(pid=45312)[0m     @     0x7f02b458b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45290)[0m     @     0x7f9d0f596a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45290)[0m     @     0x7f9d0f594388 at::native::copy_impl()
[2m[36m(pid=45290)[0m     @     0x7f9d0f5965a4 at::native::copy_()
[2m[36m(pid=45290)[0m     @     0x7f9d0fc814f5 at::Tensor::copy_()
[2m[36m(pid=45290)[0m     @     0x7f9d121548de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45331)[0m     @     0x7fb561ea2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45331)[0m     @     0x7fb561ea0388 at::native::copy_impl()
[2m[36m(pid=45331)[0m     @     0x7fb561ea25a4 at::native::copy_()
[2m[36m(pid=45331)[0m     @     0x7fb56258d4f5 at::Tensor::copy_()
[2m[36m(pid=45331)[0m     @     0x7fb564a608de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45374)[0m     @     0x7f58724855a4 at::native::copy_()
[2m[36m(pid=45374)[0m     @     0x7f5872b704f5 at::Tensor::copy_()
[2m[36m(pid=45374)[0m     @     0x7f58750438de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45374)[0m     @     0x7f5872b704f5 at::Tensor::copy_()
[2m[36m(pid=45374)[0m     @     0x7f5878c1b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45374)[0m     @     0x55cf7df9cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45374)[0m     @     0x55cf7def7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45374)[0m     @     0x55cf7df82baf _PyEval_EvalCodeWithName
[2m[36m(pid=45374)[0m     @     0x55cf7df83a20 method_vectorcall
[2m[36m(pid=45374)[0m     @     0x55cf7def7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45421)[0m     @     0x7f34b3a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45421)[0m     @     0x5606a2e25fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45421)[0m     @     0x5606a2d80b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45421)[0m     @     0x5606a2e0bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45421)[0m     @     0x5606a2e0ca20 method_vectorcall
[2m[36m(pid=45421)[0m     @     0x5606a2d80bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45421)[0m     @     0x5606a2e0bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45421)[0m     @     0x5606a2e0c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45421)[0m     @     0x5606a2d81689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45421)[0m     @     0x5606a2e0bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45421)[0m     @     0x5606a2e0c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45421)[0m     @     0x5606a2d81689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45421)[0m     @     0x5606a2e0bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45421)[0m     @     0x5606a2e0c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45421)[0m     @     0x5606a2d81689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45421)[0m     @     0x5606a2e0bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45421)[0m     @     0x5606a2e0c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45421)[0m     @     0x5606a2d81689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45382)[0m     @     0x7fc1acbcaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45382)[0m     @     0x7fc1acbc8388 at::native::copy_impl()
[2m[36m(pid=45382)[0m     @     0x7fc1acbca5a4 at::native::copy_()
[2m[36m(pid=45382)[0m     @     0x7fc1ad2b54f5 at::Tensor::copy_()
[2m[36m(pid=45382)[0m     @     0x7fc1af7888de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45295)[0m     @     0x7fb3df202a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45295)[0m     @     0x7fb3df200388 at::native::copy_impl()
[2m[36m(pid=45295)[0m     @     0x7fb3df2025a4 at::native::copy_()
[2m[36m(pid=45295)[0m     @     0x7fb3df8ed4f5 at::Tensor::copy_()
[2m[36m(pid=45295)[0m     @     0x7fb3e1dc08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45373)[0m     @     0x7f7875821a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45373)[0m     @     0x7f787581f388 at::native::copy_impl()
[2m[36m(pid=45373)[0m     @     0x7f78758215a4 at::native::copy_()
[2m[36m(pid=45373)[0m     @     0x7f7875f0c4f5 at::Tensor::copy_()
[2m[36m(pid=45373)[0m     @     0x7f78783df8de torch::autograd::VariableType::(anonymous namespace)::copy_()
2020-11-05 10:09:29,225	WARNING worker.py:945 -- The driver may not be able to keep up with the stdout/stderr of the workers. To avoid forwarding logs to the driver, use 'ray.init(log_to_driver=False)'.
[2m[36m(pid=45405)[0m     @     0x7eea2d138ad3 at::TensorIterator::for_each()
[2m[36m(pid=45405)[0m     @     0x7eea2d138d91 at::TensorIterator::for_each()
[2m[36m(pid=45405)[0m     @     0x7eea2da1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45405)[0m     @     0x7eea2da3ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45405)[0m     @     0x7eea2cee0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45405)[0m     @     0x7eea2cede388 at::native::copy_impl()
[2m[36m(pid=45366)[0m     @     0x7f9e26343ad3 at::TensorIterator::for_each()
[2m[36m(pid=45366)[0m     @     0x7f9e26343d91 at::TensorIterator::for_each()
[2m[36m(pid=45366)[0m     @     0x7f9e26c26b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45366)[0m     @     0x7f9e26c49c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45366)[0m     @     0x7f9e260eba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45366)[0m     @     0x7f9e260e9388 at::native::copy_impl()
[2m[36m(pid=45323)[0m     @     0x7ed5e7a67ad3 at::TensorIterator::for_each()
[2m[36m(pid=45323)[0m     @     0x7ed5e7a67d91 at::TensorIterator::for_each()
[2m[36m(pid=45323)[0m     @     0x7ed5e834ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45323)[0m     @     0x7ed5e836dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45323)[0m     @     0x7ed5e780fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45323)[0m     @     0x7ed5e780d388 at::native::copy_impl()
[2m[36m(pid=45387)[0m     @     0x7fc09edb4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45387)[0m     @     0x7fc09edb2388 at::native::copy_impl()
[2m[36m(pid=45387)[0m     @     0x7fc09edb45a4 at::native::copy_()
[2m[36m(pid=45387)[0m     @     0x7fc09f49f4f5 at::Tensor::copy_()
[2m[36m(pid=45387)[0m     @     0x7fc0a19728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45306)[0m     @     0x7fca38acdd91 at::TensorIterator::for_each()
[2m[36m(pid=45306)[0m     @     0x7fca393b0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45306)[0m     @     0x7fca393d3c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45306)[0m     @     0x7fca38875a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45306)[0m     @     0x7fca38873388 at::native::copy_impl()
[2m[36m(pid=45306)[0m     @     0x7fca388755a4 at::native::copy_()
[2m[36m(pid=45300)[0m     @     0x7ef734ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45300)[0m     @     0x7ef734ccd388 at::native::copy_impl()
[2m[36m(pid=45300)[0m     @     0x7ef734ccf5a4 at::native::copy_()
[2m[36m(pid=45300)[0m     @     0x7ef7353ba4f5 at::Tensor::copy_()
[2m[36m(pid=45300)[0m     @     0x7ef73788d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45324)[0m     @     0x7fab97b06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45324)[0m     @     0x7fab97b29c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45324)[0m     @     0x7fab96fcba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45324)[0m     @     0x7fab96fc9388 at::native::copy_impl()
[2m[36m(pid=45324)[0m     @     0x7fab96fcb5a4 at::native::copy_()
[2m[36m(pid=45289)[0m     @     0x7fafefe165a4 at::native::copy_()
[2m[36m(pid=45289)[0m     @     0x7faff05014f5 at::Tensor::copy_()
[2m[36m(pid=45289)[0m     @     0x7faff29d48de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45289)[0m     @     0x7faff05014f5 at::Tensor::copy_()
[2m[36m(pid=45289)[0m     @     0x7faff61a279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45289)[0m     @     0x556ca86e1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45289)[0m     @     0x556ca863cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45350)[0m     @     0x7f658eb98ad3 at::TensorIterator::for_each()
[2m[36m(pid=45350)[0m     @     0x7f658eb98d91 at::TensorIterator::for_each()
[2m[36m(pid=45350)[0m     @     0x7f658f47bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45350)[0m     @     0x7f658f49ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45350)[0m     @     0x7f658e940a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45350)[0m     @     0x7f658e93e388 at::native::copy_impl()
[2m[36m(pid=45301)[0m     @     0x7f4665cd2d91 at::TensorIterator::for_each()
[2m[36m(pid=45301)[0m     @     0x7f46665b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45301)[0m     @     0x7f46665d8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45301)[0m     @     0x7f4665a7aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45301)[0m     @     0x7f4665a78388 at::native::copy_impl()
[2m[36m(pid=45376)[0m     @     0x7ed503db7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45376)[0m     @     0x7ed503ddac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45376)[0m     @     0x7ed50327ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45376)[0m     @     0x7ed50327a388 at::native::copy_impl()
[2m[36m(pid=45376)[0m     @     0x7ed50327c5a4 at::native::copy_()
[2m[36m(pid=45376)[0m     @     0x7ed5039674f5 at::Tensor::copy_()
[2m[36m(pid=45302)[0m     @     0x7f89a6531d91 at::TensorIterator::for_each()
[2m[36m(pid=45302)[0m     @     0x7f89a6e14b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45302)[0m     @     0x7f89a6e37c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45302)[0m     @     0x7f89a62d9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45302)[0m     @     0x7f89a62d7388 at::native::copy_impl()
[2m[36m(pid=45302)[0m     @     0x7f89a62d95a4 at::native::copy_()
[2m[36m(pid=45396)[0m     @     0x7f365e5faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45396)[0m     @     0x7f365e5f8388 at::native::copy_impl()
[2m[36m(pid=45396)[0m     @     0x7f365e5fa5a4 at::native::copy_()
[2m[36m(pid=45396)[0m     @     0x7f365ece54f5 at::Tensor::copy_()
[2m[36m(pid=45326)[0m     @     0x7ef110720a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45326)[0m     @     0x7ef11071e388 at::native::copy_impl()
[2m[36m(pid=45326)[0m     @     0x7ef1107205a4 at::native::copy_()
[2m[36m(pid=45319)[0m     @     0x7f0417630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45319)[0m     @     0x7f0417653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45319)[0m     @     0x7f0416af5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45319)[0m     @     0x7f0416af3388 at::native::copy_impl()
[2m[36m(pid=45320)[0m     @     0x7f3ee3a395a4 at::native::copy_()
[2m[36m(pid=45320)[0m     @     0x7f3ee41244f5 at::Tensor::copy_()
[2m[36m(pid=45320)[0m     @     0x7f3ee65f78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45414)[0m     @     0x7f4be451c388 at::native::copy_impl()
[2m[36m(pid=45414)[0m     @     0x7f4be451e5a4 at::native::copy_()
[2m[36m(pid=45414)[0m     @     0x7f4be4c094f5 at::Tensor::copy_()
[2m[36m(pid=45414)[0m     @     0x7f4be70dc8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45414)[0m     @     0x7f4be4c094f5 at::Tensor::copy_()
[2m[36m(pid=45303)[0m     @     0x7f05f1c27d91 at::TensorIterator::for_each()
[2m[36m(pid=45303)[0m     @     0x7f05f250ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45303)[0m     @     0x7f05f252dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45303)[0m     @     0x7f05f19cfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45303)[0m     @     0x7f05f19cd388 at::native::copy_impl()
[2m[36m(pid=45303)[0m     @     0x7f05f19cf5a4 at::native::copy_()
[2m[36m(pid=45430)[0m     @     0x7f454dcfb4f5 at::Tensor::copy_()
[2m[36m(pid=45430)[0m     @     0x7f45501ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45430)[0m     @     0x7f454dcfb4f5 at::Tensor::copy_()
[2m[36m(pid=45430)[0m     @     0x7f4553da679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45430)[0m     @     0x55c816f32fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45430)[0m     @     0x55c816e8db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45430)[0m     @     0x55c816f18baf _PyEval_EvalCodeWithName
[2m[36m(pid=45430)[0m     @     0x55c816f19a20 method_vectorcall
[2m[36m(pid=45430)[0m     @     0x55c816e8dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45430)[0m     @     0x55c816f18baf _PyEval_EvalCodeWithName
[2m[36m(pid=45430)[0m     @     0x55c816f19643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45430)[0m     @     0x55c816e8e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45430)[0m     @     0x55c816f18baf _PyEval_EvalCodeWithName
[2m[36m(pid=45430)[0m     @     0x55c816f19643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45430)[0m     @     0x55c816e8e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45430)[0m     @     0x55c816f18baf _PyEval_EvalCodeWithName
[2m[36m(pid=45430)[0m     @     0x55c816f19643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45430)[0m     @     0x55c816e8e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45430)[0m     @     0x55c816f18baf _PyEval_EvalCodeWithName
[2m[36m(pid=45430)[0m     @     0x55c816f19643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45430)[0m     @     0x55c816e8e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45372)[0m     @     0x7f8bc10e35a4 at::native::copy_()
[2m[36m(pid=45372)[0m     @     0x7f8bc17ce4f5 at::Tensor::copy_()
[2m[36m(pid=45372)[0m     @     0x7f8bc3ca18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45372)[0m     @     0x7f8bc17ce4f5 at::Tensor::copy_()
[2m[36m(pid=45372)[0m     @     0x7f8bc787979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45372)[0m     @     0x561ab40fdfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45372)[0m     @     0x561ab4058b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45372)[0m     @     0x561ab40e3baf _PyEval_EvalCodeWithName
[2m[36m(pid=45372)[0m     @     0x561ab40e4a20 method_vectorcall
[2m[36m(pid=45372)[0m     @     0x561ab4058bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45372)[0m     @     0x561ab40e3baf _PyEval_EvalCodeWithName
[2m[36m(pid=45372)[0m     @     0x561ab40e4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45372)[0m     @     0x561ab4059689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45372)[0m     @     0x561ab40e3baf _PyEval_EvalCodeWithName
[2m[36m(pid=45372)[0m     @     0x561ab40e4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45372)[0m     @     0x561ab4059689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45372)[0m     @     0x561ab40e3baf _PyEval_EvalCodeWithName
[2m[36m(pid=45372)[0m     @     0x561ab40e4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45372)[0m     @     0x561ab4059689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45372)[0m     @     0x561ab40e3baf _PyEval_EvalCodeWithName
[2m[36m(pid=45372)[0m     @     0x561ab40e4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45372)[0m     @     0x561ab4059689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45304)[0m     @     0x7ee3b647b4f5 at::Tensor::copy_()
[2m[36m(pid=45304)[0m     @     0x7ee3b894e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45304)[0m     @     0x7ee3b647b4f5 at::Tensor::copy_()
[2m[36m(pid=45304)[0m     @     0x7ee3bc52679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45304)[0m     @     0x55ff7b153fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45304)[0m     @     0x55ff7b0aeb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45304)[0m     @     0x55ff7b139baf _PyEval_EvalCodeWithName
[2m[36m(pid=45304)[0m     @     0x55ff7b13aa20 method_vectorcall
[2m[36m(pid=45304)[0m     @     0x55ff7b0aebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45304)[0m     @     0x55ff7b139baf _PyEval_EvalCodeWithName
[2m[36m(pid=45304)[0m     @     0x55ff7b13a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45304)[0m     @     0x55ff7b0af689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45304)[0m     @     0x55ff7b139baf _PyEval_EvalCodeWithName
[2m[36m(pid=45304)[0m     @     0x55ff7b13a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45304)[0m     @     0x55ff7b0af689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45304)[0m     @     0x55ff7b139baf _PyEval_EvalCodeWithName
[2m[36m(pid=45304)[0m     @     0x55ff7b13a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45304)[0m     @     0x55ff7b0af689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45304)[0m     @     0x55ff7b139baf _PyEval_EvalCodeWithName
[2m[36m(pid=45304)[0m     @     0x55ff7b13a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45304)[0m     @     0x55ff7b0af689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45296)[0m     @     0x7f6a878ed4f5 at::Tensor::copy_()
[2m[36m(pid=45296)[0m     @     0x7f6a89dc08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45296)[0m     @     0x7f6a878ed4f5 at::Tensor::copy_()
[2m[36m(pid=45296)[0m     @     0x7f6a8d99879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45296)[0m     @     0x562fac7effd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45296)[0m     @     0x562fac74ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45296)[0m     @     0x562fac7d5baf _PyEval_EvalCodeWithName
[2m[36m(pid=45296)[0m     @     0x562fac7d6a20 method_vectorcall
[2m[36m(pid=45296)[0m     @     0x562fac74abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45296)[0m     @     0x562fac7d5baf _PyEval_EvalCodeWithName
[2m[36m(pid=45296)[0m     @     0x562fac7d6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45296)[0m     @     0x562fac74b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45296)[0m     @     0x562fac7d5baf _PyEval_EvalCodeWithName
[2m[36m(pid=45296)[0m     @     0x562fac7d6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45296)[0m     @     0x562fac74b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45296)[0m     @     0x562fac7d5baf _PyEval_EvalCodeWithName
[2m[36m(pid=45296)[0m     @     0x562fac7d6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45296)[0m     @     0x562fac74b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45296)[0m     @     0x562fac7d5baf _PyEval_EvalCodeWithName
[2m[36m(pid=45296)[0m     @     0x562fac7d6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45296)[0m     @     0x562fac74b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45309)[0m     @     0x7f0a409b95a4 at::native::copy_()
[2m[36m(pid=45309)[0m     @     0x7f0a410a44f5 at::Tensor::copy_()
[2m[36m(pid=45309)[0m     @     0x7f0a435778de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45309)[0m     @     0x7f0a410a44f5 at::Tensor::copy_()
[2m[36m(pid=45309)[0m     @     0x7f0a4714f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45309)[0m     @     0x557f6ea6dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45309)[0m     @     0x557f6e9c8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45309)[0m     @     0x557f6ea53baf _PyEval_EvalCodeWithName
[2m[36m(pid=45309)[0m     @     0x557f6ea54a20 method_vectorcall
[2m[36m(pid=45309)[0m     @     0x557f6e9c8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45309)[0m     @     0x557f6ea53baf _PyEval_EvalCodeWithName
[2m[36m(pid=45309)[0m     @     0x557f6ea54643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45309)[0m     @     0x557f6e9c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45309)[0m     @     0x557f6ea53baf _PyEval_EvalCodeWithName
[2m[36m(pid=45309)[0m     @     0x557f6ea54643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45309)[0m     @     0x557f6e9c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45309)[0m     @     0x557f6ea53baf _PyEval_EvalCodeWithName
[2m[36m(pid=45309)[0m     @     0x557f6ea54643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45309)[0m     @     0x557f6e9c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45309)[0m     @     0x557f6ea53baf _PyEval_EvalCodeWithName
[2m[36m(pid=45309)[0m     @     0x557f6ea54643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45309)[0m     @     0x557f6e9c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45367)[0m     @     0x7ef1e90e75a4 at::native::copy_()
[2m[36m(pid=45367)[0m     @     0x7ef1e97d24f5 at::Tensor::copy_()
[2m[36m(pid=45367)[0m     @     0x7ef1ebca58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45367)[0m     @     0x7ef1e97d24f5 at::Tensor::copy_()
[2m[36m(pid=45367)[0m     @     0x7ef1ef87d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45367)[0m     @     0x55bceebeafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45367)[0m     @     0x55bceeb45b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45367)[0m     @     0x55bceebd0baf _PyEval_EvalCodeWithName
[2m[36m(pid=45367)[0m     @     0x55bceebd1a20 method_vectorcall
[2m[36m(pid=45367)[0m     @     0x55bceeb45bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45367)[0m     @     0x55bceebd0baf _PyEval_EvalCodeWithName
[2m[36m(pid=45367)[0m     @     0x55bceebd1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45367)[0m     @     0x55bceeb46689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45367)[0m     @     0x55bceebd0baf _PyEval_EvalCodeWithName
[2m[36m(pid=45367)[0m     @     0x55bceebd1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45367)[0m     @     0x55bceeb46689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45367)[0m     @     0x55bceebd0baf _PyEval_EvalCodeWithName
[2m[36m(pid=45367)[0m     @     0x55bceebd1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45367)[0m     @     0x55bceeb46689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45367)[0m     @     0x55bceebd0baf _PyEval_EvalCodeWithName
[2m[36m(pid=45367)[0m     @     0x55bceebd1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45367)[0m     @     0x55bceeb46689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45351)[0m     @     0x7f9b193ba4f5 at::Tensor::copy_()
[2m[36m(pid=45351)[0m     @     0x7f9b1b88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45351)[0m     @     0x7f9b193ba4f5 at::Tensor::copy_()
[2m[36m(pid=45351)[0m     @     0x7f9b1f46579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45351)[0m     @     0x5565bff77fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45351)[0m     @     0x5565bfed2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45351)[0m     @     0x5565bff5dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45351)[0m     @     0x5565bff5ea20 method_vectorcall
[2m[36m(pid=45351)[0m     @     0x5565bfed2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45351)[0m     @     0x5565bff5dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45351)[0m     @     0x5565bff5e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45351)[0m     @     0x5565bfed3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45351)[0m     @     0x5565bff5dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45351)[0m     @     0x5565bff5e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45351)[0m     @     0x5565bfed3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45351)[0m     @     0x5565bff5dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45351)[0m     @     0x5565bff5e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45351)[0m     @     0x5565bfed3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45351)[0m     @     0x5565bff5dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45351)[0m     @     0x5565bff5e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45351)[0m     @     0x5565bfed3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45292)[0m     @     0x7f06e7cfba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45292)[0m     @     0x7f06e7cf9388 at::native::copy_impl()
[2m[36m(pid=45292)[0m     @     0x7f06e7cfb5a4 at::native::copy_()
[2m[36m(pid=45292)[0m     @     0x7f06e83e64f5 at::Tensor::copy_()
[2m[36m(pid=45292)[0m     @     0x7f06ea8b98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45292)[0m     @     0x7f06e83e64f5 at::Tensor::copy_()
[2m[36m(pid=45361)[0m     @     0x7f03af8095a4 at::native::copy_()
[2m[36m(pid=45361)[0m     @     0x7f03afef44f5 at::Tensor::copy_()
[2m[36m(pid=45361)[0m     @     0x7f03b23c78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45361)[0m     @     0x7f03afef44f5 at::Tensor::copy_()
[2m[36m(pid=45361)[0m     @     0x7f03b5f9f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45361)[0m     @     0x55ef39891fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45361)[0m     @     0x55ef397ecb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45361)[0m     @     0x55ef39877baf _PyEval_EvalCodeWithName
[2m[36m(pid=45361)[0m     @     0x55ef39878a20 method_vectorcall
[2m[36m(pid=45361)[0m     @     0x55ef397ecbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45361)[0m     @     0x55ef39877baf _PyEval_EvalCodeWithName
[2m[36m(pid=45361)[0m     @     0x55ef39878643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45361)[0m     @     0x55ef397ed689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45361)[0m     @     0x55ef39877baf _PyEval_EvalCodeWithName
[2m[36m(pid=45361)[0m     @     0x55ef39878643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45361)[0m     @     0x55ef397ed689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45361)[0m     @     0x55ef39877baf _PyEval_EvalCodeWithName
[2m[36m(pid=45361)[0m     @     0x55ef39878643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45361)[0m     @     0x55ef397ed689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45361)[0m     @     0x55ef39877baf _PyEval_EvalCodeWithName
[2m[36m(pid=45361)[0m     @     0x55ef39878643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45361)[0m     @     0x55ef397ed689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45409)[0m     @     0x7f802858d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45409)[0m     @     0x7f80260ba4f5 at::Tensor::copy_()
[2m[36m(pid=45409)[0m     @     0x7f802c16579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45409)[0m     @     0x564e4206bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45409)[0m     @     0x564e41fc6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45409)[0m     @     0x564e42051baf _PyEval_EvalCodeWithName
[2m[36m(pid=45409)[0m     @     0x564e42052a20 method_vectorcall
[2m[36m(pid=45409)[0m     @     0x564e41fc6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45409)[0m     @     0x564e42051baf _PyEval_EvalCodeWithName
[2m[36m(pid=45409)[0m     @     0x564e42052643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45409)[0m     @     0x564e41fc7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45409)[0m     @     0x564e42051baf _PyEval_EvalCodeWithName
[2m[36m(pid=45409)[0m     @     0x564e42052643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45409)[0m     @     0x564e41fc7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45409)[0m     @     0x564e42051baf _PyEval_EvalCodeWithName
[2m[36m(pid=45409)[0m     @     0x564e42052643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45409)[0m     @     0x564e41fc7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45409)[0m     @     0x564e42051baf _PyEval_EvalCodeWithName
[2m[36m(pid=45409)[0m     @     0x564e42052643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45409)[0m     @     0x564e41fc7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45353)[0m     @     0x7f818d0a04f5 at::Tensor::copy_()
[2m[36m(pid=45353)[0m     @     0x7f819314b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45353)[0m     @     0x55e015ef1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45353)[0m     @     0x55e015e4cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45353)[0m     @     0x55e015ed7baf _PyEval_EvalCodeWithName
[2m[36m(pid=45353)[0m     @     0x55e015ed8a20 method_vectorcall
[2m[36m(pid=45353)[0m     @     0x55e015e4cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45353)[0m     @     0x55e015ed7baf _PyEval_EvalCodeWithName
[2m[36m(pid=45353)[0m     @     0x55e015ed8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45353)[0m     @     0x55e015e4d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45353)[0m     @     0x55e015ed7baf _PyEval_EvalCodeWithName
[2m[36m(pid=45353)[0m     @     0x55e015ed8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45353)[0m     @     0x55e015e4d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45353)[0m     @     0x55e015ed7baf _PyEval_EvalCodeWithName
[2m[36m(pid=45353)[0m     @     0x55e015ed8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45353)[0m     @     0x55e015e4d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45353)[0m     @     0x55e015ed7baf _PyEval_EvalCodeWithName
[2m[36m(pid=45353)[0m     @     0x55e015ed8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45353)[0m     @     0x55e015e4d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45305)[0m     @     0x7f29576b64f5 at::Tensor::copy_()
[2m[36m(pid=45305)[0m     @     0x7f295d76179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45305)[0m     @     0x55ba0721ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45305)[0m     @     0x55ba0717ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45305)[0m     @     0x55ba07205baf _PyEval_EvalCodeWithName
[2m[36m(pid=45305)[0m     @     0x55ba07206a20 method_vectorcall
[2m[36m(pid=45305)[0m     @     0x55ba0717abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45305)[0m     @     0x55ba07205baf _PyEval_EvalCodeWithName
[2m[36m(pid=45305)[0m     @     0x55ba07206643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45305)[0m     @     0x55ba0717b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45305)[0m     @     0x55ba07205baf _PyEval_EvalCodeWithName
[2m[36m(pid=45305)[0m     @     0x55ba07206643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45305)[0m     @     0x55ba0717b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45305)[0m     @     0x55ba07205baf _PyEval_EvalCodeWithName
[2m[36m(pid=45305)[0m     @     0x55ba07206643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45305)[0m     @     0x55ba0717b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45305)[0m     @     0x55ba07205baf _PyEval_EvalCodeWithName
[2m[36m(pid=45305)[0m     @     0x55ba07206643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45305)[0m     @     0x55ba0717b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45370)[0m     @     0x7ef7b098a4f5 at::Tensor::copy_()
[2m[36m(pid=45370)[0m     @     0x7ef7b2e5d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45370)[0m     @     0x7ef7b098a4f5 at::Tensor::copy_()
[2m[36m(pid=45370)[0m     @     0x7ef7b6a3579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45370)[0m     @     0x55d402d6bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45370)[0m     @     0x55d402cc6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45370)[0m     @     0x55d402d51baf _PyEval_EvalCodeWithName
[2m[36m(pid=45370)[0m     @     0x55d402d52a20 method_vectorcall
[2m[36m(pid=45370)[0m     @     0x55d402cc6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45370)[0m     @     0x55d402d51baf _PyEval_EvalCodeWithName
[2m[36m(pid=45370)[0m     @     0x55d402d52643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45370)[0m     @     0x55d402cc7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45370)[0m     @     0x55d402d51baf _PyEval_EvalCodeWithName
[2m[36m(pid=45370)[0m     @     0x55d402d52643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45370)[0m     @     0x55d402cc7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45370)[0m     @     0x55d402d51baf _PyEval_EvalCodeWithName
[2m[36m(pid=45370)[0m     @     0x55d402d52643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45370)[0m     @     0x55d402cc7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45370)[0m     @     0x55d402d51baf _PyEval_EvalCodeWithName
[2m[36m(pid=45370)[0m     @     0x55d402d52643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45370)[0m     @     0x55d402cc7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45354)[0m     @     0x7fa9421654f5 at::Tensor::copy_()
[2m[36m(pid=45354)[0m     @     0x7fa94821079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45354)[0m     @     0x557c1154dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45354)[0m     @     0x557c114a8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45354)[0m     @     0x557c11533baf _PyEval_EvalCodeWithName
[2m[36m(pid=45354)[0m     @     0x557c11534a20 method_vectorcall
[2m[36m(pid=45354)[0m     @     0x557c114a8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45354)[0m     @     0x557c11533baf _PyEval_EvalCodeWithName
[2m[36m(pid=45354)[0m     @     0x557c11534643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45354)[0m     @     0x557c114a9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45354)[0m     @     0x557c11533baf _PyEval_EvalCodeWithName
[2m[36m(pid=45354)[0m     @     0x557c11534643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45354)[0m     @     0x557c114a9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45354)[0m     @     0x557c11533baf _PyEval_EvalCodeWithName
[2m[36m(pid=45354)[0m     @     0x557c11534643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45354)[0m     @     0x557c114a9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45354)[0m     @     0x557c11533baf _PyEval_EvalCodeWithName
[2m[36m(pid=45354)[0m     @     0x557c11534643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45354)[0m     @     0x557c114a9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45398)[0m     @     0x7f94e432e4f5 at::Tensor::copy_()
[2m[36m(pid=45398)[0m     @     0x7f94e68018de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45398)[0m     @     0x7f94e432e4f5 at::Tensor::copy_()
[2m[36m(pid=45398)[0m     @     0x7f94ea3d979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45398)[0m     @     0x55597a18cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45398)[0m     @     0x55597a0e7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45398)[0m     @     0x55597a172baf _PyEval_EvalCodeWithName
[2m[36m(pid=45398)[0m     @     0x55597a173a20 method_vectorcall
[2m[36m(pid=45398)[0m     @     0x55597a0e7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45398)[0m     @     0x55597a172baf _PyEval_EvalCodeWithName
[2m[36m(pid=45398)[0m     @     0x55597a173643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45398)[0m     @     0x55597a0e8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45398)[0m     @     0x55597a172baf _PyEval_EvalCodeWithName
[2m[36m(pid=45398)[0m     @     0x55597a173643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45398)[0m     @     0x55597a0e8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45398)[0m     @     0x55597a172baf _PyEval_EvalCodeWithName
[2m[36m(pid=45398)[0m     @     0x55597a173643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45398)[0m     @     0x55597a0e8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45398)[0m     @     0x55597a172baf _PyEval_EvalCodeWithName
[2m[36m(pid=45398)[0m     @     0x55597a173643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45398)[0m     @     0x55597a0e8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45308)[0m     @     0x7f9958a654f5 at::Tensor::copy_()
[2m[36m(pid=45308)[0m     @     0x7f995af388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45308)[0m     @     0x7f9958a654f5 at::Tensor::copy_()
[2m[36m(pid=45308)[0m     @     0x7f995eb1079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45308)[0m     @     0x563346dc0fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45308)[0m     @     0x563346d1bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45308)[0m     @     0x563346da6baf _PyEval_EvalCodeWithName
[2m[36m(pid=45308)[0m     @     0x563346da7a20 method_vectorcall
[2m[36m(pid=45308)[0m     @     0x563346d1bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45308)[0m     @     0x563346da6baf _PyEval_EvalCodeWithName
[2m[36m(pid=45308)[0m     @     0x563346da7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45308)[0m     @     0x563346d1c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45308)[0m     @     0x563346da6baf _PyEval_EvalCodeWithName
[2m[36m(pid=45308)[0m     @     0x563346da7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45308)[0m     @     0x563346d1c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45308)[0m     @     0x563346da6baf _PyEval_EvalCodeWithName
[2m[36m(pid=45308)[0m     @     0x563346da7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45308)[0m     @     0x563346d1c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45308)[0m     @     0x563346da6baf _PyEval_EvalCodeWithName
[2m[36m(pid=45308)[0m     @     0x563346da7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45308)[0m     @     0x563346d1c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45293)[0m     @     0x7f97e71e04f5 at::Tensor::copy_()
[2m[36m(pid=45293)[0m     @     0x7f97e96b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45293)[0m     @     0x7f97e71e04f5 at::Tensor::copy_()
[2m[36m(pid=45293)[0m     @     0x7f97ed28b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45293)[0m     @     0x55ce76c90fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45293)[0m     @     0x55ce76bebb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45293)[0m     @     0x55ce76c76baf _PyEval_EvalCodeWithName
[2m[36m(pid=45293)[0m     @     0x55ce76c77a20 method_vectorcall
[2m[36m(pid=45293)[0m     @     0x55ce76bebbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45293)[0m     @     0x55ce76c76baf _PyEval_EvalCodeWithName
[2m[36m(pid=45293)[0m     @     0x55ce76c77643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45293)[0m     @     0x55ce76bec689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45293)[0m     @     0x55ce76c76baf _PyEval_EvalCodeWithName
[2m[36m(pid=45293)[0m     @     0x55ce76c77643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45293)[0m     @     0x55ce76bec689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45293)[0m     @     0x55ce76c76baf _PyEval_EvalCodeWithName
[2m[36m(pid=45293)[0m     @     0x55ce76c77643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45293)[0m     @     0x55ce76bec689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45293)[0m     @     0x55ce76c76baf _PyEval_EvalCodeWithName
[2m[36m(pid=45293)[0m     @     0x55ce76c77643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45293)[0m     @     0x55ce76bec689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45413)[0m     @     0x7f101db898de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45413)[0m     @     0x7f101b6b64f5 at::Tensor::copy_()
[2m[36m(pid=45413)[0m     @     0x7f102176179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45413)[0m     @     0x5606666f8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45413)[0m     @     0x560666653b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45413)[0m     @     0x5606666debaf _PyEval_EvalCodeWithName
[2m[36m(pid=45413)[0m     @     0x5606666dfa20 method_vectorcall
[2m[36m(pid=45413)[0m     @     0x560666653bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45413)[0m     @     0x5606666debaf _PyEval_EvalCodeWithName
[2m[36m(pid=45413)[0m     @     0x5606666df643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45413)[0m     @     0x560666654689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45413)[0m     @     0x5606666debaf _PyEval_EvalCodeWithName
[2m[36m(pid=45413)[0m     @     0x5606666df643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45413)[0m     @     0x560666654689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45413)[0m     @     0x5606666debaf _PyEval_EvalCodeWithName
[2m[36m(pid=45413)[0m     @     0x5606666df643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45413)[0m     @     0x560666654689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45413)[0m     @     0x5606666debaf _PyEval_EvalCodeWithName
[2m[36m(pid=45413)[0m     @     0x5606666df643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45413)[0m     @     0x560666654689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45379)[0m     @     0x7f0a7731e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45379)[0m     @     0x7f0a74e4b4f5 at::Tensor::copy_()
[2m[36m(pid=45379)[0m     @     0x7f0a7aef679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45379)[0m     @     0x5623c7aa1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45379)[0m     @     0x5623c79fcb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45379)[0m     @     0x5623c7a87baf _PyEval_EvalCodeWithName
[2m[36m(pid=45379)[0m     @     0x5623c7a88a20 method_vectorcall
[2m[36m(pid=45379)[0m     @     0x5623c79fcbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45379)[0m     @     0x5623c7a87baf _PyEval_EvalCodeWithName
[2m[36m(pid=45379)[0m     @     0x5623c7a88643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45379)[0m     @     0x5623c79fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45379)[0m     @     0x5623c7a87baf _PyEval_EvalCodeWithName
[2m[36m(pid=45379)[0m     @     0x5623c7a88643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45379)[0m     @     0x5623c79fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45379)[0m     @     0x5623c7a87baf _PyEval_EvalCodeWithName
[2m[36m(pid=45379)[0m     @     0x5623c7a88643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45379)[0m     @     0x5623c79fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45379)[0m     @     0x5623c7a87baf _PyEval_EvalCodeWithName
[2m[36m(pid=45379)[0m     @     0x5623c7a88643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45379)[0m     @     0x5623c79fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45399)[0m     @     0x7fc3cbbe45a4 at::native::copy_()
[2m[36m(pid=45399)[0m     @     0x7fc3cc2cf4f5 at::Tensor::copy_()
[2m[36m(pid=45399)[0m     @     0x7fc3ce7a28de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45399)[0m     @     0x7fc3cc2cf4f5 at::Tensor::copy_()
[2m[36m(pid=45399)[0m     @     0x7fc3d237a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45399)[0m     @     0x56156f866fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45399)[0m     @     0x56156f7c1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45399)[0m     @     0x56156f84cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45399)[0m     @     0x56156f84da20 method_vectorcall
[2m[36m(pid=45399)[0m     @     0x56156f7c1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45399)[0m     @     0x56156f84cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45399)[0m     @     0x56156f84d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45399)[0m     @     0x56156f7c2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45399)[0m     @     0x56156f84cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45399)[0m     @     0x56156f84d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45399)[0m     @     0x56156f7c2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45399)[0m     @     0x56156f84cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45399)[0m     @     0x56156f84d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45399)[0m     @     0x56156f7c2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45399)[0m     @     0x56156f84cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45399)[0m     @     0x56156f84d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45399)[0m     @     0x56156f7c2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45334)[0m     @     0x7f2f0cc764f5 at::Tensor::copy_()
[2m[36m(pid=45334)[0m     @     0x7f2f12d2179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45334)[0m     @     0x55ecdd0b3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45334)[0m     @     0x55ecdd00eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45334)[0m     @     0x55ecdd099baf _PyEval_EvalCodeWithName
[2m[36m(pid=45334)[0m     @     0x55ecdd09aa20 method_vectorcall
[2m[36m(pid=45334)[0m     @     0x55ecdd00ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45334)[0m     @     0x55ecdd099baf _PyEval_EvalCodeWithName
[2m[36m(pid=45334)[0m     @     0x55ecdd09a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45334)[0m     @     0x55ecdd00f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45334)[0m     @     0x55ecdd099baf _PyEval_EvalCodeWithName
[2m[36m(pid=45334)[0m     @     0x55ecdd09a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45334)[0m     @     0x55ecdd00f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45334)[0m     @     0x55ecdd099baf _PyEval_EvalCodeWithName
[2m[36m(pid=45334)[0m     @     0x55ecdd09a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45334)[0m     @     0x55ecdd00f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45334)[0m     @     0x55ecdd099baf _PyEval_EvalCodeWithName
[2m[36m(pid=45334)[0m     @     0x55ecdd09a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45334)[0m     @     0x55ecdd00f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45291)[0m     @     0x7efadd5605a4 at::native::copy_()
[2m[36m(pid=45291)[0m     @     0x7efaddc4b4f5 at::Tensor::copy_()
[2m[36m(pid=45291)[0m     @     0x7efae011e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45427)[0m     @     0x7fcce65e24f5 at::Tensor::copy_()
[2m[36m(pid=45427)[0m     @     0x7fcce8ab58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45427)[0m     @     0x7fcce65e24f5 at::Tensor::copy_()
[2m[36m(pid=45427)[0m     @     0x7fccec68d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45427)[0m     @     0x56070a835fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45427)[0m     @     0x56070a790b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45427)[0m     @     0x56070a81bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45427)[0m     @     0x56070a81ca20 method_vectorcall
[2m[36m(pid=45427)[0m     @     0x56070a790bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45427)[0m     @     0x56070a81bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45427)[0m     @     0x56070a81c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45427)[0m     @     0x56070a791689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45427)[0m     @     0x56070a81bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45427)[0m     @     0x56070a81c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45427)[0m     @     0x56070a791689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45427)[0m     @     0x56070a81bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45427)[0m     @     0x56070a81c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45427)[0m     @     0x56070a791689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45427)[0m     @     0x56070a81bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45427)[0m     @     0x56070a81c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45427)[0m     @     0x56070a791689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45378)[0m     @     0x7ef97bf5f388 at::native::copy_impl()
[2m[36m(pid=45378)[0m     @     0x7ef97bf615a4 at::native::copy_()
[2m[36m(pid=45378)[0m     @     0x7ef97c64c4f5 at::Tensor::copy_()
[2m[36m(pid=45378)[0m     @     0x7ef97eb1f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45378)[0m     @     0x7ef97c64c4f5 at::Tensor::copy_()
[2m[36m(pid=45378)[0m     @     0x7ef9826f779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45378)[0m     @     0x55ea5f7d2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45378)[0m     @     0x55ea5f72db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45378)[0m     @     0x55ea5f7b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=45378)[0m     @     0x55ea5f7b9a20 method_vectorcall
[2m[36m(pid=45378)[0m     @     0x55ea5f72dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45378)[0m     @     0x55ea5f7b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=45378)[0m     @     0x55ea5f7b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45378)[0m     @     0x55ea5f72e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45378)[0m     @     0x55ea5f7b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=45378)[0m     @     0x55ea5f7b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45378)[0m     @     0x55ea5f72e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45378)[0m     @     0x55ea5f7b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=45378)[0m     @     0x55ea5f7b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45378)[0m     @     0x55ea5f72e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45378)[0m     @     0x55ea5f7b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=45378)[0m     @     0x55ea5f7b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45378)[0m     @     0x55ea5f72e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45375)[0m     @     0x7f93b2a885a4 at::native::copy_()
[2m[36m(pid=45375)[0m     @     0x7f93b31734f5 at::Tensor::copy_()
[2m[36m(pid=45375)[0m     @     0x7f93b56468de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45375)[0m     @     0x7f93b31734f5 at::Tensor::copy_()
[2m[36m(pid=45375)[0m     @     0x7f93b921e79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45375)[0m     @     0x561046a18fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45375)[0m     @     0x561046973b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45375)[0m     @     0x5610469febaf _PyEval_EvalCodeWithName
[2m[36m(pid=45375)[0m     @     0x5610469ffa20 method_vectorcall
[2m[36m(pid=45375)[0m     @     0x561046973bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45375)[0m     @     0x5610469febaf _PyEval_EvalCodeWithName
[2m[36m(pid=45375)[0m     @     0x5610469ff643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45375)[0m     @     0x561046974689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45375)[0m     @     0x5610469febaf _PyEval_EvalCodeWithName
[2m[36m(pid=45375)[0m     @     0x5610469ff643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45375)[0m     @     0x561046974689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45375)[0m     @     0x5610469febaf _PyEval_EvalCodeWithName
[2m[36m(pid=45375)[0m     @     0x5610469ff643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45375)[0m     @     0x561046974689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45375)[0m     @     0x5610469febaf _PyEval_EvalCodeWithName
[2m[36m(pid=45375)[0m     @     0x5610469ff643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45375)[0m     @     0x561046974689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45403)[0m     @     0x7fb185075a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45403)[0m     @     0x7fb185073388 at::native::copy_impl()
[2m[36m(pid=45403)[0m     @     0x7fb1850755a4 at::native::copy_()
[2m[36m(pid=45403)[0m     @     0x7fb1857604f5 at::Tensor::copy_()
[2m[36m(pid=45403)[0m     @     0x7fb187c338de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45403)[0m     @     0x7fb1857604f5 at::Tensor::copy_()
[2m[36m(pid=45403)[0m     @     0x7fb18b80b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45403)[0m     @     0x55fb95c1cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45403)[0m     @     0x55fb95b77b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45403)[0m     @     0x55fb95c02baf _PyEval_EvalCodeWithName
[2m[36m(pid=45403)[0m     @     0x55fb95c03a20 method_vectorcall
[2m[36m(pid=45403)[0m     @     0x55fb95b77bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45364)[0m     @     0x7f48af44cd91 at::TensorIterator::for_each()
[2m[36m(pid=45364)[0m     @     0x7f48afd2fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45364)[0m     @     0x7f48afd52c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45364)[0m     @     0x7f48af1f4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45364)[0m     @     0x7f48af1f2388 at::native::copy_impl()
[2m[36m(pid=45364)[0m     @     0x7f48af1f45a4 at::native::copy_()
[2m[36m(pid=45294)[0m     @     0x7ef104bd1ad3 at::TensorIterator::for_each()
[2m[36m(pid=45294)[0m     @     0x7ef104bd1d91 at::TensorIterator::for_each()
[2m[36m(pid=45294)[0m     @     0x7ef1054b4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=45294)[0m     @     0x7ef1054d7c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=45294)[0m     @     0x7ef104979a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45294)[0m     @     0x7ef104977388 at::native::copy_impl()
[2m[36m(pid=45365)[0m     @     0x7f3977a395a4 at::native::copy_()
[2m[36m(pid=45365)[0m     @     0x7f39781244f5 at::Tensor::copy_()
[2m[36m(pid=45365)[0m     @     0x7f397a5f78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45365)[0m     @     0x7f39781244f5 at::Tensor::copy_()
[2m[36m(pid=45365)[0m     @     0x7f397e1cf79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45365)[0m     @     0x55ab1a34cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45365)[0m     @     0x55ab1a2a7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45365)[0m     @     0x55ab1a332baf _PyEval_EvalCodeWithName
[2m[36m(pid=45365)[0m     @     0x55ab1a333a20 method_vectorcall
[2m[36m(pid=45365)[0m     @     0x55ab1a2a7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45365)[0m     @     0x55ab1a332baf _PyEval_EvalCodeWithName
[2m[36m(pid=45365)[0m     @     0x55ab1a333643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45365)[0m     @     0x55ab1a2a8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45365)[0m     @     0x55ab1a332baf _PyEval_EvalCodeWithName
[2m[36m(pid=45365)[0m     @     0x55ab1a333643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45365)[0m     @     0x55ab1a2a8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45365)[0m     @     0x55ab1a332baf _PyEval_EvalCodeWithName
[2m[36m(pid=45365)[0m     @     0x55ab1a333643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45365)[0m     @     0x55ab1a2a8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45365)[0m     @     0x55ab1a332baf _PyEval_EvalCodeWithName
[2m[36m(pid=45365)[0m     @     0x55ab1a333643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45365)[0m     @     0x55ab1a2a8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45299)[0m     @     0x7f3099ea2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45299)[0m     @     0x7f3099ea0388 at::native::copy_impl()
[2m[36m(pid=45299)[0m     @     0x7f3099ea25a4 at::native::copy_()
[2m[36m(pid=45299)[0m     @     0x7f309a58d4f5 at::Tensor::copy_()
[2m[36m(pid=45299)[0m     @     0x7f309ca608de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45299)[0m     @     0x7f309a58d4f5 at::Tensor::copy_()
[2m[36m(pid=45299)[0m     @     0x7f30a063879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45299)[0m     @     0x55c4fc0b9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45299)[0m     @     0x55c4fc014b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45299)[0m     @     0x55c4fc09fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45299)[0m     @     0x55c4fc0a0a20 method_vectorcall
[2m[36m(pid=45299)[0m     @     0x55c4fc014bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45299)[0m     @     0x55c4fc09fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45408)[0m     @     0x7f75acbc8388 at::native::copy_impl()
[2m[36m(pid=45408)[0m     @     0x7f75acbca5a4 at::native::copy_()
[2m[36m(pid=45408)[0m     @     0x7f75ad2b54f5 at::Tensor::copy_()
[2m[36m(pid=45408)[0m     @     0x7f75af7888de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45408)[0m     @     0x7f75ad2b54f5 at::Tensor::copy_()
[2m[36m(pid=45408)[0m     @     0x7f75b336079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45408)[0m     @     0x557b1e038fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45408)[0m     @     0x557b1df93b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45408)[0m     @     0x557b1e01ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=45408)[0m     @     0x557b1e01fa20 method_vectorcall
[2m[36m(pid=45408)[0m     @     0x557b1df93bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45408)[0m     @     0x557b1e01ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=45408)[0m     @     0x557b1e01f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45408)[0m     @     0x557b1df94689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45408)[0m     @     0x557b1e01ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=45408)[0m     @     0x557b1e01f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45408)[0m     @     0x557b1df94689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45316)[0m     @     0x7f391e6ff5a4 at::native::copy_()
[2m[36m(pid=45316)[0m     @     0x7f391edea4f5 at::Tensor::copy_()
[2m[36m(pid=45316)[0m     @     0x7f39212bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45316)[0m     @     0x7f391edea4f5 at::Tensor::copy_()
[2m[36m(pid=45316)[0m     @     0x7f3924e9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45316)[0m     @     0x5591da293fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45316)[0m     @     0x5591da1eeb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45316)[0m     @     0x5591da279baf _PyEval_EvalCodeWithName
[2m[36m(pid=45316)[0m     @     0x5591da27aa20 method_vectorcall
[2m[36m(pid=45316)[0m     @     0x5591da1eebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45316)[0m     @     0x5591da279baf _PyEval_EvalCodeWithName
[2m[36m(pid=45316)[0m     @     0x5591da27a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45316)[0m     @     0x5591da1ef689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45316)[0m     @     0x5591da279baf _PyEval_EvalCodeWithName
[2m[36m(pid=45316)[0m     @     0x5591da27a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45316)[0m     @     0x5591da1ef689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45316)[0m     @     0x5591da279baf _PyEval_EvalCodeWithName
[2m[36m(pid=45316)[0m     @     0x5591da27a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45316)[0m     @     0x5591da1ef689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45316)[0m     @     0x5591da279baf _PyEval_EvalCodeWithName
[2m[36m(pid=45316)[0m     @     0x5591da27a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45316)[0m     @     0x5591da1ef689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45381)[0m     @     0x7f0833c48388 at::native::copy_impl()
[2m[36m(pid=45381)[0m     @     0x7f0833c4a5a4 at::native::copy_()
[2m[36m(pid=45381)[0m     @     0x7f08343354f5 at::Tensor::copy_()
[2m[36m(pid=45381)[0m     @     0x7f08368088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45423)[0m     @     0x7f4cff1cfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=45423)[0m     @     0x7f4cff1cd388 at::native::copy_impl()
[2m[36m(pid=45423)[0m     @     0x7f4cff1cf5a4 at::native::copy_()
[2m[36m(pid=45423)[0m     @     0x7f4cff8ba4f5 at::Tensor::copy_()
[2m[36m(pid=45423)[0m     @     0x7f4d01d8d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45423)[0m     @     0x7f4cff8ba4f5 at::Tensor::copy_()
[2m[36m(pid=45423)[0m     @     0x7f4d0596579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45423)[0m     @     0x55967561ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45423)[0m     @     0x55967557ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45423)[0m     @     0x559675605baf _PyEval_EvalCodeWithName
[2m[36m(pid=45423)[0m     @     0x559675606a20 method_vectorcall
[2m[36m(pid=45423)[0m     @     0x55967557abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45423)[0m     @     0x559675605baf _PyEval_EvalCodeWithName
[2m[36m(pid=45423)[0m     @     0x559675606643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45423)[0m     @     0x55967557b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45423)[0m     @     0x559675605baf _PyEval_EvalCodeWithName
[2m[36m(pid=45423)[0m     @     0x559675606643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45423)[0m     @     0x55967557b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45423)[0m     @     0x559675605baf _PyEval_EvalCodeWithName
[2m[36m(pid=45423)[0m     @     0x559675606643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45423)[0m     @     0x55967557b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45423)[0m     @     0x559675605baf _PyEval_EvalCodeWithName
[2m[36m(pid=45423)[0m     @     0x559675606643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45423)[0m     @     0x55967557b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45384)[0m     @     0x7fa13eea74f5 at::Tensor::copy_()
[2m[36m(pid=45384)[0m     @     0x7fa144f5279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45384)[0m     @     0x56291d336fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45384)[0m     @     0x56291d291b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45384)[0m     @     0x56291d31cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45384)[0m     @     0x56291d31da20 method_vectorcall
[2m[36m(pid=45384)[0m     @     0x56291d291bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45384)[0m     @     0x56291d31cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45384)[0m     @     0x56291d31d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45384)[0m     @     0x56291d292689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45384)[0m     @     0x56291d31cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45384)[0m     @     0x56291d31d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45384)[0m     @     0x56291d292689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45384)[0m     @     0x56291d31cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45384)[0m     @     0x56291d31d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45384)[0m     @     0x56291d292689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45384)[0m     @     0x56291d31cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45384)[0m     @     0x56291d31d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45384)[0m     @     0x56291d292689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45332)[0m     @     0x7f211dcfb4f5 at::Tensor::copy_()
[2m[36m(pid=45332)[0m     @     0x7f21201ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45332)[0m     @     0x7f211dcfb4f5 at::Tensor::copy_()
[2m[36m(pid=45332)[0m     @     0x7f2123da679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45332)[0m     @     0x55986254dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45332)[0m     @     0x5598624a8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45332)[0m     @     0x559862533baf _PyEval_EvalCodeWithName
[2m[36m(pid=45332)[0m     @     0x559862534a20 method_vectorcall
[2m[36m(pid=45332)[0m     @     0x5598624a8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45332)[0m     @     0x559862533baf _PyEval_EvalCodeWithName
[2m[36m(pid=45332)[0m     @     0x559862534643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45332)[0m     @     0x5598624a9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45332)[0m     @     0x559862533baf _PyEval_EvalCodeWithName
[2m[36m(pid=45332)[0m     @     0x559862534643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45332)[0m     @     0x5598624a9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45332)[0m     @     0x559862533baf _PyEval_EvalCodeWithName
[2m[36m(pid=45332)[0m     @     0x559862534643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45332)[0m     @     0x5598624a9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45332)[0m     @     0x559862533baf _PyEval_EvalCodeWithName
[2m[36m(pid=45332)[0m     @     0x559862534643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45332)[0m     @     0x5598624a9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45327)[0m     @     0x7f1b9befa4f5 at::Tensor::copy_()
[2m[36m(pid=45327)[0m     @     0x7f1ba1fa579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45327)[0m     @     0x56300423cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45327)[0m     @     0x563004197b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45327)[0m     @     0x563004222baf _PyEval_EvalCodeWithName
[2m[36m(pid=45327)[0m     @     0x563004223a20 method_vectorcall
[2m[36m(pid=45327)[0m     @     0x563004197bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45327)[0m     @     0x563004222baf _PyEval_EvalCodeWithName
[2m[36m(pid=45327)[0m     @     0x563004223643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45327)[0m     @     0x563004198689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45327)[0m     @     0x563004222baf _PyEval_EvalCodeWithName
[2m[36m(pid=45327)[0m     @     0x563004223643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45327)[0m     @     0x563004198689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45327)[0m     @     0x563004222baf _PyEval_EvalCodeWithName
[2m[36m(pid=45327)[0m     @     0x563004223643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45327)[0m     @     0x563004198689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45327)[0m     @     0x563004222baf _PyEval_EvalCodeWithName
[2m[36m(pid=45327)[0m     @     0x563004223643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45327)[0m     @     0x563004198689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45314)[0m     @     0x7f6d87efa4f5 at::Tensor::copy_()
[2m[36m(pid=45314)[0m     @     0x7f6d8dfa579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45314)[0m     @     0x55b06fdb3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45314)[0m     @     0x55b06fd0eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45314)[0m     @     0x55b06fd99baf _PyEval_EvalCodeWithName
[2m[36m(pid=45314)[0m     @     0x55b06fd9aa20 method_vectorcall
[2m[36m(pid=45314)[0m     @     0x55b06fd0ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45314)[0m     @     0x55b06fd99baf _PyEval_EvalCodeWithName
[2m[36m(pid=45314)[0m     @     0x55b06fd9a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45314)[0m     @     0x55b06fd0f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45314)[0m     @     0x55b06fd99baf _PyEval_EvalCodeWithName
[2m[36m(pid=45314)[0m     @     0x55b06fd9a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45314)[0m     @     0x55b06fd0f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45314)[0m     @     0x55b06fd99baf _PyEval_EvalCodeWithName
[2m[36m(pid=45314)[0m     @     0x55b06fd9a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45314)[0m     @     0x55b06fd0f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45314)[0m     @     0x55b06fd99baf _PyEval_EvalCodeWithName
[2m[36m(pid=45314)[0m     @     0x55b06fd9a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45314)[0m     @     0x55b06fd0f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45312)[0m     @     0x7f02b20b84f5 at::Tensor::copy_()
[2m[36m(pid=45312)[0m     @     0x7f02b816379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45312)[0m     @     0x56114b496fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45312)[0m     @     0x56114b3f1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45312)[0m     @     0x56114b47cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45312)[0m     @     0x56114b47da20 method_vectorcall
[2m[36m(pid=45312)[0m     @     0x56114b3f1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45312)[0m     @     0x56114b47cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45312)[0m     @     0x56114b47d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45312)[0m     @     0x56114b3f2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45312)[0m     @     0x56114b47cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45312)[0m     @     0x56114b47d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45312)[0m     @     0x56114b3f2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45312)[0m     @     0x56114b47cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45312)[0m     @     0x56114b47d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45312)[0m     @     0x56114b3f2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45312)[0m     @     0x56114b47cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45312)[0m     @     0x56114b47d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45312)[0m     @     0x56114b3f2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45290)[0m     @     0x7f9d0fc814f5 at::Tensor::copy_()
[2m[36m(pid=45290)[0m     @     0x7f9d15d2c79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45290)[0m     @     0x561f4b1b2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45290)[0m     @     0x561f4b10db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45290)[0m     @     0x561f4b198baf _PyEval_EvalCodeWithName
[2m[36m(pid=45290)[0m     @     0x561f4b199a20 method_vectorcall
[2m[36m(pid=45290)[0m     @     0x561f4b10dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45290)[0m     @     0x561f4b198baf _PyEval_EvalCodeWithName
[2m[36m(pid=45290)[0m     @     0x561f4b199643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45290)[0m     @     0x561f4b10e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45290)[0m     @     0x561f4b198baf _PyEval_EvalCodeWithName
[2m[36m(pid=45290)[0m     @     0x561f4b199643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45290)[0m     @     0x561f4b10e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45290)[0m     @     0x561f4b198baf _PyEval_EvalCodeWithName
[2m[36m(pid=45290)[0m     @     0x561f4b199643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45290)[0m     @     0x561f4b10e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45290)[0m     @     0x561f4b198baf _PyEval_EvalCodeWithName
[2m[36m(pid=45290)[0m     @     0x561f4b199643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45290)[0m     @     0x561f4b10e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45331)[0m     @     0x7fb56258d4f5 at::Tensor::copy_()
[2m[36m(pid=45331)[0m     @     0x7fb56863879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45331)[0m     @     0x556452407fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45331)[0m     @     0x556452362b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45331)[0m     @     0x5564523edbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45331)[0m     @     0x5564523eea20 method_vectorcall
[2m[36m(pid=45331)[0m     @     0x556452362bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45331)[0m     @     0x5564523edbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45331)[0m     @     0x5564523ee643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45331)[0m     @     0x556452363689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45331)[0m     @     0x5564523edbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45331)[0m     @     0x5564523ee643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45331)[0m     @     0x556452363689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45331)[0m     @     0x5564523edbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45331)[0m     @     0x5564523ee643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45331)[0m     @     0x556452363689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45331)[0m     @     0x5564523edbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45331)[0m     @     0x5564523ee643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45331)[0m     @     0x556452363689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45374)[0m     @     0x55cf7df82baf _PyEval_EvalCodeWithName
[2m[36m(pid=45374)[0m     @     0x55cf7df83643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45374)[0m     @     0x55cf7def8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45374)[0m     @     0x55cf7df82baf _PyEval_EvalCodeWithName
[2m[36m(pid=45374)[0m     @     0x55cf7df83643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45374)[0m     @     0x55cf7def8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45374)[0m     @     0x55cf7df82baf _PyEval_EvalCodeWithName
[2m[36m(pid=45374)[0m     @     0x55cf7df83643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45374)[0m     @     0x55cf7def8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45374)[0m     @     0x55cf7df82baf _PyEval_EvalCodeWithName
[2m[36m(pid=45374)[0m     @     0x55cf7df83643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45374)[0m     @     0x55cf7def8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45382)[0m     @     0x7fc1ad2b54f5 at::Tensor::copy_()
[2m[36m(pid=45382)[0m     @     0x7fc1b336079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45382)[0m     @     0x5628d8eeffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45382)[0m     @     0x5628d8e4ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45382)[0m     @     0x5628d8ed5baf _PyEval_EvalCodeWithName
[2m[36m(pid=45382)[0m     @     0x5628d8ed6a20 method_vectorcall
[2m[36m(pid=45382)[0m     @     0x5628d8e4abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45382)[0m     @     0x5628d8ed5baf _PyEval_EvalCodeWithName
[2m[36m(pid=45382)[0m     @     0x5628d8ed6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45382)[0m     @     0x5628d8e4b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45382)[0m     @     0x5628d8ed5baf _PyEval_EvalCodeWithName
[2m[36m(pid=45382)[0m     @     0x5628d8ed6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45382)[0m     @     0x5628d8e4b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45382)[0m     @     0x5628d8ed5baf _PyEval_EvalCodeWithName
[2m[36m(pid=45382)[0m     @     0x5628d8ed6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45382)[0m     @     0x5628d8e4b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45382)[0m     @     0x5628d8ed5baf _PyEval_EvalCodeWithName
[2m[36m(pid=45382)[0m     @     0x5628d8ed6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45382)[0m     @     0x5628d8e4b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45295)[0m     @     0x7fb3df8ed4f5 at::Tensor::copy_()
[2m[36m(pid=45295)[0m     @     0x7fb3e599879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45295)[0m     @     0x55ef76666fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45295)[0m     @     0x55ef765c1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45295)[0m     @     0x55ef7664cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45295)[0m     @     0x55ef7664da20 method_vectorcall
[2m[36m(pid=45295)[0m     @     0x55ef765c1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45295)[0m     @     0x55ef7664cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45295)[0m     @     0x55ef7664d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45295)[0m     @     0x55ef765c2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45295)[0m     @     0x55ef7664cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45295)[0m     @     0x55ef7664d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45295)[0m     @     0x55ef765c2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45295)[0m     @     0x55ef7664cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45295)[0m     @     0x55ef7664d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45295)[0m     @     0x55ef765c2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45295)[0m     @     0x55ef7664cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45295)[0m     @     0x55ef7664d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45295)[0m     @     0x55ef765c2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45373)[0m     @     0x7f7875f0c4f5 at::Tensor::copy_()
[2m[36m(pid=45373)[0m     @     0x7f787bfb779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45373)[0m     @     0x55abfbe90fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45373)[0m     @     0x55abfbdebb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45373)[0m     @     0x55abfbe76baf _PyEval_EvalCodeWithName
[2m[36m(pid=45373)[0m     @     0x55abfbe77a20 method_vectorcall
[2m[36m(pid=45373)[0m     @     0x55abfbdebbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45373)[0m     @     0x55abfbe76baf _PyEval_EvalCodeWithName
[2m[36m(pid=45373)[0m     @     0x55abfbe77643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45373)[0m     @     0x55abfbdec689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45373)[0m     @     0x55abfbe76baf _PyEval_EvalCodeWithName
[2m[36m(pid=45373)[0m     @     0x55abfbe77643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45373)[0m     @     0x55abfbdec689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45373)[0m     @     0x55abfbe76baf _PyEval_EvalCodeWithName
[2m[36m(pid=45373)[0m     @     0x55abfbe77643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45373)[0m     @     0x55abfbdec689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45373)[0m     @     0x55abfbe76baf _PyEval_EvalCodeWithName
[2m[36m(pid=45373)[0m     @     0x55abfbe77643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45373)[0m     @     0x55abfbdec689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45405)[0m     @     0x7eea2cee05a4 at::native::copy_()
[2m[36m(pid=45405)[0m     @     0x7eea2d5cb4f5 at::Tensor::copy_()
[2m[36m(pid=45405)[0m     @     0x7eea2fa9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45366)[0m     @     0x7f9e260eb5a4 at::native::copy_()
[2m[36m(pid=45366)[0m     @     0x7f9e267d64f5 at::Tensor::copy_()
[2m[36m(pid=45366)[0m     @     0x7f9e28ca98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45366)[0m     @     0x7f9e267d64f5 at::Tensor::copy_()
[2m[36m(pid=45366)[0m     @     0x7f9e2c47779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45323)[0m     @     0x7ed5e780f5a4 at::native::copy_()
[2m[36m(pid=45323)[0m     @     0x7ed5e7efa4f5 at::Tensor::copy_()
[2m[36m(pid=45323)[0m     @     0x7ed5ea3cd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45323)[0m     @     0x7ed5e7efa4f5 at::Tensor::copy_()
[2m[36m(pid=45387)[0m     @     0x7fc09f49f4f5 at::Tensor::copy_()
[2m[36m(pid=45387)[0m     @     0x7fc0a554a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45387)[0m     @     0x555ba62f4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45387)[0m     @     0x555ba624fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45387)[0m     @     0x555ba62dabaf _PyEval_EvalCodeWithName
[2m[36m(pid=45387)[0m     @     0x555ba62dba20 method_vectorcall
[2m[36m(pid=45387)[0m     @     0x555ba624fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45387)[0m     @     0x555ba62dabaf _PyEval_EvalCodeWithName
[2m[36m(pid=45387)[0m     @     0x555ba62db643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45387)[0m     @     0x555ba6250689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45387)[0m     @     0x555ba62dabaf _PyEval_EvalCodeWithName
[2m[36m(pid=45387)[0m     @     0x555ba62db643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45387)[0m     @     0x555ba6250689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45387)[0m     @     0x555ba62dabaf _PyEval_EvalCodeWithName
[2m[36m(pid=45387)[0m     @     0x555ba62db643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45387)[0m     @     0x555ba6250689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45387)[0m     @     0x555ba62dabaf _PyEval_EvalCodeWithName
[2m[36m(pid=45387)[0m     @     0x555ba62db643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45387)[0m     @     0x555ba6250689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45306)[0m     @     0x7fca38f604f5 at::Tensor::copy_()
[2m[36m(pid=45306)[0m     @     0x7fca3b4338de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45306)[0m     @     0x7fca38f604f5 at::Tensor::copy_()
[2m[36m(pid=45306)[0m     @     0x7fca3f00b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45306)[0m     @     0x55a799074fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45306)[0m     @     0x55a798fcfb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45306)[0m     @     0x55a79905abaf _PyEval_EvalCodeWithName
[2m[36m(pid=45306)[0m     @     0x55a79905ba20 method_vectorcall
[2m[36m(pid=45306)[0m     @     0x55a798fcfbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45306)[0m     @     0x55a79905abaf _PyEval_EvalCodeWithName
[2m[36m(pid=45306)[0m     @     0x55a79905b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45306)[0m     @     0x55a798fd0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45306)[0m     @     0x55a79905abaf _PyEval_EvalCodeWithName
[2m[36m(pid=45306)[0m     @     0x55a79905b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45306)[0m     @     0x55a798fd0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45306)[0m     @     0x55a79905abaf _PyEval_EvalCodeWithName
[2m[36m(pid=45306)[0m     @     0x55a79905b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45306)[0m     @     0x55a798fd0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45306)[0m     @     0x55a79905abaf _PyEval_EvalCodeWithName
[2m[36m(pid=45306)[0m     @     0x55a79905b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45306)[0m     @     0x55a798fd0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45300)[0m     @     0x7ef7353ba4f5 at::Tensor::copy_()
[2m[36m(pid=45300)[0m     @     0x7ef73b46579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45300)[0m     @     0x5653b72adfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45300)[0m     @     0x5653b7208b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45300)[0m     @     0x5653b7293baf _PyEval_EvalCodeWithName
[2m[36m(pid=45300)[0m     @     0x5653b7294a20 method_vectorcall
[2m[36m(pid=45300)[0m     @     0x5653b7208bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45300)[0m     @     0x5653b7293baf _PyEval_EvalCodeWithName
[2m[36m(pid=45300)[0m     @     0x5653b7294643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45300)[0m     @     0x5653b7209689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45300)[0m     @     0x5653b7293baf _PyEval_EvalCodeWithName
[2m[36m(pid=45300)[0m     @     0x5653b7294643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45300)[0m     @     0x5653b7209689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45300)[0m     @     0x5653b7293baf _PyEval_EvalCodeWithName
[2m[36m(pid=45300)[0m     @     0x5653b7294643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45300)[0m     @     0x5653b7209689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45300)[0m     @     0x5653b7293baf _PyEval_EvalCodeWithName
[2m[36m(pid=45300)[0m     @     0x5653b7294643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45300)[0m     @     0x5653b7209689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45324)[0m     @     0x7fab976b64f5 at::Tensor::copy_()
[2m[36m(pid=45324)[0m     @     0x7fab99b898de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45324)[0m     @     0x7fab976b64f5 at::Tensor::copy_()
[2m[36m(pid=45324)[0m     @     0x7fab9d76179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45324)[0m     @     0x55cb54251fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45324)[0m     @     0x55cb541acb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45324)[0m     @     0x55cb54237baf _PyEval_EvalCodeWithName
[2m[36m(pid=45324)[0m     @     0x55cb54238a20 method_vectorcall
[2m[36m(pid=45324)[0m     @     0x55cb541acbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45324)[0m     @     0x55cb54237baf _PyEval_EvalCodeWithName
[2m[36m(pid=45324)[0m     @     0x55cb54238643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45324)[0m     @     0x55cb541ad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45324)[0m     @     0x55cb54237baf _PyEval_EvalCodeWithName
[2m[36m(pid=45324)[0m     @     0x55cb54238643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45324)[0m     @     0x55cb541ad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45324)[0m     @     0x55cb54237baf _PyEval_EvalCodeWithName
[2m[36m(pid=45324)[0m     @     0x55cb54238643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45324)[0m     @     0x55cb541ad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45324)[0m     @     0x55cb54237baf _PyEval_EvalCodeWithName
[2m[36m(pid=45324)[0m     @     0x55cb54238643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45324)[0m     @     0x55cb541ad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45289)[0m     @     0x556ca86c7baf _PyEval_EvalCodeWithName
[2m[36m(pid=45289)[0m     @     0x556ca86c8a20 method_vectorcall
[2m[36m(pid=45289)[0m     @     0x556ca863cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45289)[0m     @     0x556ca86c7baf _PyEval_EvalCodeWithName
[2m[36m(pid=45289)[0m     @     0x556ca86c8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45289)[0m     @     0x556ca863d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45289)[0m     @     0x556ca86c7baf _PyEval_EvalCodeWithName
[2m[36m(pid=45289)[0m     @     0x556ca86c8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45289)[0m     @     0x556ca863d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45289)[0m     @     0x556ca86c7baf _PyEval_EvalCodeWithName
[2m[36m(pid=45289)[0m     @     0x556ca86c8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45289)[0m     @     0x556ca863d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45289)[0m     @     0x556ca86c7baf _PyEval_EvalCodeWithName
[2m[36m(pid=45289)[0m     @     0x556ca86c8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45289)[0m     @     0x556ca863d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45350)[0m     @     0x7f658e9405a4 at::native::copy_()
[2m[36m(pid=45350)[0m     @     0x7f658f02b4f5 at::Tensor::copy_()
[2m[36m(pid=45350)[0m     @     0x7f65914fe8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45350)[0m     @     0x7f658f02b4f5 at::Tensor::copy_()
[2m[36m(pid=45350)[0m     @     0x7f65950d679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45350)[0m     @     0x5571dfa42fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45350)[0m     @     0x5571df99db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45350)[0m     @     0x5571dfa28baf _PyEval_EvalCodeWithName
[2m[36m(pid=45350)[0m     @     0x5571dfa29a20 method_vectorcall
[2m[36m(pid=45350)[0m     @     0x5571df99dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45350)[0m     @     0x5571dfa28baf _PyEval_EvalCodeWithName
[2m[36m(pid=45350)[0m     @     0x5571dfa29643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45350)[0m     @     0x5571df99e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45350)[0m     @     0x5571dfa28baf _PyEval_EvalCodeWithName
[2m[36m(pid=45350)[0m     @     0x5571dfa29643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45350)[0m     @     0x5571df99e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45350)[0m     @     0x5571dfa28baf _PyEval_EvalCodeWithName
[2m[36m(pid=45350)[0m     @     0x5571dfa29643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45350)[0m     @     0x5571df99e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45350)[0m     @     0x5571dfa28baf _PyEval_EvalCodeWithName
[2m[36m(pid=45350)[0m     @     0x5571dfa29643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45350)[0m     @     0x5571df99e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45301)[0m     @     0x7f4665a7a5a4 at::native::copy_()
[2m[36m(pid=45301)[0m     @     0x7f46661654f5 at::Tensor::copy_()
[2m[36m(pid=45301)[0m     @     0x7f46686388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45301)[0m     @     0x7f46661654f5 at::Tensor::copy_()
[2m[36m(pid=45301)[0m     @     0x7f466c21079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45301)[0m     @     0x55ca23afcfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45301)[0m     @     0x55ca23a57b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45301)[0m     @     0x55ca23ae2baf _PyEval_EvalCodeWithName
[2m[36m(pid=45301)[0m     @     0x55ca23ae3a20 method_vectorcall
[2m[36m(pid=45301)[0m     @     0x55ca23a57bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45301)[0m     @     0x55ca23ae2baf _PyEval_EvalCodeWithName
[2m[36m(pid=45301)[0m     @     0x55ca23ae3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45301)[0m     @     0x55ca23a58689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45301)[0m     @     0x55ca23ae2baf _PyEval_EvalCodeWithName
[2m[36m(pid=45301)[0m     @     0x55ca23ae3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45301)[0m     @     0x55ca23a58689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45301)[0m     @     0x55ca23ae2baf _PyEval_EvalCodeWithName
[2m[36m(pid=45301)[0m     @     0x55ca23ae3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45301)[0m     @     0x55ca23a58689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45301)[0m     @     0x55ca23ae2baf _PyEval_EvalCodeWithName
[2m[36m(pid=45301)[0m     @     0x55ca23ae3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45301)[0m     @     0x55ca23a58689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45376)[0m     @     0x7ed505e3a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45376)[0m     @     0x7ed5039674f5 at::Tensor::copy_()
[2m[36m(pid=45376)[0m     @     0x7ed509a1279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45376)[0m     @     0x562d03c79fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45376)[0m     @     0x562d03bd4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45376)[0m     @     0x562d03c5fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45376)[0m     @     0x562d03c60a20 method_vectorcall
[2m[36m(pid=45376)[0m     @     0x562d03bd4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45376)[0m     @     0x562d03c5fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45376)[0m     @     0x562d03c60643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45376)[0m     @     0x562d03bd5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45376)[0m     @     0x562d03c5fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45376)[0m     @     0x562d03c60643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45376)[0m     @     0x562d03bd5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45376)[0m     @     0x562d03c5fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45376)[0m     @     0x562d03c60643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45376)[0m     @     0x562d03bd5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45376)[0m     @     0x562d03c5fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45376)[0m     @     0x562d03c60643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45376)[0m     @     0x562d03bd5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45302)[0m     @     0x7f89a69c44f5 at::Tensor::copy_()
[2m[36m(pid=45302)[0m     @     0x7f89a8e978de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45302)[0m     @     0x7f89a69c44f5 at::Tensor::copy_()
[2m[36m(pid=45302)[0m     @     0x7f89aca6f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45302)[0m     @     0x564a5e23dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45302)[0m     @     0x564a5e198b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45302)[0m     @     0x564a5e223baf _PyEval_EvalCodeWithName
[2m[36m(pid=45302)[0m     @     0x564a5e224a20 method_vectorcall
[2m[36m(pid=45302)[0m     @     0x564a5e198bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45302)[0m     @     0x564a5e223baf _PyEval_EvalCodeWithName
[2m[36m(pid=45302)[0m     @     0x564a5e224643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45302)[0m     @     0x564a5e199689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45302)[0m     @     0x564a5e223baf _PyEval_EvalCodeWithName
[2m[36m(pid=45302)[0m     @     0x564a5e224643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45302)[0m     @     0x564a5e199689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45302)[0m     @     0x564a5e223baf _PyEval_EvalCodeWithName
[2m[36m(pid=45302)[0m     @     0x564a5e224643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45302)[0m     @     0x564a5e199689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45302)[0m     @     0x564a5e223baf _PyEval_EvalCodeWithName
[2m[36m(pid=45302)[0m     @     0x564a5e224643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45302)[0m     @     0x564a5e199689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45396)[0m     @     0x7f36611b88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45396)[0m     @     0x7f365ece54f5 at::Tensor::copy_()
[2m[36m(pid=45396)[0m     @     0x7f3664d9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45396)[0m     @     0x562e07795fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45396)[0m     @     0x562e076f0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45396)[0m     @     0x562e0777bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45396)[0m     @     0x562e0777ca20 method_vectorcall
[2m[36m(pid=45396)[0m     @     0x562e076f0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45396)[0m     @     0x562e0777bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45396)[0m     @     0x562e0777c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45396)[0m     @     0x562e076f1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45396)[0m     @     0x562e0777bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45396)[0m     @     0x562e0777c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45396)[0m     @     0x562e076f1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45396)[0m     @     0x562e0777bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45396)[0m     @     0x562e0777c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45396)[0m     @     0x562e076f1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45396)[0m     @     0x562e0777bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45396)[0m     @     0x562e0777c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45396)[0m     @     0x562e076f1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45326)[0m     @     0x7ef110e0b4f5 at::Tensor::copy_()
[2m[36m(pid=45326)[0m     @     0x7ef1132de8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45326)[0m     @     0x7ef110e0b4f5 at::Tensor::copy_()
[2m[36m(pid=45326)[0m     @     0x7ef116eb679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45326)[0m     @     0x5576b2e55fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45326)[0m     @     0x5576b2db0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45326)[0m     @     0x5576b2e3bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45326)[0m     @     0x5576b2e3ca20 method_vectorcall
[2m[36m(pid=45326)[0m     @     0x5576b2db0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45326)[0m     @     0x5576b2e3bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45326)[0m     @     0x5576b2e3c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45326)[0m     @     0x5576b2db1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45326)[0m     @     0x5576b2e3bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45326)[0m     @     0x5576b2e3c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45326)[0m     @     0x5576b2db1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45326)[0m     @     0x5576b2e3bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45326)[0m     @     0x5576b2e3c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45326)[0m     @     0x5576b2db1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45326)[0m     @     0x5576b2e3bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45326)[0m     @     0x5576b2e3c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45326)[0m     @     0x5576b2db1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45319)[0m     @     0x7f0416af55a4 at::native::copy_()
[2m[36m(pid=45319)[0m     @     0x7f04171e04f5 at::Tensor::copy_()
[2m[36m(pid=45319)[0m     @     0x7f04196b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45319)[0m     @     0x7f04171e04f5 at::Tensor::copy_()
[2m[36m(pid=45319)[0m     @     0x7f041d28b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45319)[0m     @     0x55612c6b4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45319)[0m     @     0x55612c60fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45319)[0m     @     0x55612c69abaf _PyEval_EvalCodeWithName
[2m[36m(pid=45319)[0m     @     0x55612c69ba20 method_vectorcall
[2m[36m(pid=45319)[0m     @     0x55612c60fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45319)[0m     @     0x55612c69abaf _PyEval_EvalCodeWithName
[2m[36m(pid=45319)[0m     @     0x55612c69b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45319)[0m     @     0x55612c610689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45319)[0m     @     0x55612c69abaf _PyEval_EvalCodeWithName
[2m[36m(pid=45319)[0m     @     0x55612c69b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45319)[0m     @     0x55612c610689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45319)[0m     @     0x55612c69abaf _PyEval_EvalCodeWithName
[2m[36m(pid=45319)[0m     @     0x55612c69b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45319)[0m     @     0x55612c610689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45319)[0m     @     0x55612c69abaf _PyEval_EvalCodeWithName
[2m[36m(pid=45319)[0m     @     0x55612c69b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45319)[0m     @     0x55612c610689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45320)[0m     @     0x7f3ee41244f5 at::Tensor::copy_()
[2m[36m(pid=45320)[0m     @     0x7f3eea1cf79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45320)[0m     @     0x56372fe21fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45320)[0m     @     0x56372fd7cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45320)[0m     @     0x56372fe07baf _PyEval_EvalCodeWithName
[2m[36m(pid=45320)[0m     @     0x56372fe08a20 method_vectorcall
[2m[36m(pid=45320)[0m     @     0x56372fd7cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45320)[0m     @     0x56372fe07baf _PyEval_EvalCodeWithName
[2m[36m(pid=45320)[0m     @     0x56372fe08643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45320)[0m     @     0x56372fd7d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45320)[0m     @     0x56372fe07baf _PyEval_EvalCodeWithName
[2m[36m(pid=45320)[0m     @     0x56372fe08643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45320)[0m     @     0x56372fd7d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45320)[0m     @     0x56372fe07baf _PyEval_EvalCodeWithName
[2m[36m(pid=45320)[0m     @     0x56372fe08643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45320)[0m     @     0x56372fd7d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45320)[0m     @     0x56372fe07baf _PyEval_EvalCodeWithName
[2m[36m(pid=45320)[0m     @     0x56372fe08643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45320)[0m     @     0x56372fd7d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45414)[0m     @     0x7f4beacb479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45414)[0m     @     0x5560e218afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45414)[0m     @     0x5560e20e5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45414)[0m     @     0x5560e2170baf _PyEval_EvalCodeWithName
[2m[36m(pid=45414)[0m     @     0x5560e2171a20 method_vectorcall
[2m[36m(pid=45414)[0m     @     0x5560e20e5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45414)[0m     @     0x5560e2170baf _PyEval_EvalCodeWithName
[2m[36m(pid=45414)[0m     @     0x5560e2171643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45414)[0m     @     0x5560e20e6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45414)[0m     @     0x5560e2170baf _PyEval_EvalCodeWithName
[2m[36m(pid=45414)[0m     @     0x5560e2171643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45414)[0m     @     0x5560e20e6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45414)[0m     @     0x5560e2170baf _PyEval_EvalCodeWithName
[2m[36m(pid=45414)[0m     @     0x5560e2171643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45414)[0m     @     0x5560e20e6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45414)[0m     @     0x5560e2170baf _PyEval_EvalCodeWithName
[2m[36m(pid=45414)[0m     @     0x5560e2171643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45414)[0m     @     0x5560e20e6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45303)[0m     @     0x7f05f20ba4f5 at::Tensor::copy_()
[2m[36m(pid=45303)[0m     @     0x7f05f458d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45303)[0m     @     0x7f05f20ba4f5 at::Tensor::copy_()
[2m[36m(pid=45303)[0m     @     0x7f05f816579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45303)[0m     @     0x55c6a32cafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45303)[0m     @     0x55c6a3225b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45303)[0m     @     0x55c6a32b0baf _PyEval_EvalCodeWithName
[2m[36m(pid=45303)[0m     @     0x55c6a32b1a20 method_vectorcall
[2m[36m(pid=45303)[0m     @     0x55c6a3225bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45303)[0m     @     0x55c6a32b0baf _PyEval_EvalCodeWithName
[2m[36m(pid=45303)[0m     @     0x55c6a32b1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45303)[0m     @     0x55c6a3226689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45303)[0m     @     0x55c6a32b0baf _PyEval_EvalCodeWithName
[2m[36m(pid=45303)[0m     @     0x55c6a32b1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45303)[0m     @     0x55c6a3226689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45303)[0m     @     0x55c6a32b0baf _PyEval_EvalCodeWithName
[2m[36m(pid=45303)[0m     @     0x55c6a32b1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45303)[0m     @     0x55c6a3226689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45303)[0m     @     0x55c6a32b0baf _PyEval_EvalCodeWithName
[2m[36m(pid=45303)[0m     @     0x55c6a32b1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45303)[0m     @     0x55c6a3226689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45292)[0m     @     0x7f06ee49179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45292)[0m     @     0x55acc66cefd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45292)[0m     @     0x55acc6629b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45292)[0m     @     0x55acc66b4baf _PyEval_EvalCodeWithName
[2m[36m(pid=45292)[0m     @     0x55acc66b5a20 method_vectorcall
[2m[36m(pid=45292)[0m     @     0x55acc6629bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45292)[0m     @     0x55acc66b4baf _PyEval_EvalCodeWithName
[2m[36m(pid=45292)[0m     @     0x55acc66b5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45292)[0m     @     0x55acc662a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45292)[0m     @     0x55acc66b4baf _PyEval_EvalCodeWithName
[2m[36m(pid=45292)[0m     @     0x55acc66b5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45292)[0m     @     0x55acc662a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45292)[0m     @     0x55acc66b4baf _PyEval_EvalCodeWithName
[2m[36m(pid=45292)[0m     @     0x55acc66b5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45292)[0m     @     0x55acc662a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45292)[0m     @     0x55acc66b4baf _PyEval_EvalCodeWithName
[2m[36m(pid=45292)[0m     @     0x55acc66b5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45292)[0m     @     0x55acc662a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45291)[0m     @     0x7efaddc4b4f5 at::Tensor::copy_()
[2m[36m(pid=45291)[0m     @     0x7efae3cf679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45291)[0m     @     0x55b10724afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45291)[0m     @     0x55b1071a5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45291)[0m     @     0x55b107230baf _PyEval_EvalCodeWithName
[2m[36m(pid=45291)[0m     @     0x55b107231a20 method_vectorcall
[2m[36m(pid=45291)[0m     @     0x55b1071a5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45291)[0m     @     0x55b107230baf _PyEval_EvalCodeWithName
[2m[36m(pid=45291)[0m     @     0x55b107231643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45291)[0m     @     0x55b1071a6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45291)[0m     @     0x55b107230baf _PyEval_EvalCodeWithName
[2m[36m(pid=45291)[0m     @     0x55b107231643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45291)[0m     @     0x55b1071a6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45291)[0m     @     0x55b107230baf _PyEval_EvalCodeWithName
[2m[36m(pid=45291)[0m     @     0x55b107231643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45291)[0m     @     0x55b1071a6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45291)[0m     @     0x55b107230baf _PyEval_EvalCodeWithName
[2m[36m(pid=45291)[0m     @     0x55b107231643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45291)[0m     @     0x55b1071a6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45403)[0m     @     0x55fb95c02baf _PyEval_EvalCodeWithName
[2m[36m(pid=45403)[0m     @     0x55fb95c03643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45403)[0m     @     0x55fb95b78689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45403)[0m     @     0x55fb95c02baf _PyEval_EvalCodeWithName
[2m[36m(pid=45403)[0m     @     0x55fb95c03643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45403)[0m     @     0x55fb95b78689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45403)[0m     @     0x55fb95c02baf _PyEval_EvalCodeWithName
[2m[36m(pid=45403)[0m     @     0x55fb95c03643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45403)[0m     @     0x55fb95b78689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45403)[0m     @     0x55fb95c02baf _PyEval_EvalCodeWithName
[2m[36m(pid=45403)[0m     @     0x55fb95c03643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45403)[0m     @     0x55fb95b78689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45364)[0m     @     0x7f48af8df4f5 at::Tensor::copy_()
[2m[36m(pid=45364)[0m     @     0x7f48b1db28de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45364)[0m     @     0x7f48af8df4f5 at::Tensor::copy_()
[2m[36m(pid=45364)[0m     @     0x7f48b598a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45364)[0m     @     0x559230ac8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45364)[0m     @     0x559230a23b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45364)[0m     @     0x559230aaebaf _PyEval_EvalCodeWithName
[2m[36m(pid=45364)[0m     @     0x559230aafa20 method_vectorcall
[2m[36m(pid=45364)[0m     @     0x559230a23bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45364)[0m     @     0x559230aaebaf _PyEval_EvalCodeWithName
[2m[36m(pid=45364)[0m     @     0x559230aaf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45364)[0m     @     0x559230a24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45364)[0m     @     0x559230aaebaf _PyEval_EvalCodeWithName
[2m[36m(pid=45364)[0m     @     0x559230aaf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45364)[0m     @     0x559230a24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45364)[0m     @     0x559230aaebaf _PyEval_EvalCodeWithName
[2m[36m(pid=45364)[0m     @     0x559230aaf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45364)[0m     @     0x559230a24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45364)[0m     @     0x559230aaebaf _PyEval_EvalCodeWithName
[2m[36m(pid=45364)[0m     @     0x559230aaf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45364)[0m     @     0x559230a24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45294)[0m     @     0x7ef1049795a4 at::native::copy_()
[2m[36m(pid=45294)[0m     @     0x7ef1050644f5 at::Tensor::copy_()
[2m[36m(pid=45294)[0m     @     0x7ef1075378de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=45294)[0m     @     0x7ef1050644f5 at::Tensor::copy_()
[2m[36m(pid=45299)[0m     @     0x55c4fc0a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45299)[0m     @     0x55c4fc015689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45299)[0m     @     0x55c4fc09fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45299)[0m     @     0x55c4fc0a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45299)[0m     @     0x55c4fc015689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45299)[0m     @     0x55c4fc09fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45299)[0m     @     0x55c4fc0a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45299)[0m     @     0x55c4fc015689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45299)[0m     @     0x55c4fc09fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45299)[0m     @     0x55c4fc0a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45299)[0m     @     0x55c4fc015689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45408)[0m     @     0x557b1e01ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=45408)[0m     @     0x557b1e01f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45408)[0m     @     0x557b1df94689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45408)[0m     @     0x557b1e01ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=45408)[0m     @     0x557b1e01f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45408)[0m     @     0x557b1df94689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45381)[0m     @     0x7f08343354f5 at::Tensor::copy_()
[2m[36m(pid=45381)[0m     @     0x7f083a3e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45381)[0m     @     0x55c01166dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45381)[0m     @     0x55c0115c8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45381)[0m     @     0x55c011653baf _PyEval_EvalCodeWithName
[2m[36m(pid=45381)[0m     @     0x55c011654a20 method_vectorcall
[2m[36m(pid=45381)[0m     @     0x55c0115c8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45381)[0m     @     0x55c011653baf _PyEval_EvalCodeWithName
[2m[36m(pid=45381)[0m     @     0x55c011654643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45381)[0m     @     0x55c0115c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45381)[0m     @     0x55c011653baf _PyEval_EvalCodeWithName
[2m[36m(pid=45381)[0m     @     0x55c011654643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45381)[0m     @     0x55c0115c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45381)[0m     @     0x55c011653baf _PyEval_EvalCodeWithName
[2m[36m(pid=45381)[0m     @     0x55c011654643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45381)[0m     @     0x55c0115c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45381)[0m     @     0x55c011653baf _PyEval_EvalCodeWithName
[2m[36m(pid=45381)[0m     @     0x55c011654643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45381)[0m     @     0x55c0115c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45405)[0m     @     0x7eea2d5cb4f5 at::Tensor::copy_()
[2m[36m(pid=45405)[0m     @     0x7eea3367679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45405)[0m     @     0x557cd1c08fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45405)[0m     @     0x557cd1b63b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45405)[0m     @     0x557cd1beebaf _PyEval_EvalCodeWithName
[2m[36m(pid=45405)[0m     @     0x557cd1befa20 method_vectorcall
[2m[36m(pid=45405)[0m     @     0x557cd1b63bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45405)[0m     @     0x557cd1beebaf _PyEval_EvalCodeWithName
[2m[36m(pid=45405)[0m     @     0x557cd1bef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45405)[0m     @     0x557cd1b64689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45405)[0m     @     0x557cd1beebaf _PyEval_EvalCodeWithName
[2m[36m(pid=45405)[0m     @     0x557cd1bef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45405)[0m     @     0x557cd1b64689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45405)[0m     @     0x557cd1beebaf _PyEval_EvalCodeWithName
[2m[36m(pid=45405)[0m     @     0x557cd1bef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45405)[0m     @     0x557cd1b64689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45405)[0m     @     0x557cd1beebaf _PyEval_EvalCodeWithName
[2m[36m(pid=45405)[0m     @     0x557cd1bef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45405)[0m     @     0x557cd1b64689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45366)[0m     @     0x560772b29fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45366)[0m     @     0x560772a84b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45366)[0m     @     0x560772b0fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45366)[0m     @     0x560772b10a20 method_vectorcall
[2m[36m(pid=45366)[0m     @     0x560772a84bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45366)[0m     @     0x560772b0fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45366)[0m     @     0x560772b10643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45366)[0m     @     0x560772a85689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45366)[0m     @     0x560772b0fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45366)[0m     @     0x560772b10643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45366)[0m     @     0x560772a85689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45366)[0m     @     0x560772b0fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45366)[0m     @     0x560772b10643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45366)[0m     @     0x560772a85689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45366)[0m     @     0x560772b0fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=45366)[0m     @     0x560772b10643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45366)[0m     @     0x560772a85689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45323)[0m     @     0x7ed5edfa579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45323)[0m     @     0x56300695afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45323)[0m     @     0x5630068b5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45323)[0m     @     0x563006940baf _PyEval_EvalCodeWithName
[2m[36m(pid=45323)[0m     @     0x563006941a20 method_vectorcall
[2m[36m(pid=45323)[0m     @     0x5630068b5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45323)[0m     @     0x563006940baf _PyEval_EvalCodeWithName
[2m[36m(pid=45323)[0m     @     0x563006941643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45323)[0m     @     0x5630068b6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45323)[0m     @     0x563006940baf _PyEval_EvalCodeWithName
[2m[36m(pid=45323)[0m     @     0x563006941643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45323)[0m     @     0x5630068b6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45323)[0m     @     0x563006940baf _PyEval_EvalCodeWithName
[2m[36m(pid=45323)[0m     @     0x563006941643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45323)[0m     @     0x5630068b6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45323)[0m     @     0x563006940baf _PyEval_EvalCodeWithName
[2m[36m(pid=45323)[0m     @     0x563006941643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45323)[0m     @     0x5630068b6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45294)[0m     @     0x7ef10b10f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=45294)[0m     @     0x556991efafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=45294)[0m     @     0x556991e55b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45294)[0m     @     0x556991ee0baf _PyEval_EvalCodeWithName
[2m[36m(pid=45294)[0m     @     0x556991ee1a20 method_vectorcall
[2m[36m(pid=45294)[0m     @     0x556991e55bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45294)[0m     @     0x556991ee0baf _PyEval_EvalCodeWithName
[2m[36m(pid=45294)[0m     @     0x556991ee1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45294)[0m     @     0x556991e56689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45294)[0m     @     0x556991ee0baf _PyEval_EvalCodeWithName
[2m[36m(pid=45294)[0m     @     0x556991ee1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45294)[0m     @     0x556991e56689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45294)[0m     @     0x556991ee0baf _PyEval_EvalCodeWithName
[2m[36m(pid=45294)[0m     @     0x556991ee1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45294)[0m     @     0x556991e56689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=45294)[0m     @     0x556991ee0baf _PyEval_EvalCodeWithName
[2m[36m(pid=45294)[0m     @     0x556991ee1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=45294)[0m     @     0x556991e56689 _PyEval_EvalFrameDefault.cold.2792
2020-11-05 10:09:29,396	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff0314ce3001000000.
2020-11-05 10:09:29,396	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff9f3cc57a01000000.
2020-11-05 10:09:29,397	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffe0497dac01000000.
2020-11-05 10:09:29,397	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff59d91ef301000000.
2020-11-05 10:09:29,400	ERROR trial_runner.py:567 -- Trial PPO_jss_env_f9ba8_00000: Error processing event.
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py", line 515, in _process_trial
    result = self.trial_executor.fetch_result(trial)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py", line 488, in fetch_result
    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/worker.py", line 1428, in get
    raise value.as_instanceof_cause()
ray.exceptions.RayTaskError: [36mray::PPO.train()[39m (pid=45428, ip=172.17.0.4)
  File "python/ray/_raylet.pyx", line 484, in ray._raylet.execute_task
  File "python/ray/_raylet.pyx", line 438, in ray._raylet.execute_task.function_executor
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 516, in train
    raise e
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 505, in train
    result = Trainable.train(self)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py", line 336, in train
    result = self.step()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py", line 134, in step
    res = next(self.train_exec_impl)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 756, in __next__
    return next(self.built_iterator)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 876, in apply_flatten
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 828, in add_wait_hooks
    item = next(it)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 466, in base_iterator
    actor_set.init_actors()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 1238, in init_actors
    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
== Status ==
Memory usage on this node: 23.8/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.15 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_f9ba8_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_f9ba8_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_f9ba8_00000_0_2020-11-05_10-09-22/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+
2020-11-05 10:09:29,408	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff90aded9101000000.

2020-11-05 10:09:29,408	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff43fb47bd01000000.
2020-11-05 10:09:29,410	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff821ddf4301000000.
2020-11-05 10:09:29,410	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff4e242e9f01000000.
== Status ==
Memory usage on this node: 23.6/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.15 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_f9ba8_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_f9ba8_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_f9ba8_00000_0_2020-11-05_10-09-22/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

Traceback (most recent call last):
  File "train.py", line 74, in <module>
    train_func()
  File "train.py", line 56, in train_func
    analysis = tune.run(PPOTrainer, config=config, stop=stop, name="ppo-jss")
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py", line 427, in run
    raise TuneError("Trials did not complete", incomplete_trials)
ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_f9ba8_00000])
