2020-11-05 10:41:37,024	INFO services.py:1164 -- View the Ray dashboard at [1m[32mhttp://127.0.0.1:8265[39m[22m
== Status ==
Memory usage on this node: 12.7/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 80/80 CPUs, 1/1 GPUs, 0.0/558.11 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 RUNNING)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_7bb99_00000 | RUNNING  |       |
+-------------------------+----------+-------+


[2m[36m(pid=36536)[0m 2020-11-05 10:41:39,797	INFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.
[2m[36m(pid=36536)[0m /root/miniconda3/lib/python3.8/site-packages/torch/cuda/__init__.py:125: UserWarning: 
[2m[36m(pid=36536)[0m GeForce RTX 2080 Ti with CUDA capability sm_75 is not compatible with the current PyTorch installation.
[2m[36m(pid=36536)[0m The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 compute_37.
[2m[36m(pid=36536)[0m If you want to use the GeForce RTX 2080 Ti GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/
[2m[36m(pid=36536)[0m 
[2m[36m(pid=36536)[0m   warnings.warn(incompatible_device_warn.format(device_name, capability, " ".join(arch_list), device_name))
[2m[36m(pid=36429)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36429)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36429)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36534)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36534)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36534)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36534)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36534)[0m *** SIGSEGV (@0x0) received by PID 36534 (TID 0x7f5274eff700) from PID 0; stack trace: ***
[2m[36m(pid=36534)[0m     @     0x7f5274ad8390 (unknown)
[2m[36m(pid=36534)[0m     @     0x7f237497ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36534)[0m     @     0x7f23740aa7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36534)[0m     @     0x7f23740ad8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36534)[0m     @     0x7f23740adad3 at::TensorIterator::for_each()
[2m[36m(pid=36534)[0m     @     0x7f23740add91 at::TensorIterator::for_each()
[2m[36m(pid=36534)[0m     @     0x7f2374990b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36534)[0m     @     0x7f23749b3c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36434)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36434)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36434)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36518)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36518)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36518)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36500)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36500)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36500)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36485)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36485)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36485)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36485)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36485)[0m *** SIGSEGV (@0x0) received by PID 36485 (TID 0x7f54e8660700) from PID 0; stack trace: ***
[2m[36m(pid=36485)[0m     @     0x7f54e8239390 (unknown)
[2m[36m(pid=36485)[0m     @     0x7f25e80cdf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36485)[0m     @     0x7f25e77f87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36485)[0m     @     0x7f25e77fb8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36485)[0m     @     0x7f25e77fbad3 at::TensorIterator::for_each()
[2m[36m(pid=36490)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36490)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36490)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36490)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36490)[0m *** SIGSEGV (@0x0) received by PID 36490 (TID 0x7f1993229700) from PID 0; stack trace: ***
[2m[36m(pid=36490)[0m     @     0x7f1992e02390 (unknown)
[2m[36m(pid=36490)[0m     @     0x7eea92db0f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36490)[0m     @     0x7eea924db7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36490)[0m     @     0x7eea924de8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36490)[0m     @     0x7eea924dead3 at::TensorIterator::for_each()
[2m[36m(pid=36490)[0m     @     0x7eea924ded91 at::TensorIterator::for_each()
[2m[36m(pid=36490)[0m     @     0x7eea92dc1b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36490)[0m     @     0x7eea92de4c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36514)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36514)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36514)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36514)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36514)[0m *** SIGSEGV (@0x0) received by PID 36514 (TID 0x7fc433cdc700) from PID 0; stack trace: ***
[2m[36m(pid=36514)[0m     @     0x7fc4338b5390 (unknown)
[2m[36m(pid=36514)[0m     @     0x7f953384cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36514)[0m     @     0x7f9532f777db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36514)[0m     @     0x7f9532f7a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36514)[0m     @     0x7f9532f7aad3 at::TensorIterator::for_each()
[2m[36m(pid=36514)[0m     @     0x7f9532f7ad91 at::TensorIterator::for_each()
[2m[36m(pid=36514)[0m     @     0x7f953385db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36514)[0m     @     0x7f9533880c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36526)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36526)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36526)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36526)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36526)[0m *** SIGSEGV (@0x0) received by PID 36526 (TID 0x7fedfffdc700) from PID 0; stack trace: ***
[2m[36m(pid=36526)[0m     @     0x7fedffbb5390 (unknown)
[2m[36m(pid=36526)[0m     @     0x7fbeffaf5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36526)[0m     @     0x7fbeff2207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36526)[0m     @     0x7fbeff2238f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36526)[0m     @     0x7fbeff223ad3 at::TensorIterator::for_each()
[2m[36m(pid=36554)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36554)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36554)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36554)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36554)[0m *** SIGSEGV (@0x0) received by PID 36554 (TID 0x7fd8c23d3700) from PID 0; stack trace: ***
[2m[36m(pid=36554)[0m     @     0x7fd8c1fac390 (unknown)
[2m[36m(pid=36554)[0m     @     0x7fa9c1e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36554)[0m     @     0x7fa9c154f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36554)[0m     @     0x7fa9c15528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36554)[0m     @     0x7fa9c1552ad3 at::TensorIterator::for_each()
[2m[36m(pid=36554)[0m     @     0x7fa9c1552d91 at::TensorIterator::for_each()
[2m[36m(pid=36554)[0m     @     0x7fa9c1e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36554)[0m     @     0x7fa9c1e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36431)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36431)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36431)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36431)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36431)[0m *** SIGSEGV (@0x0) received by PID 36431 (TID 0x7f3c55cc8700) from PID 0; stack trace: ***
[2m[36m(pid=36431)[0m     @     0x7f3c558a1390 (unknown)
[2m[36m(pid=36431)[0m     @     0x7f0d557f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36431)[0m     @     0x7f0d54f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36431)[0m     @     0x7f0d54f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36431)[0m     @     0x7f0d54f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=36431)[0m     @     0x7f0d54f27d91 at::TensorIterator::for_each()
[2m[36m(pid=36431)[0m     @     0x7f0d5580ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36431)[0m     @     0x7f0d5582dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36530)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36530)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36530)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36530)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36530)[0m *** SIGSEGV (@0x0) received by PID 36530 (TID 0x7fc2f5af4700) from PID 0; stack trace: ***
[2m[36m(pid=36530)[0m     @     0x7fc2f56cd390 (unknown)
[2m[36m(pid=36530)[0m     @     0x7f93f5674f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36530)[0m     @     0x7f93f4d9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36530)[0m     @     0x7f93f4da28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36530)[0m     @     0x7f93f4da2ad3 at::TensorIterator::for_each()
[2m[36m(pid=36545)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36545)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36545)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36545)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36545)[0m *** SIGSEGV (@0x0) received by PID 36545 (TID 0x7f2aebe70700) from PID 0; stack trace: ***
[2m[36m(pid=36545)[0m     @     0x7f2aeba49390 (unknown)
[2m[36m(pid=36545)[0m     @     0x7efbeb8def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36545)[0m     @     0x7efbeb0097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36545)[0m     @     0x7efbeb00c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36545)[0m     @     0x7efbeb00cad3 at::TensorIterator::for_each()
[2m[36m(pid=36493)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36493)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36493)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36493)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36493)[0m *** SIGSEGV (@0x0) received by PID 36493 (TID 0x7f6e7bc9a700) from PID 0; stack trace: ***
[2m[36m(pid=36493)[0m     @     0x7f6e7b873390 (unknown)
[2m[36m(pid=36493)[0m     @     0x7f3f7b80ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36493)[0m     @     0x7f3f7af397db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36493)[0m     @     0x7f3f7af3c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36493)[0m     @     0x7f3f7af3cad3 at::TensorIterator::for_each()
[2m[36m(pid=36484)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36484)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36484)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36484)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36484)[0m *** SIGSEGV (@0x0) received by PID 36484 (TID 0x7f19c3e38700) from PID 0; stack trace: ***
[2m[36m(pid=36484)[0m     @     0x7f19c3a11390 (unknown)
[2m[36m(pid=36484)[0m     @     0x7eeac38def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36484)[0m     @     0x7eeac30097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36484)[0m     @     0x7eeac300c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36484)[0m     @     0x7eeac300cad3 at::TensorIterator::for_each()
[2m[36m(pid=36484)[0m     @     0x7eeac300cd91 at::TensorIterator::for_each()
[2m[36m(pid=36424)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36424)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36424)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36424)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36424)[0m *** SIGSEGV (@0x0) received by PID 36424 (TID 0x7f8a5ef00700) from PID 0; stack trace: ***
[2m[36m(pid=36424)[0m     @     0x7f8a5ead9390 (unknown)
[2m[36m(pid=36424)[0m     @     0x7f5b5ea21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36424)[0m     @     0x7f5b5e14c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36424)[0m     @     0x7f5b5e14f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36424)[0m     @     0x7f5b5e14fad3 at::TensorIterator::for_each()
[2m[36m(pid=36424)[0m     @     0x7f5b5e14fd91 at::TensorIterator::for_each()
[2m[36m(pid=36424)[0m     @     0x7f5b5ea32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36424)[0m     @     0x7f5b5ea55c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36489)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36489)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36489)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36489)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36489)[0m *** SIGSEGV (@0x0) received by PID 36489 (TID 0x7f0321815700) from PID 0; stack trace: ***
[2m[36m(pid=36489)[0m     @     0x7f03213ee390 (unknown)
[2m[36m(pid=36489)[0m     @     0x7ed421377f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36489)[0m     @     0x7ed420aa27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36489)[0m     @     0x7ed420aa58f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36489)[0m     @     0x7ed420aa5ad3 at::TensorIterator::for_each()
[2m[36m(pid=36489)[0m     @     0x7ed420aa5d91 at::TensorIterator::for_each()
[2m[36m(pid=36489)[0m     @     0x7ed421388b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36489)[0m     @     0x7ed4213abc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36412)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36412)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36412)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36412)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36412)[0m *** SIGSEGV (@0x0) received by PID 36412 (TID 0x7f87641ce700) from PID 0; stack trace: ***
[2m[36m(pid=36412)[0m     @     0x7f8763da7390 (unknown)
[2m[36m(pid=36412)[0m     @     0x7f5863d41f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36412)[0m     @     0x7f586346c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36412)[0m     @     0x7f586346f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36412)[0m     @     0x7f586346fad3 at::TensorIterator::for_each()
[2m[36m(pid=36412)[0m     @     0x7f586346fd91 at::TensorIterator::for_each()
[2m[36m(pid=36412)[0m     @     0x7f5863d52b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36519)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36519)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36519)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36519)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36519)[0m *** SIGSEGV (@0x0) received by PID 36519 (TID 0x7f4f60c87700) from PID 0; stack trace: ***
[2m[36m(pid=36519)[0m     @     0x7f4f60860390 (unknown)
[2m[36m(pid=36519)[0m     @     0x7f20607f8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36519)[0m     @     0x7f205ff237db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36519)[0m     @     0x7f205ff268f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36519)[0m     @     0x7f205ff26ad3 at::TensorIterator::for_each()
[2m[36m(pid=36519)[0m     @     0x7f205ff26d91 at::TensorIterator::for_each()
[2m[36m(pid=36519)[0m     @     0x7f2060809b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36519)[0m     @     0x7f206082cc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36519)[0m     @     0x7f205fccea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36474)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36474)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36474)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36474)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36474)[0m *** SIGSEGV (@0x0) received by PID 36474 (TID 0x7fbda7b5e700) from PID 0; stack trace: ***
[2m[36m(pid=36474)[0m     @     0x7fbda7737390 (unknown)
[2m[36m(pid=36474)[0m     @     0x7f8ea761ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36474)[0m     @     0x7f8ea6d4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36474)[0m     @     0x7f8ea6d4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36474)[0m     @     0x7f8ea6d4dad3 at::TensorIterator::for_each()
[2m[36m(pid=36474)[0m     @     0x7f8ea6d4dd91 at::TensorIterator::for_each()
[2m[36m(pid=36474)[0m     @     0x7f8ea7630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36474)[0m     @     0x7f8ea7653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36469)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36469)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36469)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36469)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36469)[0m *** SIGSEGV (@0x0) received by PID 36469 (TID 0x7f3212b50700) from PID 0; stack trace: ***
[2m[36m(pid=36469)[0m     @     0x7f3212729390 (unknown)
[2m[36m(pid=36469)[0m     @     0x7f0312601f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36469)[0m     @     0x7f0311d2c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36469)[0m     @     0x7f0311d2f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36469)[0m     @     0x7f0311d2fad3 at::TensorIterator::for_each()
[2m[36m(pid=36437)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36437)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36437)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36437)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36437)[0m *** SIGSEGV (@0x0) received by PID 36437 (TID 0x7f48a02a3700) from PID 0; stack trace: ***
[2m[36m(pid=36437)[0m     @     0x7f489fe7c390 (unknown)
[2m[36m(pid=36437)[0m     @     0x7f199fe09f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36437)[0m     @     0x7f199f5347db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36437)[0m     @     0x7f199f5378f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36437)[0m     @     0x7f199f537ad3 at::TensorIterator::for_each()
[2m[36m(pid=36437)[0m     @     0x7f199f537d91 at::TensorIterator::for_each()
[2m[36m(pid=36437)[0m     @     0x7f199fe1ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36437)[0m     @     0x7f199fe3dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36523)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36523)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36523)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36523)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36523)[0m *** SIGSEGV (@0x0) received by PID 36523 (TID 0x7fb4b54a8700) from PID 0; stack trace: ***
[2m[36m(pid=36523)[0m     @     0x7fb4b5081390 (unknown)
[2m[36m(pid=36523)[0m     @     0x7f85b5031f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36523)[0m     @     0x7f85b475c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36523)[0m     @     0x7f85b475f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36523)[0m     @     0x7f85b475fad3 at::TensorIterator::for_each()
[2m[36m(pid=36523)[0m     @     0x7f85b475fd91 at::TensorIterator::for_each()
[2m[36m(pid=36523)[0m     @     0x7f85b5042b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36523)[0m     @     0x7f85b5065c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36478)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36478)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36478)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36478)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36478)[0m *** SIGSEGV (@0x0) received by PID 36478 (TID 0x7f86dfd55700) from PID 0; stack trace: ***
[2m[36m(pid=36478)[0m     @     0x7f86df92e390 (unknown)
[2m[36m(pid=36478)[0m     @     0x7f57df8b1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36478)[0m     @     0x7f57defdc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36478)[0m     @     0x7f57defdf8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36478)[0m     @     0x7f57defdfad3 at::TensorIterator::for_each()
[2m[36m(pid=36495)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36495)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36495)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36445)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36445)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36445)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36445)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36445)[0m *** SIGSEGV (@0x0) received by PID 36445 (TID 0x7f73310f1700) from PID 0; stack trace: ***
[2m[36m(pid=36445)[0m     @     0x7f7330cca390 (unknown)
[2m[36m(pid=36445)[0m     @     0x7f4430bd1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36445)[0m     @     0x7f44302fc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36445)[0m     @     0x7f44302ff8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36445)[0m     @     0x7f44302ffad3 at::TensorIterator::for_each()
[2m[36m(pid=36445)[0m     @     0x7f44302ffd91 at::TensorIterator::for_each()
[2m[36m(pid=36525)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36525)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36525)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36525)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36525)[0m *** SIGSEGV (@0x0) received by PID 36525 (TID 0x7fd9bf023700) from PID 0; stack trace: ***
[2m[36m(pid=36525)[0m     @     0x7fd9bebfc390 (unknown)
[2m[36m(pid=36525)[0m     @     0x7faabeb8ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36525)[0m     @     0x7faabe2b97db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36525)[0m     @     0x7faabe2bc8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36525)[0m     @     0x7faabe2bcad3 at::TensorIterator::for_each()
[2m[36m(pid=36525)[0m     @     0x7faabe2bcd91 at::TensorIterator::for_each()
[2m[36m(pid=36416)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36416)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36416)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36416)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36416)[0m *** SIGSEGV (@0x0) received by PID 36416 (TID 0x7f42a3716700) from PID 0; stack trace: ***
[2m[36m(pid=36416)[0m     @     0x7f42a32ef390 (unknown)
[2m[36m(pid=36416)[0m     @     0x7f13a3229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36416)[0m     @     0x7f13a29547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36416)[0m     @     0x7f13a29578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36416)[0m     @     0x7f13a2957ad3 at::TensorIterator::for_each()
[2m[36m(pid=36416)[0m     @     0x7f13a2957d91 at::TensorIterator::for_each()
[2m[36m(pid=36416)[0m     @     0x7f13a323ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36416)[0m     @     0x7f13a325dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36467)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36467)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36467)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36467)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36467)[0m *** SIGSEGV (@0x0) received by PID 36467 (TID 0x7fa32c894700) from PID 0; stack trace: ***
[2m[36m(pid=36467)[0m     @     0x7fa32c46d390 (unknown)
[2m[36m(pid=36467)[0m     @     0x7f742c333f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36467)[0m     @     0x7f742ba5e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36467)[0m     @     0x7f742ba618f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36467)[0m     @     0x7f742ba61ad3 at::TensorIterator::for_each()
[2m[36m(pid=36442)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36442)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36442)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36442)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36442)[0m *** SIGSEGV (@0x0) received by PID 36442 (TID 0x7fd3bf7b0700) from PID 0; stack trace: ***
[2m[36m(pid=36442)[0m     @     0x7fd3bf389390 (unknown)
[2m[36m(pid=36442)[0m     @     0x7fa4bf229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36442)[0m     @     0x7fa4be9547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36442)[0m     @     0x7fa4be9578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36442)[0m     @     0x7fa4be957ad3 at::TensorIterator::for_each()
[2m[36m(pid=36442)[0m     @     0x7fa4be957d91 at::TensorIterator::for_each()
[2m[36m(pid=36442)[0m     @     0x7fa4bf23ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36442)[0m     @     0x7fa4bf25dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36538)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36538)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36538)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36483)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36483)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36483)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36483)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36483)[0m *** SIGSEGV (@0x0) received by PID 36483 (TID 0x7f5e87718700) from PID 0; stack trace: ***
[2m[36m(pid=36483)[0m     @     0x7f5e872f1390 (unknown)
[2m[36m(pid=36483)[0m     @     0x7f2f87229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36483)[0m     @     0x7f2f869547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36483)[0m     @     0x7f2f869578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36483)[0m     @     0x7f2f86957ad3 at::TensorIterator::for_each()
[2m[36m(pid=36507)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36507)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36507)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36507)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36507)[0m *** SIGSEGV (@0x0) received by PID 36507 (TID 0x7fdfec4cd700) from PID 0; stack trace: ***
[2m[36m(pid=36507)[0m     @     0x7fdfec0a6390 (unknown)
[2m[36m(pid=36507)[0m     @     0x7fb0ec01cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36507)[0m     @     0x7fb0eb7477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36507)[0m     @     0x7fb0eb74a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36507)[0m     @     0x7fb0eb74aad3 at::TensorIterator::for_each()
[2m[36m(pid=36507)[0m     @     0x7fb0eb74ad91 at::TensorIterator::for_each()
[2m[36m(pid=36507)[0m     @     0x7fb0ec02db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36507)[0m     @     0x7fb0ec050c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36414)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36414)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36414)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36414)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36414)[0m *** SIGSEGV (@0x0) received by PID 36414 (TID 0x7f0456616700) from PID 0; stack trace: ***
[2m[36m(pid=36414)[0m     @     0x7f04561ef390 (unknown)
[2m[36m(pid=36414)[0m     @     0x7ed55613af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36414)[0m     @     0x7ed5558657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36414)[0m     @     0x7ed5558688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36521)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36521)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36521)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36521)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36521)[0m *** SIGSEGV (@0x0) received by PID 36521 (TID 0x7f44a75e8700) from PID 0; stack trace: ***
[2m[36m(pid=36521)[0m     @     0x7f44a71c1390 (unknown)
[2m[36m(pid=36521)[0m     @     0x7f15a7124f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36521)[0m     @     0x7f15a684f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36521)[0m     @     0x7f15a68528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36521)[0m     @     0x7f15a6852ad3 at::TensorIterator::for_each()
[2m[36m(pid=36521)[0m     @     0x7f15a6852d91 at::TensorIterator::for_each()
[2m[36m(pid=36521)[0m     @     0x7f15a7135b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36521)[0m     @     0x7f15a7158c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36521)[0m     @     0x7f15a65faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36521)[0m     @     0x7f15a65f8388 at::native::copy_impl()
[2m[36m(pid=36415)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36415)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36415)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36415)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36415)[0m *** SIGSEGV (@0x0) received by PID 36415 (TID 0x7f38ad63a700) from PID 0; stack trace: ***
[2m[36m(pid=36415)[0m     @     0x7f38ad213390 (unknown)
[2m[36m(pid=36415)[0m     @     0x7f09ad15df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36415)[0m     @     0x7f09ac8887db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36415)[0m     @     0x7f09ac88b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36415)[0m     @     0x7f09ac88bad3 at::TensorIterator::for_each()
[2m[36m(pid=36415)[0m     @     0x7f09ac88bd91 at::TensorIterator::for_each()
[2m[36m(pid=36415)[0m     @     0x7f09ad16eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36415)[0m     @     0x7f09ad191c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36415)[0m     @     0x7f09ac633a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36426)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36426)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36426)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36426)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36426)[0m *** SIGSEGV (@0x0) received by PID 36426 (TID 0x7f716a285700) from PID 0; stack trace: ***
[2m[36m(pid=36426)[0m     @     0x7f7169e5e390 (unknown)
[2m[36m(pid=36426)[0m     @     0x7f4269df7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36426)[0m     @     0x7f42695227db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36426)[0m     @     0x7f42695258f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36494)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36494)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36494)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36494)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36494)[0m *** SIGSEGV (@0x0) received by PID 36494 (TID 0x7fda6e753700) from PID 0; stack trace: ***
[2m[36m(pid=36494)[0m     @     0x7fda6e32c390 (unknown)
[2m[36m(pid=36494)[0m     @     0x7fab6e2b9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36494)[0m     @     0x7fab6d9e47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36494)[0m     @     0x7fab6d9e78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36494)[0m     @     0x7fab6d9e7ad3 at::TensorIterator::for_each()
[2m[36m(pid=36494)[0m     @     0x7fab6d9e7d91 at::TensorIterator::for_each()
[2m[36m(pid=36494)[0m     @     0x7fab6e2cab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36494)[0m     @     0x7fab6e2edc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36494)[0m     @     0x7fab6d78fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36510)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36510)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36510)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36510)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36510)[0m *** SIGSEGV (@0x0) received by PID 36510 (TID 0x7f23ff795700) from PID 0; stack trace: ***
[2m[36m(pid=36510)[0m     @     0x7f23ff36e390 (unknown)
[2m[36m(pid=36510)[0m     @     0x7ef4ff229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36510)[0m     @     0x7ef4fe9547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36510)[0m     @     0x7ef4fe9578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36510)[0m     @     0x7ef4fe957ad3 at::TensorIterator::for_each()
[2m[36m(pid=36510)[0m     @     0x7ef4fe957d91 at::TensorIterator::for_each()
[2m[36m(pid=36510)[0m     @     0x7ef4ff23ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36510)[0m     @     0x7ef4ff25dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36410)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36410)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36410)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36410)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36410)[0m *** SIGSEGV (@0x0) received by PID 36410 (TID 0x7f92266d2700) from PID 0; stack trace: ***
[2m[36m(pid=36410)[0m     @     0x7f92262ab390 (unknown)
[2m[36m(pid=36410)[0m     @     0x7f632622cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36410)[0m     @     0x7f63259577db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36410)[0m     @     0x7f632595a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36410)[0m     @     0x7f632595aad3 at::TensorIterator::for_each()
[2m[36m(pid=36480)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36480)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36480)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36480)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36480)[0m *** SIGSEGV (@0x0) received by PID 36480 (TID 0x7f9e02bd0700) from PID 0; stack trace: ***
[2m[36m(pid=36480)[0m     @     0x7f9e027a9390 (unknown)
[2m[36m(pid=36480)[0m     @     0x7f6f025a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36480)[0m     @     0x7f6f01ccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36480)[0m     @     0x7f6f01cd28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36480)[0m     @     0x7f6f01cd2ad3 at::TensorIterator::for_each()
[2m[36m(pid=36417)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36417)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36417)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36417)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36528)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36528)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36528)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36528)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36528)[0m *** SIGSEGV (@0x0) received by PID 36528 (TID 0x7f91b1cc9700) from PID 0; stack trace: ***
[2m[36m(pid=36528)[0m     @     0x7f91b18a2390 (unknown)
[2m[36m(pid=36528)[0m     @     0x7f62b17f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36528)[0m     @     0x7f62b0f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36528)[0m     @     0x7f62b0f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36528)[0m     @     0x7f62b0f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=36528)[0m     @     0x7f62b0f27d91 at::TensorIterator::for_each()
[2m[36m(pid=36528)[0m     @     0x7f62b180ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36528)[0m     @     0x7f62b182dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36492)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36492)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36492)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36492)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36492)[0m *** SIGSEGV (@0x0) received by PID 36492 (TID 0x7f3360f4a700) from PID 0; stack trace: ***
[2m[36m(pid=36492)[0m     @     0x7f3360b23390 (unknown)
[2m[36m(pid=36492)[0m     @     0x7f0460a36f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36492)[0m     @     0x7f04601617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36492)[0m     @     0x7f04601648f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36492)[0m     @     0x7f0460164ad3 at::TensorIterator::for_each()
[2m[36m(pid=36492)[0m     @     0x7f0460164d91 at::TensorIterator::for_each()
[2m[36m(pid=36492)[0m     @     0x7f0460a47b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36492)[0m     @     0x7f0460a6ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36413)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36413)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36413)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36413)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36413)[0m *** SIGSEGV (@0x0) received by PID 36413 (TID 0x7fbd679c2700) from PID 0; stack trace: ***
[2m[36m(pid=36413)[0m     @     0x7fbd6759b390 (unknown)
[2m[36m(pid=36413)[0m     @     0x7f8e6743af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36413)[0m     @     0x7f8e66b657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36413)[0m     @     0x7f8e66b688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36413)[0m     @     0x7f8e66b68ad3 at::TensorIterator::for_each()
[2m[36m(pid=36413)[0m     @     0x7f8e66b68d91 at::TensorIterator::for_each()
[2m[36m(pid=36418)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36418)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36418)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36418)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36418)[0m *** SIGSEGV (@0x0) received by PID 36418 (TID 0x7fdc21b80700) from PID 0; stack trace: ***
[2m[36m(pid=36503)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36503)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36503)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36420)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36420)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36420)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36420)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36420)[0m *** SIGSEGV (@0x0) received by PID 36420 (TID 0x7f880baf6700) from PID 0; stack trace: ***
[2m[36m(pid=36420)[0m     @     0x7f880b6cf390 (unknown)
[2m[36m(pid=36420)[0m     @     0x7f590b61ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36420)[0m     @     0x7f590ad4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36420)[0m     @     0x7f590ad4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36420)[0m     @     0x7f590ad4dad3 at::TensorIterator::for_each()
[2m[36m(pid=36446)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36446)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36446)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36446)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36446)[0m *** SIGSEGV (@0x0) received by PID 36446 (TID 0x7f5499113700) from PID 0; stack trace: ***
[2m[36m(pid=36411)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36411)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36411)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36411)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36411)[0m *** SIGSEGV (@0x0) received by PID 36411 (TID 0x7fc5c0354700) from PID 0; stack trace: ***
[2m[36m(pid=36411)[0m     @     0x7fc5bff2d390 (unknown)
[2m[36m(pid=36411)[0m     @     0x7f96bfe0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36411)[0m     @     0x7f96bf5367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36411)[0m     @     0x7f96bf5398f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36411)[0m     @     0x7f96bf539ad3 at::TensorIterator::for_each()
[2m[36m(pid=36411)[0m     @     0x7f96bf539d91 at::TensorIterator::for_each()
[2m[36m(pid=36411)[0m     @     0x7f96bfe1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36476)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36476)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36476)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36491)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36491)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36491)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36422)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36422)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36422)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36422)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36422)[0m *** SIGSEGV (@0x0) received by PID 36422 (TID 0x7fca0b296700) from PID 0; stack trace: ***
[2m[36m(pid=36422)[0m     @     0x7fca0ae6f390 (unknown)
[2m[36m(pid=36422)[0m     @     0x7f9b0ae03f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36422)[0m     @     0x7f9b0a52e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36422)[0m     @     0x7f9b0a5318f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36422)[0m     @     0x7f9b0a531ad3 at::TensorIterator::for_each()
[2m[36m(pid=36422)[0m     @     0x7f9b0a531d91 at::TensorIterator::for_each()
[2m[36m(pid=36422)[0m     @     0x7f9b0ae14b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36482)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36482)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36482)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36482)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36482)[0m *** SIGSEGV (@0x0) received by PID 36482 (TID 0x7f6c786a3700) from PID 0; stack trace: ***
[2m[36m(pid=36482)[0m     @     0x7f6c7827c390 (unknown)
[2m[36m(pid=36482)[0m     @     0x7f3d780cdf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36447)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36447)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36447)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36447)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36447)[0m *** SIGSEGV (@0x0) received by PID 36447 (TID 0x7fe31de95700) from PID 0; stack trace: ***
[2m[36m(pid=36447)[0m     @     0x7fe31da6e390 (unknown)
[2m[36m(pid=36443)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36443)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36443)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36443)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36443)[0m *** SIGSEGV (@0x0) received by PID 36443 (TID 0x7f82c9a31700) from PID 0; stack trace: ***
[2m[36m(pid=36432)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36432)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36432)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36432)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36432)[0m *** SIGSEGV (@0x0) received by PID 36432 (TID 0x7f2448f59700) from PID 0; stack trace: ***
[2m[36m(pid=36505)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36505)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36505)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36505)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36505)[0m *** SIGSEGV (@0x0) received by PID 36505 (TID 0x7fc975be2700) from PID 0; stack trace: ***
[2m[36m(pid=36486)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36486)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36486)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36486)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36486)[0m *** SIGSEGV (@0x0) received by PID 36486 (TID 0x7f4a10804700) from PID 0; stack trace: ***
[2m[36m(pid=36537)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36537)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36537)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36499)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36499)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36499)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36499)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36499)[0m *** SIGSEGV (@0x0) received by PID 36499 (TID 0x7f2b74569700) from PID 0; stack trace: ***
[2m[36m(pid=36499)[0m     @     0x7f2b74142390 (unknown)
[2m[36m(pid=36429)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36429)[0m *** SIGSEGV (@0x0) received by PID 36429 (TID 0x7f2f58390700) from PID 0; stack trace: ***
[2m[36m(pid=36429)[0m     @     0x7f2f57f69390 (unknown)
[2m[36m(pid=36429)[0m     @     0x7f0057df0f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36429)[0m     @     0x7f005751b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36470)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36470)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36470)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36470)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36470)[0m *** SIGSEGV (@0x0) received by PID 36470 (TID 0x7f4837cb3700) from PID 0; stack trace: ***
[2m[36m(pid=36540)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36540)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36540)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36488)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36488)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36488)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36488)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36488)[0m *** SIGSEGV (@0x0) received by PID 36488 (TID 0x7f7ba7c2d700) from PID 0; stack trace: ***
[2m[36m(pid=36488)[0m     @     0x7f7ba7806390 (unknown)
[2m[36m(pid=36488)[0m     @     0x7f4ca778ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36520)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36520)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36520)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36520)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36520)[0m *** SIGSEGV (@0x0) received by PID 36520 (TID 0x7f30db6db700) from PID 0; stack trace: ***
[2m[36m(pid=36534)[0m     @     0x7f2373e55a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36534)[0m     @     0x7f2373e53388 at::native::copy_impl()
[2m[36m(pid=36534)[0m     @     0x7f2373e555a4 at::native::copy_()
[2m[36m(pid=36428)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36428)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36428)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36428)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36428)[0m *** SIGSEGV (@0x0) received by PID 36428 (TID 0x7f45510e0700) from PID 0; stack trace: ***
[2m[36m(pid=36440)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36440)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36440)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36440)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36440)[0m *** SIGSEGV (@0x0) received by PID 36440 (TID 0x7f2dacd28700) from PID 0; stack trace: ***
[2m[36m(pid=36440)[0m     @     0x7f2dac901390 (unknown)
[2m[36m(pid=36440)[0m     @     0x7efeac825f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36477)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36477)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36477)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36477)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36477)[0m *** SIGSEGV (@0x0) received by PID 36477 (TID 0x7fb319f7f700) from PID 0; stack trace: ***
[2m[36m(pid=36441)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36441)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36441)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36434)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36434)[0m *** SIGSEGV (@0x0) received by PID 36434 (TID 0x7f856e66d700) from PID 0; stack trace: ***
[2m[36m(pid=36434)[0m     @     0x7f856e246390 (unknown)
[2m[36m(pid=36434)[0m     @     0x7f566e13af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36434)[0m     @     0x7f566d8657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36425)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36425)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36425)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36425)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36425)[0m *** SIGSEGV (@0x0) received by PID 36425 (TID 0x7f1a0f767700) from PID 0; stack trace: ***
[2m[36m(pid=36425)[0m     @     0x7f1a0f340390 (unknown)
[2m[36m(pid=36425)[0m     @     0x7eeb0f2b9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36425)[0m     @     0x7eeb0e9e47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36421)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36421)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36421)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36421)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36421)[0m *** SIGSEGV (@0x0) received by PID 36421 (TID 0x7f4075013700) from PID 0; stack trace: ***
[2m[36m(pid=36421)[0m     @     0x7f4074bec390 (unknown)
[2m[36m(pid=36421)[0m     @     0x7f1174b64f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36421)[0m     @     0x7f117428f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36421)[0m     @     0x7f11742928f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36427)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36427)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36427)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36427)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36427)[0m *** SIGSEGV (@0x0) received by PID 36427 (TID 0x7f398ee16700) from PID 0; stack trace: ***
[2m[36m(pid=36427)[0m     @     0x7f398e9ef390 (unknown)
[2m[36m(pid=36427)[0m     @     0x7f0a8e70af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36427)[0m     @     0x7f0a8de357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36430)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36430)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36430)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36430)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36430)[0m *** SIGSEGV (@0x0) received by PID 36430 (TID 0x7f3193897700) from PID 0; stack trace: ***
[2m[36m(pid=36430)[0m     @     0x7f3193470390 (unknown)
[2m[36m(pid=36430)[0m     @     0x7f0293229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36430)[0m     @     0x7f02929547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36531)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36531)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36531)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36531)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36531)[0m *** SIGSEGV (@0x0) received by PID 36531 (TID 0x7f2b0dda7700) from PID 0; stack trace: ***
[2m[36m(pid=36531)[0m     @     0x7f2b0d980390 (unknown)
[2m[36m(pid=36531)[0m     @     0x7efc0d7f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36531)[0m     @     0x7efc0cf247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36518)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36518)[0m *** SIGSEGV (@0x0) received by PID 36518 (TID 0x7f4e2b266700) from PID 0; stack trace: ***
[2m[36m(pid=36518)[0m     @     0x7f4e2ae3f390 (unknown)
[2m[36m(pid=36518)[0m     @     0x7f1f2adf0f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36518)[0m     @     0x7f1f2a51b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36518)[0m     @     0x7f1f2a51e8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36500)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36500)[0m *** SIGSEGV (@0x0) received by PID 36500 (TID 0x7f84949c8700) from PID 0; stack trace: ***
[2m[36m(pid=36500)[0m     @     0x7f84945a1390 (unknown)
[2m[36m(pid=36500)[0m     @     0x7f5594536f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36500)[0m     @     0x7f5593c617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36500)[0m     @     0x7f5593c648f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36500)[0m     @     0x7f5593c64ad3 at::TensorIterator::for_each()
[2m[36m(pid=36485)[0m     @     0x7f25e77fbd91 at::TensorIterator::for_each()
[2m[36m(pid=36485)[0m     @     0x7f25e80deb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36485)[0m     @     0x7f25e8101c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36485)[0m     @     0x7f25e75a3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36485)[0m     @     0x7f25e75a1388 at::native::copy_impl()
[2m[36m(pid=36485)[0m     @     0x7f25e75a35a4 at::native::copy_()
[2m[36m(pid=36490)[0m     @     0x7eea92286a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36490)[0m     @     0x7eea92284388 at::native::copy_impl()
[2m[36m(pid=36490)[0m     @     0x7eea922865a4 at::native::copy_()
[2m[36m(pid=36490)[0m     @     0x7eea929714f5 at::Tensor::copy_()
[2m[36m(pid=36490)[0m     @     0x7eea94e448de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36514)[0m     @     0x7f9532d22a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36514)[0m     @     0x7f9532d20388 at::native::copy_impl()
[2m[36m(pid=36514)[0m     @     0x7f9532d225a4 at::native::copy_()
[2m[36m(pid=36514)[0m     @     0x7f953340d4f5 at::Tensor::copy_()
[2m[36m(pid=36514)[0m     @     0x7f95358e08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36526)[0m     @     0x7fbeff223d91 at::TensorIterator::for_each()
[2m[36m(pid=36526)[0m     @     0x7fbeffb06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36526)[0m     @     0x7fbeffb29c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36526)[0m     @     0x7fbefefcba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36526)[0m     @     0x7fbefefc9388 at::native::copy_impl()
[2m[36m(pid=36554)[0m     @     0x7fa9c12faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36554)[0m     @     0x7fa9c12f8388 at::native::copy_impl()
[2m[36m(pid=36554)[0m     @     0x7fa9c12fa5a4 at::native::copy_()
[2m[36m(pid=36554)[0m     @     0x7fa9c19e54f5 at::Tensor::copy_()
[2m[36m(pid=36431)[0m     @     0x7f0d54ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36431)[0m     @     0x7f0d54ccd388 at::native::copy_impl()
[2m[36m(pid=36431)[0m     @     0x7f0d54ccf5a4 at::native::copy_()
[2m[36m(pid=36431)[0m     @     0x7f0d553ba4f5 at::Tensor::copy_()
[2m[36m(pid=36530)[0m     @     0x7f93f4da2d91 at::TensorIterator::for_each()
[2m[36m(pid=36530)[0m     @     0x7f93f5685b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36530)[0m     @     0x7f93f56a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36530)[0m     @     0x7f93f4b4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36530)[0m     @     0x7f93f4b48388 at::native::copy_impl()
[2m[36m(pid=36530)[0m     @     0x7f93f4b4a5a4 at::native::copy_()
[2m[36m(pid=36497)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36497)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36497)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36497)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36497)[0m *** SIGSEGV (@0x0) received by PID 36497 (TID 0x7f47c8212700) from PID 0; stack trace: ***
[2m[36m(pid=36497)[0m     @     0x7f47c7deb390 (unknown)
[2m[36m(pid=36515)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36515)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36515)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36515)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36515)[0m *** SIGSEGV (@0x0) received by PID 36515 (TID 0x7efcc4b6a700) from PID 0; stack trace: ***
[2m[36m(pid=36515)[0m     @     0x7efcc4743390 (unknown)
[2m[36m(pid=36515)[0m     @     0x7ecdc46dff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36516)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36516)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36516)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36516)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36516)[0m *** SIGSEGV (@0x0) received by PID 36516 (TID 0x7f48e5fa4700) from PID 0; stack trace: ***
[2m[36m(pid=36516)[0m     @     0x7f48e5b7d390 (unknown)
[2m[36m(pid=36516)[0m     @     0x7f19e5a0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36545)[0m     @     0x7efbeb00cd91 at::TensorIterator::for_each()
[2m[36m(pid=36545)[0m     @     0x7efbeb8efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36545)[0m     @     0x7efbeb912c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36545)[0m     @     0x7efbeadb4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36545)[0m     @     0x7efbeadb2388 at::native::copy_impl()
[2m[36m(pid=36545)[0m     @     0x7efbeadb45a4 at::native::copy_()
[2m[36m(pid=36493)[0m     @     0x7f3f7af3cd91 at::TensorIterator::for_each()
[2m[36m(pid=36493)[0m     @     0x7f3f7b81fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36493)[0m     @     0x7f3f7b842c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36493)[0m     @     0x7f3f7ace4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36493)[0m     @     0x7f3f7ace2388 at::native::copy_impl()
[2m[36m(pid=36493)[0m     @     0x7f3f7ace45a4 at::native::copy_()
[2m[36m(pid=36484)[0m     @     0x7eeac38efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36484)[0m     @     0x7eeac3912c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36484)[0m     @     0x7eeac2db4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36484)[0m     @     0x7eeac2db2388 at::native::copy_impl()
[2m[36m(pid=36484)[0m     @     0x7eeac2db45a4 at::native::copy_()
[2m[36m(pid=36484)[0m     @     0x7eeac349f4f5 at::Tensor::copy_()
[2m[36m(pid=36424)[0m     @     0x7f5b5def7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36424)[0m     @     0x7f5b5def5388 at::native::copy_impl()
[2m[36m(pid=36424)[0m     @     0x7f5b5def75a4 at::native::copy_()
[2m[36m(pid=36424)[0m     @     0x7f5b5e5e24f5 at::Tensor::copy_()
[2m[36m(pid=36489)[0m     @     0x7ed42084da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36489)[0m     @     0x7ed42084b388 at::native::copy_impl()
[2m[36m(pid=36489)[0m     @     0x7ed42084d5a4 at::native::copy_()
[2m[36m(pid=36489)[0m     @     0x7ed420f384f5 at::Tensor::copy_()
[2m[36m(pid=36489)[0m     @     0x7ed42340b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36412)[0m     @     0x7f5863d75c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36412)[0m     @     0x7f5863217a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36412)[0m     @     0x7f5863215388 at::native::copy_impl()
[2m[36m(pid=36412)[0m     @     0x7f58632175a4 at::native::copy_()
[2m[36m(pid=36412)[0m     @     0x7f58639024f5 at::Tensor::copy_()
[2m[36m(pid=36412)[0m     @     0x7f5865dd58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36519)[0m     @     0x7f205fccc388 at::native::copy_impl()
[2m[36m(pid=36519)[0m     @     0x7f205fcce5a4 at::native::copy_()
[2m[36m(pid=36519)[0m     @     0x7f20603b94f5 at::Tensor::copy_()
[2m[36m(pid=36519)[0m     @     0x7f206288c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36519)[0m     @     0x7f20603b94f5 at::Tensor::copy_()
[2m[36m(pid=36474)[0m     @     0x7f8ea6af5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36474)[0m     @     0x7f8ea6af3388 at::native::copy_impl()
[2m[36m(pid=36474)[0m     @     0x7f8ea6af55a4 at::native::copy_()
[2m[36m(pid=36474)[0m     @     0x7f8ea71e04f5 at::Tensor::copy_()
[2m[36m(pid=36474)[0m     @     0x7f8ea96b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36469)[0m     @     0x7f0311d2fd91 at::TensorIterator::for_each()
[2m[36m(pid=36469)[0m     @     0x7f0312612b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36469)[0m     @     0x7f0312635c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36469)[0m     @     0x7f0311ad7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36469)[0m     @     0x7f0311ad5388 at::native::copy_impl()
[2m[36m(pid=36437)[0m     @     0x7f199f2dfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36437)[0m     @     0x7f199f2dd388 at::native::copy_impl()
[2m[36m(pid=36437)[0m     @     0x7f199f2df5a4 at::native::copy_()
[2m[36m(pid=36437)[0m     @     0x7f199f9ca4f5 at::Tensor::copy_()
[2m[36m(pid=36437)[0m     @     0x7f19a1e9d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36523)[0m     @     0x7f85b4507a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36523)[0m     @     0x7f85b4505388 at::native::copy_impl()
[2m[36m(pid=36523)[0m     @     0x7f85b45075a4 at::native::copy_()
[2m[36m(pid=36523)[0m     @     0x7f85b4bf24f5 at::Tensor::copy_()
[2m[36m(pid=36523)[0m     @     0x7f85b70c58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36478)[0m     @     0x7f57defdfd91 at::TensorIterator::for_each()
[2m[36m(pid=36478)[0m     @     0x7f57df8c2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36478)[0m     @     0x7f57df8e5c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36478)[0m     @     0x7f57ded87a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36478)[0m     @     0x7f57ded85388 at::native::copy_impl()
[2m[36m(pid=36495)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36495)[0m *** SIGSEGV (@0x0) received by PID 36495 (TID 0x7facfa090700) from PID 0; stack trace: ***
[2m[36m(pid=36495)[0m     @     0x7facf9c69390 (unknown)
[2m[36m(pid=36495)[0m     @     0x7f7df9c11f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36495)[0m     @     0x7f7df933c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36495)[0m     @     0x7f7df933f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36445)[0m     @     0x7f4430be2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36445)[0m     @     0x7f4430c05c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36445)[0m     @     0x7f44300a7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36445)[0m     @     0x7f44300a5388 at::native::copy_impl()
[2m[36m(pid=36445)[0m     @     0x7f44300a75a4 at::native::copy_()
[2m[36m(pid=36525)[0m     @     0x7faabeb9fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36525)[0m     @     0x7faabebc2c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36525)[0m     @     0x7faabe064a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36525)[0m     @     0x7faabe062388 at::native::copy_impl()
[2m[36m(pid=36525)[0m     @     0x7faabe0645a4 at::native::copy_()
[2m[36m(pid=36416)[0m     @     0x7f13a26ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36416)[0m     @     0x7f13a26fd388 at::native::copy_impl()
[2m[36m(pid=36416)[0m     @     0x7f13a26ff5a4 at::native::copy_()
[2m[36m(pid=36416)[0m     @     0x7f13a2dea4f5 at::Tensor::copy_()
[2m[36m(pid=36416)[0m     @     0x7f13a52bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36467)[0m     @     0x7f742ba61d91 at::TensorIterator::for_each()
[2m[36m(pid=36467)[0m     @     0x7f742c344b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36467)[0m     @     0x7f742c367c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36467)[0m     @     0x7f742b809a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36467)[0m     @     0x7f742b807388 at::native::copy_impl()
[2m[36m(pid=36442)[0m     @     0x7fa4be6ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36442)[0m     @     0x7fa4be6fd388 at::native::copy_impl()
[2m[36m(pid=36442)[0m     @     0x7fa4be6ff5a4 at::native::copy_()
[2m[36m(pid=36442)[0m     @     0x7fa4bedea4f5 at::Tensor::copy_()
[2m[36m(pid=36442)[0m     @     0x7fa4c12bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36442)[0m     @     0x7fa4bedea4f5 at::Tensor::copy_()
[2m[36m(pid=36538)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36538)[0m *** SIGSEGV (@0x0) received by PID 36538 (TID 0x7efeba9d7700) from PID 0; stack trace: ***
[2m[36m(pid=36538)[0m     @     0x7efeba5b0390 (unknown)
[2m[36m(pid=36538)[0m     @     0x7ecfba4f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36538)[0m     @     0x7ecfb9c247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36538)[0m     @     0x7ecfb9c278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36538)[0m     @     0x7ecfb9c27ad3 at::TensorIterator::for_each()
[2m[36m(pid=36483)[0m     @     0x7f2f86957d91 at::TensorIterator::for_each()
[2m[36m(pid=36483)[0m     @     0x7f2f8723ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36483)[0m     @     0x7f2f8725dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36483)[0m     @     0x7f2f866ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36483)[0m     @     0x7f2f866fd388 at::native::copy_impl()
[2m[36m(pid=36507)[0m     @     0x7fb0eb4f2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36507)[0m     @     0x7fb0eb4f0388 at::native::copy_impl()
[2m[36m(pid=36507)[0m     @     0x7fb0eb4f25a4 at::native::copy_()
[2m[36m(pid=36507)[0m     @     0x7fb0ebbdd4f5 at::Tensor::copy_()
[2m[36m(pid=36507)[0m     @     0x7fb0ee0b08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36414)[0m     @     0x7ed555868ad3 at::TensorIterator::for_each()
[2m[36m(pid=36414)[0m     @     0x7ed555868d91 at::TensorIterator::for_each()
[2m[36m(pid=36414)[0m     @     0x7ed55614bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36414)[0m     @     0x7ed55616ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36414)[0m     @     0x7ed555610a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36414)[0m     @     0x7ed55560e388 at::native::copy_impl()
[2m[36m(pid=36521)[0m     @     0x7f15a65fa5a4 at::native::copy_()
[2m[36m(pid=36521)[0m     @     0x7f15a6ce54f5 at::Tensor::copy_()
[2m[36m(pid=36521)[0m     @     0x7f15a91b88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36521)[0m     @     0x7f15a6ce54f5 at::Tensor::copy_()
[2m[36m(pid=36415)[0m     @     0x7f09ac631388 at::native::copy_impl()
[2m[36m(pid=36415)[0m     @     0x7f09ac6335a4 at::native::copy_()
[2m[36m(pid=36415)[0m     @     0x7f09acd1e4f5 at::Tensor::copy_()
[2m[36m(pid=36415)[0m     @     0x7f09af1f18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36426)[0m     @     0x7f4269525ad3 at::TensorIterator::for_each()
[2m[36m(pid=36426)[0m     @     0x7f4269525d91 at::TensorIterator::for_each()
[2m[36m(pid=36426)[0m     @     0x7f4269e08b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36426)[0m     @     0x7f4269e2bc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36426)[0m     @     0x7f42692cda93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36426)[0m     @     0x7f42692cb388 at::native::copy_impl()
[2m[36m(pid=36494)[0m     @     0x7fab6d78d388 at::native::copy_impl()
[2m[36m(pid=36494)[0m     @     0x7fab6d78f5a4 at::native::copy_()
[2m[36m(pid=36494)[0m     @     0x7fab6de7a4f5 at::Tensor::copy_()
[2m[36m(pid=36494)[0m     @     0x7fab7034d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36494)[0m     @     0x7fab6de7a4f5 at::Tensor::copy_()
[2m[36m(pid=36510)[0m     @     0x7ef4fe6ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36510)[0m     @     0x7ef4fe6fd388 at::native::copy_impl()
[2m[36m(pid=36510)[0m     @     0x7ef4fe6ff5a4 at::native::copy_()
[2m[36m(pid=36510)[0m     @     0x7ef4fedea4f5 at::Tensor::copy_()
[2m[36m(pid=36510)[0m     @     0x7ef5012bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36410)[0m     @     0x7f632595ad91 at::TensorIterator::for_each()
[2m[36m(pid=36410)[0m     @     0x7f632623db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36410)[0m     @     0x7f6326260c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36410)[0m     @     0x7f6325702a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36410)[0m     @     0x7f6325700388 at::native::copy_impl()
[2m[36m(pid=36480)[0m     @     0x7f6f01cd2d91 at::TensorIterator::for_each()
[2m[36m(pid=36480)[0m     @     0x7f6f025b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36480)[0m     @     0x7f6f025d8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36480)[0m     @     0x7f6f01a7aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36480)[0m     @     0x7f6f01a78388 at::native::copy_impl()
[2m[36m(pid=36417)[0m *** SIGSEGV (@0x0) received by PID 36417 (TID 0x7fd732c1b700) from PID 0; stack trace: ***
[2m[36m(pid=36417)[0m     @     0x7fd7327f4390 (unknown)
[2m[36m(pid=36417)[0m     @     0x7fa83270af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36417)[0m     @     0x7fa831e357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36417)[0m     @     0x7fa831e388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36417)[0m     @     0x7fa831e38ad3 at::TensorIterator::for_each()
[2m[36m(pid=36528)[0m     @     0x7f62b0ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36528)[0m     @     0x7f62b0ccd388 at::native::copy_impl()
[2m[36m(pid=36528)[0m     @     0x7f62b0ccf5a4 at::native::copy_()
[2m[36m(pid=36528)[0m     @     0x7f62b13ba4f5 at::Tensor::copy_()
[2m[36m(pid=36528)[0m     @     0x7f62b388d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36492)[0m     @     0x7f045ff0ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36492)[0m     @     0x7f045ff0a388 at::native::copy_impl()
[2m[36m(pid=36492)[0m     @     0x7f045ff0c5a4 at::native::copy_()
[2m[36m(pid=36492)[0m     @     0x7f04605f74f5 at::Tensor::copy_()
[2m[36m(pid=36492)[0m     @     0x7f0462aca8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36413)[0m     @     0x7f8e6744bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36413)[0m     @     0x7f8e6746ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36413)[0m     @     0x7f8e66910a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36413)[0m     @     0x7f8e6690e388 at::native::copy_impl()
[2m[36m(pid=36413)[0m     @     0x7f8e669105a4 at::native::copy_()
[2m[36m(pid=36418)[0m     @     0x7fdc21759390 (unknown)
[2m[36m(pid=36418)[0m     @     0x7fad216f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36418)[0m     @     0x7fad20e1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36418)[0m     @     0x7fad20e228f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36418)[0m     @     0x7fad20e22ad3 at::TensorIterator::for_each()
[2m[36m(pid=36503)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36503)[0m *** SIGSEGV (@0x0) received by PID 36503 (TID 0x7fad7dfee700) from PID 0; stack trace: ***
[2m[36m(pid=36503)[0m     @     0x7fad7dbc7390 (unknown)
[2m[36m(pid=36503)[0m     @     0x7f7e7db5ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36503)[0m     @     0x7f7e7d28a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36503)[0m     @     0x7f7e7d28d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36503)[0m     @     0x7f7e7d28dad3 at::TensorIterator::for_each()
[2m[36m(pid=36420)[0m     @     0x7f590ad4dd91 at::TensorIterator::for_each()
[2m[36m(pid=36420)[0m     @     0x7f590b630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36420)[0m     @     0x7f590b653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36420)[0m     @     0x7f590aaf5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36420)[0m     @     0x7f590aaf3388 at::native::copy_impl()
[2m[36m(pid=36420)[0m     @     0x7f590aaf55a4 at::native::copy_()
[2m[36m(pid=36420)[0m     @     0x7f590b1e04f5 at::Tensor::copy_()
[2m[36m(pid=36446)[0m     @     0x7f5498cec390 (unknown)
[2m[36m(pid=36446)[0m     @     0x7f2598bd1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36446)[0m     @     0x7f25982fc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36446)[0m     @     0x7f25982ff8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36411)[0m     @     0x7f96bfe3fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36411)[0m     @     0x7f96bf2e1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36411)[0m     @     0x7f96bf2df388 at::native::copy_impl()
[2m[36m(pid=36411)[0m     @     0x7f96bf2e15a4 at::native::copy_()
[2m[36m(pid=36476)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36476)[0m *** SIGSEGV (@0x0) received by PID 36476 (TID 0x7fc0f8ba4700) from PID 0; stack trace: ***
[2m[36m(pid=36476)[0m     @     0x7fc0f877d390 (unknown)
[2m[36m(pid=36491)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36491)[0m *** SIGSEGV (@0x0) received by PID 36491 (TID 0x7ff753345700) from PID 0; stack trace: ***
[2m[36m(pid=36491)[0m     @     0x7ff752f1e390 (unknown)
[2m[36m(pid=36491)[0m     @     0x7fc852e93f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36422)[0m     @     0x7f9b0ae37c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36422)[0m     @     0x7f9b0a2d9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36422)[0m     @     0x7f9b0a2d7388 at::native::copy_impl()
[2m[36m(pid=36422)[0m     @     0x7f9b0a2d95a4 at::native::copy_()
[2m[36m(pid=36482)[0m     @     0x7f3d777f87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36482)[0m     @     0x7f3d777fb8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36482)[0m     @     0x7f3d777fbad3 at::TensorIterator::for_each()
[2m[36m(pid=36482)[0m     @     0x7f3d777fbd91 at::TensorIterator::for_each()
[2m[36m(pid=36496)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36496)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36496)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36496)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36496)[0m *** SIGSEGV (@0x0) received by PID 36496 (TID 0x7f9071da1700) from PID 0; stack trace: ***
[2m[36m(pid=36496)[0m     @     0x7f907197a390 (unknown)
[2m[36m(pid=36496)[0m     @     0x7f61717f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36447)[0m     @     0x7fb41d7f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36447)[0m     @     0x7fb41cf247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36447)[0m     @     0x7fb41cf278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36447)[0m     @     0x7fb41cf27ad3 at::TensorIterator::for_each()
[2m[36m(pid=36443)[0m     @     0x7f82c960a390 (unknown)
[2m[36m(pid=36443)[0m     @     0x7f53c95a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36443)[0m     @     0x7f53c8ccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36443)[0m     @     0x7f53c8cd28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36443)[0m     @     0x7f53c8cd2ad3 at::TensorIterator::for_each()
[2m[36m(pid=36432)[0m     @     0x7f2448b32390 (unknown)
[2m[36m(pid=36432)[0m     @     0x7ef5489e8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36432)[0m     @     0x7ef5481137db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36432)[0m     @     0x7ef5481168f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36432)[0m     @     0x7ef548116ad3 at::TensorIterator::for_each()
[2m[36m(pid=36487)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=36487)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=36487)[0m *** Aborted at 1604572905 (unix time) try "date -d @1604572905" if you are using GNU date ***
[2m[36m(pid=36487)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36487)[0m *** SIGSEGV (@0x0) received by PID 36487 (TID 0x7f50eb7bc700) from PID 0; stack trace: ***
[2m[36m(pid=36487)[0m     @     0x7f50eb395390 (unknown)
[2m[36m(pid=36487)[0m     @     0x7f21eb34df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36487)[0m     @     0x7f21eaa787db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36487)[0m     @     0x7f21eaa7b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36505)[0m     @     0x7fc9757bb390 (unknown)
[2m[36m(pid=36505)[0m     @     0x7f9a756f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36505)[0m     @     0x7f9a74e1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36505)[0m     @     0x7f9a74e228f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36486)[0m     @     0x7f4a103dd390 (unknown)
[2m[36m(pid=36486)[0m     @     0x7f1b10333f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36486)[0m     @     0x7f1b0fa5e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36486)[0m     @     0x7f1b0fa618f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36486)[0m     @     0x7f1b0fa61ad3 at::TensorIterator::for_each()
[2m[36m(pid=36537)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36537)[0m *** SIGSEGV (@0x0) received by PID 36537 (TID 0x7f9235789700) from PID 0; stack trace: ***
[2m[36m(pid=36537)[0m     @     0x7f9235362390 (unknown)
[2m[36m(pid=36537)[0m     @     0x7f63352b7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36537)[0m     @     0x7f63349e27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36537)[0m     @     0x7f63349e58f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36499)[0m     @     0x7efc7401cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36499)[0m     @     0x7efc737477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36499)[0m     @     0x7efc7374a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36499)[0m     @     0x7efc7374aad3 at::TensorIterator::for_each()
[2m[36m(pid=36499)[0m     @     0x7efc7374ad91 at::TensorIterator::for_each()
[2m[36m(pid=36429)[0m     @     0x7f005751e8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36429)[0m     @     0x7f005751ead3 at::TensorIterator::for_each()
[2m[36m(pid=36429)[0m     @     0x7f005751ed91 at::TensorIterator::for_each()
[2m[36m(pid=36429)[0m     @     0x7f0057e01b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36429)[0m     @     0x7f0057e24c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36470)[0m     @     0x7f483788c390 (unknown)
[2m[36m(pid=36470)[0m     @     0x7f193783bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36470)[0m     @     0x7f1936f667db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36470)[0m     @     0x7f1936f698f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36470)[0m     @     0x7f1936f69ad3 at::TensorIterator::for_each()
[2m[36m(pid=36540)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36540)[0m *** SIGSEGV (@0x0) received by PID 36540 (TID 0x7fb1418e5700) from PID 0; stack trace: ***
[2m[36m(pid=36540)[0m     @     0x7fb1414be390 (unknown)
[2m[36m(pid=36540)[0m     @     0x7f8241476f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36540)[0m     @     0x7f8240ba17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36540)[0m     @     0x7f8240ba48f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36488)[0m     @     0x7f4ca6eb97db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36488)[0m     @     0x7f4ca6ebc8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36488)[0m     @     0x7f4ca6ebcad3 at::TensorIterator::for_each()
[2m[36m(pid=36488)[0m     @     0x7f4ca6ebcd91 at::TensorIterator::for_each()
[2m[36m(pid=36520)[0m     @     0x7f30db2b4390 (unknown)
[2m[36m(pid=36520)[0m     @     0x7f01db229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36520)[0m     @     0x7f01da9547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36520)[0m     @     0x7f01da9578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36534)[0m     @     0x7f23745404f5 at::Tensor::copy_()
[2m[36m(pid=36534)[0m     @     0x7f2376a138de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36534)[0m     @     0x7f23745404f5 at::Tensor::copy_()
[2m[36m(pid=36534)[0m     @     0x7f237a5eb79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36534)[0m     @     0x564d5d7b8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36534)[0m     @     0x564d5d713b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36534)[0m     @     0x564d5d79ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36534)[0m     @     0x564d5d79fa20 method_vectorcall
[2m[36m(pid=36534)[0m     @     0x564d5d713bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36534)[0m     @     0x564d5d79ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36534)[0m     @     0x564d5d79f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36534)[0m     @     0x564d5d714689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36534)[0m     @     0x564d5d79ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36534)[0m     @     0x564d5d79f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36534)[0m     @     0x564d5d714689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36534)[0m     @     0x564d5d79ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36534)[0m     @     0x564d5d79f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36534)[0m     @     0x564d5d714689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36534)[0m     @     0x564d5d79ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36534)[0m     @     0x564d5d79f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36534)[0m     @     0x564d5d714689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36428)[0m     @     0x7f4550cb9390 (unknown)
[2m[36m(pid=36428)[0m     @     0x7f1650bd1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36428)[0m     @     0x7f16502fc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36428)[0m     @     0x7f16502ff8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36440)[0m     @     0x7efeabf507db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36440)[0m     @     0x7efeabf538f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36440)[0m     @     0x7efeabf53ad3 at::TensorIterator::for_each()
[2m[36m(pid=36440)[0m     @     0x7efeabf53d91 at::TensorIterator::for_each()
[2m[36m(pid=36477)[0m     @     0x7fb319b58390 (unknown)
[2m[36m(pid=36477)[0m     @     0x7f8419a0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36477)[0m     @     0x7f84191357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36477)[0m     @     0x7f84191388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36477)[0m     @     0x7f8419138ad3 at::TensorIterator::for_each()
[2m[36m(pid=36441)[0m PC: @                0x0 (unknown)
[2m[36m(pid=36441)[0m *** SIGSEGV (@0x0) received by PID 36441 (TID 0x7fb06d374700) from PID 0; stack trace: ***
[2m[36m(pid=36441)[0m     @     0x7fb06cf4d390 (unknown)
[2m[36m(pid=36441)[0m     @     0x7f816cea4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36434)[0m     @     0x7f566d8688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36434)[0m     @     0x7f566d868ad3 at::TensorIterator::for_each()
[2m[36m(pid=36434)[0m     @     0x7f566d868d91 at::TensorIterator::for_each()
[2m[36m(pid=36434)[0m     @     0x7f566e14bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36434)[0m     @     0x7f566e16ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36425)[0m     @     0x7eeb0e9e78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36425)[0m     @     0x7eeb0e9e7ad3 at::TensorIterator::for_each()
[2m[36m(pid=36421)[0m     @     0x7f1174292ad3 at::TensorIterator::for_each()
[2m[36m(pid=36421)[0m     @     0x7f1174292d91 at::TensorIterator::for_each()
[2m[36m(pid=36421)[0m     @     0x7f1174b75b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36427)[0m     @     0x7f0a8de388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36427)[0m     @     0x7f0a8de38ad3 at::TensorIterator::for_each()
[2m[36m(pid=36430)[0m     @     0x7f02929578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36430)[0m     @     0x7f0292957ad3 at::TensorIterator::for_each()
[2m[36m(pid=36531)[0m     @     0x7efc0cf278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36531)[0m     @     0x7efc0cf27ad3 at::TensorIterator::for_each()
[2m[36m(pid=36518)[0m     @     0x7f1f2a51ead3 at::TensorIterator::for_each()
[2m[36m(pid=36518)[0m     @     0x7f1f2a51ed91 at::TensorIterator::for_each()
[2m[36m(pid=36518)[0m     @     0x7f1f2ae01b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36500)[0m     @     0x7f5593c64d91 at::TensorIterator::for_each()
[2m[36m(pid=36500)[0m     @     0x7f5594547b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36500)[0m     @     0x7f559456ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36485)[0m     @     0x7f25e7c8e4f5 at::Tensor::copy_()
[2m[36m(pid=36485)[0m     @     0x7f25ea1618de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36490)[0m     @     0x7eea929714f5 at::Tensor::copy_()
[2m[36m(pid=36490)[0m     @     0x7eea98a1c79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36490)[0m     @     0x564818430fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36490)[0m     @     0x56481838bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36490)[0m     @     0x564818416baf _PyEval_EvalCodeWithName
[2m[36m(pid=36490)[0m     @     0x564818417a20 method_vectorcall
[2m[36m(pid=36490)[0m     @     0x56481838bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36490)[0m     @     0x564818416baf _PyEval_EvalCodeWithName
[2m[36m(pid=36490)[0m     @     0x564818417643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36490)[0m     @     0x56481838c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36490)[0m     @     0x564818416baf _PyEval_EvalCodeWithName
[2m[36m(pid=36490)[0m     @     0x564818417643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36490)[0m     @     0x56481838c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36490)[0m     @     0x564818416baf _PyEval_EvalCodeWithName
[2m[36m(pid=36490)[0m     @     0x564818417643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36490)[0m     @     0x56481838c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36490)[0m     @     0x564818416baf _PyEval_EvalCodeWithName
[2m[36m(pid=36490)[0m     @     0x564818417643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36490)[0m     @     0x56481838c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36514)[0m     @     0x7f953340d4f5 at::Tensor::copy_()
[2m[36m(pid=36514)[0m     @     0x7f95394b879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36514)[0m     @     0x55cbe6d1efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36514)[0m     @     0x55cbe6c79b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36514)[0m     @     0x55cbe6d04baf _PyEval_EvalCodeWithName
[2m[36m(pid=36514)[0m     @     0x55cbe6d05a20 method_vectorcall
[2m[36m(pid=36514)[0m     @     0x55cbe6c79bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36514)[0m     @     0x55cbe6d04baf _PyEval_EvalCodeWithName
[2m[36m(pid=36514)[0m     @     0x55cbe6d05643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36514)[0m     @     0x55cbe6c7a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36514)[0m     @     0x55cbe6d04baf _PyEval_EvalCodeWithName
[2m[36m(pid=36514)[0m     @     0x55cbe6d05643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36514)[0m     @     0x55cbe6c7a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36514)[0m     @     0x55cbe6d04baf _PyEval_EvalCodeWithName
[2m[36m(pid=36514)[0m     @     0x55cbe6d05643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36514)[0m     @     0x55cbe6c7a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36514)[0m     @     0x55cbe6d04baf _PyEval_EvalCodeWithName
[2m[36m(pid=36514)[0m     @     0x55cbe6d05643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36514)[0m     @     0x55cbe6c7a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36526)[0m     @     0x7fbefefcb5a4 at::native::copy_()
[2m[36m(pid=36526)[0m     @     0x7fbeff6b64f5 at::Tensor::copy_()
[2m[36m(pid=36526)[0m     @     0x7fbf01b898de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36554)[0m     @     0x7fa9c3eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36554)[0m     @     0x7fa9c19e54f5 at::Tensor::copy_()
[2m[36m(pid=36554)[0m     @     0x7fa9c7a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36554)[0m     @     0x5597034c2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36554)[0m     @     0x55970341db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36554)[0m     @     0x5597034a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36554)[0m     @     0x5597034a9a20 method_vectorcall
[2m[36m(pid=36554)[0m     @     0x55970341dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36554)[0m     @     0x5597034a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36554)[0m     @     0x5597034a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36554)[0m     @     0x55970341e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36554)[0m     @     0x5597034a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36554)[0m     @     0x5597034a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36554)[0m     @     0x55970341e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36554)[0m     @     0x5597034a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36554)[0m     @     0x5597034a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36554)[0m     @     0x55970341e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36554)[0m     @     0x5597034a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36554)[0m     @     0x5597034a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36554)[0m     @     0x55970341e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36431)[0m     @     0x7f0d5788d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36431)[0m     @     0x7f0d553ba4f5 at::Tensor::copy_()
[2m[36m(pid=36431)[0m     @     0x7f0d5b46579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36431)[0m     @     0x55c20a627fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36431)[0m     @     0x55c20a582b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36431)[0m     @     0x55c20a60dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36431)[0m     @     0x55c20a60ea20 method_vectorcall
[2m[36m(pid=36431)[0m     @     0x55c20a582bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36431)[0m     @     0x55c20a60dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36431)[0m     @     0x55c20a60e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36431)[0m     @     0x55c20a583689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36431)[0m     @     0x55c20a60dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36431)[0m     @     0x55c20a60e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36431)[0m     @     0x55c20a583689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36431)[0m     @     0x55c20a60dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36431)[0m     @     0x55c20a60e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36431)[0m     @     0x55c20a583689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36431)[0m     @     0x55c20a60dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36431)[0m     @     0x55c20a60e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36431)[0m     @     0x55c20a583689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36530)[0m     @     0x7f93f52354f5 at::Tensor::copy_()
[2m[36m(pid=36530)[0m     @     0x7f93f77088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36497)[0m     @     0x7f18c7d2cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36497)[0m     @     0x7f18c74577db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36497)[0m     @     0x7f18c745a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36515)[0m     @     0x7ecdc3e0a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36515)[0m     @     0x7ecdc3e0d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36516)[0m     @     0x7f19e51357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36516)[0m     @     0x7f19e51388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36545)[0m     @     0x7efbeb49f4f5 at::Tensor::copy_()
[2m[36m(pid=36545)[0m     @     0x7efbed9728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36493)[0m     @     0x7f3f7b3cf4f5 at::Tensor::copy_()
[2m[36m(pid=36493)[0m     @     0x7f3f7d8a28de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36484)[0m     @     0x7eeac59728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36484)[0m     @     0x7eeac349f4f5 at::Tensor::copy_()
[2m[36m(pid=36484)[0m     @     0x7eeac954a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36484)[0m     @     0x561d5a6fafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36484)[0m     @     0x561d5a655b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36484)[0m     @     0x561d5a6e0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36484)[0m     @     0x561d5a6e1a20 method_vectorcall
[2m[36m(pid=36484)[0m     @     0x561d5a655bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36484)[0m     @     0x561d5a6e0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36484)[0m     @     0x561d5a6e1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36484)[0m     @     0x561d5a656689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36484)[0m     @     0x561d5a6e0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36484)[0m     @     0x561d5a6e1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36484)[0m     @     0x561d5a656689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36484)[0m     @     0x561d5a6e0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36484)[0m     @     0x561d5a6e1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36484)[0m     @     0x561d5a656689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36484)[0m     @     0x561d5a6e0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36484)[0m     @     0x561d5a6e1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36484)[0m     @     0x561d5a656689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36424)[0m     @     0x7f5b60ab58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36424)[0m     @     0x7f5b5e5e24f5 at::Tensor::copy_()
[2m[36m(pid=36424)[0m     @     0x7f5b6468d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36424)[0m     @     0x55a2fd60dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36424)[0m     @     0x55a2fd568b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36424)[0m     @     0x55a2fd5f3baf _PyEval_EvalCodeWithName
[2m[36m(pid=36424)[0m     @     0x55a2fd5f4a20 method_vectorcall
[2m[36m(pid=36424)[0m     @     0x55a2fd568bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36424)[0m     @     0x55a2fd5f3baf _PyEval_EvalCodeWithName
[2m[36m(pid=36424)[0m     @     0x55a2fd5f4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36424)[0m     @     0x55a2fd569689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36424)[0m     @     0x55a2fd5f3baf _PyEval_EvalCodeWithName
[2m[36m(pid=36424)[0m     @     0x55a2fd5f4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36424)[0m     @     0x55a2fd569689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36424)[0m     @     0x55a2fd5f3baf _PyEval_EvalCodeWithName
[2m[36m(pid=36424)[0m     @     0x55a2fd5f4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36424)[0m     @     0x55a2fd569689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36424)[0m     @     0x55a2fd5f3baf _PyEval_EvalCodeWithName
[2m[36m(pid=36424)[0m     @     0x55a2fd5f4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36424)[0m     @     0x55a2fd569689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36489)[0m     @     0x7ed420f384f5 at::Tensor::copy_()
[2m[36m(pid=36489)[0m     @     0x7ed426fe379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36489)[0m     @     0x55615e7a7fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36489)[0m     @     0x55615e702b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36489)[0m     @     0x55615e78dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36489)[0m     @     0x55615e78ea20 method_vectorcall
[2m[36m(pid=36489)[0m     @     0x55615e702bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36489)[0m     @     0x55615e78dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36489)[0m     @     0x55615e78e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36489)[0m     @     0x55615e703689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36489)[0m     @     0x55615e78dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36489)[0m     @     0x55615e78e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36489)[0m     @     0x55615e703689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36489)[0m     @     0x55615e78dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36489)[0m     @     0x55615e78e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36489)[0m     @     0x55615e703689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36489)[0m     @     0x55615e78dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36489)[0m     @     0x55615e78e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36489)[0m     @     0x55615e703689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36412)[0m     @     0x7f58639024f5 at::Tensor::copy_()
[2m[36m(pid=36412)[0m     @     0x7f58699ad79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36412)[0m     @     0x55d92435bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36412)[0m     @     0x55d9242b6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36412)[0m     @     0x55d924341baf _PyEval_EvalCodeWithName
[2m[36m(pid=36412)[0m     @     0x55d924342a20 method_vectorcall
[2m[36m(pid=36412)[0m     @     0x55d9242b6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36412)[0m     @     0x55d924341baf _PyEval_EvalCodeWithName
[2m[36m(pid=36412)[0m     @     0x55d924342643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36412)[0m     @     0x55d9242b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36412)[0m     @     0x55d924341baf _PyEval_EvalCodeWithName
[2m[36m(pid=36412)[0m     @     0x55d924342643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36412)[0m     @     0x55d9242b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36412)[0m     @     0x55d924341baf _PyEval_EvalCodeWithName
[2m[36m(pid=36412)[0m     @     0x55d924342643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36412)[0m     @     0x55d9242b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36412)[0m     @     0x55d924341baf _PyEval_EvalCodeWithName
[2m[36m(pid=36412)[0m     @     0x55d924342643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36412)[0m     @     0x55d9242b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36519)[0m     @     0x7f206646479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36519)[0m     @     0x55bdb1fadfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36519)[0m     @     0x55bdb1f08b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36519)[0m     @     0x55bdb1f93baf _PyEval_EvalCodeWithName
[2m[36m(pid=36519)[0m     @     0x55bdb1f94a20 method_vectorcall
[2m[36m(pid=36519)[0m     @     0x55bdb1f08bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36519)[0m     @     0x55bdb1f93baf _PyEval_EvalCodeWithName
[2m[36m(pid=36519)[0m     @     0x55bdb1f94643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36519)[0m     @     0x55bdb1f09689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36519)[0m     @     0x55bdb1f93baf _PyEval_EvalCodeWithName
[2m[36m(pid=36519)[0m     @     0x55bdb1f94643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36519)[0m     @     0x55bdb1f09689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36519)[0m     @     0x55bdb1f93baf _PyEval_EvalCodeWithName
[2m[36m(pid=36519)[0m     @     0x55bdb1f94643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36519)[0m     @     0x55bdb1f09689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36519)[0m     @     0x55bdb1f93baf _PyEval_EvalCodeWithName
[2m[36m(pid=36519)[0m     @     0x55bdb1f94643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36519)[0m     @     0x55bdb1f09689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36474)[0m     @     0x7f8ea71e04f5 at::Tensor::copy_()
[2m[36m(pid=36474)[0m     @     0x7f8ead28b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36474)[0m     @     0x55eb8d7dafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36474)[0m     @     0x55eb8d735b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36474)[0m     @     0x55eb8d7c0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36474)[0m     @     0x55eb8d7c1a20 method_vectorcall
[2m[36m(pid=36474)[0m     @     0x55eb8d735bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36474)[0m     @     0x55eb8d7c0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36474)[0m     @     0x55eb8d7c1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36474)[0m     @     0x55eb8d736689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36474)[0m     @     0x55eb8d7c0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36474)[0m     @     0x55eb8d7c1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36474)[0m     @     0x55eb8d736689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36474)[0m     @     0x55eb8d7c0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36474)[0m     @     0x55eb8d7c1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36474)[0m     @     0x55eb8d736689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36474)[0m     @     0x55eb8d7c0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36474)[0m     @     0x55eb8d7c1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36474)[0m     @     0x55eb8d736689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36469)[0m     @     0x7f0311ad75a4 at::native::copy_()
[2m[36m(pid=36469)[0m     @     0x7f03121c24f5 at::Tensor::copy_()
[2m[36m(pid=36469)[0m     @     0x7f03146958de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36437)[0m     @     0x7f199f9ca4f5 at::Tensor::copy_()
[2m[36m(pid=36437)[0m     @     0x7f19a5a7579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36437)[0m     @     0x55eff92e2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36437)[0m     @     0x55eff923db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36437)[0m     @     0x55eff92c8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36437)[0m     @     0x55eff92c9a20 method_vectorcall
[2m[36m(pid=36437)[0m     @     0x55eff923dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36437)[0m     @     0x55eff92c8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36437)[0m     @     0x55eff92c9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36437)[0m     @     0x55eff923e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36437)[0m     @     0x55eff92c8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36437)[0m     @     0x55eff92c9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36437)[0m     @     0x55eff923e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36437)[0m     @     0x55eff92c8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36437)[0m     @     0x55eff92c9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36437)[0m     @     0x55eff923e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36437)[0m     @     0x55eff92c8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36437)[0m     @     0x55eff92c9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36437)[0m     @     0x55eff923e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36523)[0m     @     0x7f85b4bf24f5 at::Tensor::copy_()
[2m[36m(pid=36523)[0m     @     0x7f85bac9d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36523)[0m     @     0x55f25ec0afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36523)[0m     @     0x55f25eb65b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36523)[0m     @     0x55f25ebf0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36523)[0m     @     0x55f25ebf1a20 method_vectorcall
[2m[36m(pid=36523)[0m     @     0x55f25eb65bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36523)[0m     @     0x55f25ebf0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36523)[0m     @     0x55f25ebf1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36523)[0m     @     0x55f25eb66689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36523)[0m     @     0x55f25ebf0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36523)[0m     @     0x55f25ebf1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36523)[0m     @     0x55f25eb66689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36523)[0m     @     0x55f25ebf0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36523)[0m     @     0x55f25ebf1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36523)[0m     @     0x55f25eb66689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36523)[0m     @     0x55f25ebf0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36523)[0m     @     0x55f25ebf1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36523)[0m     @     0x55f25eb66689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36478)[0m     @     0x7f57ded875a4 at::native::copy_()
[2m[36m(pid=36478)[0m     @     0x7f57df4724f5 at::Tensor::copy_()
[2m[36m(pid=36478)[0m     @     0x7f57e19458de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36495)[0m     @     0x7f7df933fad3 at::TensorIterator::for_each()
[2m[36m(pid=36495)[0m     @     0x7f7df933fd91 at::TensorIterator::for_each()
[2m[36m(pid=36495)[0m     @     0x7f7df9c22b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36495)[0m     @     0x7f7df9c45c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36445)[0m     @     0x7f44307924f5 at::Tensor::copy_()
[2m[36m(pid=36445)[0m     @     0x7f4432c658de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36445)[0m     @     0x7f44307924f5 at::Tensor::copy_()
[2m[36m(pid=36445)[0m     @     0x7f443683d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36445)[0m     @     0x55cd59f63fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36445)[0m     @     0x55cd59ebeb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36445)[0m     @     0x55cd59f49baf _PyEval_EvalCodeWithName
[2m[36m(pid=36445)[0m     @     0x55cd59f4aa20 method_vectorcall
[2m[36m(pid=36445)[0m     @     0x55cd59ebebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36445)[0m     @     0x55cd59f49baf _PyEval_EvalCodeWithName
[2m[36m(pid=36445)[0m     @     0x55cd59f4a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36445)[0m     @     0x55cd59ebf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36445)[0m     @     0x55cd59f49baf _PyEval_EvalCodeWithName
[2m[36m(pid=36445)[0m     @     0x55cd59f4a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36445)[0m     @     0x55cd59ebf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36445)[0m     @     0x55cd59f49baf _PyEval_EvalCodeWithName
[2m[36m(pid=36445)[0m     @     0x55cd59f4a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36445)[0m     @     0x55cd59ebf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36525)[0m     @     0x7faabe74f4f5 at::Tensor::copy_()
[2m[36m(pid=36525)[0m     @     0x7faac0c228de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36525)[0m     @     0x7faabe74f4f5 at::Tensor::copy_()
[2m[36m(pid=36525)[0m     @     0x7faac47fa79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36416)[0m     @     0x7f13a2dea4f5 at::Tensor::copy_()
[2m[36m(pid=36416)[0m     @     0x7f13a8e9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36416)[0m     @     0x560928ad5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36416)[0m     @     0x560928a30b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36416)[0m     @     0x560928abbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36416)[0m     @     0x560928abca20 method_vectorcall
[2m[36m(pid=36416)[0m     @     0x560928a30bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36416)[0m     @     0x560928abbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36416)[0m     @     0x560928abc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36416)[0m     @     0x560928a31689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36416)[0m     @     0x560928abbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36416)[0m     @     0x560928abc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36416)[0m     @     0x560928a31689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36416)[0m     @     0x560928abbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36416)[0m     @     0x560928abc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36416)[0m     @     0x560928a31689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36416)[0m     @     0x560928abbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36416)[0m     @     0x560928abc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36416)[0m     @     0x560928a31689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36467)[0m     @     0x7f742b8095a4 at::native::copy_()
[2m[36m(pid=36467)[0m     @     0x7f742bef44f5 at::Tensor::copy_()
[2m[36m(pid=36467)[0m     @     0x7f742e3c78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36442)[0m     @     0x7fa4c4e9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36442)[0m     @     0x55dd727f2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36442)[0m     @     0x55dd7274db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36442)[0m     @     0x55dd727d8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36442)[0m     @     0x55dd727d9a20 method_vectorcall
[2m[36m(pid=36442)[0m     @     0x55dd7274dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36442)[0m     @     0x55dd727d8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36442)[0m     @     0x55dd727d9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36442)[0m     @     0x55dd7274e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36442)[0m     @     0x55dd727d8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36442)[0m     @     0x55dd727d9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36442)[0m     @     0x55dd7274e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36442)[0m     @     0x55dd727d8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36442)[0m     @     0x55dd727d9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36442)[0m     @     0x55dd7274e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36442)[0m     @     0x55dd727d8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36442)[0m     @     0x55dd727d9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36442)[0m     @     0x55dd7274e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36538)[0m     @     0x7ecfb9c27d91 at::TensorIterator::for_each()
[2m[36m(pid=36538)[0m     @     0x7ecfba50ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36538)[0m     @     0x7ecfba52dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36483)[0m     @     0x7f2f866ff5a4 at::native::copy_()
[2m[36m(pid=36483)[0m     @     0x7f2f86dea4f5 at::Tensor::copy_()
[2m[36m(pid=36483)[0m     @     0x7f2f892bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36507)[0m     @     0x7fb0ebbdd4f5 at::Tensor::copy_()
[2m[36m(pid=36507)[0m     @     0x7fb0f1c8879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36507)[0m     @     0x556cbfac8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36507)[0m     @     0x556cbfa23b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36507)[0m     @     0x556cbfaaebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36507)[0m     @     0x556cbfaafa20 method_vectorcall
[2m[36m(pid=36507)[0m     @     0x556cbfa23bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36507)[0m     @     0x556cbfaaebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36507)[0m     @     0x556cbfaaf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36507)[0m     @     0x556cbfa24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36507)[0m     @     0x556cbfaaebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36507)[0m     @     0x556cbfaaf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36507)[0m     @     0x556cbfa24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36507)[0m     @     0x556cbfaaebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36507)[0m     @     0x556cbfaaf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36507)[0m     @     0x556cbfa24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36507)[0m     @     0x556cbfaaebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36507)[0m     @     0x556cbfaaf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36507)[0m     @     0x556cbfa24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36414)[0m     @     0x7ed5556105a4 at::native::copy_()
[2m[36m(pid=36414)[0m     @     0x7ed555cfb4f5 at::Tensor::copy_()
[2m[36m(pid=36414)[0m     @     0x7ed5581ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36521)[0m     @     0x7f15acd9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36521)[0m     @     0x55eefd2d1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36521)[0m     @     0x55eefd22cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36521)[0m     @     0x55eefd2b7baf _PyEval_EvalCodeWithName
[2m[36m(pid=36521)[0m     @     0x55eefd2b8a20 method_vectorcall
[2m[36m(pid=36521)[0m     @     0x55eefd22cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36521)[0m     @     0x55eefd2b7baf _PyEval_EvalCodeWithName
[2m[36m(pid=36521)[0m     @     0x55eefd2b8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36521)[0m     @     0x55eefd22d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36521)[0m     @     0x55eefd2b7baf _PyEval_EvalCodeWithName
[2m[36m(pid=36521)[0m     @     0x55eefd2b8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36521)[0m     @     0x55eefd22d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36521)[0m     @     0x55eefd2b7baf _PyEval_EvalCodeWithName
[2m[36m(pid=36521)[0m     @     0x55eefd2b8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36521)[0m     @     0x55eefd22d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36521)[0m     @     0x55eefd2b7baf _PyEval_EvalCodeWithName
[2m[36m(pid=36521)[0m     @     0x55eefd2b8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36521)[0m     @     0x55eefd22d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36415)[0m     @     0x7f09acd1e4f5 at::Tensor::copy_()
[2m[36m(pid=36415)[0m     @     0x7f09b2dc979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36415)[0m     @     0x55edebfaefd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36415)[0m     @     0x55edebf09b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36415)[0m     @     0x55edebf94baf _PyEval_EvalCodeWithName
[2m[36m(pid=36415)[0m     @     0x55edebf95a20 method_vectorcall
[2m[36m(pid=36415)[0m     @     0x55edebf09bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36415)[0m     @     0x55edebf94baf _PyEval_EvalCodeWithName
[2m[36m(pid=36415)[0m     @     0x55edebf95643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36415)[0m     @     0x55edebf0a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36415)[0m     @     0x55edebf94baf _PyEval_EvalCodeWithName
[2m[36m(pid=36415)[0m     @     0x55edebf95643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36415)[0m     @     0x55edebf0a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36415)[0m     @     0x55edebf94baf _PyEval_EvalCodeWithName
[2m[36m(pid=36415)[0m     @     0x55edebf95643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36415)[0m     @     0x55edebf0a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36415)[0m     @     0x55edebf94baf _PyEval_EvalCodeWithName
[2m[36m(pid=36415)[0m     @     0x55edebf95643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36415)[0m     @     0x55edebf0a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36426)[0m     @     0x7f42692cd5a4 at::native::copy_()
[2m[36m(pid=36426)[0m     @     0x7f42699b84f5 at::Tensor::copy_()
[2m[36m(pid=36426)[0m     @     0x7f426be8b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36426)[0m     @     0x7f42699b84f5 at::Tensor::copy_()
[2m[36m(pid=36494)[0m     @     0x7fab73f2579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36494)[0m     @     0x5596acd17fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36494)[0m     @     0x5596acc72b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36494)[0m     @     0x5596accfdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36494)[0m     @     0x5596accfea20 method_vectorcall
[2m[36m(pid=36494)[0m     @     0x5596acc72bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36494)[0m     @     0x5596accfdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36494)[0m     @     0x5596accfe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36494)[0m     @     0x5596acc73689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36494)[0m     @     0x5596accfdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36494)[0m     @     0x5596accfe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36494)[0m     @     0x5596acc73689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36494)[0m     @     0x5596accfdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36494)[0m     @     0x5596accfe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36494)[0m     @     0x5596acc73689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36494)[0m     @     0x5596accfdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36494)[0m     @     0x5596accfe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36494)[0m     @     0x5596acc73689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36510)[0m     @     0x7ef4fedea4f5 at::Tensor::copy_()
[2m[36m(pid=36510)[0m     @     0x7ef504e9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36510)[0m     @     0x563ee61d1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36510)[0m     @     0x563ee612cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36510)[0m     @     0x563ee61b7baf _PyEval_EvalCodeWithName
[2m[36m(pid=36510)[0m     @     0x563ee61b8a20 method_vectorcall
[2m[36m(pid=36510)[0m     @     0x563ee612cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36510)[0m     @     0x563ee61b7baf _PyEval_EvalCodeWithName
[2m[36m(pid=36510)[0m     @     0x563ee61b8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36510)[0m     @     0x563ee612d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36510)[0m     @     0x563ee61b7baf _PyEval_EvalCodeWithName
[2m[36m(pid=36510)[0m     @     0x563ee61b8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36510)[0m     @     0x563ee612d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36510)[0m     @     0x563ee61b7baf _PyEval_EvalCodeWithName
[2m[36m(pid=36510)[0m     @     0x563ee61b8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36510)[0m     @     0x563ee612d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36510)[0m     @     0x563ee61b7baf _PyEval_EvalCodeWithName
[2m[36m(pid=36510)[0m     @     0x563ee61b8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36510)[0m     @     0x563ee612d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36410)[0m     @     0x7f63257025a4 at::native::copy_()
[2m[36m(pid=36410)[0m     @     0x7f6325ded4f5 at::Tensor::copy_()
[2m[36m(pid=36410)[0m     @     0x7f63282c08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36480)[0m     @     0x7f6f01a7a5a4 at::native::copy_()
[2m[36m(pid=36480)[0m     @     0x7f6f021654f5 at::Tensor::copy_()
[2m[36m(pid=36480)[0m     @     0x7f6f046388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36480)[0m     @     0x7f6f021654f5 at::Tensor::copy_()
[2m[36m(pid=36417)[0m     @     0x7fa831e38d91 at::TensorIterator::for_each()
[2m[36m(pid=36417)[0m     @     0x7fa83271bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36417)[0m     @     0x7fa83273ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36417)[0m     @     0x7fa831be0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36417)[0m     @     0x7fa831bde388 at::native::copy_impl()
[2m[36m(pid=36528)[0m     @     0x7f62b13ba4f5 at::Tensor::copy_()
[2m[36m(pid=36528)[0m     @     0x7f62b746579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36528)[0m     @     0x562624978fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36528)[0m     @     0x5626248d3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36528)[0m     @     0x56262495ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36528)[0m     @     0x56262495fa20 method_vectorcall
[2m[36m(pid=36528)[0m     @     0x5626248d3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36528)[0m     @     0x56262495ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36528)[0m     @     0x56262495f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36528)[0m     @     0x5626248d4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36528)[0m     @     0x56262495ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36528)[0m     @     0x56262495f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36528)[0m     @     0x5626248d4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36528)[0m     @     0x56262495ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36528)[0m     @     0x56262495f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36528)[0m     @     0x5626248d4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36528)[0m     @     0x56262495ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36528)[0m     @     0x56262495f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36528)[0m     @     0x5626248d4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36492)[0m     @     0x7f04605f74f5 at::Tensor::copy_()
[2m[36m(pid=36492)[0m     @     0x7f04666a279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36492)[0m     @     0x55dfc192cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36492)[0m     @     0x55dfc1887b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36492)[0m     @     0x55dfc1912baf _PyEval_EvalCodeWithName
[2m[36m(pid=36492)[0m     @     0x55dfc1913a20 method_vectorcall
[2m[36m(pid=36492)[0m     @     0x55dfc1887bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36492)[0m     @     0x55dfc1912baf _PyEval_EvalCodeWithName
[2m[36m(pid=36492)[0m     @     0x55dfc1913643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36492)[0m     @     0x55dfc1888689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36492)[0m     @     0x55dfc1912baf _PyEval_EvalCodeWithName
[2m[36m(pid=36492)[0m     @     0x55dfc1913643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36492)[0m     @     0x55dfc1888689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36492)[0m     @     0x55dfc1912baf _PyEval_EvalCodeWithName
[2m[36m(pid=36492)[0m     @     0x55dfc1913643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36492)[0m     @     0x55dfc1888689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36492)[0m     @     0x55dfc1912baf _PyEval_EvalCodeWithName
[2m[36m(pid=36492)[0m     @     0x55dfc1913643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36492)[0m     @     0x55dfc1888689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36413)[0m     @     0x7f8e66ffb4f5 at::Tensor::copy_()
[2m[36m(pid=36413)[0m     @     0x7f8e694ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36413)[0m     @     0x7f8e66ffb4f5 at::Tensor::copy_()
[2m[36m(pid=36413)[0m     @     0x7f8e6d0a679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36413)[0m     @     0x5609f0499fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36413)[0m     @     0x5609f03f4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36413)[0m     @     0x5609f047fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36413)[0m     @     0x5609f0480a20 method_vectorcall
[2m[36m(pid=36413)[0m     @     0x5609f03f4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36413)[0m     @     0x5609f047fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36413)[0m     @     0x5609f0480643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36413)[0m     @     0x5609f03f5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36413)[0m     @     0x5609f047fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36413)[0m     @     0x5609f0480643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36413)[0m     @     0x5609f03f5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36413)[0m     @     0x5609f047fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36413)[0m     @     0x5609f0480643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36413)[0m     @     0x5609f03f5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36413)[0m     @     0x5609f047fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36413)[0m     @     0x5609f0480643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36413)[0m     @     0x5609f03f5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36418)[0m     @     0x7fad20e22d91 at::TensorIterator::for_each()
[2m[36m(pid=36418)[0m     @     0x7fad21705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36418)[0m     @     0x7fad21728c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36418)[0m     @     0x7fad20bcaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36418)[0m     @     0x7fad20bc8388 at::native::copy_impl()
[2m[36m(pid=36503)[0m     @     0x7f7e7d28dd91 at::TensorIterator::for_each()
[2m[36m(pid=36503)[0m     @     0x7f7e7db70b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36503)[0m     @     0x7f7e7db93c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36503)[0m     @     0x7f7e7d035a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36503)[0m     @     0x7f7e7d033388 at::native::copy_impl()
[2m[36m(pid=36420)[0m     @     0x7f590d6b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36420)[0m     @     0x7f590b1e04f5 at::Tensor::copy_()
[2m[36m(pid=36420)[0m     @     0x7f591128b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36420)[0m     @     0x55a1bb9bffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36420)[0m     @     0x55a1bb91ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36420)[0m     @     0x55a1bb9a5baf _PyEval_EvalCodeWithName
[2m[36m(pid=36420)[0m     @     0x55a1bb9a6a20 method_vectorcall
[2m[36m(pid=36420)[0m     @     0x55a1bb91abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36420)[0m     @     0x55a1bb9a5baf _PyEval_EvalCodeWithName
[2m[36m(pid=36420)[0m     @     0x55a1bb9a6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36420)[0m     @     0x55a1bb91b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36420)[0m     @     0x55a1bb9a5baf _PyEval_EvalCodeWithName
[2m[36m(pid=36420)[0m     @     0x55a1bb9a6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36420)[0m     @     0x55a1bb91b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36420)[0m     @     0x55a1bb9a5baf _PyEval_EvalCodeWithName
[2m[36m(pid=36420)[0m     @     0x55a1bb9a6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36420)[0m     @     0x55a1bb91b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36420)[0m     @     0x55a1bb9a5baf _PyEval_EvalCodeWithName
[2m[36m(pid=36420)[0m     @     0x55a1bb9a6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36420)[0m     @     0x55a1bb91b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36446)[0m     @     0x7f25982ffad3 at::TensorIterator::for_each()
[2m[36m(pid=36446)[0m     @     0x7f25982ffd91 at::TensorIterator::for_each()
[2m[36m(pid=36446)[0m     @     0x7f2598be2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36446)[0m     @     0x7f2598c05c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36446)[0m     @     0x7f25980a7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36446)[0m     @     0x7f25980a5388 at::native::copy_impl()
[2m[36m(pid=36411)[0m     @     0x7f96bf9cc4f5 at::Tensor::copy_()
[2m[36m(pid=36411)[0m     @     0x7f96c1e9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36411)[0m     @     0x7f96bf9cc4f5 at::Tensor::copy_()
[2m[36m(pid=36411)[0m     @     0x7f96c5a7779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36411)[0m     @     0x55599399efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36411)[0m     @     0x5559938f9b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36411)[0m     @     0x555993984baf _PyEval_EvalCodeWithName
[2m[36m(pid=36411)[0m     @     0x555993985a20 method_vectorcall
[2m[36m(pid=36411)[0m     @     0x5559938f9bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36411)[0m     @     0x555993984baf _PyEval_EvalCodeWithName
[2m[36m(pid=36411)[0m     @     0x555993985643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36411)[0m     @     0x5559938fa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36411)[0m     @     0x555993984baf _PyEval_EvalCodeWithName
[2m[36m(pid=36411)[0m     @     0x555993985643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36411)[0m     @     0x5559938fa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36411)[0m     @     0x555993984baf _PyEval_EvalCodeWithName
[2m[36m(pid=36476)[0m     @     0x7f91f871ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=36476)[0m     @     0x7f91f7e4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36491)[0m     @     0x7fc8525be7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36491)[0m     @     0x7fc8525c18f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36491)[0m     @     0x7fc8525c1ad3 at::TensorIterator::for_each()
[2m[36m(pid=36491)[0m     @     0x7fc8525c1d91 at::TensorIterator::for_each()
[2m[36m(pid=36422)[0m     @     0x7f9b0a9c44f5 at::Tensor::copy_()
[2m[36m(pid=36422)[0m     @     0x7f9b0ce978de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36422)[0m     @     0x7f9b0a9c44f5 at::Tensor::copy_()
[2m[36m(pid=36422)[0m     @     0x7f9b10a6f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36422)[0m     @     0x558054ad9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36422)[0m     @     0x558054a34b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36422)[0m     @     0x558054abfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36422)[0m     @     0x558054ac0a20 method_vectorcall
[2m[36m(pid=36422)[0m     @     0x558054a34bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36422)[0m     @     0x558054abfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36422)[0m     @     0x558054ac0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36422)[0m     @     0x558054a35689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36482)[0m     @     0x7f3d780deb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36482)[0m     @     0x7f3d78101c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36482)[0m     @     0x7f3d775a3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36482)[0m     @     0x7f3d775a1388 at::native::copy_impl()
[2m[36m(pid=36496)[0m     @     0x7f6170f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36496)[0m     @     0x7f6170f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36447)[0m     @     0x7fb41cf27d91 at::TensorIterator::for_each()
[2m[36m(pid=36447)[0m     @     0x7fb41d80ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36447)[0m     @     0x7fb41d82dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36447)[0m     @     0x7fb41cccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36447)[0m     @     0x7fb41cccd388 at::native::copy_impl()
[2m[36m(pid=36443)[0m     @     0x7f53c8cd2d91 at::TensorIterator::for_each()
[2m[36m(pid=36443)[0m     @     0x7f53c95b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36443)[0m     @     0x7f53c95d8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36432)[0m     @     0x7ef548116d91 at::TensorIterator::for_each()
[2m[36m(pid=36432)[0m     @     0x7ef5489f9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36432)[0m     @     0x7ef548a1cc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36487)[0m     @     0x7f21eaa7bad3 at::TensorIterator::for_each()
[2m[36m(pid=36487)[0m     @     0x7f21eaa7bd91 at::TensorIterator::for_each()
[2m[36m(pid=36487)[0m     @     0x7f21eb35eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36487)[0m     @     0x7f21eb381c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36486)[0m     @     0x7f1b0fa61d91 at::TensorIterator::for_each()
[2m[36m(pid=36486)[0m     @     0x7f1b10344b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36486)[0m     @     0x7f1b10367c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36486)[0m     @     0x7f1b0f809a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36537)[0m     @     0x7f63349e5ad3 at::TensorIterator::for_each()
[2m[36m(pid=36537)[0m     @     0x7f63349e5d91 at::TensorIterator::for_each()
[2m[36m(pid=36537)[0m     @     0x7f63352c8b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36537)[0m     @     0x7f63352ebc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36499)[0m     @     0x7efc7402db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36499)[0m     @     0x7efc74050c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36499)[0m     @     0x7efc734f2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36499)[0m     @     0x7efc734f0388 at::native::copy_impl()
[2m[36m(pid=36499)[0m     @     0x7efc734f25a4 at::native::copy_()
[2m[36m(pid=36429)[0m     @     0x7f00572c6a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36429)[0m     @     0x7f00572c4388 at::native::copy_impl()
[2m[36m(pid=36429)[0m     @     0x7f00572c65a4 at::native::copy_()
[2m[36m(pid=36470)[0m     @     0x7f1936f69d91 at::TensorIterator::for_each()
[2m[36m(pid=36470)[0m     @     0x7f193784cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36470)[0m     @     0x7f193786fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36540)[0m     @     0x7f8240ba4ad3 at::TensorIterator::for_each()
[2m[36m(pid=36540)[0m     @     0x7f8240ba4d91 at::TensorIterator::for_each()
[2m[36m(pid=36540)[0m     @     0x7f8241487b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36488)[0m     @     0x7f4ca779fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36488)[0m     @     0x7f4ca77c2c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36488)[0m     @     0x7f4ca6c64a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36488)[0m     @     0x7f4ca6c62388 at::native::copy_impl()
[2m[36m(pid=36520)[0m     @     0x7f01da957ad3 at::TensorIterator::for_each()
[2m[36m(pid=36520)[0m     @     0x7f01da957d91 at::TensorIterator::for_each()
[2m[36m(pid=36520)[0m     @     0x7f01db23ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36520)[0m     @     0x7f01db25dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36428)[0m     @     0x7f16502ffad3 at::TensorIterator::for_each()
[2m[36m(pid=36440)[0m     @     0x7efeac836b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36440)[0m     @     0x7efeac859c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36440)[0m     @     0x7efeabcfba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36440)[0m     @     0x7efeabcf9388 at::native::copy_impl()
[2m[36m(pid=36440)[0m     @     0x7efeabcfb5a4 at::native::copy_()
[2m[36m(pid=36477)[0m     @     0x7f8419138d91 at::TensorIterator::for_each()
[2m[36m(pid=36477)[0m     @     0x7f8419a1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36477)[0m     @     0x7f8419a3ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36477)[0m     @     0x7f8418ee0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36477)[0m     @     0x7f8418ede388 at::native::copy_impl()
[2m[36m(pid=36441)[0m     @     0x7f816c5cf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=36441)[0m     @     0x7f816c5d28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36441)[0m     @     0x7f816c5d2ad3 at::TensorIterator::for_each()
[2m[36m(pid=36434)[0m     @     0x7f566d610a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36434)[0m     @     0x7f566d60e388 at::native::copy_impl()
[2m[36m(pid=36434)[0m     @     0x7f566d6105a4 at::native::copy_()
[2m[36m(pid=36434)[0m     @     0x7f566dcfb4f5 at::Tensor::copy_()
[2m[36m(pid=36434)[0m     @     0x7f56701ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36425)[0m     @     0x7eeb0e9e7d91 at::TensorIterator::for_each()
[2m[36m(pid=36425)[0m     @     0x7eeb0f2cab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36425)[0m     @     0x7eeb0f2edc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36425)[0m     @     0x7eeb0e78fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36425)[0m     @     0x7eeb0e78d388 at::native::copy_impl()
[2m[36m(pid=36421)[0m     @     0x7f1174b98c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36421)[0m     @     0x7f117403aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36421)[0m     @     0x7f1174038388 at::native::copy_impl()
[2m[36m(pid=36421)[0m     @     0x7f117403a5a4 at::native::copy_()
[2m[36m(pid=36421)[0m     @     0x7f11747254f5 at::Tensor::copy_()
[2m[36m(pid=36427)[0m     @     0x7f0a8de38d91 at::TensorIterator::for_each()
[2m[36m(pid=36427)[0m     @     0x7f0a8e71bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36427)[0m     @     0x7f0a8e73ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36427)[0m     @     0x7f0a8dbe0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36427)[0m     @     0x7f0a8dbde388 at::native::copy_impl()
[2m[36m(pid=36430)[0m     @     0x7f0292957d91 at::TensorIterator::for_each()
[2m[36m(pid=36430)[0m     @     0x7f029323ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36430)[0m     @     0x7f029325dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36430)[0m     @     0x7f02926ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36430)[0m     @     0x7f02926fd388 at::native::copy_impl()
[2m[36m(pid=36531)[0m     @     0x7efc0cf27d91 at::TensorIterator::for_each()
[2m[36m(pid=36531)[0m     @     0x7efc0d80ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36531)[0m     @     0x7efc0d82dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36531)[0m     @     0x7efc0cccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36531)[0m     @     0x7efc0cccd388 at::native::copy_impl()
[2m[36m(pid=36531)[0m     @     0x7efc0cccf5a4 at::native::copy_()
[2m[36m(pid=36518)[0m     @     0x7f1f2ae24c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36518)[0m     @     0x7f1f2a2c6a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36518)[0m     @     0x7f1f2a2c4388 at::native::copy_impl()
[2m[36m(pid=36518)[0m     @     0x7f1f2a2c65a4 at::native::copy_()
[2m[36m(pid=36518)[0m     @     0x7f1f2a9b14f5 at::Tensor::copy_()
[2m[36m(pid=36485)[0m     @     0x7f25e7c8e4f5 at::Tensor::copy_()
[2m[36m(pid=36485)[0m     @     0x7f25edd3979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36485)[0m     @     0x557fca8d8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36485)[0m     @     0x557fca833b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36485)[0m     @     0x557fca8bebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36485)[0m     @     0x557fca8bfa20 method_vectorcall
[2m[36m(pid=36485)[0m     @     0x557fca833bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36485)[0m     @     0x557fca8bebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36485)[0m     @     0x557fca8bf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36485)[0m     @     0x557fca834689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36485)[0m     @     0x557fca8bebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36485)[0m     @     0x557fca8bf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36485)[0m     @     0x557fca834689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36485)[0m     @     0x557fca8bebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36485)[0m     @     0x557fca8bf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36485)[0m     @     0x557fca834689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36485)[0m     @     0x557fca8bebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36485)[0m     @     0x557fca8bf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36485)[0m     @     0x557fca834689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36526)[0m     @     0x7fbeff6b64f5 at::Tensor::copy_()
[2m[36m(pid=36526)[0m     @     0x7fbf0576179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36526)[0m     @     0x55f66ce0efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36526)[0m     @     0x55f66cd69b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36526)[0m     @     0x55f66cdf4baf _PyEval_EvalCodeWithName
[2m[36m(pid=36526)[0m     @     0x55f66cdf5a20 method_vectorcall
[2m[36m(pid=36526)[0m     @     0x55f66cd69bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36526)[0m     @     0x55f66cdf4baf _PyEval_EvalCodeWithName
[2m[36m(pid=36526)[0m     @     0x55f66cdf5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36526)[0m     @     0x55f66cd6a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36526)[0m     @     0x55f66cdf4baf _PyEval_EvalCodeWithName
[2m[36m(pid=36526)[0m     @     0x55f66cdf5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36526)[0m     @     0x55f66cd6a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36526)[0m     @     0x55f66cdf4baf _PyEval_EvalCodeWithName
[2m[36m(pid=36526)[0m     @     0x55f66cdf5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36526)[0m     @     0x55f66cd6a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36526)[0m     @     0x55f66cdf4baf _PyEval_EvalCodeWithName
[2m[36m(pid=36526)[0m     @     0x55f66cdf5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36526)[0m     @     0x55f66cd6a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36530)[0m     @     0x7f93f52354f5 at::Tensor::copy_()
[2m[36m(pid=36530)[0m     @     0x7f93fb2e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36530)[0m     @     0x55fd8841ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36530)[0m     @     0x55fd8837ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36530)[0m     @     0x55fd88405baf _PyEval_EvalCodeWithName
[2m[36m(pid=36530)[0m     @     0x55fd88406a20 method_vectorcall
[2m[36m(pid=36530)[0m     @     0x55fd8837abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36530)[0m     @     0x55fd88405baf _PyEval_EvalCodeWithName
[2m[36m(pid=36530)[0m     @     0x55fd88406643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36530)[0m     @     0x55fd8837b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36530)[0m     @     0x55fd88405baf _PyEval_EvalCodeWithName
[2m[36m(pid=36530)[0m     @     0x55fd88406643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36530)[0m     @     0x55fd8837b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36530)[0m     @     0x55fd88405baf _PyEval_EvalCodeWithName
[2m[36m(pid=36530)[0m     @     0x55fd88406643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36530)[0m     @     0x55fd8837b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36530)[0m     @     0x55fd88405baf _PyEval_EvalCodeWithName
[2m[36m(pid=36530)[0m     @     0x55fd88406643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36530)[0m     @     0x55fd8837b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36497)[0m     @     0x7f18c745aad3 at::TensorIterator::for_each()
[2m[36m(pid=36497)[0m     @     0x7f18c745ad91 at::TensorIterator::for_each()
[2m[36m(pid=36497)[0m     @     0x7f18c7d3db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36497)[0m     @     0x7f18c7d60c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36497)[0m     @     0x7f18c7202a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36515)[0m     @     0x7ecdc3e0dad3 at::TensorIterator::for_each()
[2m[36m(pid=36515)[0m     @     0x7ecdc3e0dd91 at::TensorIterator::for_each()
[2m[36m(pid=36515)[0m     @     0x7ecdc46f0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36515)[0m     @     0x7ecdc4713c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36516)[0m     @     0x7f19e5138ad3 at::TensorIterator::for_each()
[2m[36m(pid=36516)[0m     @     0x7f19e5138d91 at::TensorIterator::for_each()
[2m[36m(pid=36516)[0m     @     0x7f19e5a1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36516)[0m     @     0x7f19e5a3ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36516)[0m     @     0x7f19e4ee0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36516)[0m     @     0x7f19e4ede388 at::native::copy_impl()
[2m[36m(pid=36545)[0m     @     0x7efbeb49f4f5 at::Tensor::copy_()
[2m[36m(pid=36545)[0m     @     0x7efbf154a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36545)[0m     @     0x5635b87a2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36545)[0m     @     0x5635b86fdb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36545)[0m     @     0x5635b8788baf _PyEval_EvalCodeWithName
[2m[36m(pid=36545)[0m     @     0x5635b8789a20 method_vectorcall
[2m[36m(pid=36545)[0m     @     0x5635b86fdbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36545)[0m     @     0x5635b8788baf _PyEval_EvalCodeWithName
[2m[36m(pid=36545)[0m     @     0x5635b8789643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36545)[0m     @     0x5635b86fe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36545)[0m     @     0x5635b8788baf _PyEval_EvalCodeWithName
[2m[36m(pid=36545)[0m     @     0x5635b8789643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36545)[0m     @     0x5635b86fe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36545)[0m     @     0x5635b8788baf _PyEval_EvalCodeWithName
[2m[36m(pid=36545)[0m     @     0x5635b8789643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36545)[0m     @     0x5635b86fe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36545)[0m     @     0x5635b8788baf _PyEval_EvalCodeWithName
[2m[36m(pid=36545)[0m     @     0x5635b8789643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36545)[0m     @     0x5635b86fe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36493)[0m     @     0x7f3f7b3cf4f5 at::Tensor::copy_()
[2m[36m(pid=36493)[0m     @     0x7f3f8147a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36493)[0m     @     0x55b0af035fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36493)[0m     @     0x55b0aef90b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36493)[0m     @     0x55b0af01bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36493)[0m     @     0x55b0af01ca20 method_vectorcall
[2m[36m(pid=36493)[0m     @     0x55b0aef90bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36493)[0m     @     0x55b0af01bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36493)[0m     @     0x55b0af01c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36493)[0m     @     0x55b0aef91689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36493)[0m     @     0x55b0af01bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36493)[0m     @     0x55b0af01c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36493)[0m     @     0x55b0aef91689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36493)[0m     @     0x55b0af01bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36493)[0m     @     0x55b0af01c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36493)[0m     @     0x55b0aef91689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36493)[0m     @     0x55b0af01bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36493)[0m     @     0x55b0af01c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36493)[0m     @     0x55b0aef91689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36469)[0m     @     0x7f03121c24f5 at::Tensor::copy_()
[2m[36m(pid=36469)[0m     @     0x7f031826d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36469)[0m     @     0x55b5e6bd4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36469)[0m     @     0x55b5e6b2fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36469)[0m     @     0x55b5e6bbabaf _PyEval_EvalCodeWithName
[2m[36m(pid=36469)[0m     @     0x55b5e6bbba20 method_vectorcall
[2m[36m(pid=36469)[0m     @     0x55b5e6b2fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36469)[0m     @     0x55b5e6bbabaf _PyEval_EvalCodeWithName
[2m[36m(pid=36469)[0m     @     0x55b5e6bbb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36469)[0m     @     0x55b5e6b30689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36469)[0m     @     0x55b5e6bbabaf _PyEval_EvalCodeWithName
[2m[36m(pid=36469)[0m     @     0x55b5e6bbb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36469)[0m     @     0x55b5e6b30689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36469)[0m     @     0x55b5e6bbabaf _PyEval_EvalCodeWithName
[2m[36m(pid=36469)[0m     @     0x55b5e6bbb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36469)[0m     @     0x55b5e6b30689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36469)[0m     @     0x55b5e6bbabaf _PyEval_EvalCodeWithName
[2m[36m(pid=36469)[0m     @     0x55b5e6bbb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36469)[0m     @     0x55b5e6b30689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36478)[0m     @     0x7f57df4724f5 at::Tensor::copy_()
[2m[36m(pid=36478)[0m     @     0x7f57e551d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36478)[0m     @     0x558a3cebcfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36478)[0m     @     0x558a3ce17b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36478)[0m     @     0x558a3cea2baf _PyEval_EvalCodeWithName
[2m[36m(pid=36478)[0m     @     0x558a3cea3a20 method_vectorcall
[2m[36m(pid=36478)[0m     @     0x558a3ce17bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36478)[0m     @     0x558a3cea2baf _PyEval_EvalCodeWithName
[2m[36m(pid=36478)[0m     @     0x558a3cea3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36478)[0m     @     0x558a3ce18689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36478)[0m     @     0x558a3cea2baf _PyEval_EvalCodeWithName
[2m[36m(pid=36478)[0m     @     0x558a3cea3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36478)[0m     @     0x558a3ce18689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36478)[0m     @     0x558a3cea2baf _PyEval_EvalCodeWithName
[2m[36m(pid=36478)[0m     @     0x558a3cea3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36478)[0m     @     0x558a3ce18689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36478)[0m     @     0x558a3cea2baf _PyEval_EvalCodeWithName
[2m[36m(pid=36478)[0m     @     0x558a3cea3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36478)[0m     @     0x558a3ce18689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36495)[0m     @     0x7f7df90e7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36495)[0m     @     0x7f7df90e5388 at::native::copy_impl()
[2m[36m(pid=36495)[0m     @     0x7f7df90e75a4 at::native::copy_()
[2m[36m(pid=36495)[0m     @     0x7f7df97d24f5 at::Tensor::copy_()
[2m[36m(pid=36495)[0m     @     0x7f7dfbca58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36445)[0m     @     0x55cd59f49baf _PyEval_EvalCodeWithName
[2m[36m(pid=36445)[0m     @     0x55cd59f4a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36445)[0m     @     0x55cd59ebf689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36525)[0m     @     0x562d24c23fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36525)[0m     @     0x562d24b7eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36525)[0m     @     0x562d24c09baf _PyEval_EvalCodeWithName
[2m[36m(pid=36525)[0m     @     0x562d24c0aa20 method_vectorcall
[2m[36m(pid=36525)[0m     @     0x562d24b7ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36525)[0m     @     0x562d24c09baf _PyEval_EvalCodeWithName
[2m[36m(pid=36525)[0m     @     0x562d24c0a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36525)[0m     @     0x562d24b7f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36525)[0m     @     0x562d24c09baf _PyEval_EvalCodeWithName
[2m[36m(pid=36525)[0m     @     0x562d24c0a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36525)[0m     @     0x562d24b7f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36525)[0m     @     0x562d24c09baf _PyEval_EvalCodeWithName
[2m[36m(pid=36525)[0m     @     0x562d24c0a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36525)[0m     @     0x562d24b7f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36525)[0m     @     0x562d24c09baf _PyEval_EvalCodeWithName
[2m[36m(pid=36525)[0m     @     0x562d24c0a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36525)[0m     @     0x562d24b7f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36467)[0m     @     0x7f742bef44f5 at::Tensor::copy_()
[2m[36m(pid=36467)[0m     @     0x7f7431f9f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36467)[0m     @     0x563d9e02afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36467)[0m     @     0x563d9df85b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36467)[0m     @     0x563d9e010baf _PyEval_EvalCodeWithName
[2m[36m(pid=36467)[0m     @     0x563d9e011a20 method_vectorcall
[2m[36m(pid=36467)[0m     @     0x563d9df85bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36467)[0m     @     0x563d9e010baf _PyEval_EvalCodeWithName
[2m[36m(pid=36467)[0m     @     0x563d9e011643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36467)[0m     @     0x563d9df86689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36467)[0m     @     0x563d9e010baf _PyEval_EvalCodeWithName
[2m[36m(pid=36467)[0m     @     0x563d9e011643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36467)[0m     @     0x563d9df86689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36467)[0m     @     0x563d9e010baf _PyEval_EvalCodeWithName
[2m[36m(pid=36467)[0m     @     0x563d9e011643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36467)[0m     @     0x563d9df86689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36467)[0m     @     0x563d9e010baf _PyEval_EvalCodeWithName
[2m[36m(pid=36467)[0m     @     0x563d9e011643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36467)[0m     @     0x563d9df86689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36538)[0m     @     0x7ecfb99cfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36538)[0m     @     0x7ecfb99cd388 at::native::copy_impl()
[2m[36m(pid=36538)[0m     @     0x7ecfb99cf5a4 at::native::copy_()
[2m[36m(pid=36538)[0m     @     0x7ecfba0ba4f5 at::Tensor::copy_()
[2m[36m(pid=36483)[0m     @     0x7f2f86dea4f5 at::Tensor::copy_()
[2m[36m(pid=36483)[0m     @     0x7f2f8ce9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36483)[0m     @     0x55bb7c522fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36483)[0m     @     0x55bb7c47db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36483)[0m     @     0x55bb7c508baf _PyEval_EvalCodeWithName
[2m[36m(pid=36483)[0m     @     0x55bb7c509a20 method_vectorcall
[2m[36m(pid=36483)[0m     @     0x55bb7c47dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36483)[0m     @     0x55bb7c508baf _PyEval_EvalCodeWithName
[2m[36m(pid=36483)[0m     @     0x55bb7c509643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36483)[0m     @     0x55bb7c47e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36483)[0m     @     0x55bb7c508baf _PyEval_EvalCodeWithName
[2m[36m(pid=36483)[0m     @     0x55bb7c509643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36483)[0m     @     0x55bb7c47e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36483)[0m     @     0x55bb7c508baf _PyEval_EvalCodeWithName
[2m[36m(pid=36483)[0m     @     0x55bb7c509643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36483)[0m     @     0x55bb7c47e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36483)[0m     @     0x55bb7c508baf _PyEval_EvalCodeWithName
[2m[36m(pid=36483)[0m     @     0x55bb7c509643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36483)[0m     @     0x55bb7c47e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36414)[0m     @     0x7ed555cfb4f5 at::Tensor::copy_()
[2m[36m(pid=36414)[0m     @     0x7ed55bda679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36414)[0m     @     0x564d05535fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36414)[0m     @     0x564d05490b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36414)[0m     @     0x564d0551bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36414)[0m     @     0x564d0551ca20 method_vectorcall
[2m[36m(pid=36414)[0m     @     0x564d05490bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36414)[0m     @     0x564d0551bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36414)[0m     @     0x564d0551c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36414)[0m     @     0x564d05491689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36414)[0m     @     0x564d0551bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36414)[0m     @     0x564d0551c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36414)[0m     @     0x564d05491689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36414)[0m     @     0x564d0551bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36414)[0m     @     0x564d0551c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36414)[0m     @     0x564d05491689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36414)[0m     @     0x564d0551bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36414)[0m     @     0x564d0551c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36414)[0m     @     0x564d05491689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36426)[0m     @     0x7f426fa6379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36426)[0m     @     0x556c35e52fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36426)[0m     @     0x556c35dadb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36426)[0m     @     0x556c35e38baf _PyEval_EvalCodeWithName
[2m[36m(pid=36426)[0m     @     0x556c35e39a20 method_vectorcall
[2m[36m(pid=36426)[0m     @     0x556c35dadbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36426)[0m     @     0x556c35e38baf _PyEval_EvalCodeWithName
[2m[36m(pid=36426)[0m     @     0x556c35e39643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36426)[0m     @     0x556c35dae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36426)[0m     @     0x556c35e38baf _PyEval_EvalCodeWithName
[2m[36m(pid=36426)[0m     @     0x556c35e39643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36426)[0m     @     0x556c35dae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36426)[0m     @     0x556c35e38baf _PyEval_EvalCodeWithName
[2m[36m(pid=36426)[0m     @     0x556c35e39643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36426)[0m     @     0x556c35dae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36426)[0m     @     0x556c35e38baf _PyEval_EvalCodeWithName
[2m[36m(pid=36426)[0m     @     0x556c35e39643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36426)[0m     @     0x556c35dae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36410)[0m     @     0x7f6325ded4f5 at::Tensor::copy_()
[2m[36m(pid=36410)[0m     @     0x7f632be9879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36410)[0m     @     0x55fbdfd5ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36410)[0m     @     0x55fbdfcbab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36410)[0m     @     0x55fbdfd45baf _PyEval_EvalCodeWithName
[2m[36m(pid=36410)[0m     @     0x55fbdfd46a20 method_vectorcall
[2m[36m(pid=36410)[0m     @     0x55fbdfcbabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36410)[0m     @     0x55fbdfd45baf _PyEval_EvalCodeWithName
[2m[36m(pid=36410)[0m     @     0x55fbdfd46643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36410)[0m     @     0x55fbdfcbb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36410)[0m     @     0x55fbdfd45baf _PyEval_EvalCodeWithName
[2m[36m(pid=36410)[0m     @     0x55fbdfd46643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36410)[0m     @     0x55fbdfcbb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36410)[0m     @     0x55fbdfd45baf _PyEval_EvalCodeWithName
[2m[36m(pid=36410)[0m     @     0x55fbdfd46643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36410)[0m     @     0x55fbdfcbb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36410)[0m     @     0x55fbdfd45baf _PyEval_EvalCodeWithName
[2m[36m(pid=36410)[0m     @     0x55fbdfd46643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36410)[0m     @     0x55fbdfcbb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36480)[0m     @     0x7f6f0821079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36480)[0m     @     0x5610d059efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36480)[0m     @     0x5610d04f9b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36480)[0m     @     0x5610d0584baf _PyEval_EvalCodeWithName
[2m[36m(pid=36480)[0m     @     0x5610d0585a20 method_vectorcall
[2m[36m(pid=36480)[0m     @     0x5610d04f9bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36480)[0m     @     0x5610d0584baf _PyEval_EvalCodeWithName
[2m[36m(pid=36480)[0m     @     0x5610d0585643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36480)[0m     @     0x5610d04fa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36480)[0m     @     0x5610d0584baf _PyEval_EvalCodeWithName
[2m[36m(pid=36480)[0m     @     0x5610d0585643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36480)[0m     @     0x5610d04fa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36480)[0m     @     0x5610d0584baf _PyEval_EvalCodeWithName
[2m[36m(pid=36480)[0m     @     0x5610d0585643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36480)[0m     @     0x5610d04fa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36480)[0m     @     0x5610d0584baf _PyEval_EvalCodeWithName
[2m[36m(pid=36480)[0m     @     0x5610d0585643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36480)[0m     @     0x5610d04fa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36417)[0m     @     0x7fa831be05a4 at::native::copy_()
[2m[36m(pid=36417)[0m     @     0x7fa8322cb4f5 at::Tensor::copy_()
[2m[36m(pid=36417)[0m     @     0x7fa83479e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36418)[0m     @     0x7fad20bca5a4 at::native::copy_()
[2m[36m(pid=36418)[0m     @     0x7fad212b54f5 at::Tensor::copy_()
[2m[36m(pid=36418)[0m     @     0x7fad237888de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36503)[0m     @     0x7f7e7d0355a4 at::native::copy_()
[2m[36m(pid=36503)[0m     @     0x7f7e7d7204f5 at::Tensor::copy_()
[2m[36m(pid=36503)[0m     @     0x7f7e7fbf38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36446)[0m     @     0x7f25980a75a4 at::native::copy_()
[2m[36m(pid=36446)[0m     @     0x7f25987924f5 at::Tensor::copy_()
[2m[36m(pid=36411)[0m     @     0x555993985643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36411)[0m     @     0x5559938fa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36411)[0m     @     0x555993984baf _PyEval_EvalCodeWithName
[2m[36m(pid=36411)[0m     @     0x555993985643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36411)[0m     @     0x5559938fa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36476)[0m     @     0x7f91f7e4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=36476)[0m     @     0x7f91f7e4dad3 at::TensorIterator::for_each()
[2m[36m(pid=36491)[0m     @     0x7fc852ea4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36491)[0m     @     0x7fc852ec7c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36491)[0m     @     0x7fc852369a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36491)[0m     @     0x7fc852367388 at::native::copy_impl()
[2m[36m(pid=36422)[0m     @     0x558054abfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36422)[0m     @     0x558054ac0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36422)[0m     @     0x558054a35689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36422)[0m     @     0x558054abfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36422)[0m     @     0x558054ac0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36422)[0m     @     0x558054a35689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36422)[0m     @     0x558054abfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36422)[0m     @     0x558054ac0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36422)[0m     @     0x558054a35689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36482)[0m     @     0x7f3d775a35a4 at::native::copy_()
[2m[36m(pid=36482)[0m     @     0x7f3d77c8e4f5 at::Tensor::copy_()
[2m[36m(pid=36482)[0m     @     0x7f3d7a1618de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36482)[0m     @     0x7f3d77c8e4f5 at::Tensor::copy_()
[2m[36m(pid=36482)[0m     @     0x7f3d7dd3979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36482)[0m     @     0x55829be06fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36482)[0m     @     0x55829bd61b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36482)[0m     @     0x55829bdecbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36482)[0m     @     0x55829bdeda20 method_vectorcall
[2m[36m(pid=36482)[0m     @     0x55829bd61bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36482)[0m     @     0x55829bdecbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36482)[0m     @     0x55829bded643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36482)[0m     @     0x55829bd62689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36482)[0m     @     0x55829bdecbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36482)[0m     @     0x55829bded643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36482)[0m     @     0x55829bd62689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36482)[0m     @     0x55829bdecbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36482)[0m     @     0x55829bded643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36496)[0m     @     0x7f6170f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=36496)[0m     @     0x7f6170f27d91 at::TensorIterator::for_each()
[2m[36m(pid=36496)[0m     @     0x7f617180ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36496)[0m     @     0x7f617182dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36496)[0m     @     0x7f6170ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36496)[0m     @     0x7f6170ccd388 at::native::copy_impl()
[2m[36m(pid=36447)[0m     @     0x7fb41cccf5a4 at::native::copy_()
[2m[36m(pid=36447)[0m     @     0x7fb41d3ba4f5 at::Tensor::copy_()
[2m[36m(pid=36447)[0m     @     0x7fb41f88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36447)[0m     @     0x7fb41d3ba4f5 at::Tensor::copy_()
[2m[36m(pid=36447)[0m     @     0x7fb42346579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36447)[0m     @     0x5639d7419fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36447)[0m     @     0x5639d7374b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36447)[0m     @     0x5639d73ffbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36447)[0m     @     0x5639d7400a20 method_vectorcall
[2m[36m(pid=36447)[0m     @     0x5639d7374bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36443)[0m     @     0x7f53c8a7aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36443)[0m     @     0x7f53c8a78388 at::native::copy_impl()
[2m[36m(pid=36443)[0m     @     0x7f53c8a7a5a4 at::native::copy_()
[2m[36m(pid=36443)[0m     @     0x7f53c91654f5 at::Tensor::copy_()
[2m[36m(pid=36443)[0m     @     0x7f53cb6388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36432)[0m     @     0x7ef547ebea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36432)[0m     @     0x7ef547ebc388 at::native::copy_impl()
[2m[36m(pid=36432)[0m     @     0x7ef547ebe5a4 at::native::copy_()
[2m[36m(pid=36432)[0m     @     0x7ef5485a94f5 at::Tensor::copy_()
[2m[36m(pid=36432)[0m     @     0x7ef54aa7c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36487)[0m     @     0x7f21ea823a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36487)[0m     @     0x7f21ea821388 at::native::copy_impl()
[2m[36m(pid=36487)[0m     @     0x7f21ea8235a4 at::native::copy_()
[2m[36m(pid=36487)[0m     @     0x7f21eaf0e4f5 at::Tensor::copy_()
[2m[36m(pid=36505)[0m     @     0x7f9a74e22ad3 at::TensorIterator::for_each()
[2m[36m(pid=36486)[0m     @     0x7f1b0f807388 at::native::copy_impl()
[2m[36m(pid=36486)[0m     @     0x7f1b0f8095a4 at::native::copy_()
[2m[36m(pid=36486)[0m     @     0x7f1b0fef44f5 at::Tensor::copy_()
[2m[36m(pid=36486)[0m     @     0x7f1b123c78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36537)[0m     @     0x7f633478da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36537)[0m     @     0x7f633478b388 at::native::copy_impl()
[2m[36m(pid=36537)[0m     @     0x7f633478d5a4 at::native::copy_()
[2m[36m(pid=36537)[0m     @     0x7f6334e784f5 at::Tensor::copy_()
[2m[36m(pid=36537)[0m     @     0x7f633734b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36499)[0m     @     0x7efc73bdd4f5 at::Tensor::copy_()
[2m[36m(pid=36499)[0m     @     0x7efc760b08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36499)[0m     @     0x7efc73bdd4f5 at::Tensor::copy_()
[2m[36m(pid=36499)[0m     @     0x7efc79c8879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36499)[0m     @     0x55ad8fe0bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36499)[0m     @     0x55ad8fd66b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36499)[0m     @     0x55ad8fdf1baf _PyEval_EvalCodeWithName
[2m[36m(pid=36499)[0m     @     0x55ad8fdf2a20 method_vectorcall
[2m[36m(pid=36499)[0m     @     0x55ad8fd66bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36499)[0m     @     0x55ad8fdf1baf _PyEval_EvalCodeWithName
[2m[36m(pid=36499)[0m     @     0x55ad8fdf2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36499)[0m     @     0x55ad8fd67689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36499)[0m     @     0x55ad8fdf1baf _PyEval_EvalCodeWithName
[2m[36m(pid=36499)[0m     @     0x55ad8fdf2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36499)[0m     @     0x55ad8fd67689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36499)[0m     @     0x55ad8fdf1baf _PyEval_EvalCodeWithName
[2m[36m(pid=36499)[0m     @     0x55ad8fdf2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36499)[0m     @     0x55ad8fd67689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36499)[0m     @     0x55ad8fdf1baf _PyEval_EvalCodeWithName
[2m[36m(pid=36499)[0m     @     0x55ad8fdf2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36499)[0m     @     0x55ad8fd67689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36429)[0m     @     0x7f00579b14f5 at::Tensor::copy_()
[2m[36m(pid=36429)[0m     @     0x7f0059e848de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36429)[0m     @     0x7f00579b14f5 at::Tensor::copy_()
[2m[36m(pid=36429)[0m     @     0x7f005da5c79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36429)[0m     @     0x5566bfd66fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36429)[0m     @     0x5566bfcc1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36429)[0m     @     0x5566bfd4cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36429)[0m     @     0x5566bfd4da20 method_vectorcall
[2m[36m(pid=36429)[0m     @     0x5566bfcc1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36429)[0m     @     0x5566bfd4cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36429)[0m     @     0x5566bfd4d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36429)[0m     @     0x5566bfcc2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36429)[0m     @     0x5566bfd4cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36429)[0m     @     0x5566bfd4d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36429)[0m     @     0x5566bfcc2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36429)[0m     @     0x5566bfd4cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36429)[0m     @     0x5566bfd4d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36429)[0m     @     0x5566bfcc2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36429)[0m     @     0x5566bfd4cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36429)[0m     @     0x5566bfd4d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36429)[0m     @     0x5566bfcc2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36470)[0m     @     0x7f1936d11a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36470)[0m     @     0x7f1936d0f388 at::native::copy_impl()
[2m[36m(pid=36470)[0m     @     0x7f1936d115a4 at::native::copy_()
[2m[36m(pid=36470)[0m     @     0x7f19373fc4f5 at::Tensor::copy_()
[2m[36m(pid=36540)[0m     @     0x7f82414aac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36540)[0m     @     0x7f824094ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36540)[0m     @     0x7f824094a388 at::native::copy_impl()
[2m[36m(pid=36540)[0m     @     0x7f824094c5a4 at::native::copy_()
[2m[36m(pid=36540)[0m     @     0x7f82410374f5 at::Tensor::copy_()
[2m[36m(pid=36488)[0m     @     0x7f4ca6c645a4 at::native::copy_()
[2m[36m(pid=36488)[0m     @     0x7f4ca734f4f5 at::Tensor::copy_()
[2m[36m(pid=36488)[0m     @     0x7f4ca98228de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36488)[0m     @     0x7f4ca734f4f5 at::Tensor::copy_()
[2m[36m(pid=36520)[0m     @     0x7f01da6ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36520)[0m     @     0x7f01da6fd388 at::native::copy_impl()
[2m[36m(pid=36520)[0m     @     0x7f01da6ff5a4 at::native::copy_()
[2m[36m(pid=36520)[0m     @     0x7f01dadea4f5 at::Tensor::copy_()
[2m[36m(pid=36520)[0m     @     0x7f01dd2bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36428)[0m     @     0x7f16502ffd91 at::TensorIterator::for_each()
[2m[36m(pid=36428)[0m     @     0x7f1650be2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36428)[0m     @     0x7f1650c05c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36428)[0m     @     0x7f16500a7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36428)[0m     @     0x7f16500a5388 at::native::copy_impl()
[2m[36m(pid=36440)[0m     @     0x7efeac3e64f5 at::Tensor::copy_()
[2m[36m(pid=36440)[0m     @     0x7efeae8b98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36440)[0m     @     0x7efeac3e64f5 at::Tensor::copy_()
[2m[36m(pid=36477)[0m     @     0x7f8418ee05a4 at::native::copy_()
[2m[36m(pid=36477)[0m     @     0x7f84195cb4f5 at::Tensor::copy_()
[2m[36m(pid=36477)[0m     @     0x7f841ba9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36441)[0m     @     0x7f816c5d2d91 at::TensorIterator::for_each()
[2m[36m(pid=36441)[0m     @     0x7f816ceb5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36441)[0m     @     0x7f816ced8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36434)[0m     @     0x7f566dcfb4f5 at::Tensor::copy_()
[2m[36m(pid=36434)[0m     @     0x7f5673da679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36434)[0m     @     0x55986d52cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36434)[0m     @     0x55986d487b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36434)[0m     @     0x55986d512baf _PyEval_EvalCodeWithName
[2m[36m(pid=36434)[0m     @     0x55986d513a20 method_vectorcall
[2m[36m(pid=36434)[0m     @     0x55986d487bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36434)[0m     @     0x55986d512baf _PyEval_EvalCodeWithName
[2m[36m(pid=36434)[0m     @     0x55986d513643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36434)[0m     @     0x55986d488689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36434)[0m     @     0x55986d512baf _PyEval_EvalCodeWithName
[2m[36m(pid=36434)[0m     @     0x55986d513643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36434)[0m     @     0x55986d488689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36434)[0m     @     0x55986d512baf _PyEval_EvalCodeWithName
[2m[36m(pid=36434)[0m     @     0x55986d513643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36434)[0m     @     0x55986d488689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36434)[0m     @     0x55986d512baf _PyEval_EvalCodeWithName
[2m[36m(pid=36434)[0m     @     0x55986d513643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36434)[0m     @     0x55986d488689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36425)[0m     @     0x7eeb0e78f5a4 at::native::copy_()
[2m[36m(pid=36425)[0m     @     0x7eeb0ee7a4f5 at::Tensor::copy_()
[2m[36m(pid=36425)[0m     @     0x7eeb1134d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36421)[0m     @     0x7f1176bf88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36421)[0m     @     0x7f11747254f5 at::Tensor::copy_()
[2m[36m(pid=36421)[0m     @     0x7f117a7d079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36421)[0m     @     0x561f30549fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36421)[0m     @     0x561f304a4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36421)[0m     @     0x561f3052fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36421)[0m     @     0x561f30530a20 method_vectorcall
[2m[36m(pid=36421)[0m     @     0x561f304a4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36421)[0m     @     0x561f3052fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36421)[0m     @     0x561f30530643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36421)[0m     @     0x561f304a5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36421)[0m     @     0x561f3052fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36421)[0m     @     0x561f30530643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36421)[0m     @     0x561f304a5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36421)[0m     @     0x561f3052fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36421)[0m     @     0x561f30530643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36421)[0m     @     0x561f304a5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36421)[0m     @     0x561f3052fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36421)[0m     @     0x561f30530643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36421)[0m     @     0x561f304a5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36427)[0m     @     0x7f0a8dbe05a4 at::native::copy_()
[2m[36m(pid=36427)[0m     @     0x7f0a8e2cb4f5 at::Tensor::copy_()
[2m[36m(pid=36427)[0m     @     0x7f0a9079e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36430)[0m     @     0x7f02926ff5a4 at::native::copy_()
[2m[36m(pid=36430)[0m     @     0x7f0292dea4f5 at::Tensor::copy_()
[2m[36m(pid=36430)[0m     @     0x7f02952bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36531)[0m     @     0x7efc0d3ba4f5 at::Tensor::copy_()
[2m[36m(pid=36531)[0m     @     0x7efc0f88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36531)[0m     @     0x7efc0d3ba4f5 at::Tensor::copy_()
[2m[36m(pid=36531)[0m     @     0x7efc1346579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36531)[0m     @     0x55fcc6b1dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36531)[0m     @     0x55fcc6a78b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36531)[0m     @     0x55fcc6b03baf _PyEval_EvalCodeWithName
[2m[36m(pid=36531)[0m     @     0x55fcc6b04a20 method_vectorcall
[2m[36m(pid=36531)[0m     @     0x55fcc6a78bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36531)[0m     @     0x55fcc6b03baf _PyEval_EvalCodeWithName
[2m[36m(pid=36531)[0m     @     0x55fcc6b04643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36531)[0m     @     0x55fcc6a79689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36531)[0m     @     0x55fcc6b03baf _PyEval_EvalCodeWithName
[2m[36m(pid=36531)[0m     @     0x55fcc6b04643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36518)[0m     @     0x7f1f2ce848de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36518)[0m     @     0x7f1f2a9b14f5 at::Tensor::copy_()
[2m[36m(pid=36518)[0m     @     0x7f1f30a5c79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36518)[0m     @     0x564051931fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36518)[0m     @     0x56405188cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36518)[0m     @     0x564051917baf _PyEval_EvalCodeWithName
[2m[36m(pid=36518)[0m     @     0x564051918a20 method_vectorcall
[2m[36m(pid=36518)[0m     @     0x56405188cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36518)[0m     @     0x564051917baf _PyEval_EvalCodeWithName
[2m[36m(pid=36518)[0m     @     0x564051918643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36518)[0m     @     0x56405188d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36518)[0m     @     0x564051917baf _PyEval_EvalCodeWithName
[2m[36m(pid=36518)[0m     @     0x564051918643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36518)[0m     @     0x56405188d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36518)[0m     @     0x564051917baf _PyEval_EvalCodeWithName
[2m[36m(pid=36518)[0m     @     0x564051918643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36518)[0m     @     0x56405188d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36518)[0m     @     0x564051917baf _PyEval_EvalCodeWithName
[2m[36m(pid=36518)[0m     @     0x564051918643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36518)[0m     @     0x56405188d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36497)[0m     @     0x7f18c7200388 at::native::copy_impl()
[2m[36m(pid=36497)[0m     @     0x7f18c72025a4 at::native::copy_()
[2m[36m(pid=36497)[0m     @     0x7f18c78ed4f5 at::Tensor::copy_()
[2m[36m(pid=36515)[0m     @     0x7ecdc3bb5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36515)[0m     @     0x7ecdc3bb3388 at::native::copy_impl()
[2m[36m(pid=36515)[0m     @     0x7ecdc3bb55a4 at::native::copy_()
[2m[36m(pid=36516)[0m     @     0x7f19e4ee05a4 at::native::copy_()
[2m[36m(pid=36516)[0m     @     0x7f19e55cb4f5 at::Tensor::copy_()
[2m[36m(pid=36495)[0m     @     0x7f7df97d24f5 at::Tensor::copy_()
[2m[36m(pid=36495)[0m     @     0x7f7dff87d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36495)[0m     @     0x55bb51f12fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36495)[0m     @     0x55bb51e6db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36495)[0m     @     0x55bb51ef8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36495)[0m     @     0x55bb51ef9a20 method_vectorcall
[2m[36m(pid=36495)[0m     @     0x55bb51e6dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36495)[0m     @     0x55bb51ef8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36495)[0m     @     0x55bb51ef9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36495)[0m     @     0x55bb51e6e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36495)[0m     @     0x55bb51ef8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36495)[0m     @     0x55bb51ef9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36495)[0m     @     0x55bb51e6e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36495)[0m     @     0x55bb51ef8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36495)[0m     @     0x55bb51ef9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36495)[0m     @     0x55bb51e6e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36495)[0m     @     0x55bb51ef8baf _PyEval_EvalCodeWithName
[2m[36m(pid=36495)[0m     @     0x55bb51ef9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36495)[0m     @     0x55bb51e6e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36538)[0m     @     0x7ecfbc58d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36538)[0m     @     0x7ecfba0ba4f5 at::Tensor::copy_()
[2m[36m(pid=36538)[0m     @     0x7ecfc016579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36538)[0m     @     0x561554352fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36538)[0m     @     0x5615542adb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36538)[0m     @     0x561554338baf _PyEval_EvalCodeWithName
[2m[36m(pid=36538)[0m     @     0x561554339a20 method_vectorcall
[2m[36m(pid=36538)[0m     @     0x5615542adbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36538)[0m     @     0x561554338baf _PyEval_EvalCodeWithName
[2m[36m(pid=36538)[0m     @     0x561554339643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36538)[0m     @     0x5615542ae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36538)[0m     @     0x561554338baf _PyEval_EvalCodeWithName
[2m[36m(pid=36538)[0m     @     0x561554339643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36538)[0m     @     0x5615542ae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36538)[0m     @     0x561554338baf _PyEval_EvalCodeWithName
[2m[36m(pid=36538)[0m     @     0x561554339643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36538)[0m     @     0x5615542ae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36538)[0m     @     0x561554338baf _PyEval_EvalCodeWithName
[2m[36m(pid=36538)[0m     @     0x561554339643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36538)[0m     @     0x5615542ae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36417)[0m     @     0x7fa8322cb4f5 at::Tensor::copy_()
[2m[36m(pid=36417)[0m     @     0x7fa83837679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36417)[0m     @     0x555e86e75fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36417)[0m     @     0x555e86dd0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36417)[0m     @     0x555e86e5bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36417)[0m     @     0x555e86e5ca20 method_vectorcall
[2m[36m(pid=36417)[0m     @     0x555e86dd0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36417)[0m     @     0x555e86e5bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36417)[0m     @     0x555e86e5c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36417)[0m     @     0x555e86dd1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36417)[0m     @     0x555e86e5bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36417)[0m     @     0x555e86e5c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36417)[0m     @     0x555e86dd1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36417)[0m     @     0x555e86e5bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36417)[0m     @     0x555e86e5c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36417)[0m     @     0x555e86dd1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36417)[0m     @     0x555e86e5bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36417)[0m     @     0x555e86e5c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36417)[0m     @     0x555e86dd1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36418)[0m     @     0x7fad212b54f5 at::Tensor::copy_()
[2m[36m(pid=36418)[0m     @     0x7fad2736079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36418)[0m     @     0x55669b1b9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36418)[0m     @     0x55669b114b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36418)[0m     @     0x55669b19fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36418)[0m     @     0x55669b1a0a20 method_vectorcall
[2m[36m(pid=36418)[0m     @     0x55669b114bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36418)[0m     @     0x55669b19fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36418)[0m     @     0x55669b1a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36418)[0m     @     0x55669b115689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36418)[0m     @     0x55669b19fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36418)[0m     @     0x55669b1a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36418)[0m     @     0x55669b115689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36418)[0m     @     0x55669b19fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36418)[0m     @     0x55669b1a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36418)[0m     @     0x55669b115689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36418)[0m     @     0x55669b19fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36418)[0m     @     0x55669b1a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36418)[0m     @     0x55669b115689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36503)[0m     @     0x7f7e7d7204f5 at::Tensor::copy_()
[2m[36m(pid=36503)[0m     @     0x7f7e837cb79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36503)[0m     @     0x55d015fd8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36503)[0m     @     0x55d015f33b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36503)[0m     @     0x55d015fbebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36503)[0m     @     0x55d015fbfa20 method_vectorcall
[2m[36m(pid=36503)[0m     @     0x55d015f33bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36503)[0m     @     0x55d015fbebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36503)[0m     @     0x55d015fbf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36503)[0m     @     0x55d015f34689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36503)[0m     @     0x55d015fbebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36503)[0m     @     0x55d015fbf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36503)[0m     @     0x55d015f34689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36503)[0m     @     0x55d015fbebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36503)[0m     @     0x55d015fbf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36503)[0m     @     0x55d015f34689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36503)[0m     @     0x55d015fbebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36503)[0m     @     0x55d015fbf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36503)[0m     @     0x55d015f34689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36446)[0m     @     0x7f259ac658de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36446)[0m     @     0x7f25987924f5 at::Tensor::copy_()
[2m[36m(pid=36446)[0m     @     0x7f259e83d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36446)[0m     @     0x55b443d7bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36446)[0m     @     0x55b443cd6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36446)[0m     @     0x55b443d61baf _PyEval_EvalCodeWithName
[2m[36m(pid=36446)[0m     @     0x55b443d62a20 method_vectorcall
[2m[36m(pid=36446)[0m     @     0x55b443cd6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36446)[0m     @     0x55b443d61baf _PyEval_EvalCodeWithName
[2m[36m(pid=36446)[0m     @     0x55b443d62643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36446)[0m     @     0x55b443cd7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36446)[0m     @     0x55b443d61baf _PyEval_EvalCodeWithName
[2m[36m(pid=36446)[0m     @     0x55b443d62643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36446)[0m     @     0x55b443cd7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36446)[0m     @     0x55b443d61baf _PyEval_EvalCodeWithName
[2m[36m(pid=36446)[0m     @     0x55b443d62643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36446)[0m     @     0x55b443cd7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36446)[0m     @     0x55b443d61baf _PyEval_EvalCodeWithName
[2m[36m(pid=36446)[0m     @     0x55b443d62643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36446)[0m     @     0x55b443cd7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36476)[0m     @     0x7f91f7e4dd91 at::TensorIterator::for_each()
[2m[36m(pid=36476)[0m     @     0x7f91f8730b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36476)[0m     @     0x7f91f8753c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36476)[0m     @     0x7f91f7bf5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36476)[0m     @     0x7f91f7bf3388 at::native::copy_impl()
[2m[36m(pid=36476)[0m     @     0x7f91f7bf55a4 at::native::copy_()
[2m[36m(pid=36491)[0m     @     0x7fc8523695a4 at::native::copy_()
[2m[36m(pid=36491)[0m     @     0x7fc852a544f5 at::Tensor::copy_()
[2m[36m(pid=36491)[0m     @     0x7fc854f278de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36491)[0m     @     0x7fc852a544f5 at::Tensor::copy_()
[2m[36m(pid=36491)[0m     @     0x7fc858aff79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36491)[0m     @     0x55b44e7e7fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36491)[0m     @     0x55b44e742b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36491)[0m     @     0x55b44e7cdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36491)[0m     @     0x55b44e7cea20 method_vectorcall
[2m[36m(pid=36491)[0m     @     0x55b44e742bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36491)[0m     @     0x55b44e7cdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36491)[0m     @     0x55b44e7ce643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36491)[0m     @     0x55b44e743689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36491)[0m     @     0x55b44e7cdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36491)[0m     @     0x55b44e7ce643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36491)[0m     @     0x55b44e743689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36491)[0m     @     0x55b44e7cdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36491)[0m     @     0x55b44e7ce643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36491)[0m     @     0x55b44e743689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36491)[0m     @     0x55b44e7cdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36491)[0m     @     0x55b44e7ce643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36491)[0m     @     0x55b44e743689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36482)[0m     @     0x55829bd62689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36482)[0m     @     0x55829bdecbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36482)[0m     @     0x55829bded643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36482)[0m     @     0x55829bd62689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36496)[0m     @     0x7f6170ccf5a4 at::native::copy_()
[2m[36m(pid=36496)[0m     @     0x7f61713ba4f5 at::Tensor::copy_()
[2m[36m(pid=36496)[0m     @     0x7f617388d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36447)[0m     @     0x5639d73ffbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36447)[0m     @     0x5639d7400643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36447)[0m     @     0x5639d7375689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36447)[0m     @     0x5639d73ffbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36447)[0m     @     0x5639d7400643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36447)[0m     @     0x5639d7375689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36447)[0m     @     0x5639d73ffbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36447)[0m     @     0x5639d7400643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36447)[0m     @     0x5639d7375689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36447)[0m     @     0x5639d73ffbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36447)[0m     @     0x5639d7400643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36447)[0m     @     0x5639d7375689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36443)[0m     @     0x7f53c91654f5 at::Tensor::copy_()
[2m[36m(pid=36443)[0m     @     0x7f53cf21079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36443)[0m     @     0x5564b7642fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36443)[0m     @     0x5564b759db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36443)[0m     @     0x5564b7628baf _PyEval_EvalCodeWithName
[2m[36m(pid=36443)[0m     @     0x5564b7629a20 method_vectorcall
[2m[36m(pid=36443)[0m     @     0x5564b759dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36443)[0m     @     0x5564b7628baf _PyEval_EvalCodeWithName
[2m[36m(pid=36443)[0m     @     0x5564b7629643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36443)[0m     @     0x5564b759e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36443)[0m     @     0x5564b7628baf _PyEval_EvalCodeWithName
[2m[36m(pid=36443)[0m     @     0x5564b7629643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36443)[0m     @     0x5564b759e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36443)[0m     @     0x5564b7628baf _PyEval_EvalCodeWithName
[2m[36m(pid=36443)[0m     @     0x5564b7629643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36443)[0m     @     0x5564b759e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36443)[0m     @     0x5564b7628baf _PyEval_EvalCodeWithName
[2m[36m(pid=36443)[0m     @     0x5564b7629643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36443)[0m     @     0x5564b759e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36432)[0m     @     0x7ef5485a94f5 at::Tensor::copy_()
[2m[36m(pid=36432)[0m     @     0x7ef54e65479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36432)[0m     @     0x55ec327fbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36432)[0m     @     0x55ec32756b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36432)[0m     @     0x55ec327e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=36432)[0m     @     0x55ec327e2a20 method_vectorcall
[2m[36m(pid=36432)[0m     @     0x55ec32756bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36432)[0m     @     0x55ec327e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=36432)[0m     @     0x55ec327e2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36432)[0m     @     0x55ec32757689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36432)[0m     @     0x55ec327e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=36432)[0m     @     0x55ec327e2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36432)[0m     @     0x55ec32757689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36432)[0m     @     0x55ec327e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=36432)[0m     @     0x55ec327e2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36432)[0m     @     0x55ec32757689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36432)[0m     @     0x55ec327e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=36432)[0m     @     0x55ec327e2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36432)[0m     @     0x55ec32757689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36487)[0m     @     0x7f21ed3e18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36487)[0m     @     0x7f21eaf0e4f5 at::Tensor::copy_()
[2m[36m(pid=36487)[0m     @     0x7f21f0fb979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36487)[0m     @     0x55e682636fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36487)[0m     @     0x55e682591b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36487)[0m     @     0x55e68261cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36487)[0m     @     0x55e68261da20 method_vectorcall
[2m[36m(pid=36487)[0m     @     0x55e682591bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36487)[0m     @     0x55e68261cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36487)[0m     @     0x55e68261d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36487)[0m     @     0x55e682592689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36487)[0m     @     0x55e68261cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36487)[0m     @     0x55e68261d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36487)[0m     @     0x55e682592689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36487)[0m     @     0x55e68261cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36487)[0m     @     0x55e68261d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36487)[0m     @     0x55e682592689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36487)[0m     @     0x55e68261cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36487)[0m     @     0x55e68261d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36487)[0m     @     0x55e682592689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36505)[0m     @     0x7f9a74e22d91 at::TensorIterator::for_each()
[2m[36m(pid=36505)[0m     @     0x7f9a75705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=36505)[0m     @     0x7f9a75728c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=36505)[0m     @     0x7f9a74bcaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36505)[0m     @     0x7f9a74bc8388 at::native::copy_impl()
[2m[36m(pid=36486)[0m     @     0x7f1b0fef44f5 at::Tensor::copy_()
[2m[36m(pid=36486)[0m     @     0x7f1b15f9f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36486)[0m     @     0x55ba28d2ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36486)[0m     @     0x55ba28c8ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36486)[0m     @     0x55ba28d15baf _PyEval_EvalCodeWithName
[2m[36m(pid=36486)[0m     @     0x55ba28d16a20 method_vectorcall
[2m[36m(pid=36486)[0m     @     0x55ba28c8abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36486)[0m     @     0x55ba28d15baf _PyEval_EvalCodeWithName
[2m[36m(pid=36486)[0m     @     0x55ba28d16643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36486)[0m     @     0x55ba28c8b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36486)[0m     @     0x55ba28d15baf _PyEval_EvalCodeWithName
[2m[36m(pid=36486)[0m     @     0x55ba28d16643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36486)[0m     @     0x55ba28c8b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36486)[0m     @     0x55ba28d15baf _PyEval_EvalCodeWithName
[2m[36m(pid=36486)[0m     @     0x55ba28d16643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36486)[0m     @     0x55ba28c8b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36486)[0m     @     0x55ba28d15baf _PyEval_EvalCodeWithName
[2m[36m(pid=36486)[0m     @     0x55ba28d16643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36486)[0m     @     0x55ba28c8b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36537)[0m     @     0x7f6334e784f5 at::Tensor::copy_()
[2m[36m(pid=36537)[0m     @     0x7f633af2379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36537)[0m     @     0x55abcbad5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36537)[0m     @     0x55abcba30b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36537)[0m     @     0x55abcbabbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36537)[0m     @     0x55abcbabca20 method_vectorcall
[2m[36m(pid=36537)[0m     @     0x55abcba30bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36537)[0m     @     0x55abcbabbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36537)[0m     @     0x55abcbabc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36537)[0m     @     0x55abcba31689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36537)[0m     @     0x55abcbabbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36537)[0m     @     0x55abcbabc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36537)[0m     @     0x55abcba31689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36537)[0m     @     0x55abcbabbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36537)[0m     @     0x55abcbabc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36537)[0m     @     0x55abcba31689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36537)[0m     @     0x55abcbabbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36537)[0m     @     0x55abcbabc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36537)[0m     @     0x55abcba31689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36470)[0m     @     0x7f19398cf8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36470)[0m     @     0x7f19373fc4f5 at::Tensor::copy_()
[2m[36m(pid=36470)[0m     @     0x7f193d4a779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36470)[0m     @     0x560799a68fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36470)[0m     @     0x5607999c3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36470)[0m     @     0x560799a4ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36470)[0m     @     0x560799a4fa20 method_vectorcall
[2m[36m(pid=36470)[0m     @     0x5607999c3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36470)[0m     @     0x560799a4ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36470)[0m     @     0x560799a4f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36470)[0m     @     0x5607999c4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36470)[0m     @     0x560799a4ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36470)[0m     @     0x560799a4f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36470)[0m     @     0x5607999c4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36470)[0m     @     0x560799a4ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36470)[0m     @     0x560799a4f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36470)[0m     @     0x5607999c4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36470)[0m     @     0x560799a4ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=36470)[0m     @     0x560799a4f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36470)[0m     @     0x5607999c4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36540)[0m     @     0x7f824350a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36540)[0m     @     0x7f82410374f5 at::Tensor::copy_()
[2m[36m(pid=36540)[0m     @     0x7f82470e279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36540)[0m     @     0x556cdabecfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36540)[0m     @     0x556cdab47b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36540)[0m     @     0x556cdabd2baf _PyEval_EvalCodeWithName
[2m[36m(pid=36540)[0m     @     0x556cdabd3a20 method_vectorcall
[2m[36m(pid=36540)[0m     @     0x556cdab47bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36540)[0m     @     0x556cdabd2baf _PyEval_EvalCodeWithName
[2m[36m(pid=36540)[0m     @     0x556cdabd3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36540)[0m     @     0x556cdab48689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36540)[0m     @     0x556cdabd2baf _PyEval_EvalCodeWithName
[2m[36m(pid=36540)[0m     @     0x556cdabd3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36540)[0m     @     0x556cdab48689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36540)[0m     @     0x556cdabd2baf _PyEval_EvalCodeWithName
[2m[36m(pid=36540)[0m     @     0x556cdabd3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36540)[0m     @     0x556cdab48689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36540)[0m     @     0x556cdabd2baf _PyEval_EvalCodeWithName
[2m[36m(pid=36540)[0m     @     0x556cdabd3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36540)[0m     @     0x556cdab48689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36488)[0m     @     0x7f4cad3fa79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36488)[0m     @     0x55d6ca72efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36488)[0m     @     0x55d6ca689b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36488)[0m     @     0x55d6ca714baf _PyEval_EvalCodeWithName
[2m[36m(pid=36488)[0m     @     0x55d6ca715a20 method_vectorcall
[2m[36m(pid=36488)[0m     @     0x55d6ca689bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36488)[0m     @     0x55d6ca714baf _PyEval_EvalCodeWithName
[2m[36m(pid=36488)[0m     @     0x55d6ca715643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36488)[0m     @     0x55d6ca68a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36488)[0m     @     0x55d6ca714baf _PyEval_EvalCodeWithName
[2m[36m(pid=36488)[0m     @     0x55d6ca715643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36488)[0m     @     0x55d6ca68a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36488)[0m     @     0x55d6ca714baf _PyEval_EvalCodeWithName
[2m[36m(pid=36488)[0m     @     0x55d6ca715643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36488)[0m     @     0x55d6ca68a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36488)[0m     @     0x55d6ca714baf _PyEval_EvalCodeWithName
[2m[36m(pid=36488)[0m     @     0x55d6ca715643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36488)[0m     @     0x55d6ca68a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36520)[0m     @     0x7f01dadea4f5 at::Tensor::copy_()
[2m[36m(pid=36520)[0m     @     0x7f01e0e9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36520)[0m     @     0x5574980acfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36520)[0m     @     0x557498007b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36520)[0m     @     0x557498092baf _PyEval_EvalCodeWithName
[2m[36m(pid=36520)[0m     @     0x557498093a20 method_vectorcall
[2m[36m(pid=36520)[0m     @     0x557498007bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36520)[0m     @     0x557498092baf _PyEval_EvalCodeWithName
[2m[36m(pid=36520)[0m     @     0x557498093643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36520)[0m     @     0x557498008689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36520)[0m     @     0x557498092baf _PyEval_EvalCodeWithName
[2m[36m(pid=36520)[0m     @     0x557498093643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36520)[0m     @     0x557498008689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36520)[0m     @     0x557498092baf _PyEval_EvalCodeWithName
[2m[36m(pid=36520)[0m     @     0x557498093643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36520)[0m     @     0x557498008689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36520)[0m     @     0x557498092baf _PyEval_EvalCodeWithName
[2m[36m(pid=36520)[0m     @     0x557498093643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36520)[0m     @     0x557498008689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36428)[0m     @     0x7f16500a75a4 at::native::copy_()
[2m[36m(pid=36428)[0m     @     0x7f16507924f5 at::Tensor::copy_()
[2m[36m(pid=36428)[0m     @     0x7f1652c658de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36428)[0m     @     0x7f16507924f5 at::Tensor::copy_()
[2m[36m(pid=36428)[0m     @     0x7f165683d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36428)[0m     @     0x561f0a33efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36428)[0m     @     0x561f0a299b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36428)[0m     @     0x561f0a324baf _PyEval_EvalCodeWithName
[2m[36m(pid=36428)[0m     @     0x561f0a325a20 method_vectorcall
[2m[36m(pid=36428)[0m     @     0x561f0a299bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36428)[0m     @     0x561f0a324baf _PyEval_EvalCodeWithName
[2m[36m(pid=36428)[0m     @     0x561f0a325643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36428)[0m     @     0x561f0a29a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36428)[0m     @     0x561f0a324baf _PyEval_EvalCodeWithName
[2m[36m(pid=36440)[0m     @     0x7efeb249179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36440)[0m     @     0x563dadcfefd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36440)[0m     @     0x563dadc59b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36440)[0m     @     0x563dadce4baf _PyEval_EvalCodeWithName
[2m[36m(pid=36440)[0m     @     0x563dadce5a20 method_vectorcall
[2m[36m(pid=36440)[0m     @     0x563dadc59bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36440)[0m     @     0x563dadce4baf _PyEval_EvalCodeWithName
[2m[36m(pid=36440)[0m     @     0x563dadce5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36440)[0m     @     0x563dadc5a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36440)[0m     @     0x563dadce4baf _PyEval_EvalCodeWithName
[2m[36m(pid=36440)[0m     @     0x563dadce5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36440)[0m     @     0x563dadc5a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36440)[0m     @     0x563dadce4baf _PyEval_EvalCodeWithName
[2m[36m(pid=36440)[0m     @     0x563dadce5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36440)[0m     @     0x563dadc5a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36440)[0m     @     0x563dadce4baf _PyEval_EvalCodeWithName
[2m[36m(pid=36440)[0m     @     0x563dadce5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36440)[0m     @     0x563dadc5a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36477)[0m     @     0x7f84195cb4f5 at::Tensor::copy_()
[2m[36m(pid=36477)[0m     @     0x7f841f67679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36477)[0m     @     0x55fce77f4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36477)[0m     @     0x55fce774fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36477)[0m     @     0x55fce77dabaf _PyEval_EvalCodeWithName
[2m[36m(pid=36477)[0m     @     0x55fce77dba20 method_vectorcall
[2m[36m(pid=36477)[0m     @     0x55fce774fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36477)[0m     @     0x55fce77dabaf _PyEval_EvalCodeWithName
[2m[36m(pid=36477)[0m     @     0x55fce77db643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36477)[0m     @     0x55fce7750689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36477)[0m     @     0x55fce77dabaf _PyEval_EvalCodeWithName
[2m[36m(pid=36477)[0m     @     0x55fce77db643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36477)[0m     @     0x55fce7750689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36477)[0m     @     0x55fce77dabaf _PyEval_EvalCodeWithName
[2m[36m(pid=36477)[0m     @     0x55fce77db643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36477)[0m     @     0x55fce7750689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36477)[0m     @     0x55fce77dabaf _PyEval_EvalCodeWithName
[2m[36m(pid=36477)[0m     @     0x55fce77db643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36477)[0m     @     0x55fce7750689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36441)[0m     @     0x7f816c37aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36441)[0m     @     0x7f816c378388 at::native::copy_impl()
[2m[36m(pid=36441)[0m     @     0x7f816c37a5a4 at::native::copy_()
[2m[36m(pid=36441)[0m     @     0x7f816ca654f5 at::Tensor::copy_()
[2m[36m(pid=36441)[0m     @     0x7f816ef388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36425)[0m     @     0x7eeb0ee7a4f5 at::Tensor::copy_()
[2m[36m(pid=36425)[0m     @     0x7eeb14f2579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36425)[0m     @     0x5626e7171fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36425)[0m     @     0x5626e70ccb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36425)[0m     @     0x5626e7157baf _PyEval_EvalCodeWithName
[2m[36m(pid=36425)[0m     @     0x5626e7158a20 method_vectorcall
[2m[36m(pid=36425)[0m     @     0x5626e70ccbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36425)[0m     @     0x5626e7157baf _PyEval_EvalCodeWithName
[2m[36m(pid=36425)[0m     @     0x5626e7158643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36425)[0m     @     0x5626e70cd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36425)[0m     @     0x5626e7157baf _PyEval_EvalCodeWithName
[2m[36m(pid=36425)[0m     @     0x5626e7158643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36425)[0m     @     0x5626e70cd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36425)[0m     @     0x5626e7157baf _PyEval_EvalCodeWithName
[2m[36m(pid=36425)[0m     @     0x5626e7158643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36425)[0m     @     0x5626e70cd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36425)[0m     @     0x5626e7157baf _PyEval_EvalCodeWithName
[2m[36m(pid=36425)[0m     @     0x5626e7158643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36425)[0m     @     0x5626e70cd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36427)[0m     @     0x7f0a8e2cb4f5 at::Tensor::copy_()
[2m[36m(pid=36427)[0m     @     0x7f0a9437679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36427)[0m     @     0x559c5efcafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36427)[0m     @     0x559c5ef25b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36427)[0m     @     0x559c5efb0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36427)[0m     @     0x559c5efb1a20 method_vectorcall
[2m[36m(pid=36427)[0m     @     0x559c5ef25bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36427)[0m     @     0x559c5efb0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36427)[0m     @     0x559c5efb1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36427)[0m     @     0x559c5ef26689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36427)[0m     @     0x559c5efb0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36427)[0m     @     0x559c5efb1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36427)[0m     @     0x559c5ef26689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36427)[0m     @     0x559c5efb0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36427)[0m     @     0x559c5efb1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36427)[0m     @     0x559c5ef26689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36427)[0m     @     0x559c5efb0baf _PyEval_EvalCodeWithName
[2m[36m(pid=36427)[0m     @     0x559c5efb1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36427)[0m     @     0x559c5ef26689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36430)[0m     @     0x7f0292dea4f5 at::Tensor::copy_()
[2m[36m(pid=36430)[0m     @     0x7f0298e9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36430)[0m     @     0x559cae7ecfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36430)[0m     @     0x559cae747b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36430)[0m     @     0x559cae7d2baf _PyEval_EvalCodeWithName
[2m[36m(pid=36430)[0m     @     0x559cae7d3a20 method_vectorcall
[2m[36m(pid=36430)[0m     @     0x559cae747bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36430)[0m     @     0x559cae7d2baf _PyEval_EvalCodeWithName
[2m[36m(pid=36430)[0m     @     0x559cae7d3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36430)[0m     @     0x559cae748689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36430)[0m     @     0x559cae7d2baf _PyEval_EvalCodeWithName
[2m[36m(pid=36430)[0m     @     0x559cae7d3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36430)[0m     @     0x559cae748689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36430)[0m     @     0x559cae7d2baf _PyEval_EvalCodeWithName
[2m[36m(pid=36430)[0m     @     0x559cae7d3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36430)[0m     @     0x559cae748689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36430)[0m     @     0x559cae7d2baf _PyEval_EvalCodeWithName
[2m[36m(pid=36430)[0m     @     0x559cae7d3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36430)[0m     @     0x559cae748689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36531)[0m     @     0x55fcc6a79689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36531)[0m     @     0x55fcc6b03baf _PyEval_EvalCodeWithName
[2m[36m(pid=36531)[0m     @     0x55fcc6b04643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36531)[0m     @     0x55fcc6a79689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36531)[0m     @     0x55fcc6b03baf _PyEval_EvalCodeWithName
[2m[36m(pid=36531)[0m     @     0x55fcc6b04643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36531)[0m     @     0x55fcc6a79689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36500)[0m     @     0x7f5593a0ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=36500)[0m     @     0x7f5593a0a388 at::native::copy_impl()
[2m[36m(pid=36500)[0m     @     0x7f5593a0c5a4 at::native::copy_()
[2m[36m(pid=36500)[0m     @     0x7f55940f74f5 at::Tensor::copy_()
[2m[36m(pid=36497)[0m     @     0x7f18c9dc08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36497)[0m     @     0x7f18c78ed4f5 at::Tensor::copy_()
[2m[36m(pid=36497)[0m     @     0x7f18cd99879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36497)[0m     @     0x561edca0ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36497)[0m     @     0x561edc96ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36497)[0m     @     0x561edc9f5baf _PyEval_EvalCodeWithName
[2m[36m(pid=36497)[0m     @     0x561edc9f6a20 method_vectorcall
[2m[36m(pid=36497)[0m     @     0x561edc96abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36497)[0m     @     0x561edc9f5baf _PyEval_EvalCodeWithName
[2m[36m(pid=36497)[0m     @     0x561edc9f6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36497)[0m     @     0x561edc96b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36497)[0m     @     0x561edc9f5baf _PyEval_EvalCodeWithName
[2m[36m(pid=36497)[0m     @     0x561edc9f6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36497)[0m     @     0x561edc96b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36497)[0m     @     0x561edc9f5baf _PyEval_EvalCodeWithName
[2m[36m(pid=36497)[0m     @     0x561edc9f6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36497)[0m     @     0x561edc96b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36497)[0m     @     0x561edc9f5baf _PyEval_EvalCodeWithName
[2m[36m(pid=36497)[0m     @     0x561edc9f6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36497)[0m     @     0x561edc96b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36515)[0m     @     0x7ecdc42a04f5 at::Tensor::copy_()
[2m[36m(pid=36515)[0m     @     0x7ecdc67738de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36515)[0m     @     0x7ecdc42a04f5 at::Tensor::copy_()
[2m[36m(pid=36515)[0m     @     0x7ecdca34b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36515)[0m     @     0x56255887ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36515)[0m     @     0x5625587dab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36515)[0m     @     0x562558865baf _PyEval_EvalCodeWithName
[2m[36m(pid=36515)[0m     @     0x562558866a20 method_vectorcall
[2m[36m(pid=36515)[0m     @     0x5625587dabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36515)[0m     @     0x562558865baf _PyEval_EvalCodeWithName
[2m[36m(pid=36515)[0m     @     0x562558866643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36515)[0m     @     0x5625587db689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36515)[0m     @     0x562558865baf _PyEval_EvalCodeWithName
[2m[36m(pid=36515)[0m     @     0x562558866643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36515)[0m     @     0x5625587db689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36515)[0m     @     0x562558865baf _PyEval_EvalCodeWithName
[2m[36m(pid=36515)[0m     @     0x562558866643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36515)[0m     @     0x5625587db689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36515)[0m     @     0x562558865baf _PyEval_EvalCodeWithName
[2m[36m(pid=36515)[0m     @     0x562558866643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36515)[0m     @     0x5625587db689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36516)[0m     @     0x7f19e7a9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36516)[0m     @     0x7f19e55cb4f5 at::Tensor::copy_()
[2m[36m(pid=36516)[0m     @     0x7f19eb67679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36516)[0m     @     0x562b2081ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36516)[0m     @     0x562b2077ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36516)[0m     @     0x562b20805baf _PyEval_EvalCodeWithName
[2m[36m(pid=36516)[0m     @     0x562b20806a20 method_vectorcall
[2m[36m(pid=36516)[0m     @     0x562b2077abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36516)[0m     @     0x562b20805baf _PyEval_EvalCodeWithName
[2m[36m(pid=36516)[0m     @     0x562b20806643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36516)[0m     @     0x562b2077b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36516)[0m     @     0x562b20805baf _PyEval_EvalCodeWithName
[2m[36m(pid=36516)[0m     @     0x562b20806643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36516)[0m     @     0x562b2077b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36516)[0m     @     0x562b20805baf _PyEval_EvalCodeWithName
[2m[36m(pid=36516)[0m     @     0x562b20806643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36516)[0m     @     0x562b2077b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36516)[0m     @     0x562b20805baf _PyEval_EvalCodeWithName
[2m[36m(pid=36516)[0m     @     0x562b20806643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36516)[0m     @     0x562b2077b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36476)[0m     @     0x7f91f82e04f5 at::Tensor::copy_()
[2m[36m(pid=36476)[0m     @     0x7f91fa7b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36476)[0m     @     0x7f91f82e04f5 at::Tensor::copy_()
[2m[36m(pid=36476)[0m     @     0x7f91fe38b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36476)[0m     @     0x557ebed6afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36476)[0m     @     0x557ebecc5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36476)[0m     @     0x557ebed50baf _PyEval_EvalCodeWithName
[2m[36m(pid=36476)[0m     @     0x557ebed51a20 method_vectorcall
[2m[36m(pid=36476)[0m     @     0x557ebecc5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36476)[0m     @     0x557ebed50baf _PyEval_EvalCodeWithName
[2m[36m(pid=36476)[0m     @     0x557ebed51643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36476)[0m     @     0x557ebecc6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36476)[0m     @     0x557ebed50baf _PyEval_EvalCodeWithName
[2m[36m(pid=36476)[0m     @     0x557ebed51643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36476)[0m     @     0x557ebecc6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36476)[0m     @     0x557ebed50baf _PyEval_EvalCodeWithName
[2m[36m(pid=36476)[0m     @     0x557ebed51643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36476)[0m     @     0x557ebecc6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36496)[0m     @     0x7f61713ba4f5 at::Tensor::copy_()
[2m[36m(pid=36496)[0m     @     0x7f617746579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36496)[0m     @     0x559b2791bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36496)[0m     @     0x559b27876b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36496)[0m     @     0x559b27901baf _PyEval_EvalCodeWithName
[2m[36m(pid=36496)[0m     @     0x559b27902a20 method_vectorcall
[2m[36m(pid=36496)[0m     @     0x559b27876bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36496)[0m     @     0x559b27901baf _PyEval_EvalCodeWithName
[2m[36m(pid=36496)[0m     @     0x559b27902643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36496)[0m     @     0x559b27877689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36496)[0m     @     0x559b27901baf _PyEval_EvalCodeWithName
[2m[36m(pid=36496)[0m     @     0x559b27902643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36496)[0m     @     0x559b27877689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36496)[0m     @     0x559b27901baf _PyEval_EvalCodeWithName
[2m[36m(pid=36496)[0m     @     0x559b27902643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36496)[0m     @     0x559b27877689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36496)[0m     @     0x559b27901baf _PyEval_EvalCodeWithName
[2m[36m(pid=36496)[0m     @     0x559b27902643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36496)[0m     @     0x559b27877689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36505)[0m     @     0x7f9a74bca5a4 at::native::copy_()
[2m[36m(pid=36505)[0m     @     0x7f9a752b54f5 at::Tensor::copy_()
[2m[36m(pid=36505)[0m     @     0x7f9a777888de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36428)[0m     @     0x561f0a325643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36428)[0m     @     0x561f0a29a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36428)[0m     @     0x561f0a324baf _PyEval_EvalCodeWithName
[2m[36m(pid=36428)[0m     @     0x561f0a325643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36428)[0m     @     0x561f0a29a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36428)[0m     @     0x561f0a324baf _PyEval_EvalCodeWithName
[2m[36m(pid=36428)[0m     @     0x561f0a325643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36428)[0m     @     0x561f0a29a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36441)[0m     @     0x7f816ca654f5 at::Tensor::copy_()
[2m[36m(pid=36441)[0m     @     0x7f8172b1079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36441)[0m     @     0x55e0301b6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36441)[0m     @     0x55e030111b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36441)[0m     @     0x55e03019cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36441)[0m     @     0x55e03019da20 method_vectorcall
[2m[36m(pid=36441)[0m     @     0x55e030111bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36441)[0m     @     0x55e03019cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36441)[0m     @     0x55e03019d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36441)[0m     @     0x55e030112689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36441)[0m     @     0x55e03019cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36441)[0m     @     0x55e03019d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36441)[0m     @     0x55e030112689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36441)[0m     @     0x55e03019cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36441)[0m     @     0x55e03019d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36441)[0m     @     0x55e030112689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36441)[0m     @     0x55e03019cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=36441)[0m     @     0x55e03019d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36441)[0m     @     0x55e030112689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36500)[0m     @     0x7f55965ca8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=36500)[0m     @     0x7f55940f74f5 at::Tensor::copy_()
[2m[36m(pid=36500)[0m     @     0x7f559a1a279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36500)[0m     @     0x562847ca4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36500)[0m     @     0x562847bffb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36500)[0m     @     0x562847c8abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36500)[0m     @     0x562847c8ba20 method_vectorcall
[2m[36m(pid=36500)[0m     @     0x562847bffbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36500)[0m     @     0x562847c8abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36500)[0m     @     0x562847c8b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36500)[0m     @     0x562847c00689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36500)[0m     @     0x562847c8abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36500)[0m     @     0x562847c8b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36500)[0m     @     0x562847c00689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36500)[0m     @     0x562847c8abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36500)[0m     @     0x562847c8b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36500)[0m     @     0x562847c00689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36500)[0m     @     0x562847c8abaf _PyEval_EvalCodeWithName
[2m[36m(pid=36500)[0m     @     0x562847c8b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36500)[0m     @     0x562847c00689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36476)[0m     @     0x557ebed50baf _PyEval_EvalCodeWithName
[2m[36m(pid=36476)[0m     @     0x557ebed51643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36476)[0m     @     0x557ebecc6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36505)[0m     @     0x7f9a752b54f5 at::Tensor::copy_()
[2m[36m(pid=36505)[0m     @     0x7f9a7b36079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=36505)[0m     @     0x55a507f2bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=36505)[0m     @     0x55a507e86b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36505)[0m     @     0x55a507f11baf _PyEval_EvalCodeWithName
[2m[36m(pid=36505)[0m     @     0x55a507f12a20 method_vectorcall
[2m[36m(pid=36505)[0m     @     0x55a507e86bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36505)[0m     @     0x55a507f11baf _PyEval_EvalCodeWithName
[2m[36m(pid=36505)[0m     @     0x55a507f12643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36505)[0m     @     0x55a507e87689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36505)[0m     @     0x55a507f11baf _PyEval_EvalCodeWithName
[2m[36m(pid=36505)[0m     @     0x55a507f12643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36505)[0m     @     0x55a507e87689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36505)[0m     @     0x55a507f11baf _PyEval_EvalCodeWithName
[2m[36m(pid=36505)[0m     @     0x55a507f12643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36505)[0m     @     0x55a507e87689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=36505)[0m     @     0x55a507f11baf _PyEval_EvalCodeWithName
[2m[36m(pid=36505)[0m     @     0x55a507f12643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=36505)[0m     @     0x55a507e87689 _PyEval_EvalFrameDefault.cold.2792
== Status ==
Memory usage on this node: 25.3/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/558.11 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_7bb99_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_7bb99_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_7bb99_00000_0_2020-11-05_10-41-38/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

2020-11-05 10:41:45,787	ERROR trial_runner.py:567 -- Trial PPO_jss_env_7bb99_00000: Error processing event.
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py", line 515, in _process_trial
    result = self.trial_executor.fetch_result(trial)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py", line 488, in fetch_result
    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/worker.py", line 1428, in get
    raise value.as_instanceof_cause()
ray.exceptions.RayTaskError: [36mray::PPO.train()[39m (pid=36536, ip=172.17.0.4)
  File "python/ray/_raylet.pyx", line 484, in ray._raylet.execute_task
  File "python/ray/_raylet.pyx", line 438, in ray._raylet.execute_task.function_executor
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 516, in train
    raise e
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 505, in train
    result = Trainable.train(self)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py", line 336, in train
    result = self.step()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py", line 134, in step
    res = next(self.train_exec_impl)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 756, in __next__
    return next(self.built_iterator)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 876, in apply_flatten
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 828, in add_wait_hooks
    item = next(it)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 466, in base_iterator
    actor_set.init_actors()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 1238, in init_actors
    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
2020-11-05 10:41:45,795	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff1e7ae67b01000000.
== Status ==
Memory usage on this node: 24.9/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/558.11 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_7bb99_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_7bb99_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_7bb99_00000_0_2020-11-05_10-41-38/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

[2m[36m(pid=36536)[0m E1105 10:41:45.778725 36536 37630 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=7401512aaa7b6e5d1e7ae67b01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=1e7ae67b01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}
[2m[36m(pid=36536)[0m E1105 10:41:45.778929 36536 37630 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=71fdc8bab2e5c4d51e7ae67b01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=1e7ae67b01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}
[2m[36m(pid=36536)[0m E1105 10:41:45.801029 36536 37630 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=dbbcebddc63212b91e7ae67b01000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=1e7ae67b01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}
Traceback (most recent call last):
  File "train.py", line 74, in <module>
    train_func()
  File "train.py", line 56, in train_func
    analysis = tune.run(PPOTrainer, config=config, stop=stop, name="ppo-jss")
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py", line 427, in run
    raise TuneError("Trials did not complete", incomplete_trials)
ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_7bb99_00000])
