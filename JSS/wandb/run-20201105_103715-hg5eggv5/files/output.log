2020-11-05 10:37:19,311	INFO services.py:1164 -- View the Ray dashboard at [1m[32mhttp://127.0.0.1:8265[39m[22m
== Status ==
Memory usage on this node: 12.7/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 80/80 CPUs, 1/1 GPUs, 0.0/558.11 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 RUNNING)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_e21b2_00000 | RUNNING  |       |
+-------------------------+----------+-------+


[2m[36m(pid=30178)[0m 2020-11-05 10:37:22,135	INFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.
[2m[36m(pid=30178)[0m /root/miniconda3/lib/python3.8/site-packages/torch/cuda/__init__.py:125: UserWarning: 
[2m[36m(pid=30178)[0m GeForce RTX 2080 Ti with CUDA capability sm_75 is not compatible with the current PyTorch installation.
[2m[36m(pid=30178)[0m The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 compute_37.
[2m[36m(pid=30178)[0m If you want to use the GeForce RTX 2080 Ti GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/
[2m[36m(pid=30178)[0m 
[2m[36m(pid=30178)[0m   warnings.warn(incompatible_device_warn.format(device_name, capability, " ".join(arch_list), device_name))
[2m[36m(pid=30060)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30060)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30087)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30087)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30087)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30192)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30192)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30093)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30093)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30093)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30164)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30164)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30164)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30164)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30164)[0m *** SIGSEGV (@0x0) received by PID 30164 (TID 0x7f20809ef700) from PID 0; stack trace: ***
[2m[36m(pid=30164)[0m     @     0x7f20805c8390 (unknown)
[2m[36m(pid=30164)[0m     @     0x7ef180536f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30164)[0m     @     0x7ef17fc617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30164)[0m     @     0x7ef17fc648f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30164)[0m     @     0x7ef17fc64ad3 at::TensorIterator::for_each()
[2m[36m(pid=30164)[0m     @     0x7ef17fc64d91 at::TensorIterator::for_each()
[2m[36m(pid=30073)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30073)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30073)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30121)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30121)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30121)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30121)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30121)[0m *** SIGSEGV (@0x0) received by PID 30121 (TID 0x7f8dd7dae700) from PID 0; stack trace: ***
[2m[36m(pid=30121)[0m     @     0x7f8dd7987390 (unknown)
[2m[36m(pid=30121)[0m     @     0x7f5ed78def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30121)[0m     @     0x7f5ed70097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30121)[0m     @     0x7f5ed700c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30121)[0m     @     0x7f5ed700cad3 at::TensorIterator::for_each()
[2m[36m(pid=30061)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30061)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30061)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30147)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30147)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30147)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30147)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30147)[0m *** SIGSEGV (@0x0) received by PID 30147 (TID 0x7f8120853700) from PID 0; stack trace: ***
[2m[36m(pid=30147)[0m     @     0x7f812042c390 (unknown)
[2m[36m(pid=30147)[0m     @     0x7f5220333f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30147)[0m     @     0x7f521fa5e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30147)[0m     @     0x7f521fa618f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30147)[0m     @     0x7f521fa61ad3 at::TensorIterator::for_each()
[2m[36m(pid=30147)[0m     @     0x7f521fa61d91 at::TensorIterator::for_each()
[2m[36m(pid=30147)[0m     @     0x7f5220344b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30147)[0m     @     0x7f5220367c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30147)[0m     @     0x7f521f809a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30147)[0m     @     0x7f521f807388 at::native::copy_impl()
[2m[36m(pid=30147)[0m     @     0x7f521f8095a4 at::native::copy_()
[2m[36m(pid=30147)[0m     @     0x7f521fef44f5 at::Tensor::copy_()
[2m[36m(pid=30186)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30186)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30186)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30186)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30186)[0m *** SIGSEGV (@0x0) received by PID 30186 (TID 0x7febbab0d700) from PID 0; stack trace: ***
[2m[36m(pid=30186)[0m     @     0x7febba6e6390 (unknown)
[2m[36m(pid=30186)[0m     @     0x7fbcba686f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30186)[0m     @     0x7fbcb9db17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30186)[0m     @     0x7fbcb9db48f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30186)[0m     @     0x7fbcb9db4ad3 at::TensorIterator::for_each()
[2m[36m(pid=30186)[0m     @     0x7fbcb9db4d91 at::TensorIterator::for_each()
[2m[36m(pid=30186)[0m     @     0x7fbcba697b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30186)[0m     @     0x7fbcba6bac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30186)[0m     @     0x7fbcb9b5ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30186)[0m     @     0x7fbcb9b5a388 at::native::copy_impl()
[2m[36m(pid=30173)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30173)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30173)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30173)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30173)[0m *** SIGSEGV (@0x0) received by PID 30173 (TID 0x7f34fb7e0700) from PID 0; stack trace: ***
[2m[36m(pid=30173)[0m     @     0x7f34fb3b9390 (unknown)
[2m[36m(pid=30173)[0m     @     0x7f05fb229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30173)[0m     @     0x7f05fa9547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30173)[0m     @     0x7f05fa9578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30173)[0m     @     0x7f05fa957ad3 at::TensorIterator::for_each()
[2m[36m(pid=30173)[0m     @     0x7f05fa957d91 at::TensorIterator::for_each()
[2m[36m(pid=30173)[0m     @     0x7f05fb23ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30173)[0m     @     0x7f05fb25dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30173)[0m     @     0x7f05fa6ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30173)[0m     @     0x7f05fa6fd388 at::native::copy_impl()
[2m[36m(pid=30158)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30158)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30158)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30158)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30158)[0m *** SIGSEGV (@0x0) received by PID 30158 (TID 0x7f2bfca02700) from PID 0; stack trace: ***
[2m[36m(pid=30158)[0m     @     0x7f2bfc5db390 (unknown)
[2m[36m(pid=30158)[0m     @     0x7efcfc3e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30158)[0m     @     0x7efcfbb0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30158)[0m     @     0x7efcfbb118f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30158)[0m     @     0x7efcfbb11ad3 at::TensorIterator::for_each()
[2m[36m(pid=30158)[0m     @     0x7efcfbb11d91 at::TensorIterator::for_each()
[2m[36m(pid=30158)[0m     @     0x7efcfc3f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30158)[0m     @     0x7efcfc417c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30158)[0m     @     0x7efcfb8b9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30158)[0m     @     0x7efcfb8b7388 at::native::copy_impl()
[2m[36m(pid=30090)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30090)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30155)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30155)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30155)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30155)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30155)[0m *** SIGSEGV (@0x0) received by PID 30155 (TID 0x7f86891bc700) from PID 0; stack trace: ***
[2m[36m(pid=30155)[0m     @     0x7f8688d95390 (unknown)
[2m[36m(pid=30155)[0m     @     0x7f5788c74f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30155)[0m     @     0x7f578839f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30155)[0m     @     0x7f57883a28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30155)[0m     @     0x7f57883a2ad3 at::TensorIterator::for_each()
[2m[36m(pid=30155)[0m     @     0x7f57883a2d91 at::TensorIterator::for_each()
[2m[36m(pid=30155)[0m     @     0x7f5788c85b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30155)[0m     @     0x7f5788ca8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30155)[0m     @     0x7f578814aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30155)[0m     @     0x7f5788148388 at::native::copy_impl()
[2m[36m(pid=30142)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30142)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30142)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30142)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30142)[0m *** SIGSEGV (@0x0) received by PID 30142 (TID 0x7f6e77985700) from PID 0; stack trace: ***
[2m[36m(pid=30142)[0m     @     0x7f6e7755e390 (unknown)
[2m[36m(pid=30142)[0m     @     0x7f3f7750df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30142)[0m     @     0x7f3f76c387db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30142)[0m     @     0x7f3f76c3b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30142)[0m     @     0x7f3f76c3bad3 at::TensorIterator::for_each()
[2m[36m(pid=30142)[0m     @     0x7f3f76c3bd91 at::TensorIterator::for_each()
[2m[36m(pid=30142)[0m     @     0x7f3f7751eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30142)[0m     @     0x7f3f77541c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30142)[0m     @     0x7f3f769e3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30142)[0m     @     0x7f3f769e1388 at::native::copy_impl()
[2m[36m(pid=30142)[0m     @     0x7f3f769e35a4 at::native::copy_()
[2m[36m(pid=30151)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30151)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30151)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30151)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30151)[0m *** SIGSEGV (@0x0) received by PID 30151 (TID 0x7f3520754700) from PID 0; stack trace: ***
[2m[36m(pid=30151)[0m     @     0x7f352032d390 (unknown)
[2m[36m(pid=30151)[0m     @     0x7f0620290f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30151)[0m     @     0x7f061f9bb7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30151)[0m     @     0x7f061f9be8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30151)[0m     @     0x7f061f9bead3 at::TensorIterator::for_each()
[2m[36m(pid=30151)[0m     @     0x7f061f9bed91 at::TensorIterator::for_each()
[2m[36m(pid=30151)[0m     @     0x7f06202a1b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30151)[0m     @     0x7f06202c4c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30188)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30188)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30188)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30188)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30188)[0m *** SIGSEGV (@0x0) received by PID 30188 (TID 0x7f549645a700) from PID 0; stack trace: ***
[2m[36m(pid=30188)[0m     @     0x7f5496033390 (unknown)
[2m[36m(pid=30188)[0m     @     0x7f2595e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30188)[0m     @     0x7f259554f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30188)[0m     @     0x7f25955528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30188)[0m     @     0x7f2595552ad3 at::TensorIterator::for_each()
[2m[36m(pid=30188)[0m     @     0x7f2595552d91 at::TensorIterator::for_each()
[2m[36m(pid=30070)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30070)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30070)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30070)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30070)[0m *** SIGSEGV (@0x0) received by PID 30070 (TID 0x7f28076c2700) from PID 0; stack trace: ***
[2m[36m(pid=30070)[0m     @     0x7f280729b390 (unknown)
[2m[36m(pid=30070)[0m     @     0x7ef907239f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30131)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30131)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30131)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30131)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30131)[0m *** SIGSEGV (@0x0) received by PID 30131 (TID 0x7ff823394700) from PID 0; stack trace: ***
[2m[36m(pid=30131)[0m     @     0x7ff822f6d390 (unknown)
[2m[36m(pid=30131)[0m     @     0x7fc922a13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30131)[0m     @     0x7fc92213e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30131)[0m     @     0x7fc9221418f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30131)[0m     @     0x7fc922141ad3 at::TensorIterator::for_each()
[2m[36m(pid=30131)[0m     @     0x7fc922141d91 at::TensorIterator::for_each()
[2m[36m(pid=30131)[0m     @     0x7fc922a24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30131)[0m     @     0x7fc922a47c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30131)[0m     @     0x7fc921ee9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30131)[0m     @     0x7fc921ee7388 at::native::copy_impl()
[2m[36m(pid=30187)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30187)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30187)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30187)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30187)[0m *** SIGSEGV (@0x0) received by PID 30187 (TID 0x7fe587c9a700) from PID 0; stack trace: ***
[2m[36m(pid=30187)[0m     @     0x7fe587873390 (unknown)
[2m[36m(pid=30187)[0m     @     0x7fb6875eff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30187)[0m     @     0x7fb686d1a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30187)[0m     @     0x7fb686d1d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30187)[0m     @     0x7fb686d1dad3 at::TensorIterator::for_each()
[2m[36m(pid=30187)[0m     @     0x7fb686d1dd91 at::TensorIterator::for_each()
[2m[36m(pid=30187)[0m     @     0x7fb687600b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30187)[0m     @     0x7fb687623c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30187)[0m     @     0x7fb686ac5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30187)[0m     @     0x7fb686ac3388 at::native::copy_impl()
[2m[36m(pid=30187)[0m     @     0x7fb686ac55a4 at::native::copy_()
[2m[36m(pid=30133)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30133)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30133)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30133)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30133)[0m *** SIGSEGV (@0x0) received by PID 30133 (TID 0x7f346e53d700) from PID 0; stack trace: ***
[2m[36m(pid=30133)[0m     @     0x7f346e116390 (unknown)
[2m[36m(pid=30133)[0m     @     0x7f056de24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30133)[0m     @     0x7f056d54f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30133)[0m     @     0x7f056d5528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30133)[0m     @     0x7f056d552ad3 at::TensorIterator::for_each()
[2m[36m(pid=30133)[0m     @     0x7f056d552d91 at::TensorIterator::for_each()
[2m[36m(pid=30133)[0m     @     0x7f056de35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30133)[0m     @     0x7f056de58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30133)[0m     @     0x7f056d2faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30133)[0m     @     0x7f056d2f8388 at::native::copy_impl()
[2m[36m(pid=30149)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30149)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30149)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30149)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30149)[0m *** SIGSEGV (@0x0) received by PID 30149 (TID 0x7f67adccf700) from PID 0; stack trace: ***
[2m[36m(pid=30149)[0m     @     0x7f67ad8a8390 (unknown)
[2m[36m(pid=30149)[0m     @     0x7f38ad7f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30149)[0m     @     0x7f38acf247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30149)[0m     @     0x7f38acf278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30149)[0m     @     0x7f38acf27ad3 at::TensorIterator::for_each()
[2m[36m(pid=30149)[0m     @     0x7f38acf27d91 at::TensorIterator::for_each()
[2m[36m(pid=30149)[0m     @     0x7f38ad80ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30161)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30161)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30161)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30161)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30161)[0m *** SIGSEGV (@0x0) received by PID 30161 (TID 0x7f4940598700) from PID 0; stack trace: ***
[2m[36m(pid=30161)[0m     @     0x7f4940171390 (unknown)
[2m[36m(pid=30161)[0m     @     0x7f1a4001cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30161)[0m     @     0x7f1a3f7477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30161)[0m     @     0x7f1a3f74a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30161)[0m     @     0x7f1a3f74aad3 at::TensorIterator::for_each()
[2m[36m(pid=30161)[0m     @     0x7f1a3f74ad91 at::TensorIterator::for_each()
[2m[36m(pid=30161)[0m     @     0x7f1a4002db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30161)[0m     @     0x7f1a40050c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30126)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30126)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30126)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30126)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30126)[0m *** SIGSEGV (@0x0) received by PID 30126 (TID 0x7fe973479700) from PID 0; stack trace: ***
[2m[36m(pid=30126)[0m     @     0x7fe973052390 (unknown)
[2m[36m(pid=30126)[0m     @     0x7fba72f13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30143)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30143)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30143)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30065)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30065)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30065)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30065)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30065)[0m *** SIGSEGV (@0x0) received by PID 30065 (TID 0x7f178314d700) from PID 0; stack trace: ***
[2m[36m(pid=30065)[0m     @     0x7f1782d26390 (unknown)
[2m[36m(pid=30065)[0m     @     0x7ee882ccff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30065)[0m     @     0x7ee8823fa7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30065)[0m     @     0x7ee8823fd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30065)[0m     @     0x7ee8823fdad3 at::TensorIterator::for_each()
[2m[36m(pid=30065)[0m     @     0x7ee8823fdd91 at::TensorIterator::for_each()
[2m[36m(pid=30065)[0m     @     0x7ee882ce0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30065)[0m     @     0x7ee882d03c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30065)[0m     @     0x7ee8821a5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30065)[0m     @     0x7ee8821a3388 at::native::copy_impl()
[2m[36m(pid=30064)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30064)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30064)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30064)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30064)[0m *** SIGSEGV (@0x0) received by PID 30064 (TID 0x7fc2c0c0f700) from PID 0; stack trace: ***
[2m[36m(pid=30184)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30184)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30184)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30184)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30184)[0m *** SIGSEGV (@0x0) received by PID 30184 (TID 0x7f693350b700) from PID 0; stack trace: ***
[2m[36m(pid=30124)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30124)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30124)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30124)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30124)[0m *** SIGSEGV (@0x0) received by PID 30124 (TID 0x7fd9bba07700) from PID 0; stack trace: ***
[2m[36m(pid=30094)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30094)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30094)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30094)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30094)[0m *** SIGSEGV (@0x0) received by PID 30094 (TID 0x7f8e7b397700) from PID 0; stack trace: ***
[2m[36m(pid=30180)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30180)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30180)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30180)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30180)[0m *** SIGSEGV (@0x0) received by PID 30180 (TID 0x7fb2fae96700) from PID 0; stack trace: ***
[2m[36m(pid=30180)[0m     @     0x7fb2faa6f390 (unknown)
[2m[36m(pid=30180)[0m     @     0x7f83fa9f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30078)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30078)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30078)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30078)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30078)[0m *** SIGSEGV (@0x0) received by PID 30078 (TID 0x7fd812160700) from PID 0; stack trace: ***
[2m[36m(pid=30078)[0m     @     0x7fd811d39390 (unknown)
[2m[36m(pid=30189)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30189)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30189)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30189)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30189)[0m *** SIGSEGV (@0x0) received by PID 30189 (TID 0x7f72bd311700) from PID 0; stack trace: ***
[2m[36m(pid=30189)[0m     @     0x7f72bceea390 (unknown)
[2m[36m(pid=30175)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30175)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30175)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30175)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30175)[0m *** SIGSEGV (@0x0) received by PID 30175 (TID 0x7fb365773700) from PID 0; stack trace: ***
[2m[36m(pid=30175)[0m     @     0x7fb36534c390 (unknown)
[2m[36m(pid=30175)[0m     @     0x7f84652b7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30175)[0m     @     0x7f84649e27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30168)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30168)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30168)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30168)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30168)[0m *** SIGSEGV (@0x0) received by PID 30168 (TID 0x7fcd8235a700) from PID 0; stack trace: ***
[2m[36m(pid=30168)[0m     @     0x7fcd81f33390 (unknown)
[2m[36m(pid=30135)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30135)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30135)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30135)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30135)[0m *** SIGSEGV (@0x0) received by PID 30135 (TID 0x7fcf45f49700) from PID 0; stack trace: ***
[2m[36m(pid=30135)[0m     @     0x7fcf45b22390 (unknown)
[2m[36m(pid=30135)[0m     @     0x7fa0457f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30135)[0m     @     0x7fa044f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30135)[0m     @     0x7fa044f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30135)[0m     @     0x7fa044f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=30135)[0m     @     0x7fa044f27d91 at::TensorIterator::for_each()
[2m[36m(pid=30135)[0m     @     0x7fa04580ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30135)[0m     @     0x7fa04582dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30135)[0m     @     0x7fa044ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30135)[0m     @     0x7fa044ccd388 at::native::copy_impl()
[2m[36m(pid=30135)[0m     @     0x7fa044ccf5a4 at::native::copy_()
[2m[36m(pid=30135)[0m     @     0x7fa0453ba4f5 at::Tensor::copy_()
[2m[36m(pid=30135)[0m     @     0x7fa04788d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30067)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30067)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30067)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30067)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30067)[0m *** SIGSEGV (@0x0) received by PID 30067 (TID 0x7f471e2a6700) from PID 0; stack trace: ***
[2m[36m(pid=30067)[0m     @     0x7f471de7f390 (unknown)
[2m[36m(pid=30067)[0m     @     0x7f181dd1df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30067)[0m     @     0x7f181d4487db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30067)[0m     @     0x7f181d44b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30058)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30058)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30058)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30058)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30058)[0m *** SIGSEGV (@0x0) received by PID 30058 (TID 0x7fb12c723700) from PID 0; stack trace: ***
[2m[36m(pid=30058)[0m     @     0x7fb12c2fc390 (unknown)
[2m[36m(pid=30058)[0m     @     0x7f822c297f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30058)[0m     @     0x7f822b9c27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30145)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30145)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30145)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30145)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30145)[0m *** SIGSEGV (@0x0) received by PID 30145 (TID 0x7f07b0343700) from PID 0; stack trace: ***
[2m[36m(pid=30145)[0m     @     0x7f07aff1c390 (unknown)
[2m[36m(pid=30145)[0m     @     0x7ed8afe0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30145)[0m     @     0x7ed8af5367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30145)[0m     @     0x7ed8af5398f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30145)[0m     @     0x7ed8af539ad3 at::TensorIterator::for_each()
[2m[36m(pid=30145)[0m     @     0x7ed8af539d91 at::TensorIterator::for_each()
[2m[36m(pid=30145)[0m     @     0x7ed8afe1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30145)[0m     @     0x7ed8afe3fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30145)[0m     @     0x7ed8af2e1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30145)[0m     @     0x7ed8af2df388 at::native::copy_impl()
[2m[36m(pid=30129)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30129)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30129)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30129)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30129)[0m *** SIGSEGV (@0x0) received by PID 30129 (TID 0x7f2b21ae4700) from PID 0; stack trace: ***
[2m[36m(pid=30129)[0m     @     0x7f2b216bd390 (unknown)
[2m[36m(pid=30129)[0m     @     0x7efc214dff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30129)[0m     @     0x7efc20c0a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30129)[0m     @     0x7efc20c0d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30129)[0m     @     0x7efc20c0dad3 at::TensorIterator::for_each()
[2m[36m(pid=30129)[0m     @     0x7efc20c0dd91 at::TensorIterator::for_each()
[2m[36m(pid=30129)[0m     @     0x7efc214f0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30129)[0m     @     0x7efc21513c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30129)[0m     @     0x7efc209b5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30129)[0m     @     0x7efc209b3388 at::native::copy_impl()
[2m[36m(pid=30129)[0m     @     0x7efc209b55a4 at::native::copy_()
[2m[36m(pid=30062)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30062)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30062)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30062)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30062)[0m *** SIGSEGV (@0x0) received by PID 30062 (TID 0x7f9f9d88b700) from PID 0; stack trace: ***
[2m[36m(pid=30062)[0m     @     0x7f9f9d464390 (unknown)
[2m[36m(pid=30062)[0m     @     0x7f709d3ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30062)[0m     @     0x7f709caf77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30130)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30130)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30130)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30130)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30130)[0m *** SIGSEGV (@0x0) received by PID 30130 (TID 0x7f31f898f700) from PID 0; stack trace: ***
[2m[36m(pid=30130)[0m     @     0x7f31f8568390 (unknown)
[2m[36m(pid=30130)[0m     @     0x7f02f84f6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30130)[0m     @     0x7f02f7c217db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30130)[0m     @     0x7f02f7c248f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30083)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30083)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30083)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30083)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30083)[0m *** SIGSEGV (@0x0) received by PID 30083 (TID 0x7fd7fe58b700) from PID 0; stack trace: ***
[2m[36m(pid=30083)[0m     @     0x7fd7fe164390 (unknown)
[2m[36m(pid=30083)[0m     @     0x7fa8fe10df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30083)[0m     @     0x7fa8fd8387db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30144)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30144)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30144)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30144)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30144)[0m *** SIGSEGV (@0x0) received by PID 30144 (TID 0x7fa6c16fb700) from PID 0; stack trace: ***
[2m[36m(pid=30144)[0m     @     0x7fa6c12d4390 (unknown)
[2m[36m(pid=30144)[0m     @     0x7f77c1267f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30144)[0m     @     0x7f77c09927db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30144)[0m     @     0x7f77c09958f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30144)[0m     @     0x7f77c0995ad3 at::TensorIterator::for_each()
[2m[36m(pid=30144)[0m     @     0x7f77c0995d91 at::TensorIterator::for_each()
[2m[36m(pid=30144)[0m     @     0x7f77c1278b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30144)[0m     @     0x7f77c129bc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30144)[0m     @     0x7f77c073da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30144)[0m     @     0x7f77c073b388 at::native::copy_impl()
[2m[36m(pid=30144)[0m     @     0x7f77c073d5a4 at::native::copy_()
[2m[36m(pid=30144)[0m     @     0x7f77c0e284f5 at::Tensor::copy_()
[2m[36m(pid=30144)[0m     @     0x7f77c32fb8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30057)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30057)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30057)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30057)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30057)[0m *** SIGSEGV (@0x0) received by PID 30057 (TID 0x7f28dcbd6700) from PID 0; stack trace: ***
[2m[36m(pid=30057)[0m     @     0x7f28dc7af390 (unknown)
[2m[36m(pid=30057)[0m     @     0x7ef9dc56af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30057)[0m     @     0x7ef9dbc957db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30127)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30127)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30127)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30127)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30127)[0m *** SIGSEGV (@0x0) received by PID 30127 (TID 0x7f78b3ece700) from PID 0; stack trace: ***
[2m[36m(pid=30127)[0m     @     0x7f78b3aa7390 (unknown)
[2m[36m(pid=30127)[0m     @     0x7f49b3a23f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30127)[0m     @     0x7f49b314e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30097)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30097)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30097)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30097)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30097)[0m *** SIGSEGV (@0x0) received by PID 30097 (TID 0x7fec819f0700) from PID 0; stack trace: ***
[2m[36m(pid=30097)[0m     @     0x7fec815c9390 (unknown)
[2m[36m(pid=30097)[0m     @     0x7fbd81564f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30097)[0m     @     0x7fbd80c8f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30097)[0m     @     0x7fbd80c928f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30059)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30059)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30059)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30059)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30059)[0m *** SIGSEGV (@0x0) received by PID 30059 (TID 0x7f1c6ccfd700) from PID 0; stack trace: ***
[2m[36m(pid=30059)[0m     @     0x7f1c6c8d6390 (unknown)
[2m[36m(pid=30059)[0m     @     0x7eed6c870f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30059)[0m     @     0x7eed6bf9b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30059)[0m     @     0x7eed6bf9e8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30059)[0m     @     0x7eed6bf9ead3 at::TensorIterator::for_each()
[2m[36m(pid=30059)[0m     @     0x7eed6bf9ed91 at::TensorIterator::for_each()
[2m[36m(pid=30059)[0m     @     0x7eed6c881b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30059)[0m     @     0x7eed6c8a4c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30059)[0m     @     0x7eed6bd46a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30059)[0m     @     0x7eed6bd44388 at::native::copy_impl()
[2m[36m(pid=30071)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30071)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30071)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30071)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30071)[0m *** SIGSEGV (@0x0) received by PID 30071 (TID 0x7f53188c1700) from PID 0; stack trace: ***
[2m[36m(pid=30071)[0m     @     0x7f531849a390 (unknown)
[2m[36m(pid=30071)[0m     @     0x7f2418333f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30071)[0m     @     0x7f2417a5e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30167)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30167)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30167)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30167)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30167)[0m *** SIGSEGV (@0x0) received by PID 30167 (TID 0x7fa921dd0700) from PID 0; stack trace: ***
[2m[36m(pid=30167)[0m     @     0x7fa9219a9390 (unknown)
[2m[36m(pid=30167)[0m     @     0x7f7a217f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30167)[0m     @     0x7f7a20f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30167)[0m     @     0x7f7a20f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30167)[0m     @     0x7f7a20f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=30167)[0m     @     0x7f7a20f27d91 at::TensorIterator::for_each()
[2m[36m(pid=30167)[0m     @     0x7f7a2180ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30167)[0m     @     0x7f7a2182dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30167)[0m     @     0x7f7a20ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30167)[0m     @     0x7f7a20ccd388 at::native::copy_impl()
[2m[36m(pid=30167)[0m     @     0x7f7a20ccf5a4 at::native::copy_()
[2m[36m(pid=30167)[0m     @     0x7f7a213ba4f5 at::Tensor::copy_()
[2m[36m(pid=30167)[0m     @     0x7f7a2388d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30150)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30150)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30150)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30150)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30150)[0m *** SIGSEGV (@0x0) received by PID 30150 (TID 0x7fe5b6aeb700) from PID 0; stack trace: ***
[2m[36m(pid=30122)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30122)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30122)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30154)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30154)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30154)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30154)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30154)[0m *** SIGSEGV (@0x0) received by PID 30154 (TID 0x7fd2fd10b700) from PID 0; stack trace: ***
[2m[36m(pid=30154)[0m     @     0x7fd2fcce4390 (unknown)
[2m[36m(pid=30154)[0m     @     0x7fa3fcbd1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30154)[0m     @     0x7fa3fc2fc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30171)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30171)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30171)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30171)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30171)[0m *** SIGSEGV (@0x0) received by PID 30171 (TID 0x7fade4d76700) from PID 0; stack trace: ***
[2m[36m(pid=30080)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30080)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30080)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30080)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30080)[0m *** SIGSEGV (@0x0) received by PID 30080 (TID 0x7f47f30d7700) from PID 0; stack trace: ***
[2m[36m(pid=30080)[0m     @     0x7f47f2cb0390 (unknown)
[2m[36m(pid=30080)[0m     @     0x7f18f2a21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30080)[0m     @     0x7f18f214c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30148)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30148)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30148)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30148)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30148)[0m *** SIGSEGV (@0x0) received by PID 30148 (TID 0x7fae4b7f3700) from PID 0; stack trace: ***
[2m[36m(pid=30148)[0m     @     0x7fae4b3cc390 (unknown)
[2m[36m(pid=30148)[0m     @     0x7f7f4b229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30148)[0m     @     0x7f7f4a9547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30148)[0m     @     0x7f7f4a9578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30148)[0m     @     0x7f7f4a957ad3 at::TensorIterator::for_each()
[2m[36m(pid=30148)[0m     @     0x7f7f4a957d91 at::TensorIterator::for_each()
[2m[36m(pid=30148)[0m     @     0x7f7f4b23ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30148)[0m     @     0x7f7f4b25dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30148)[0m     @     0x7f7f4a6ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30148)[0m     @     0x7f7f4a6fd388 at::native::copy_impl()
[2m[36m(pid=30148)[0m     @     0x7f7f4a6ff5a4 at::native::copy_()
[2m[36m(pid=30148)[0m     @     0x7f7f4adea4f5 at::Tensor::copy_()
[2m[36m(pid=30148)[0m     @     0x7f7f4d2bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30077)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30077)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30077)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30077)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30077)[0m *** SIGSEGV (@0x0) received by PID 30077 (TID 0x7fc7a36f2700) from PID 0; stack trace: ***
[2m[36m(pid=30077)[0m     @     0x7fc7a32cb390 (unknown)
[2m[36m(pid=30077)[0m     @     0x7f98a3229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30077)[0m     @     0x7f98a29547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30077)[0m     @     0x7f98a29578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30134)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30134)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30134)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30134)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30134)[0m *** SIGSEGV (@0x0) received by PID 30134 (TID 0x7ff7704f2700) from PID 0; stack trace: ***
[2m[36m(pid=30134)[0m     @     0x7ff7700cb390 (unknown)
[2m[36m(pid=30134)[0m     @     0x7fc87001cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30123)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30123)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30123)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30123)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30123)[0m *** SIGSEGV (@0x0) received by PID 30123 (TID 0x7f81a2e6a700) from PID 0; stack trace: ***
[2m[36m(pid=30123)[0m     @     0x7f81a2a43390 (unknown)
[2m[36m(pid=30123)[0m     @     0x7f52a29ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30123)[0m     @     0x7f52a20f77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30074)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30074)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30074)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30074)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30074)[0m *** SIGSEGV (@0x0) received by PID 30074 (TID 0x7f925b634700) from PID 0; stack trace: ***
[2m[36m(pid=30074)[0m     @     0x7f925b20d390 (unknown)
[2m[36m(pid=30074)[0m     @     0x7f635b124f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30074)[0m     @     0x7f635a84f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30074)[0m     @     0x7f635a8528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30163)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30163)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30163)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30163)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30163)[0m *** SIGSEGV (@0x0) received by PID 30163 (TID 0x7f2e05539700) from PID 0; stack trace: ***
[2m[36m(pid=30163)[0m     @     0x7f2e05112390 (unknown)
[2m[36m(pid=30163)[0m     @     0x7eff050b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30163)[0m     @     0x7eff047e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30095)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30095)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30095)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30095)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30095)[0m *** SIGSEGV (@0x0) received by PID 30095 (TID 0x7f2e9d480700) from PID 0; stack trace: ***
[2m[36m(pid=30095)[0m     @     0x7f2e9d059390 (unknown)
[2m[36m(pid=30095)[0m     @     0x7eff9cfe3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30095)[0m     @     0x7eff9c70e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30095)[0m     @     0x7eff9c7118f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30198)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30198)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30198)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30198)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30198)[0m *** SIGSEGV (@0x0) received by PID 30198 (TID 0x7f5ba08b6700) from PID 0; stack trace: ***
[2m[36m(pid=30198)[0m     @     0x7f5ba048f390 (unknown)
[2m[36m(pid=30198)[0m     @     0x7f2ca02def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30198)[0m     @     0x7f2c9fa097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30198)[0m     @     0x7f2c9fa0c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30146)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30146)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30146)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30146)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30146)[0m *** SIGSEGV (@0x0) received by PID 30146 (TID 0x7f99b6eb9700) from PID 0; stack trace: ***
[2m[36m(pid=30146)[0m     @     0x7f99b6a92390 (unknown)
[2m[36m(pid=30146)[0m     @     0x7f6ab6a24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30146)[0m     @     0x7f6ab614f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30146)[0m     @     0x7f6ab61528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30146)[0m     @     0x7f6ab6152ad3 at::TensorIterator::for_each()
[2m[36m(pid=30072)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30072)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30072)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30072)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30072)[0m *** SIGSEGV (@0x0) received by PID 30072 (TID 0x7f27f0f5b700) from PID 0; stack trace: ***
[2m[36m(pid=30072)[0m     @     0x7f27f0b34390 (unknown)
[2m[36m(pid=30072)[0m     @     0x7ef8f0ad5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30072)[0m     @     0x7ef8f02007db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30072)[0m     @     0x7ef8f02038f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30072)[0m     @     0x7ef8f0203ad3 at::TensorIterator::for_each()
[2m[36m(pid=30136)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30136)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30136)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30136)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30136)[0m *** SIGSEGV (@0x0) received by PID 30136 (TID 0x7f23c7f6a700) from PID 0; stack trace: ***
[2m[36m(pid=30136)[0m     @     0x7f23c7b43390 (unknown)
[2m[36m(pid=30136)[0m     @     0x7ef4c7af5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30136)[0m     @     0x7ef4c72207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30136)[0m     @     0x7ef4c72238f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30075)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30075)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30075)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30075)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30075)[0m *** SIGSEGV (@0x0) received by PID 30075 (TID 0x7f3648bd7700) from PID 0; stack trace: ***
[2m[36m(pid=30075)[0m     @     0x7f36487b0390 (unknown)
[2m[36m(pid=30075)[0m     @     0x7f074874cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30075)[0m     @     0x7f0747e777db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30152)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30152)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30152)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30152)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30152)[0m *** SIGSEGV (@0x0) received by PID 30152 (TID 0x7f95f4f0c700) from PID 0; stack trace: ***
[2m[36m(pid=30152)[0m     @     0x7f95f4ae5390 (unknown)
[2m[36m(pid=30152)[0m     @     0x7f66f49e8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30152)[0m     @     0x7f66f41137db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30152)[0m     @     0x7f66f41168f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30183)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30183)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30183)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30183)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30183)[0m *** SIGSEGV (@0x0) received by PID 30183 (TID 0x7f6e9df2b700) from PID 0; stack trace: ***
[2m[36m(pid=30183)[0m     @     0x7f6e9db04390 (unknown)
[2m[36m(pid=30183)[0m     @     0x7f3f9da0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30165)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30165)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30165)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30165)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30165)[0m *** SIGSEGV (@0x0) received by PID 30165 (TID 0x7fd8fd39b700) from PID 0; stack trace: ***
[2m[36m(pid=30165)[0m     @     0x7fd8fcf74390 (unknown)
[2m[36m(pid=30068)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30068)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30068)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30068)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30068)[0m *** SIGSEGV (@0x0) received by PID 30068 (TID 0x7f49f3897700) from PID 0; stack trace: ***
[2m[36m(pid=30068)[0m     @     0x7f49f3470390 (unknown)
[2m[36m(pid=30068)[0m     @     0x7f1af3229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30128)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30128)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30128)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30128)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30128)[0m *** SIGSEGV (@0x0) received by PID 30128 (TID 0x7f0d07318700) from PID 0; stack trace: ***
[2m[36m(pid=30128)[0m     @     0x7f0d06ef1390 (unknown)
[2m[36m(pid=30128)[0m     @     0x7ede06e66f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30128)[0m     @     0x7ede065917db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30125)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30125)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30125)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30125)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30125)[0m *** SIGSEGV (@0x0) received by PID 30125 (TID 0x7f2f64ffc700) from PID 0; stack trace: ***
[2m[36m(pid=30125)[0m     @     0x7f2f64bd5390 (unknown)
[2m[36m(pid=30125)[0m     @     0x7f0064a8bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30125)[0m     @     0x7f00641b67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30085)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30085)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30085)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30085)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30085)[0m *** SIGSEGV (@0x0) received by PID 30085 (TID 0x7fe708e89700) from PID 0; stack trace: ***
[2m[36m(pid=30085)[0m     @     0x7fe708a62390 (unknown)
[2m[36m(pid=30085)[0m     @     0x7fb80895df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30085)[0m     @     0x7fb8080887db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30085)[0m     @     0x7fb80808b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30092)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30092)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30092)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30092)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30092)[0m *** SIGSEGV (@0x0) received by PID 30092 (TID 0x7f0c07425700) from PID 0; stack trace: ***
[2m[36m(pid=30092)[0m     @     0x7f0c06ffe390 (unknown)
[2m[36m(pid=30092)[0m     @     0x7edd06f94f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30092)[0m     @     0x7edd066bf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30092)[0m     @     0x7edd066c28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30076)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30076)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30076)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30076)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30076)[0m *** SIGSEGV (@0x0) received by PID 30076 (TID 0x7f2132b90700) from PID 0; stack trace: ***
[2m[36m(pid=30076)[0m     @     0x7f2132769390 (unknown)
[2m[36m(pid=30076)[0m     @     0x7ef2324f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30076)[0m     @     0x7ef231c247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30141)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30141)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30141)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30141)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30141)[0m *** SIGSEGV (@0x0) received by PID 30141 (TID 0x7f622c1cc700) from PID 0; stack trace: ***
[2m[36m(pid=30141)[0m     @     0x7f622bda5390 (unknown)
[2m[36m(pid=30141)[0m     @     0x7f332bd39f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30141)[0m     @     0x7f332b4647db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30141)[0m     @     0x7f332b4678f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30141)[0m     @     0x7f332b467ad3 at::TensorIterator::for_each()
[2m[36m(pid=30060)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30060)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30060)[0m *** SIGSEGV (@0x0) received by PID 30060 (TID 0x7f213cead700) from PID 0; stack trace: ***
[2m[36m(pid=30060)[0m     @     0x7f213ca86390 (unknown)
[2m[36m(pid=30060)[0m     @     0x7ef23c9e8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30060)[0m     @     0x7ef23c1137db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30060)[0m     @     0x7ef23c1168f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30060)[0m     @     0x7ef23c116ad3 at::TensorIterator::for_each()
[2m[36m(pid=30060)[0m     @     0x7ef23c116d91 at::TensorIterator::for_each()
[2m[36m(pid=30060)[0m     @     0x7ef23c9f9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30087)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30087)[0m *** SIGSEGV (@0x0) received by PID 30087 (TID 0x7f483bb78700) from PID 0; stack trace: ***
[2m[36m(pid=30087)[0m     @     0x7f483b751390 (unknown)
[2m[36m(pid=30087)[0m     @     0x7f193b5eff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30087)[0m     @     0x7f193ad1a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30087)[0m     @     0x7f193ad1d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30087)[0m     @     0x7f193ad1dad3 at::TensorIterator::for_each()
[2m[36m(pid=30087)[0m     @     0x7f193ad1dd91 at::TensorIterator::for_each()
[2m[36m(pid=30087)[0m     @     0x7f193b600b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30087)[0m     @     0x7f193b623c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30192)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30192)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30192)[0m *** SIGSEGV (@0x0) received by PID 30192 (TID 0x7f6eec9e1700) from PID 0; stack trace: ***
[2m[36m(pid=30192)[0m     @     0x7f6eec5ba390 (unknown)
[2m[36m(pid=30192)[0m     @     0x7f3fec561f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30192)[0m     @     0x7f3febc8c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30192)[0m     @     0x7f3febc8f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30192)[0m     @     0x7f3febc8fad3 at::TensorIterator::for_each()
[2m[36m(pid=30192)[0m     @     0x7f3febc8fd91 at::TensorIterator::for_each()
[2m[36m(pid=30192)[0m     @     0x7f3fec572b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30192)[0m     @     0x7f3fec595c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30093)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30093)[0m *** SIGSEGV (@0x0) received by PID 30093 (TID 0x7f2c11df1700) from PID 0; stack trace: ***
[2m[36m(pid=30093)[0m     @     0x7f2c119ca390 (unknown)
[2m[36m(pid=30093)[0m     @     0x7efd11701f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30093)[0m     @     0x7efd10e2c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30093)[0m     @     0x7efd10e2f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30093)[0m     @     0x7efd10e2fad3 at::TensorIterator::for_each()
[2m[36m(pid=30093)[0m     @     0x7efd10e2fd91 at::TensorIterator::for_each()
[2m[36m(pid=30093)[0m     @     0x7efd11712b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30093)[0m     @     0x7efd11735c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30164)[0m     @     0x7ef180547b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30164)[0m     @     0x7ef18056ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30164)[0m     @     0x7ef17fa0ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30164)[0m     @     0x7ef17fa0a388 at::native::copy_impl()
[2m[36m(pid=30164)[0m     @     0x7ef17fa0c5a4 at::native::copy_()
[2m[36m(pid=30164)[0m     @     0x7ef1800f74f5 at::Tensor::copy_()
[2m[36m(pid=30164)[0m     @     0x7ef1825ca8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30164)[0m     @     0x7ef1800f74f5 at::Tensor::copy_()
[2m[36m(pid=30164)[0m     @     0x7ef1861a279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30164)[0m     @     0x557af3c7ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30164)[0m     @     0x557af3bdab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30164)[0m     @     0x557af3c65baf _PyEval_EvalCodeWithName
[2m[36m(pid=30164)[0m     @     0x557af3c66a20 method_vectorcall
[2m[36m(pid=30164)[0m     @     0x557af3bdabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30164)[0m     @     0x557af3c65baf _PyEval_EvalCodeWithName
[2m[36m(pid=30164)[0m     @     0x557af3c66643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30164)[0m     @     0x557af3bdb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30164)[0m     @     0x557af3c65baf _PyEval_EvalCodeWithName
[2m[36m(pid=30164)[0m     @     0x557af3c66643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30164)[0m     @     0x557af3bdb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30164)[0m     @     0x557af3c65baf _PyEval_EvalCodeWithName
[2m[36m(pid=30164)[0m     @     0x557af3c66643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30164)[0m     @     0x557af3bdb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30164)[0m     @     0x557af3c65baf _PyEval_EvalCodeWithName
[2m[36m(pid=30164)[0m     @     0x557af3c66643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30164)[0m     @     0x557af3bdb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30073)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30073)[0m *** SIGSEGV (@0x0) received by PID 30073 (TID 0x7fc403c4f700) from PID 0; stack trace: ***
[2m[36m(pid=30073)[0m     @     0x7fc403828390 (unknown)
[2m[36m(pid=30073)[0m     @     0x7f95037a9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30073)[0m     @     0x7f9502ed47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30073)[0m     @     0x7f9502ed78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30073)[0m     @     0x7f9502ed7ad3 at::TensorIterator::for_each()
[2m[36m(pid=30073)[0m     @     0x7f9502ed7d91 at::TensorIterator::for_each()
[2m[36m(pid=30073)[0m     @     0x7f95037bab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30121)[0m     @     0x7f5ed700cd91 at::TensorIterator::for_each()
[2m[36m(pid=30121)[0m     @     0x7f5ed78efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30121)[0m     @     0x7f5ed7912c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30121)[0m     @     0x7f5ed6db4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30121)[0m     @     0x7f5ed6db2388 at::native::copy_impl()
[2m[36m(pid=30121)[0m     @     0x7f5ed6db45a4 at::native::copy_()
[2m[36m(pid=30121)[0m     @     0x7f5ed749f4f5 at::Tensor::copy_()
[2m[36m(pid=30121)[0m     @     0x7f5ed99728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30121)[0m     @     0x7f5ed749f4f5 at::Tensor::copy_()
[2m[36m(pid=30121)[0m     @     0x7f5edd54a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30121)[0m     @     0x55e0a1079fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30121)[0m     @     0x55e0a0fd4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30121)[0m     @     0x55e0a105fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30121)[0m     @     0x55e0a1060a20 method_vectorcall
[2m[36m(pid=30121)[0m     @     0x55e0a0fd4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30061)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30061)[0m *** SIGSEGV (@0x0) received by PID 30061 (TID 0x7fefdfbb6700) from PID 0; stack trace: ***
[2m[36m(pid=30061)[0m     @     0x7fefdf78f390 (unknown)
[2m[36m(pid=30061)[0m     @     0x7fc0df61ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30061)[0m     @     0x7fc0ded4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30061)[0m     @     0x7fc0ded4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30061)[0m     @     0x7fc0ded4dad3 at::TensorIterator::for_each()
[2m[36m(pid=30061)[0m     @     0x7fc0ded4dd91 at::TensorIterator::for_each()
[2m[36m(pid=30061)[0m     @     0x7fc0df630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30061)[0m     @     0x7fc0df653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30147)[0m     @     0x7f52223c78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30147)[0m     @     0x7f521fef44f5 at::Tensor::copy_()
[2m[36m(pid=30147)[0m     @     0x7f5225f9f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30147)[0m     @     0x5651b45dffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30147)[0m     @     0x5651b453ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30147)[0m     @     0x5651b45c5baf _PyEval_EvalCodeWithName
[2m[36m(pid=30147)[0m     @     0x5651b45c6a20 method_vectorcall
[2m[36m(pid=30147)[0m     @     0x5651b453abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30147)[0m     @     0x5651b45c5baf _PyEval_EvalCodeWithName
[2m[36m(pid=30147)[0m     @     0x5651b45c6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30147)[0m     @     0x5651b453b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30147)[0m     @     0x5651b45c5baf _PyEval_EvalCodeWithName
[2m[36m(pid=30147)[0m     @     0x5651b45c6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30147)[0m     @     0x5651b453b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30147)[0m     @     0x5651b45c5baf _PyEval_EvalCodeWithName
[2m[36m(pid=30147)[0m     @     0x5651b45c6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30147)[0m     @     0x5651b453b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30147)[0m     @     0x5651b45c5baf _PyEval_EvalCodeWithName
[2m[36m(pid=30147)[0m     @     0x5651b45c6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30147)[0m     @     0x5651b453b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30186)[0m     @     0x7fbcb9b5c5a4 at::native::copy_()
[2m[36m(pid=30186)[0m     @     0x7fbcba2474f5 at::Tensor::copy_()
[2m[36m(pid=30186)[0m     @     0x7fbcbc71a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30186)[0m     @     0x7fbcba2474f5 at::Tensor::copy_()
[2m[36m(pid=30186)[0m     @     0x7fbcc02f279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30186)[0m     @     0x55dd3e1bcfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30186)[0m     @     0x55dd3e117b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30186)[0m     @     0x55dd3e1a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=30186)[0m     @     0x55dd3e1a3a20 method_vectorcall
[2m[36m(pid=30186)[0m     @     0x55dd3e117bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30186)[0m     @     0x55dd3e1a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=30186)[0m     @     0x55dd3e1a3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30186)[0m     @     0x55dd3e118689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30186)[0m     @     0x55dd3e1a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=30186)[0m     @     0x55dd3e1a3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30186)[0m     @     0x55dd3e118689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30186)[0m     @     0x55dd3e1a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=30186)[0m     @     0x55dd3e1a3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30186)[0m     @     0x55dd3e118689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30186)[0m     @     0x55dd3e1a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=30186)[0m     @     0x55dd3e1a3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30186)[0m     @     0x55dd3e118689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30173)[0m     @     0x7f05fa6ff5a4 at::native::copy_()
[2m[36m(pid=30173)[0m     @     0x7f05fadea4f5 at::Tensor::copy_()
[2m[36m(pid=30173)[0m     @     0x7f05fd2bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30173)[0m     @     0x7f05fadea4f5 at::Tensor::copy_()
[2m[36m(pid=30173)[0m     @     0x7f0600e9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30173)[0m     @     0x557662689fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30173)[0m     @     0x5576625e4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30173)[0m     @     0x55766266fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30173)[0m     @     0x557662670a20 method_vectorcall
[2m[36m(pid=30173)[0m     @     0x5576625e4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30173)[0m     @     0x55766266fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30173)[0m     @     0x557662670643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30173)[0m     @     0x5576625e5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30173)[0m     @     0x55766266fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30173)[0m     @     0x557662670643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30173)[0m     @     0x5576625e5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30173)[0m     @     0x55766266fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30173)[0m     @     0x557662670643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30173)[0m     @     0x5576625e5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30173)[0m     @     0x55766266fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30173)[0m     @     0x557662670643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30173)[0m     @     0x5576625e5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30158)[0m     @     0x7efcfb8b95a4 at::native::copy_()
[2m[36m(pid=30158)[0m     @     0x7efcfbfa44f5 at::Tensor::copy_()
[2m[36m(pid=30158)[0m     @     0x7efcfe4778de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30158)[0m     @     0x7efcfbfa44f5 at::Tensor::copy_()
[2m[36m(pid=30158)[0m     @     0x7efd0204f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30158)[0m     @     0x559b332e8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30158)[0m     @     0x559b33243b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30158)[0m     @     0x559b332cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=30158)[0m     @     0x559b332cfa20 method_vectorcall
[2m[36m(pid=30158)[0m     @     0x559b33243bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30158)[0m     @     0x559b332cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=30158)[0m     @     0x559b332cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30158)[0m     @     0x559b33244689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30158)[0m     @     0x559b332cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=30158)[0m     @     0x559b332cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30158)[0m     @     0x559b33244689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30158)[0m     @     0x559b332cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=30158)[0m     @     0x559b332cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30158)[0m     @     0x559b33244689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30158)[0m     @     0x559b332cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=30158)[0m     @     0x559b332cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30158)[0m     @     0x559b33244689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30170)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30170)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30170)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30170)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30170)[0m *** SIGSEGV (@0x0) received by PID 30170 (TID 0x7fd12791c700) from PID 0; stack trace: ***
[2m[36m(pid=30170)[0m     @     0x7fd1274f5390 (unknown)
[2m[36m(pid=30170)[0m     @     0x7fa22748ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30170)[0m     @     0x7fa226bba7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30170)[0m     @     0x7fa226bbd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30090)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30090)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30090)[0m *** SIGSEGV (@0x0) received by PID 30090 (TID 0x7fc27e97d700) from PID 0; stack trace: ***
[2m[36m(pid=30090)[0m     @     0x7fc27e556390 (unknown)
[2m[36m(pid=30090)[0m     @     0x7f937e4f7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30090)[0m     @     0x7f937dc227db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30090)[0m     @     0x7f937dc258f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30090)[0m     @     0x7f937dc25ad3 at::TensorIterator::for_each()
[2m[36m(pid=30090)[0m     @     0x7f937dc25d91 at::TensorIterator::for_each()
[2m[36m(pid=30090)[0m     @     0x7f937e508b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30090)[0m     @     0x7f937e52bc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30066)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=30066)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=30066)[0m *** Aborted at 1604572647 (unix time) try "date -d @1604572647" if you are using GNU date ***
[2m[36m(pid=30066)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30066)[0m *** SIGSEGV (@0x0) received by PID 30066 (TID 0x7fa7b3a7f700) from PID 0; stack trace: ***
[2m[36m(pid=30066)[0m     @     0x7fa7b3658390 (unknown)
[2m[36m(pid=30066)[0m     @     0x7f78b2c15f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30066)[0m     @     0x7f78b23407db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30066)[0m     @     0x7f78b23438f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30066)[0m     @     0x7f78b2343ad3 at::TensorIterator::for_each()
[2m[36m(pid=30155)[0m     @     0x7f578814a5a4 at::native::copy_()
[2m[36m(pid=30155)[0m     @     0x7f57888354f5 at::Tensor::copy_()
[2m[36m(pid=30155)[0m     @     0x7f578ad088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30155)[0m     @     0x7f57888354f5 at::Tensor::copy_()
[2m[36m(pid=30155)[0m     @     0x7f578e8e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30155)[0m     @     0x55d33572bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30155)[0m     @     0x55d335686b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30155)[0m     @     0x55d335711baf _PyEval_EvalCodeWithName
[2m[36m(pid=30155)[0m     @     0x55d335712a20 method_vectorcall
[2m[36m(pid=30155)[0m     @     0x55d335686bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30155)[0m     @     0x55d335711baf _PyEval_EvalCodeWithName
[2m[36m(pid=30155)[0m     @     0x55d335712643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30155)[0m     @     0x55d335687689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30155)[0m     @     0x55d335711baf _PyEval_EvalCodeWithName
[2m[36m(pid=30155)[0m     @     0x55d335712643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30155)[0m     @     0x55d335687689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30155)[0m     @     0x55d335711baf _PyEval_EvalCodeWithName
[2m[36m(pid=30155)[0m     @     0x55d335712643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30155)[0m     @     0x55d335687689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30155)[0m     @     0x55d335711baf _PyEval_EvalCodeWithName
[2m[36m(pid=30155)[0m     @     0x55d335712643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30155)[0m     @     0x55d335687689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30142)[0m     @     0x7f3f770ce4f5 at::Tensor::copy_()
[2m[36m(pid=30142)[0m     @     0x7f3f795a18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30142)[0m     @     0x7f3f770ce4f5 at::Tensor::copy_()
[2m[36m(pid=30142)[0m     @     0x7f3f7d17979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30142)[0m     @     0x5616aa76ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30142)[0m     @     0x5616aa6cab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30142)[0m     @     0x5616aa755baf _PyEval_EvalCodeWithName
[2m[36m(pid=30142)[0m     @     0x5616aa756a20 method_vectorcall
[2m[36m(pid=30142)[0m     @     0x5616aa6cabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30142)[0m     @     0x5616aa755baf _PyEval_EvalCodeWithName
[2m[36m(pid=30142)[0m     @     0x5616aa756643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30142)[0m     @     0x5616aa6cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30142)[0m     @     0x5616aa755baf _PyEval_EvalCodeWithName
[2m[36m(pid=30142)[0m     @     0x5616aa756643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30142)[0m     @     0x5616aa6cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30142)[0m     @     0x5616aa755baf _PyEval_EvalCodeWithName
[2m[36m(pid=30142)[0m     @     0x5616aa756643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30142)[0m     @     0x5616aa6cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30142)[0m     @     0x5616aa755baf _PyEval_EvalCodeWithName
[2m[36m(pid=30142)[0m     @     0x5616aa756643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30142)[0m     @     0x5616aa6cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30151)[0m     @     0x7f061f766a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30151)[0m     @     0x7f061f764388 at::native::copy_impl()
[2m[36m(pid=30151)[0m     @     0x7f061f7665a4 at::native::copy_()
[2m[36m(pid=30151)[0m     @     0x7f061fe514f5 at::Tensor::copy_()
[2m[36m(pid=30151)[0m     @     0x7f06223248de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30151)[0m     @     0x7f061fe514f5 at::Tensor::copy_()
[2m[36m(pid=30151)[0m     @     0x7f0625efc79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30151)[0m     @     0x55e8999fffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30151)[0m     @     0x55e89995ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30151)[0m     @     0x55e8999e5baf _PyEval_EvalCodeWithName
[2m[36m(pid=30151)[0m     @     0x55e8999e6a20 method_vectorcall
[2m[36m(pid=30151)[0m     @     0x55e89995abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30151)[0m     @     0x55e8999e5baf _PyEval_EvalCodeWithName
[2m[36m(pid=30151)[0m     @     0x55e8999e6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30151)[0m     @     0x55e89995b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30151)[0m     @     0x55e8999e5baf _PyEval_EvalCodeWithName
[2m[36m(pid=30151)[0m     @     0x55e8999e6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30151)[0m     @     0x55e89995b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30151)[0m     @     0x55e8999e5baf _PyEval_EvalCodeWithName
[2m[36m(pid=30151)[0m     @     0x55e8999e6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30151)[0m     @     0x55e89995b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30151)[0m     @     0x55e8999e5baf _PyEval_EvalCodeWithName
[2m[36m(pid=30151)[0m     @     0x55e8999e6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30151)[0m     @     0x55e89995b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30188)[0m     @     0x7f2595e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30188)[0m     @     0x7f2595e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30188)[0m     @     0x7f25952faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30188)[0m     @     0x7f25952f8388 at::native::copy_impl()
[2m[36m(pid=30188)[0m     @     0x7f25952fa5a4 at::native::copy_()
[2m[36m(pid=30188)[0m     @     0x7f25959e54f5 at::Tensor::copy_()
[2m[36m(pid=30188)[0m     @     0x7f2597eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30188)[0m     @     0x7f25959e54f5 at::Tensor::copy_()
[2m[36m(pid=30188)[0m     @     0x7f259ba9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30188)[0m     @     0x555b1f2cafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30188)[0m     @     0x555b1f225b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30188)[0m     @     0x555b1f2b0baf _PyEval_EvalCodeWithName
[2m[36m(pid=30188)[0m     @     0x555b1f2b1a20 method_vectorcall
[2m[36m(pid=30188)[0m     @     0x555b1f225bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30188)[0m     @     0x555b1f2b0baf _PyEval_EvalCodeWithName
[2m[36m(pid=30188)[0m     @     0x555b1f2b1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30188)[0m     @     0x555b1f226689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30188)[0m     @     0x555b1f2b0baf _PyEval_EvalCodeWithName
[2m[36m(pid=30188)[0m     @     0x555b1f2b1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30188)[0m     @     0x555b1f226689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30188)[0m     @     0x555b1f2b0baf _PyEval_EvalCodeWithName
[2m[36m(pid=30188)[0m     @     0x555b1f2b1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30188)[0m     @     0x555b1f226689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30188)[0m     @     0x555b1f2b0baf _PyEval_EvalCodeWithName
[2m[36m(pid=30188)[0m     @     0x555b1f2b1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30188)[0m     @     0x555b1f226689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30070)[0m     @     0x7ef9069647db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30070)[0m     @     0x7ef9069678f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30070)[0m     @     0x7ef906967ad3 at::TensorIterator::for_each()
[2m[36m(pid=30070)[0m     @     0x7ef906967d91 at::TensorIterator::for_each()
[2m[36m(pid=30070)[0m     @     0x7ef90724ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30070)[0m     @     0x7ef90726dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30070)[0m     @     0x7ef90670fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30070)[0m     @     0x7ef90670d388 at::native::copy_impl()
[2m[36m(pid=30070)[0m     @     0x7ef90670f5a4 at::native::copy_()
[2m[36m(pid=30131)[0m     @     0x7fc921ee95a4 at::native::copy_()
[2m[36m(pid=30131)[0m     @     0x7fc9225d44f5 at::Tensor::copy_()
[2m[36m(pid=30131)[0m     @     0x7fc924aa78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30131)[0m     @     0x7fc9225d44f5 at::Tensor::copy_()
[2m[36m(pid=30131)[0m     @     0x7fc92847779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30131)[0m     @     0x5644c06d1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30131)[0m     @     0x5644c062cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30131)[0m     @     0x5644c06b7baf _PyEval_EvalCodeWithName
[2m[36m(pid=30131)[0m     @     0x5644c06b8a20 method_vectorcall
[2m[36m(pid=30131)[0m     @     0x5644c062cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30131)[0m     @     0x5644c06b7baf _PyEval_EvalCodeWithName
[2m[36m(pid=30131)[0m     @     0x5644c06b8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30131)[0m     @     0x5644c062d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30131)[0m     @     0x5644c06b7baf _PyEval_EvalCodeWithName
[2m[36m(pid=30131)[0m     @     0x5644c06b8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30131)[0m     @     0x5644c062d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30131)[0m     @     0x5644c06b7baf _PyEval_EvalCodeWithName
[2m[36m(pid=30131)[0m     @     0x5644c06b8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30131)[0m     @     0x5644c062d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30131)[0m     @     0x5644c06b7baf _PyEval_EvalCodeWithName
[2m[36m(pid=30131)[0m     @     0x5644c06b8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30131)[0m     @     0x5644c062d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30187)[0m     @     0x7fb6871b04f5 at::Tensor::copy_()
[2m[36m(pid=30187)[0m     @     0x7fb6896838de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30187)[0m     @     0x7fb6871b04f5 at::Tensor::copy_()
[2m[36m(pid=30187)[0m     @     0x7fb68d25b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30187)[0m     @     0x55b4eb1cffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30187)[0m     @     0x55b4eb12ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30187)[0m     @     0x55b4eb1b5baf _PyEval_EvalCodeWithName
[2m[36m(pid=30187)[0m     @     0x55b4eb1b6a20 method_vectorcall
[2m[36m(pid=30187)[0m     @     0x55b4eb12abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30187)[0m     @     0x55b4eb1b5baf _PyEval_EvalCodeWithName
[2m[36m(pid=30187)[0m     @     0x55b4eb1b6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30187)[0m     @     0x55b4eb12b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30187)[0m     @     0x55b4eb1b5baf _PyEval_EvalCodeWithName
[2m[36m(pid=30187)[0m     @     0x55b4eb1b6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30187)[0m     @     0x55b4eb12b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30187)[0m     @     0x55b4eb1b5baf _PyEval_EvalCodeWithName
[2m[36m(pid=30187)[0m     @     0x55b4eb1b6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30187)[0m     @     0x55b4eb12b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30187)[0m     @     0x55b4eb1b5baf _PyEval_EvalCodeWithName
[2m[36m(pid=30187)[0m     @     0x55b4eb1b6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30187)[0m     @     0x55b4eb12b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30133)[0m     @     0x7f056d2fa5a4 at::native::copy_()
[2m[36m(pid=30133)[0m     @     0x7f056d9e54f5 at::Tensor::copy_()
[2m[36m(pid=30133)[0m     @     0x7f056feb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30133)[0m     @     0x7f056d9e54f5 at::Tensor::copy_()
[2m[36m(pid=30133)[0m     @     0x7f0573a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30133)[0m     @     0x559f1689efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30133)[0m     @     0x559f167f9b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30133)[0m     @     0x559f16884baf _PyEval_EvalCodeWithName
[2m[36m(pid=30133)[0m     @     0x559f16885a20 method_vectorcall
[2m[36m(pid=30133)[0m     @     0x559f167f9bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30133)[0m     @     0x559f16884baf _PyEval_EvalCodeWithName
[2m[36m(pid=30133)[0m     @     0x559f16885643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30133)[0m     @     0x559f167fa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30133)[0m     @     0x559f16884baf _PyEval_EvalCodeWithName
[2m[36m(pid=30133)[0m     @     0x559f16885643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30133)[0m     @     0x559f167fa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30133)[0m     @     0x559f16884baf _PyEval_EvalCodeWithName
[2m[36m(pid=30133)[0m     @     0x559f16885643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30133)[0m     @     0x559f167fa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30133)[0m     @     0x559f16884baf _PyEval_EvalCodeWithName
[2m[36m(pid=30133)[0m     @     0x559f16885643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30133)[0m     @     0x559f167fa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30149)[0m     @     0x7f38ad82dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30149)[0m     @     0x7f38acccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30149)[0m     @     0x7f38acccd388 at::native::copy_impl()
[2m[36m(pid=30149)[0m     @     0x7f38acccf5a4 at::native::copy_()
[2m[36m(pid=30149)[0m     @     0x7f38ad3ba4f5 at::Tensor::copy_()
[2m[36m(pid=30149)[0m     @     0x7f38af88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30149)[0m     @     0x7f38ad3ba4f5 at::Tensor::copy_()
[2m[36m(pid=30149)[0m     @     0x7f38b346579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30149)[0m     @     0x55dbf1a7bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30149)[0m     @     0x55dbf19d6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30149)[0m     @     0x55dbf1a61baf _PyEval_EvalCodeWithName
[2m[36m(pid=30149)[0m     @     0x55dbf1a62a20 method_vectorcall
[2m[36m(pid=30149)[0m     @     0x55dbf19d6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30149)[0m     @     0x55dbf1a61baf _PyEval_EvalCodeWithName
[2m[36m(pid=30149)[0m     @     0x55dbf1a62643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30149)[0m     @     0x55dbf19d7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30149)[0m     @     0x55dbf1a61baf _PyEval_EvalCodeWithName
[2m[36m(pid=30149)[0m     @     0x55dbf1a62643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30149)[0m     @     0x55dbf19d7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30149)[0m     @     0x55dbf1a61baf _PyEval_EvalCodeWithName
[2m[36m(pid=30149)[0m     @     0x55dbf1a62643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30149)[0m     @     0x55dbf19d7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30149)[0m     @     0x55dbf1a61baf _PyEval_EvalCodeWithName
[2m[36m(pid=30149)[0m     @     0x55dbf1a62643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30149)[0m     @     0x55dbf19d7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30161)[0m     @     0x7f1a3f4f2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30161)[0m     @     0x7f1a3f4f0388 at::native::copy_impl()
[2m[36m(pid=30161)[0m     @     0x7f1a3f4f25a4 at::native::copy_()
[2m[36m(pid=30161)[0m     @     0x7f1a3fbdd4f5 at::Tensor::copy_()
[2m[36m(pid=30161)[0m     @     0x7f1a420b08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30161)[0m     @     0x7f1a3fbdd4f5 at::Tensor::copy_()
[2m[36m(pid=30161)[0m     @     0x7f1a45c8879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30161)[0m     @     0x55f68f86dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30161)[0m     @     0x55f68f7c8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30161)[0m     @     0x55f68f853baf _PyEval_EvalCodeWithName
[2m[36m(pid=30161)[0m     @     0x55f68f854a20 method_vectorcall
[2m[36m(pid=30161)[0m     @     0x55f68f7c8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30161)[0m     @     0x55f68f853baf _PyEval_EvalCodeWithName
[2m[36m(pid=30161)[0m     @     0x55f68f854643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30161)[0m     @     0x55f68f7c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30161)[0m     @     0x55f68f853baf _PyEval_EvalCodeWithName
[2m[36m(pid=30161)[0m     @     0x55f68f854643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30161)[0m     @     0x55f68f7c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30161)[0m     @     0x55f68f853baf _PyEval_EvalCodeWithName
[2m[36m(pid=30161)[0m     @     0x55f68f854643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30161)[0m     @     0x55f68f7c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30161)[0m     @     0x55f68f853baf _PyEval_EvalCodeWithName
[2m[36m(pid=30161)[0m     @     0x55f68f854643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30161)[0m     @     0x55f68f7c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30126)[0m     @     0x7fba7263e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30126)[0m     @     0x7fba726418f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30126)[0m     @     0x7fba72641ad3 at::TensorIterator::for_each()
[2m[36m(pid=30126)[0m     @     0x7fba72641d91 at::TensorIterator::for_each()
[2m[36m(pid=30126)[0m     @     0x7fba72f24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30126)[0m     @     0x7fba72f47c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30126)[0m     @     0x7fba723e9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30126)[0m     @     0x7fba723e7388 at::native::copy_impl()
[2m[36m(pid=30126)[0m     @     0x7fba723e95a4 at::native::copy_()
[2m[36m(pid=30143)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30143)[0m *** SIGSEGV (@0x0) received by PID 30143 (TID 0x7f34e24d1700) from PID 0; stack trace: ***
[2m[36m(pid=30143)[0m     @     0x7f34e20aa390 (unknown)
[2m[36m(pid=30143)[0m     @     0x7f05e1e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30143)[0m     @     0x7f05e154f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30143)[0m     @     0x7f05e15528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30143)[0m     @     0x7f05e1552ad3 at::TensorIterator::for_each()
[2m[36m(pid=30143)[0m     @     0x7f05e1552d91 at::TensorIterator::for_each()
[2m[36m(pid=30143)[0m     @     0x7f05e1e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30143)[0m     @     0x7f05e1e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30065)[0m     @     0x7ee8821a55a4 at::native::copy_()
[2m[36m(pid=30065)[0m     @     0x7ee8828904f5 at::Tensor::copy_()
[2m[36m(pid=30065)[0m     @     0x7ee884d638de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30065)[0m     @     0x7ee8828904f5 at::Tensor::copy_()
[2m[36m(pid=30065)[0m     @     0x7ee88893b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30065)[0m     @     0x55c03b7ddfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30065)[0m     @     0x55c03b738b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30065)[0m     @     0x55c03b7c3baf _PyEval_EvalCodeWithName
[2m[36m(pid=30065)[0m     @     0x55c03b7c4a20 method_vectorcall
[2m[36m(pid=30065)[0m     @     0x55c03b738bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30065)[0m     @     0x55c03b7c3baf _PyEval_EvalCodeWithName
[2m[36m(pid=30065)[0m     @     0x55c03b7c4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30065)[0m     @     0x55c03b739689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30065)[0m     @     0x55c03b7c3baf _PyEval_EvalCodeWithName
[2m[36m(pid=30065)[0m     @     0x55c03b7c4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30065)[0m     @     0x55c03b739689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30065)[0m     @     0x55c03b7c3baf _PyEval_EvalCodeWithName
[2m[36m(pid=30065)[0m     @     0x55c03b7c4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30065)[0m     @     0x55c03b739689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30065)[0m     @     0x55c03b7c3baf _PyEval_EvalCodeWithName
[2m[36m(pid=30065)[0m     @     0x55c03b7c4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30065)[0m     @     0x55c03b739689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30064)[0m     @     0x7fc2c07e8390 (unknown)
[2m[36m(pid=30064)[0m     @     0x7f93c0563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30064)[0m     @     0x7f93bfc8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30064)[0m     @     0x7f93bfc918f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30064)[0m     @     0x7f93bfc91ad3 at::TensorIterator::for_each()
[2m[36m(pid=30064)[0m     @     0x7f93bfc91d91 at::TensorIterator::for_each()
[2m[36m(pid=30064)[0m     @     0x7f93c0574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30064)[0m     @     0x7f93c0597c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30064)[0m     @     0x7f93bfa39a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30184)[0m     @     0x7f69330e4390 (unknown)
[2m[36m(pid=30184)[0m     @     0x7f3a33083f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30184)[0m     @     0x7f3a327ae7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30184)[0m     @     0x7f3a327b18f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30184)[0m     @     0x7f3a327b1ad3 at::TensorIterator::for_each()
[2m[36m(pid=30184)[0m     @     0x7f3a327b1d91 at::TensorIterator::for_each()
[2m[36m(pid=30184)[0m     @     0x7f3a33094b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30184)[0m     @     0x7f3a330b7c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30184)[0m     @     0x7f3a32559a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30124)[0m     @     0x7fd9bb5e0390 (unknown)
[2m[36m(pid=30124)[0m     @     0x7faabb58df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30124)[0m     @     0x7faabacb87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30124)[0m     @     0x7faabacbb8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30124)[0m     @     0x7faabacbbad3 at::TensorIterator::for_each()
[2m[36m(pid=30124)[0m     @     0x7faabacbbd91 at::TensorIterator::for_each()
[2m[36m(pid=30124)[0m     @     0x7faabb59eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30124)[0m     @     0x7faabb5c1c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30124)[0m     @     0x7faabaa63a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30124)[0m     @     0x7faabaa61388 at::native::copy_impl()
[2m[36m(pid=30094)[0m     @     0x7f8e7af70390 (unknown)
[2m[36m(pid=30094)[0m     @     0x7f5f7aee6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30094)[0m     @     0x7f5f7a6117db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30094)[0m     @     0x7f5f7a6148f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30094)[0m     @     0x7f5f7a614ad3 at::TensorIterator::for_each()
[2m[36m(pid=30094)[0m     @     0x7f5f7a614d91 at::TensorIterator::for_each()
[2m[36m(pid=30094)[0m     @     0x7f5f7aef7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30094)[0m     @     0x7f5f7af1ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30094)[0m     @     0x7f5f7a3bca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30180)[0m     @     0x7f83fa11f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30180)[0m     @     0x7f83fa1228f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30180)[0m     @     0x7f83fa122ad3 at::TensorIterator::for_each()
[2m[36m(pid=30180)[0m     @     0x7f83fa122d91 at::TensorIterator::for_each()
[2m[36m(pid=30180)[0m     @     0x7f83faa05b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30180)[0m     @     0x7f83faa28c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30180)[0m     @     0x7f83f9ecaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30180)[0m     @     0x7f83f9ec8388 at::native::copy_impl()
[2m[36m(pid=30078)[0m     @     0x7fa911c0df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30078)[0m     @     0x7fa9113387db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30078)[0m     @     0x7fa91133b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30078)[0m     @     0x7fa91133bad3 at::TensorIterator::for_each()
[2m[36m(pid=30078)[0m     @     0x7fa91133bd91 at::TensorIterator::for_each()
[2m[36m(pid=30078)[0m     @     0x7fa911c1eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30078)[0m     @     0x7fa911c41c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30189)[0m     @     0x7f43bce77f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30189)[0m     @     0x7f43bc5a27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30189)[0m     @     0x7f43bc5a58f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30189)[0m     @     0x7f43bc5a5ad3 at::TensorIterator::for_each()
[2m[36m(pid=30189)[0m     @     0x7f43bc5a5d91 at::TensorIterator::for_each()
[2m[36m(pid=30189)[0m     @     0x7f43bce88b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30189)[0m     @     0x7f43bceabc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30175)[0m     @     0x7f84649e58f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30175)[0m     @     0x7f84649e5ad3 at::TensorIterator::for_each()
[2m[36m(pid=30175)[0m     @     0x7f84649e5d91 at::TensorIterator::for_each()
[2m[36m(pid=30175)[0m     @     0x7f84652c8b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30175)[0m     @     0x7f84652ebc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30175)[0m     @     0x7f846478da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30175)[0m     @     0x7f846478b388 at::native::copy_impl()
[2m[36m(pid=30168)[0m     @     0x7f9e81e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30168)[0m     @     0x7f9e8154f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30168)[0m     @     0x7f9e815528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30168)[0m     @     0x7f9e81552ad3 at::TensorIterator::for_each()
[2m[36m(pid=30168)[0m     @     0x7f9e81552d91 at::TensorIterator::for_each()
[2m[36m(pid=30168)[0m     @     0x7f9e81e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30168)[0m     @     0x7f9e81e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30135)[0m     @     0x7fa0453ba4f5 at::Tensor::copy_()
[2m[36m(pid=30135)[0m     @     0x7fa04b46579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30135)[0m     @     0x56499b2affd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30135)[0m     @     0x56499b20ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30135)[0m     @     0x56499b295baf _PyEval_EvalCodeWithName
[2m[36m(pid=30135)[0m     @     0x56499b296a20 method_vectorcall
[2m[36m(pid=30135)[0m     @     0x56499b20abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30135)[0m     @     0x56499b295baf _PyEval_EvalCodeWithName
[2m[36m(pid=30135)[0m     @     0x56499b296643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30135)[0m     @     0x56499b20b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30135)[0m     @     0x56499b295baf _PyEval_EvalCodeWithName
[2m[36m(pid=30135)[0m     @     0x56499b296643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30135)[0m     @     0x56499b20b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30135)[0m     @     0x56499b295baf _PyEval_EvalCodeWithName
[2m[36m(pid=30135)[0m     @     0x56499b296643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30135)[0m     @     0x56499b20b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30135)[0m     @     0x56499b295baf _PyEval_EvalCodeWithName
[2m[36m(pid=30135)[0m     @     0x56499b296643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30135)[0m     @     0x56499b20b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30067)[0m     @     0x7f181d44bad3 at::TensorIterator::for_each()
[2m[36m(pid=30067)[0m     @     0x7f181d44bd91 at::TensorIterator::for_each()
[2m[36m(pid=30067)[0m     @     0x7f181dd2eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30067)[0m     @     0x7f181dd51c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30067)[0m     @     0x7f181d1f3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30067)[0m     @     0x7f181d1f1388 at::native::copy_impl()
[2m[36m(pid=30067)[0m     @     0x7f181d1f35a4 at::native::copy_()
[2m[36m(pid=30058)[0m     @     0x7f822b9c58f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30058)[0m     @     0x7f822b9c5ad3 at::TensorIterator::for_each()
[2m[36m(pid=30058)[0m     @     0x7f822b9c5d91 at::TensorIterator::for_each()
[2m[36m(pid=30058)[0m     @     0x7f822c2a8b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30058)[0m     @     0x7f822c2cbc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30058)[0m     @     0x7f822b76da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30058)[0m     @     0x7f822b76b388 at::native::copy_impl()
[2m[36m(pid=30058)[0m     @     0x7f822b76d5a4 at::native::copy_()
[2m[36m(pid=30145)[0m     @     0x7ed8af2e15a4 at::native::copy_()
[2m[36m(pid=30145)[0m     @     0x7ed8af9cc4f5 at::Tensor::copy_()
[2m[36m(pid=30145)[0m     @     0x7ed8b1e9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30145)[0m     @     0x7ed8af9cc4f5 at::Tensor::copy_()
[2m[36m(pid=30145)[0m     @     0x7ed8b5a7779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30145)[0m     @     0x55c9ad73bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30145)[0m     @     0x55c9ad696b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30145)[0m     @     0x55c9ad721baf _PyEval_EvalCodeWithName
[2m[36m(pid=30145)[0m     @     0x55c9ad722a20 method_vectorcall
[2m[36m(pid=30145)[0m     @     0x55c9ad696bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30145)[0m     @     0x55c9ad721baf _PyEval_EvalCodeWithName
[2m[36m(pid=30145)[0m     @     0x55c9ad722643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30145)[0m     @     0x55c9ad697689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30145)[0m     @     0x55c9ad721baf _PyEval_EvalCodeWithName
[2m[36m(pid=30145)[0m     @     0x55c9ad722643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30145)[0m     @     0x55c9ad697689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30145)[0m     @     0x55c9ad721baf _PyEval_EvalCodeWithName
[2m[36m(pid=30145)[0m     @     0x55c9ad722643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30145)[0m     @     0x55c9ad697689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30145)[0m     @     0x55c9ad721baf _PyEval_EvalCodeWithName
[2m[36m(pid=30145)[0m     @     0x55c9ad722643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30145)[0m     @     0x55c9ad697689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30129)[0m     @     0x7efc210a04f5 at::Tensor::copy_()
[2m[36m(pid=30129)[0m     @     0x7efc235738de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30129)[0m     @     0x7efc210a04f5 at::Tensor::copy_()
[2m[36m(pid=30129)[0m     @     0x7efc2714b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30129)[0m     @     0x56374ca22fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30129)[0m     @     0x56374c97db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30129)[0m     @     0x56374ca08baf _PyEval_EvalCodeWithName
[2m[36m(pid=30129)[0m     @     0x56374ca09a20 method_vectorcall
[2m[36m(pid=30129)[0m     @     0x56374c97dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30129)[0m     @     0x56374ca08baf _PyEval_EvalCodeWithName
[2m[36m(pid=30129)[0m     @     0x56374ca09643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30129)[0m     @     0x56374c97e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30129)[0m     @     0x56374ca08baf _PyEval_EvalCodeWithName
[2m[36m(pid=30129)[0m     @     0x56374ca09643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30129)[0m     @     0x56374c97e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30129)[0m     @     0x56374ca08baf _PyEval_EvalCodeWithName
[2m[36m(pid=30129)[0m     @     0x56374ca09643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30129)[0m     @     0x56374c97e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30129)[0m     @     0x56374ca08baf _PyEval_EvalCodeWithName
[2m[36m(pid=30129)[0m     @     0x56374ca09643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30129)[0m     @     0x56374c97e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30062)[0m     @     0x7f709cafa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30062)[0m     @     0x7f709cafaad3 at::TensorIterator::for_each()
[2m[36m(pid=30062)[0m     @     0x7f709cafad91 at::TensorIterator::for_each()
[2m[36m(pid=30062)[0m     @     0x7f709d3ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30062)[0m     @     0x7f709d400c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30062)[0m     @     0x7f709c8a2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30062)[0m     @     0x7f709c8a0388 at::native::copy_impl()
[2m[36m(pid=30062)[0m     @     0x7f709c8a25a4 at::native::copy_()
[2m[36m(pid=30130)[0m     @     0x7f02f7c24ad3 at::TensorIterator::for_each()
[2m[36m(pid=30130)[0m     @     0x7f02f7c24d91 at::TensorIterator::for_each()
[2m[36m(pid=30130)[0m     @     0x7f02f8507b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30130)[0m     @     0x7f02f852ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30130)[0m     @     0x7f02f79cca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30130)[0m     @     0x7f02f79ca388 at::native::copy_impl()
[2m[36m(pid=30130)[0m     @     0x7f02f79cc5a4 at::native::copy_()
[2m[36m(pid=30083)[0m     @     0x7fa8fd83b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30083)[0m     @     0x7fa8fd83bad3 at::TensorIterator::for_each()
[2m[36m(pid=30083)[0m     @     0x7fa8fd83bd91 at::TensorIterator::for_each()
[2m[36m(pid=30083)[0m     @     0x7fa8fe11eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30083)[0m     @     0x7fa8fe141c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30083)[0m     @     0x7fa8fd5e3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30083)[0m     @     0x7fa8fd5e1388 at::native::copy_impl()
[2m[36m(pid=30144)[0m     @     0x7f77c0e284f5 at::Tensor::copy_()
[2m[36m(pid=30144)[0m     @     0x7f77c6ed379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30144)[0m     @     0x556101f59fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30144)[0m     @     0x556101eb4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30144)[0m     @     0x556101f3fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30144)[0m     @     0x556101f40a20 method_vectorcall
[2m[36m(pid=30144)[0m     @     0x556101eb4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30144)[0m     @     0x556101f3fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30144)[0m     @     0x556101f40643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30144)[0m     @     0x556101eb5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30144)[0m     @     0x556101f3fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30144)[0m     @     0x556101f40643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30144)[0m     @     0x556101eb5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30144)[0m     @     0x556101f3fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30144)[0m     @     0x556101f40643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30144)[0m     @     0x556101eb5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30144)[0m     @     0x556101f3fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30144)[0m     @     0x556101f40643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30144)[0m     @     0x556101eb5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30057)[0m     @     0x7ef9dbc988f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30057)[0m     @     0x7ef9dbc98ad3 at::TensorIterator::for_each()
[2m[36m(pid=30057)[0m     @     0x7ef9dbc98d91 at::TensorIterator::for_each()
[2m[36m(pid=30057)[0m     @     0x7ef9dc57bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30057)[0m     @     0x7ef9dc59ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30057)[0m     @     0x7ef9dba40a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30057)[0m     @     0x7ef9dba3e388 at::native::copy_impl()
[2m[36m(pid=30127)[0m     @     0x7f49b31518f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30127)[0m     @     0x7f49b3151ad3 at::TensorIterator::for_each()
[2m[36m(pid=30127)[0m     @     0x7f49b3151d91 at::TensorIterator::for_each()
[2m[36m(pid=30127)[0m     @     0x7f49b3a34b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30127)[0m     @     0x7f49b3a57c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30127)[0m     @     0x7f49b2ef9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30127)[0m     @     0x7f49b2ef7388 at::native::copy_impl()
[2m[36m(pid=30097)[0m     @     0x7fbd80c92ad3 at::TensorIterator::for_each()
[2m[36m(pid=30097)[0m     @     0x7fbd80c92d91 at::TensorIterator::for_each()
[2m[36m(pid=30097)[0m     @     0x7fbd81575b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30097)[0m     @     0x7fbd81598c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30097)[0m     @     0x7fbd80a3aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30097)[0m     @     0x7fbd80a38388 at::native::copy_impl()
[2m[36m(pid=30097)[0m     @     0x7fbd80a3a5a4 at::native::copy_()
[2m[36m(pid=30059)[0m     @     0x7eed6bd465a4 at::native::copy_()
[2m[36m(pid=30059)[0m     @     0x7eed6c4314f5 at::Tensor::copy_()
[2m[36m(pid=30059)[0m     @     0x7eed6e9048de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30059)[0m     @     0x7eed6c4314f5 at::Tensor::copy_()
[2m[36m(pid=30059)[0m     @     0x7eed724dc79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30059)[0m     @     0x55b48d767fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30059)[0m     @     0x55b48d6c2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30059)[0m     @     0x55b48d74dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30059)[0m     @     0x55b48d74ea20 method_vectorcall
[2m[36m(pid=30059)[0m     @     0x55b48d6c2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30059)[0m     @     0x55b48d74dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30059)[0m     @     0x55b48d74e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30059)[0m     @     0x55b48d6c3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30059)[0m     @     0x55b48d74dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30059)[0m     @     0x55b48d74e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30059)[0m     @     0x55b48d6c3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30059)[0m     @     0x55b48d74dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30059)[0m     @     0x55b48d74e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30059)[0m     @     0x55b48d6c3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30059)[0m     @     0x55b48d74dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30059)[0m     @     0x55b48d74e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30059)[0m     @     0x55b48d6c3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30071)[0m     @     0x7f2417a618f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30071)[0m     @     0x7f2417a61ad3 at::TensorIterator::for_each()
[2m[36m(pid=30071)[0m     @     0x7f2417a61d91 at::TensorIterator::for_each()
[2m[36m(pid=30071)[0m     @     0x7f2418344b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30071)[0m     @     0x7f2418367c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30071)[0m     @     0x7f2417809a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30071)[0m     @     0x7f2417807388 at::native::copy_impl()
[2m[36m(pid=30167)[0m     @     0x7f7a213ba4f5 at::Tensor::copy_()
[2m[36m(pid=30167)[0m     @     0x7f7a2746579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30167)[0m     @     0x5610d15fbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30167)[0m     @     0x5610d1556b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30167)[0m     @     0x5610d15e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=30167)[0m     @     0x5610d15e2a20 method_vectorcall
[2m[36m(pid=30167)[0m     @     0x5610d1556bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30167)[0m     @     0x5610d15e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=30167)[0m     @     0x5610d15e2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30167)[0m     @     0x5610d1557689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30167)[0m     @     0x5610d15e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=30167)[0m     @     0x5610d15e2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30167)[0m     @     0x5610d1557689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30167)[0m     @     0x5610d15e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=30167)[0m     @     0x5610d15e2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30167)[0m     @     0x5610d1557689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30167)[0m     @     0x5610d15e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=30167)[0m     @     0x5610d15e2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30167)[0m     @     0x5610d1557689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30150)[0m     @     0x7fe5b66c4390 (unknown)
[2m[36m(pid=30150)[0m     @     0x7fb6b65a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30150)[0m     @     0x7fb6b5ccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30150)[0m     @     0x7fb6b5cd28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30150)[0m     @     0x7fb6b5cd2ad3 at::TensorIterator::for_each()
[2m[36m(pid=30150)[0m     @     0x7fb6b5cd2d91 at::TensorIterator::for_each()
[2m[36m(pid=30150)[0m     @     0x7fb6b65b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30150)[0m     @     0x7fb6b65d8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30122)[0m PC: @                0x0 (unknown)
[2m[36m(pid=30122)[0m *** SIGSEGV (@0x0) received by PID 30122 (TID 0x7ff4dd7ee700) from PID 0; stack trace: ***
[2m[36m(pid=30122)[0m     @     0x7ff4dd3c7390 (unknown)
[2m[36m(pid=30122)[0m     @     0x7fc5dd35ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30122)[0m     @     0x7fc5dca8a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30122)[0m     @     0x7fc5dca8d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30122)[0m     @     0x7fc5dca8dad3 at::TensorIterator::for_each()
[2m[36m(pid=30122)[0m     @     0x7fc5dca8dd91 at::TensorIterator::for_each()
[2m[36m(pid=30122)[0m     @     0x7fc5dd370b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30154)[0m     @     0x7fa3fc2ff8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30154)[0m     @     0x7fa3fc2ffad3 at::TensorIterator::for_each()
[2m[36m(pid=30154)[0m     @     0x7fa3fc2ffd91 at::TensorIterator::for_each()
[2m[36m(pid=30154)[0m     @     0x7fa3fcbe2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30154)[0m     @     0x7fa3fcc05c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30154)[0m     @     0x7fa3fc0a7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30154)[0m     @     0x7fa3fc0a5388 at::native::copy_impl()
[2m[36m(pid=30171)[0m     @     0x7fade494f390 (unknown)
[2m[36m(pid=30171)[0m     @     0x7f7ee4774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30171)[0m     @     0x7f7ee3e9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30171)[0m     @     0x7f7ee3ea28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30171)[0m     @     0x7f7ee3ea2ad3 at::TensorIterator::for_each()
[2m[36m(pid=30171)[0m     @     0x7f7ee3ea2d91 at::TensorIterator::for_each()
[2m[36m(pid=30171)[0m     @     0x7f7ee4785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30171)[0m     @     0x7f7ee47a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30080)[0m     @     0x7f18f214f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30080)[0m     @     0x7f18f214fad3 at::TensorIterator::for_each()
[2m[36m(pid=30080)[0m     @     0x7f18f214fd91 at::TensorIterator::for_each()
[2m[36m(pid=30080)[0m     @     0x7f18f2a32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30080)[0m     @     0x7f18f2a55c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30080)[0m     @     0x7f18f1ef7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30080)[0m     @     0x7f18f1ef5388 at::native::copy_impl()
[2m[36m(pid=30148)[0m     @     0x7f7f4adea4f5 at::Tensor::copy_()
[2m[36m(pid=30148)[0m     @     0x7f7f50e9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30148)[0m     @     0x56189e316fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30148)[0m     @     0x56189e271b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30148)[0m     @     0x56189e2fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30148)[0m     @     0x56189e2fda20 method_vectorcall
[2m[36m(pid=30148)[0m     @     0x56189e271bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30148)[0m     @     0x56189e2fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30148)[0m     @     0x56189e2fd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30148)[0m     @     0x56189e272689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30148)[0m     @     0x56189e2fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30148)[0m     @     0x56189e2fd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30148)[0m     @     0x56189e272689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30148)[0m     @     0x56189e2fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30148)[0m     @     0x56189e2fd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30148)[0m     @     0x56189e272689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30148)[0m     @     0x56189e2fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30148)[0m     @     0x56189e2fd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30148)[0m     @     0x56189e272689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30077)[0m     @     0x7f98a2957ad3 at::TensorIterator::for_each()
[2m[36m(pid=30077)[0m     @     0x7f98a2957d91 at::TensorIterator::for_each()
[2m[36m(pid=30077)[0m     @     0x7f98a323ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30077)[0m     @     0x7f98a325dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30077)[0m     @     0x7f98a26ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30077)[0m     @     0x7f98a26fd388 at::native::copy_impl()
[2m[36m(pid=30134)[0m     @     0x7fc86f7477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30134)[0m     @     0x7fc86f74a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30134)[0m     @     0x7fc86f74aad3 at::TensorIterator::for_each()
[2m[36m(pid=30134)[0m     @     0x7fc86f74ad91 at::TensorIterator::for_each()
[2m[36m(pid=30123)[0m     @     0x7f52a20fa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30123)[0m     @     0x7f52a20faad3 at::TensorIterator::for_each()
[2m[36m(pid=30123)[0m     @     0x7f52a20fad91 at::TensorIterator::for_each()
[2m[36m(pid=30123)[0m     @     0x7f52a29ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30123)[0m     @     0x7f52a2a00c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30123)[0m     @     0x7f52a1ea2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30123)[0m     @     0x7f52a1ea0388 at::native::copy_impl()
[2m[36m(pid=30074)[0m     @     0x7f635a852ad3 at::TensorIterator::for_each()
[2m[36m(pid=30074)[0m     @     0x7f635a852d91 at::TensorIterator::for_each()
[2m[36m(pid=30074)[0m     @     0x7f635b135b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30074)[0m     @     0x7f635b158c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30163)[0m     @     0x7eff047e38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30163)[0m     @     0x7eff047e3ad3 at::TensorIterator::for_each()
[2m[36m(pid=30163)[0m     @     0x7eff047e3d91 at::TensorIterator::for_each()
[2m[36m(pid=30163)[0m     @     0x7eff050c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30163)[0m     @     0x7eff050e9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30095)[0m     @     0x7eff9c711ad3 at::TensorIterator::for_each()
[2m[36m(pid=30095)[0m     @     0x7eff9c711d91 at::TensorIterator::for_each()
[2m[36m(pid=30095)[0m     @     0x7eff9cff4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30095)[0m     @     0x7eff9d017c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30095)[0m     @     0x7eff9c4b9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30095)[0m     @     0x7eff9c4b7388 at::native::copy_impl()
[2m[36m(pid=30198)[0m     @     0x7f2c9fa0cad3 at::TensorIterator::for_each()
[2m[36m(pid=30198)[0m     @     0x7f2c9fa0cd91 at::TensorIterator::for_each()
[2m[36m(pid=30198)[0m     @     0x7f2ca02efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30198)[0m     @     0x7f2ca0312c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30146)[0m     @     0x7f6ab6152d91 at::TensorIterator::for_each()
[2m[36m(pid=30146)[0m     @     0x7f6ab6a35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30146)[0m     @     0x7f6ab6a58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30146)[0m     @     0x7f6ab5efaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30146)[0m     @     0x7f6ab5ef8388 at::native::copy_impl()
[2m[36m(pid=30146)[0m     @     0x7f6ab5efa5a4 at::native::copy_()
[2m[36m(pid=30072)[0m     @     0x7ef8f0203d91 at::TensorIterator::for_each()
[2m[36m(pid=30072)[0m     @     0x7ef8f0ae6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30072)[0m     @     0x7ef8f0b09c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30072)[0m     @     0x7ef8effaba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30072)[0m     @     0x7ef8effa9388 at::native::copy_impl()
[2m[36m(pid=30072)[0m     @     0x7ef8effab5a4 at::native::copy_()
[2m[36m(pid=30136)[0m     @     0x7ef4c7223ad3 at::TensorIterator::for_each()
[2m[36m(pid=30136)[0m     @     0x7ef4c7223d91 at::TensorIterator::for_each()
[2m[36m(pid=30136)[0m     @     0x7ef4c7b06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30075)[0m     @     0x7f0747e7a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30075)[0m     @     0x7f0747e7aad3 at::TensorIterator::for_each()
[2m[36m(pid=30075)[0m     @     0x7f0747e7ad91 at::TensorIterator::for_each()
[2m[36m(pid=30075)[0m     @     0x7f074875db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30075)[0m     @     0x7f0748780c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30075)[0m     @     0x7f0747c22a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30075)[0m     @     0x7f0747c20388 at::native::copy_impl()
[2m[36m(pid=30152)[0m     @     0x7f66f4116ad3 at::TensorIterator::for_each()
[2m[36m(pid=30152)[0m     @     0x7f66f4116d91 at::TensorIterator::for_each()
[2m[36m(pid=30152)[0m     @     0x7f66f49f9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30152)[0m     @     0x7f66f4a1cc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30152)[0m     @     0x7f66f3ebea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30152)[0m     @     0x7f66f3ebc388 at::native::copy_impl()
[2m[36m(pid=30152)[0m     @     0x7f66f3ebe5a4 at::native::copy_()
[2m[36m(pid=30183)[0m     @     0x7f3f9d1357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30183)[0m     @     0x7f3f9d1388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30183)[0m     @     0x7f3f9d138ad3 at::TensorIterator::for_each()
[2m[36m(pid=30183)[0m     @     0x7f3f9d138d91 at::TensorIterator::for_each()
[2m[36m(pid=30183)[0m     @     0x7f3f9da1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30183)[0m     @     0x7f3f9da3ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30165)[0m     @     0x7fa9fcef9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=30165)[0m     @     0x7fa9fc6247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30165)[0m     @     0x7fa9fc6278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30165)[0m     @     0x7fa9fc627ad3 at::TensorIterator::for_each()
[2m[36m(pid=30165)[0m     @     0x7fa9fc627d91 at::TensorIterator::for_each()
[2m[36m(pid=30165)[0m     @     0x7fa9fcf0ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30165)[0m     @     0x7fa9fcf2dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30068)[0m     @     0x7f1af29547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=30068)[0m     @     0x7f1af29578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30068)[0m     @     0x7f1af2957ad3 at::TensorIterator::for_each()
[2m[36m(pid=30068)[0m     @     0x7f1af2957d91 at::TensorIterator::for_each()
[2m[36m(pid=30068)[0m     @     0x7f1af323ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30068)[0m     @     0x7f1af325dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30128)[0m     @     0x7ede065948f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30128)[0m     @     0x7ede06594ad3 at::TensorIterator::for_each()
[2m[36m(pid=30125)[0m     @     0x7f00641b98f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30125)[0m     @     0x7f00641b9ad3 at::TensorIterator::for_each()
[2m[36m(pid=30125)[0m     @     0x7f00641b9d91 at::TensorIterator::for_each()
[2m[36m(pid=30125)[0m     @     0x7f0064a9cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30125)[0m     @     0x7f0064abfc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30085)[0m     @     0x7fb80808bad3 at::TensorIterator::for_each()
[2m[36m(pid=30085)[0m     @     0x7fb80808bd91 at::TensorIterator::for_each()
[2m[36m(pid=30085)[0m     @     0x7fb80896eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30085)[0m     @     0x7fb808991c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30085)[0m     @     0x7fb807e33a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30085)[0m     @     0x7fb807e31388 at::native::copy_impl()
[2m[36m(pid=30092)[0m     @     0x7edd066c2ad3 at::TensorIterator::for_each()
[2m[36m(pid=30092)[0m     @     0x7edd066c2d91 at::TensorIterator::for_each()
[2m[36m(pid=30092)[0m     @     0x7edd06fa5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30092)[0m     @     0x7edd06fc8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30092)[0m     @     0x7edd0646aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30092)[0m     @     0x7edd06468388 at::native::copy_impl()
[2m[36m(pid=30076)[0m     @     0x7ef231c278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=30076)[0m     @     0x7ef231c27ad3 at::TensorIterator::for_each()
[2m[36m(pid=30076)[0m     @     0x7ef231c27d91 at::TensorIterator::for_each()
[2m[36m(pid=30076)[0m     @     0x7ef23250ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30076)[0m     @     0x7ef23252dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30076)[0m     @     0x7ef2319cfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30076)[0m     @     0x7ef2319cd388 at::native::copy_impl()
[2m[36m(pid=30141)[0m     @     0x7f332b467d91 at::TensorIterator::for_each()
[2m[36m(pid=30141)[0m     @     0x7f332bd4ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30141)[0m     @     0x7f332bd6dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30141)[0m     @     0x7f332b20fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30141)[0m     @     0x7f332b20d388 at::native::copy_impl()
[2m[36m(pid=30141)[0m     @     0x7f332b20f5a4 at::native::copy_()
[2m[36m(pid=30060)[0m     @     0x7ef23ca1cc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30060)[0m     @     0x7ef23bebea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30060)[0m     @     0x7ef23bebc388 at::native::copy_impl()
[2m[36m(pid=30060)[0m     @     0x7ef23bebe5a4 at::native::copy_()
[2m[36m(pid=30087)[0m     @     0x7f193aac5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30087)[0m     @     0x7f193aac3388 at::native::copy_impl()
[2m[36m(pid=30087)[0m     @     0x7f193aac55a4 at::native::copy_()
[2m[36m(pid=30192)[0m     @     0x7f3feba37a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30192)[0m     @     0x7f3feba35388 at::native::copy_impl()
[2m[36m(pid=30192)[0m     @     0x7f3feba375a4 at::native::copy_()
[2m[36m(pid=30093)[0m     @     0x7efd10bd7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30093)[0m     @     0x7efd10bd5388 at::native::copy_impl()
[2m[36m(pid=30093)[0m     @     0x7efd10bd75a4 at::native::copy_()
[2m[36m(pid=30093)[0m     @     0x7efd112c24f5 at::Tensor::copy_()
[2m[36m(pid=30073)[0m     @     0x7f95037ddc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30073)[0m     @     0x7f9502c7fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30073)[0m     @     0x7f9502c7d388 at::native::copy_impl()
[2m[36m(pid=30073)[0m     @     0x7f9502c7f5a4 at::native::copy_()
[2m[36m(pid=30121)[0m     @     0x55e0a105fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30121)[0m     @     0x55e0a1060643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30121)[0m     @     0x55e0a0fd5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30121)[0m     @     0x55e0a105fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30121)[0m     @     0x55e0a1060643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30121)[0m     @     0x55e0a0fd5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30121)[0m     @     0x55e0a105fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30121)[0m     @     0x55e0a1060643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30121)[0m     @     0x55e0a0fd5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30121)[0m     @     0x55e0a105fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30121)[0m     @     0x55e0a1060643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30121)[0m     @     0x55e0a0fd5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30061)[0m     @     0x7fc0deaf5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30061)[0m     @     0x7fc0deaf3388 at::native::copy_impl()
[2m[36m(pid=30061)[0m     @     0x7fc0deaf55a4 at::native::copy_()
[2m[36m(pid=30061)[0m     @     0x7fc0df1e04f5 at::Tensor::copy_()
[2m[36m(pid=30170)[0m     @     0x7fa226bbdad3 at::TensorIterator::for_each()
[2m[36m(pid=30170)[0m     @     0x7fa226bbdd91 at::TensorIterator::for_each()
[2m[36m(pid=30170)[0m     @     0x7fa2274a0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30170)[0m     @     0x7fa2274c3c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30090)[0m     @     0x7f937d9cda93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30090)[0m     @     0x7f937d9cb388 at::native::copy_impl()
[2m[36m(pid=30090)[0m     @     0x7f937d9cd5a4 at::native::copy_()
[2m[36m(pid=30090)[0m     @     0x7f937e0b84f5 at::Tensor::copy_()
[2m[36m(pid=30066)[0m     @     0x7f78b2343d91 at::TensorIterator::for_each()
[2m[36m(pid=30066)[0m     @     0x7f78b2c26b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30066)[0m     @     0x7f78b2c49c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30066)[0m     @     0x7f78b20eba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30066)[0m     @     0x7f78b20e9388 at::native::copy_impl()
[2m[36m(pid=30070)[0m     @     0x7ef906dfa4f5 at::Tensor::copy_()
[2m[36m(pid=30070)[0m     @     0x7ef9092cd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30070)[0m     @     0x7ef906dfa4f5 at::Tensor::copy_()
[2m[36m(pid=30070)[0m     @     0x7ef90cea579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30070)[0m     @     0x55a1c2c86fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30070)[0m     @     0x55a1c2be1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30070)[0m     @     0x55a1c2c6cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30070)[0m     @     0x55a1c2c6da20 method_vectorcall
[2m[36m(pid=30070)[0m     @     0x55a1c2be1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30070)[0m     @     0x55a1c2c6cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30070)[0m     @     0x55a1c2c6d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30070)[0m     @     0x55a1c2be2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30126)[0m     @     0x7fba72ad44f5 at::Tensor::copy_()
[2m[36m(pid=30126)[0m     @     0x7fba74fa78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30126)[0m     @     0x7fba72ad44f5 at::Tensor::copy_()
[2m[36m(pid=30126)[0m     @     0x7fba78b7f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30126)[0m     @     0x557123d22fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30126)[0m     @     0x557123c7db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30126)[0m     @     0x557123d08baf _PyEval_EvalCodeWithName
[2m[36m(pid=30126)[0m     @     0x557123d09a20 method_vectorcall
[2m[36m(pid=30126)[0m     @     0x557123c7dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30126)[0m     @     0x557123d08baf _PyEval_EvalCodeWithName
[2m[36m(pid=30126)[0m     @     0x557123d09643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30126)[0m     @     0x557123c7e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30126)[0m     @     0x557123d08baf _PyEval_EvalCodeWithName
[2m[36m(pid=30126)[0m     @     0x557123d09643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30126)[0m     @     0x557123c7e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30126)[0m     @     0x557123d08baf _PyEval_EvalCodeWithName
[2m[36m(pid=30126)[0m     @     0x557123d09643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30143)[0m     @     0x7f05e12faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30143)[0m     @     0x7f05e12f8388 at::native::copy_impl()
[2m[36m(pid=30143)[0m     @     0x7f05e12fa5a4 at::native::copy_()
[2m[36m(pid=30143)[0m     @     0x7f05e19e54f5 at::Tensor::copy_()
[2m[36m(pid=30143)[0m     @     0x7f05e3eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30064)[0m     @     0x7f93bfa37388 at::native::copy_impl()
[2m[36m(pid=30064)[0m     @     0x7f93bfa395a4 at::native::copy_()
[2m[36m(pid=30064)[0m     @     0x7f93c01244f5 at::Tensor::copy_()
[2m[36m(pid=30064)[0m     @     0x7f93c25f78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30184)[0m     @     0x7f3a32557388 at::native::copy_impl()
[2m[36m(pid=30184)[0m     @     0x7f3a325595a4 at::native::copy_()
[2m[36m(pid=30184)[0m     @     0x7f3a32c444f5 at::Tensor::copy_()
[2m[36m(pid=30184)[0m     @     0x7f3a351178de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30124)[0m     @     0x7faabaa635a4 at::native::copy_()
[2m[36m(pid=30124)[0m     @     0x7faabb14e4f5 at::Tensor::copy_()
[2m[36m(pid=30124)[0m     @     0x7faabd6218de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30094)[0m     @     0x7f5f7a3ba388 at::native::copy_impl()
[2m[36m(pid=30094)[0m     @     0x7f5f7a3bc5a4 at::native::copy_()
[2m[36m(pid=30094)[0m     @     0x7f5f7aaa74f5 at::Tensor::copy_()
[2m[36m(pid=30094)[0m     @     0x7f5f7cf7a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30180)[0m     @     0x7f83f9eca5a4 at::native::copy_()
[2m[36m(pid=30180)[0m     @     0x7f83fa5b54f5 at::Tensor::copy_()
[2m[36m(pid=30180)[0m     @     0x7f83fca888de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30078)[0m     @     0x7fa9110e3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30078)[0m     @     0x7fa9110e1388 at::native::copy_impl()
[2m[36m(pid=30078)[0m     @     0x7fa9110e35a4 at::native::copy_()
[2m[36m(pid=30078)[0m     @     0x7fa9117ce4f5 at::Tensor::copy_()
[2m[36m(pid=30189)[0m     @     0x7f43bc34da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30189)[0m     @     0x7f43bc34b388 at::native::copy_impl()
[2m[36m(pid=30189)[0m     @     0x7f43bc34d5a4 at::native::copy_()
[2m[36m(pid=30189)[0m     @     0x7f43bca384f5 at::Tensor::copy_()
[2m[36m(pid=30175)[0m     @     0x7f846478d5a4 at::native::copy_()
[2m[36m(pid=30175)[0m     @     0x7f8464e784f5 at::Tensor::copy_()
[2m[36m(pid=30175)[0m     @     0x7f846734b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30175)[0m     @     0x7f8464e784f5 at::Tensor::copy_()
[2m[36m(pid=30168)[0m     @     0x7f9e812faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30168)[0m     @     0x7f9e812f8388 at::native::copy_impl()
[2m[36m(pid=30168)[0m     @     0x7f9e812fa5a4 at::native::copy_()
[2m[36m(pid=30168)[0m     @     0x7f9e819e54f5 at::Tensor::copy_()
[2m[36m(pid=30067)[0m     @     0x7f181d8de4f5 at::Tensor::copy_()
[2m[36m(pid=30067)[0m     @     0x7f181fdb18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30067)[0m     @     0x7f181d8de4f5 at::Tensor::copy_()
[2m[36m(pid=30067)[0m     @     0x7f182398979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30067)[0m     @     0x55a6e9592fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30067)[0m     @     0x55a6e94edb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30067)[0m     @     0x55a6e9578baf _PyEval_EvalCodeWithName
[2m[36m(pid=30067)[0m     @     0x55a6e9579a20 method_vectorcall
[2m[36m(pid=30067)[0m     @     0x55a6e94edbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30067)[0m     @     0x55a6e9578baf _PyEval_EvalCodeWithName
[2m[36m(pid=30067)[0m     @     0x55a6e9579643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30067)[0m     @     0x55a6e94ee689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30067)[0m     @     0x55a6e9578baf _PyEval_EvalCodeWithName
[2m[36m(pid=30067)[0m     @     0x55a6e9579643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30067)[0m     @     0x55a6e94ee689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30067)[0m     @     0x55a6e9578baf _PyEval_EvalCodeWithName
[2m[36m(pid=30067)[0m     @     0x55a6e9579643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30067)[0m     @     0x55a6e94ee689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30067)[0m     @     0x55a6e9578baf _PyEval_EvalCodeWithName
[2m[36m(pid=30067)[0m     @     0x55a6e9579643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30067)[0m     @     0x55a6e94ee689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30058)[0m     @     0x7f822be584f5 at::Tensor::copy_()
[2m[36m(pid=30058)[0m     @     0x7f822e32b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30058)[0m     @     0x7f822be584f5 at::Tensor::copy_()
[2m[36m(pid=30062)[0m     @     0x7f709cf8d4f5 at::Tensor::copy_()
[2m[36m(pid=30062)[0m     @     0x7f709f4608de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30062)[0m     @     0x7f709cf8d4f5 at::Tensor::copy_()
[2m[36m(pid=30062)[0m     @     0x7f70a303879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30062)[0m     @     0x55651d63ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30062)[0m     @     0x55651d59ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30062)[0m     @     0x55651d625baf _PyEval_EvalCodeWithName
[2m[36m(pid=30062)[0m     @     0x55651d626a20 method_vectorcall
[2m[36m(pid=30062)[0m     @     0x55651d59abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30062)[0m     @     0x55651d625baf _PyEval_EvalCodeWithName
[2m[36m(pid=30062)[0m     @     0x55651d626643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30130)[0m     @     0x7f02f80b74f5 at::Tensor::copy_()
[2m[36m(pid=30130)[0m     @     0x7f02fa58a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30130)[0m     @     0x7f02f80b74f5 at::Tensor::copy_()
[2m[36m(pid=30130)[0m     @     0x7f02fe16279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30130)[0m     @     0x55a79e526fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30130)[0m     @     0x55a79e481b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30130)[0m     @     0x55a79e50cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30130)[0m     @     0x55a79e50da20 method_vectorcall
[2m[36m(pid=30130)[0m     @     0x55a79e481bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30130)[0m     @     0x55a79e50cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30130)[0m     @     0x55a79e50d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30130)[0m     @     0x55a79e482689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30130)[0m     @     0x55a79e50cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30130)[0m     @     0x55a79e50d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30130)[0m     @     0x55a79e482689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30130)[0m     @     0x55a79e50cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30130)[0m     @     0x55a79e50d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30130)[0m     @     0x55a79e482689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30130)[0m     @     0x55a79e50cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30130)[0m     @     0x55a79e50d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30130)[0m     @     0x55a79e482689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30083)[0m     @     0x7fa8fd5e35a4 at::native::copy_()
[2m[36m(pid=30083)[0m     @     0x7fa8fdcce4f5 at::Tensor::copy_()
[2m[36m(pid=30083)[0m     @     0x7fa9001a18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30057)[0m     @     0x7ef9dba405a4 at::native::copy_()
[2m[36m(pid=30057)[0m     @     0x7ef9dc12b4f5 at::Tensor::copy_()
[2m[36m(pid=30057)[0m     @     0x7ef9de5fe8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30057)[0m     @     0x7ef9dc12b4f5 at::Tensor::copy_()
[2m[36m(pid=30127)[0m     @     0x7f49b2ef95a4 at::native::copy_()
[2m[36m(pid=30127)[0m     @     0x7f49b35e44f5 at::Tensor::copy_()
[2m[36m(pid=30127)[0m     @     0x7f49b5ab78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30097)[0m     @     0x7fbd811254f5 at::Tensor::copy_()
[2m[36m(pid=30097)[0m     @     0x7fbd835f88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30097)[0m     @     0x7fbd811254f5 at::Tensor::copy_()
[2m[36m(pid=30071)[0m     @     0x7f24178095a4 at::native::copy_()
[2m[36m(pid=30071)[0m     @     0x7f2417ef44f5 at::Tensor::copy_()
[2m[36m(pid=30071)[0m     @     0x7f241a3c78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30071)[0m     @     0x7f2417ef44f5 at::Tensor::copy_()
[2m[36m(pid=30150)[0m     @     0x7fb6b5a7aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30150)[0m     @     0x7fb6b5a78388 at::native::copy_impl()
[2m[36m(pid=30150)[0m     @     0x7fb6b5a7a5a4 at::native::copy_()
[2m[36m(pid=30150)[0m     @     0x7fb6b61654f5 at::Tensor::copy_()
[2m[36m(pid=30122)[0m     @     0x7fc5dd393c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30122)[0m     @     0x7fc5dc835a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30122)[0m     @     0x7fc5dc833388 at::native::copy_impl()
[2m[36m(pid=30122)[0m     @     0x7fc5dc8355a4 at::native::copy_()
[2m[36m(pid=30154)[0m     @     0x7fa3fc0a75a4 at::native::copy_()
[2m[36m(pid=30154)[0m     @     0x7fa3fc7924f5 at::Tensor::copy_()
[2m[36m(pid=30171)[0m     @     0x7f7ee3c4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30171)[0m     @     0x7f7ee3c48388 at::native::copy_impl()
[2m[36m(pid=30171)[0m     @     0x7f7ee3c4a5a4 at::native::copy_()
[2m[36m(pid=30080)[0m     @     0x7f18f1ef75a4 at::native::copy_()
[2m[36m(pid=30080)[0m     @     0x7f18f25e24f5 at::Tensor::copy_()
[2m[36m(pid=30080)[0m     @     0x7f18f4ab58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30080)[0m     @     0x7f18f25e24f5 at::Tensor::copy_()
[2m[36m(pid=30077)[0m     @     0x7f98a26ff5a4 at::native::copy_()
[2m[36m(pid=30077)[0m     @     0x7f98a2dea4f5 at::Tensor::copy_()
[2m[36m(pid=30077)[0m     @     0x7f98a52bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30134)[0m     @     0x7fc87002db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30134)[0m     @     0x7fc870050c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30134)[0m     @     0x7fc86f4f2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30134)[0m     @     0x7fc86f4f0388 at::native::copy_impl()
[2m[36m(pid=30123)[0m     @     0x7f52a1ea25a4 at::native::copy_()
[2m[36m(pid=30123)[0m     @     0x7f52a258d4f5 at::Tensor::copy_()
[2m[36m(pid=30123)[0m     @     0x7f52a4a608de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30074)[0m     @     0x7f635a5faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30074)[0m     @     0x7f635a5f8388 at::native::copy_impl()
[2m[36m(pid=30074)[0m     @     0x7f635a5fa5a4 at::native::copy_()
[2m[36m(pid=30163)[0m     @     0x7eff0458ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30163)[0m     @     0x7eff04589388 at::native::copy_impl()
[2m[36m(pid=30163)[0m     @     0x7eff0458b5a4 at::native::copy_()
[2m[36m(pid=30095)[0m     @     0x7eff9c4b95a4 at::native::copy_()
[2m[36m(pid=30095)[0m     @     0x7eff9cba44f5 at::Tensor::copy_()
[2m[36m(pid=30198)[0m     @     0x7f2c9f7b4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30198)[0m     @     0x7f2c9f7b2388 at::native::copy_impl()
[2m[36m(pid=30146)[0m     @     0x7f6ab65e54f5 at::Tensor::copy_()
[2m[36m(pid=30146)[0m     @     0x7f6ab8ab88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30072)[0m     @     0x7ef8f06964f5 at::Tensor::copy_()
[2m[36m(pid=30072)[0m     @     0x7ef8f2b698de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30136)[0m     @     0x7ef4c7b29c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30136)[0m     @     0x7ef4c6fcba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30075)[0m     @     0x7f0747c225a4 at::native::copy_()
[2m[36m(pid=30075)[0m     @     0x7f074830d4f5 at::Tensor::copy_()
[2m[36m(pid=30152)[0m     @     0x7f66f45a94f5 at::Tensor::copy_()
[2m[36m(pid=30152)[0m     @     0x7f66f6a7c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30152)[0m     @     0x7f66f45a94f5 at::Tensor::copy_()
[2m[36m(pid=30183)[0m     @     0x7f3f9cee0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30183)[0m     @     0x7f3f9cede388 at::native::copy_impl()
[2m[36m(pid=30183)[0m     @     0x7f3f9cee05a4 at::native::copy_()
[2m[36m(pid=30165)[0m     @     0x7fa9fc3cfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30165)[0m     @     0x7fa9fc3cd388 at::native::copy_impl()
[2m[36m(pid=30165)[0m     @     0x7fa9fc3cf5a4 at::native::copy_()
[2m[36m(pid=30068)[0m     @     0x7f1af26ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30068)[0m     @     0x7f1af26fd388 at::native::copy_impl()
[2m[36m(pid=30068)[0m     @     0x7f1af26ff5a4 at::native::copy_()
[2m[36m(pid=30128)[0m     @     0x7ede06594d91 at::TensorIterator::for_each()
[2m[36m(pid=30128)[0m     @     0x7ede06e77b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=30128)[0m     @     0x7ede06e9ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=30128)[0m     @     0x7ede0633ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30128)[0m     @     0x7ede0633a388 at::native::copy_impl()
[2m[36m(pid=30125)[0m     @     0x7f0063f61a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30125)[0m     @     0x7f0063f5f388 at::native::copy_impl()
[2m[36m(pid=30125)[0m     @     0x7f0063f615a4 at::native::copy_()
[2m[36m(pid=30085)[0m     @     0x7fb807e335a4 at::native::copy_()
[2m[36m(pid=30085)[0m     @     0x7fb80851e4f5 at::Tensor::copy_()
[2m[36m(pid=30085)[0m     @     0x7fb80a9f18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30092)[0m     @     0x7edd0646a5a4 at::native::copy_()
[2m[36m(pid=30076)[0m     @     0x7ef2319cf5a4 at::native::copy_()
[2m[36m(pid=30076)[0m     @     0x7ef2320ba4f5 at::Tensor::copy_()
[2m[36m(pid=30141)[0m     @     0x7f332b8fa4f5 at::Tensor::copy_()
[2m[36m(pid=30141)[0m     @     0x7f332ddcd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30060)[0m     @     0x7ef23c5a94f5 at::Tensor::copy_()
[2m[36m(pid=30060)[0m     @     0x7ef23ea7c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30087)[0m     @     0x7f193b1b04f5 at::Tensor::copy_()
[2m[36m(pid=30087)[0m     @     0x7f193d6838de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30087)[0m     @     0x7f193b1b04f5 at::Tensor::copy_()
[2m[36m(pid=30087)[0m     @     0x7f194125b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30087)[0m     @     0x56540492ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30087)[0m     @     0x56540488ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30087)[0m     @     0x565404915baf _PyEval_EvalCodeWithName
[2m[36m(pid=30087)[0m     @     0x565404916a20 method_vectorcall
[2m[36m(pid=30087)[0m     @     0x56540488abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30087)[0m     @     0x565404915baf _PyEval_EvalCodeWithName
[2m[36m(pid=30087)[0m     @     0x565404916643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30087)[0m     @     0x56540488b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30192)[0m     @     0x7f3fec1224f5 at::Tensor::copy_()
[2m[36m(pid=30192)[0m     @     0x7f3fee5f58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30192)[0m     @     0x7f3fec1224f5 at::Tensor::copy_()
[2m[36m(pid=30192)[0m     @     0x7f3ff21cd79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30192)[0m     @     0x555eb9d15fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30192)[0m     @     0x555eb9c70b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30192)[0m     @     0x555eb9cfbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30192)[0m     @     0x555eb9cfca20 method_vectorcall
[2m[36m(pid=30192)[0m     @     0x555eb9c70bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30192)[0m     @     0x555eb9cfbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30192)[0m     @     0x555eb9cfc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30192)[0m     @     0x555eb9c71689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30192)[0m     @     0x555eb9cfbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30192)[0m     @     0x555eb9cfc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30192)[0m     @     0x555eb9c71689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30192)[0m     @     0x555eb9cfbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30093)[0m     @     0x7efd137958de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30093)[0m     @     0x7efd112c24f5 at::Tensor::copy_()
[2m[36m(pid=30093)[0m     @     0x7efd1736d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30093)[0m     @     0x55eb7a7bcfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30093)[0m     @     0x55eb7a717b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30093)[0m     @     0x55eb7a7a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=30093)[0m     @     0x55eb7a7a3a20 method_vectorcall
[2m[36m(pid=30093)[0m     @     0x55eb7a717bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30093)[0m     @     0x55eb7a7a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=30093)[0m     @     0x55eb7a7a3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30093)[0m     @     0x55eb7a718689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30093)[0m     @     0x55eb7a7a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=30093)[0m     @     0x55eb7a7a3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30093)[0m     @     0x55eb7a718689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30093)[0m     @     0x55eb7a7a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=30093)[0m     @     0x55eb7a7a3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30093)[0m     @     0x55eb7a718689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30093)[0m     @     0x55eb7a7a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=30093)[0m     @     0x55eb7a7a3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30093)[0m     @     0x55eb7a718689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30073)[0m     @     0x7f950336a4f5 at::Tensor::copy_()
[2m[36m(pid=30073)[0m     @     0x7f950583d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30073)[0m     @     0x7f950336a4f5 at::Tensor::copy_()
[2m[36m(pid=30061)[0m     @     0x7fc0e16b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30061)[0m     @     0x7fc0df1e04f5 at::Tensor::copy_()
[2m[36m(pid=30061)[0m     @     0x7fc0e528b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30061)[0m     @     0x55e38294efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30061)[0m     @     0x55e3828a9b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30061)[0m     @     0x55e382934baf _PyEval_EvalCodeWithName
[2m[36m(pid=30061)[0m     @     0x55e382935a20 method_vectorcall
[2m[36m(pid=30061)[0m     @     0x55e3828a9bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30061)[0m     @     0x55e382934baf _PyEval_EvalCodeWithName
[2m[36m(pid=30061)[0m     @     0x55e382935643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30061)[0m     @     0x55e3828aa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30061)[0m     @     0x55e382934baf _PyEval_EvalCodeWithName
[2m[36m(pid=30061)[0m     @     0x55e382935643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30061)[0m     @     0x55e3828aa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30061)[0m     @     0x55e382934baf _PyEval_EvalCodeWithName
[2m[36m(pid=30061)[0m     @     0x55e382935643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30061)[0m     @     0x55e3828aa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30061)[0m     @     0x55e382934baf _PyEval_EvalCodeWithName
[2m[36m(pid=30061)[0m     @     0x55e382935643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30061)[0m     @     0x55e3828aa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30170)[0m     @     0x7fa226965a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=30170)[0m     @     0x7fa226963388 at::native::copy_impl()
[2m[36m(pid=30170)[0m     @     0x7fa2269655a4 at::native::copy_()
[2m[36m(pid=30090)[0m     @     0x7f938058b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30090)[0m     @     0x7f937e0b84f5 at::Tensor::copy_()
[2m[36m(pid=30090)[0m     @     0x7f938416379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30090)[0m     @     0x56290d15bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30090)[0m     @     0x56290d0b6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30090)[0m     @     0x56290d141baf _PyEval_EvalCodeWithName
[2m[36m(pid=30090)[0m     @     0x56290d142a20 method_vectorcall
[2m[36m(pid=30090)[0m     @     0x56290d0b6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30090)[0m     @     0x56290d141baf _PyEval_EvalCodeWithName
[2m[36m(pid=30090)[0m     @     0x56290d142643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30090)[0m     @     0x56290d0b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30090)[0m     @     0x56290d141baf _PyEval_EvalCodeWithName
[2m[36m(pid=30090)[0m     @     0x56290d142643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30090)[0m     @     0x56290d0b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30090)[0m     @     0x56290d141baf _PyEval_EvalCodeWithName
[2m[36m(pid=30090)[0m     @     0x56290d142643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30090)[0m     @     0x56290d0b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30090)[0m     @     0x56290d141baf _PyEval_EvalCodeWithName
[2m[36m(pid=30090)[0m     @     0x56290d142643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30090)[0m     @     0x56290d0b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30066)[0m     @     0x7f78b20eb5a4 at::native::copy_()
[2m[36m(pid=30070)[0m     @     0x55a1c2c6cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30070)[0m     @     0x55a1c2c6d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30070)[0m     @     0x55a1c2be2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30070)[0m     @     0x55a1c2c6cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30070)[0m     @     0x55a1c2c6d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30070)[0m     @     0x55a1c2be2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30070)[0m     @     0x55a1c2c6cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30070)[0m     @     0x55a1c2c6d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30070)[0m     @     0x55a1c2be2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30126)[0m     @     0x557123c7e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30126)[0m     @     0x557123d08baf _PyEval_EvalCodeWithName
[2m[36m(pid=30126)[0m     @     0x557123d09643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30126)[0m     @     0x557123c7e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30143)[0m     @     0x7f05e19e54f5 at::Tensor::copy_()
[2m[36m(pid=30143)[0m     @     0x7f05e7a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30143)[0m     @     0x556a109c7fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30143)[0m     @     0x556a10922b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30143)[0m     @     0x556a109adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30143)[0m     @     0x556a109aea20 method_vectorcall
[2m[36m(pid=30143)[0m     @     0x556a10922bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30143)[0m     @     0x556a109adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30143)[0m     @     0x556a109ae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30064)[0m     @     0x7f93c01244f5 at::Tensor::copy_()
[2m[36m(pid=30064)[0m     @     0x7f93c61cf79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30064)[0m     @     0x55c017849fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30064)[0m     @     0x55c0177a4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30064)[0m     @     0x55c01782fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30064)[0m     @     0x55c017830a20 method_vectorcall
[2m[36m(pid=30064)[0m     @     0x55c0177a4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30064)[0m     @     0x55c01782fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30064)[0m     @     0x55c017830643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30064)[0m     @     0x55c0177a5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30064)[0m     @     0x55c01782fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30064)[0m     @     0x55c017830643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30064)[0m     @     0x55c0177a5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30064)[0m     @     0x55c01782fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30064)[0m     @     0x55c017830643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30064)[0m     @     0x55c0177a5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30064)[0m     @     0x55c01782fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30064)[0m     @     0x55c017830643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30064)[0m     @     0x55c0177a5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30184)[0m     @     0x7f3a32c444f5 at::Tensor::copy_()
[2m[36m(pid=30184)[0m     @     0x7f3a38cef79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30184)[0m     @     0x555a7da47fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30184)[0m     @     0x555a7d9a2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30184)[0m     @     0x555a7da2dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30184)[0m     @     0x555a7da2ea20 method_vectorcall
[2m[36m(pid=30184)[0m     @     0x555a7d9a2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30184)[0m     @     0x555a7da2dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30184)[0m     @     0x555a7da2e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30184)[0m     @     0x555a7d9a3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30184)[0m     @     0x555a7da2dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30184)[0m     @     0x555a7da2e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30184)[0m     @     0x555a7d9a3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30184)[0m     @     0x555a7da2dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30184)[0m     @     0x555a7da2e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30184)[0m     @     0x555a7d9a3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30124)[0m     @     0x7faabb14e4f5 at::Tensor::copy_()
[2m[36m(pid=30124)[0m     @     0x7faac11f979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30124)[0m     @     0x56498ffc0fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30124)[0m     @     0x56498ff1bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30124)[0m     @     0x56498ffa6baf _PyEval_EvalCodeWithName
[2m[36m(pid=30124)[0m     @     0x56498ffa7a20 method_vectorcall
[2m[36m(pid=30124)[0m     @     0x56498ff1bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30124)[0m     @     0x56498ffa6baf _PyEval_EvalCodeWithName
[2m[36m(pid=30124)[0m     @     0x56498ffa7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30124)[0m     @     0x56498ff1c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30124)[0m     @     0x56498ffa6baf _PyEval_EvalCodeWithName
[2m[36m(pid=30124)[0m     @     0x56498ffa7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30124)[0m     @     0x56498ff1c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30124)[0m     @     0x56498ffa6baf _PyEval_EvalCodeWithName
[2m[36m(pid=30124)[0m     @     0x56498ffa7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30124)[0m     @     0x56498ff1c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30124)[0m     @     0x56498ffa6baf _PyEval_EvalCodeWithName
[2m[36m(pid=30124)[0m     @     0x56498ffa7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30124)[0m     @     0x56498ff1c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30094)[0m     @     0x7f5f7aaa74f5 at::Tensor::copy_()
[2m[36m(pid=30094)[0m     @     0x7f5f80b5279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30094)[0m     @     0x5596a3c49fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30094)[0m     @     0x5596a3ba4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30094)[0m     @     0x5596a3c2fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30094)[0m     @     0x5596a3c30a20 method_vectorcall
[2m[36m(pid=30094)[0m     @     0x5596a3ba4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30094)[0m     @     0x5596a3c2fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30094)[0m     @     0x5596a3c30643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30094)[0m     @     0x5596a3ba5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30094)[0m     @     0x5596a3c2fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30094)[0m     @     0x5596a3c30643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30094)[0m     @     0x5596a3ba5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30094)[0m     @     0x5596a3c2fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30180)[0m     @     0x7f83fa5b54f5 at::Tensor::copy_()
[2m[36m(pid=30180)[0m     @     0x7f840066079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30180)[0m     @     0x55afe569cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30180)[0m     @     0x55afe55f7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30180)[0m     @     0x55afe5682baf _PyEval_EvalCodeWithName
[2m[36m(pid=30180)[0m     @     0x55afe5683a20 method_vectorcall
[2m[36m(pid=30180)[0m     @     0x55afe55f7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30180)[0m     @     0x55afe5682baf _PyEval_EvalCodeWithName
[2m[36m(pid=30180)[0m     @     0x55afe5683643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30180)[0m     @     0x55afe55f8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30180)[0m     @     0x55afe5682baf _PyEval_EvalCodeWithName
[2m[36m(pid=30180)[0m     @     0x55afe5683643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30180)[0m     @     0x55afe55f8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30180)[0m     @     0x55afe5682baf _PyEval_EvalCodeWithName
[2m[36m(pid=30180)[0m     @     0x55afe5683643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30078)[0m     @     0x7fa913ca18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30078)[0m     @     0x7fa9117ce4f5 at::Tensor::copy_()
[2m[36m(pid=30189)[0m     @     0x7f43bef0b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30189)[0m     @     0x7f43bca384f5 at::Tensor::copy_()
[2m[36m(pid=30189)[0m     @     0x7f43c2ae379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30189)[0m     @     0x56508eb94fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30189)[0m     @     0x56508eaefb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30189)[0m     @     0x56508eb7abaf _PyEval_EvalCodeWithName
[2m[36m(pid=30189)[0m     @     0x56508eb7ba20 method_vectorcall
[2m[36m(pid=30189)[0m     @     0x56508eaefbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30175)[0m     @     0x7f846af2379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30175)[0m     @     0x561e5537afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30175)[0m     @     0x561e552d5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30175)[0m     @     0x561e55360baf _PyEval_EvalCodeWithName
[2m[36m(pid=30175)[0m     @     0x561e55361a20 method_vectorcall
[2m[36m(pid=30175)[0m     @     0x561e552d5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30175)[0m     @     0x561e55360baf _PyEval_EvalCodeWithName
[2m[36m(pid=30175)[0m     @     0x561e55361643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30175)[0m     @     0x561e552d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30175)[0m     @     0x561e55360baf _PyEval_EvalCodeWithName
[2m[36m(pid=30175)[0m     @     0x561e55361643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30175)[0m     @     0x561e552d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30175)[0m     @     0x561e55360baf _PyEval_EvalCodeWithName
[2m[36m(pid=30175)[0m     @     0x561e55361643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30175)[0m     @     0x561e552d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30175)[0m     @     0x561e55360baf _PyEval_EvalCodeWithName
[2m[36m(pid=30175)[0m     @     0x561e55361643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30175)[0m     @     0x561e552d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30168)[0m     @     0x7f9e83eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30168)[0m     @     0x7f9e819e54f5 at::Tensor::copy_()
[2m[36m(pid=30058)[0m     @     0x7f8231f0379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30058)[0m     @     0x555bce006fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30058)[0m     @     0x555bcdf61b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30058)[0m     @     0x555bcdfecbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30058)[0m     @     0x555bcdfeda20 method_vectorcall
[2m[36m(pid=30058)[0m     @     0x555bcdf61bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30058)[0m     @     0x555bcdfecbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30058)[0m     @     0x555bcdfed643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30058)[0m     @     0x555bcdf62689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30058)[0m     @     0x555bcdfecbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30058)[0m     @     0x555bcdfed643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30058)[0m     @     0x555bcdf62689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30058)[0m     @     0x555bcdfecbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30058)[0m     @     0x555bcdfed643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30058)[0m     @     0x555bcdf62689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30058)[0m     @     0x555bcdfecbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30058)[0m     @     0x555bcdfed643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30058)[0m     @     0x555bcdf62689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30062)[0m     @     0x55651d59b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30062)[0m     @     0x55651d625baf _PyEval_EvalCodeWithName
[2m[36m(pid=30062)[0m     @     0x55651d626643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30062)[0m     @     0x55651d59b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30062)[0m     @     0x55651d625baf _PyEval_EvalCodeWithName
[2m[36m(pid=30062)[0m     @     0x55651d626643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30062)[0m     @     0x55651d59b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30062)[0m     @     0x55651d625baf _PyEval_EvalCodeWithName
[2m[36m(pid=30062)[0m     @     0x55651d626643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30062)[0m     @     0x55651d59b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30083)[0m     @     0x7fa8fdcce4f5 at::Tensor::copy_()
[2m[36m(pid=30083)[0m     @     0x7fa903d7979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30083)[0m     @     0x5617a7934fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30083)[0m     @     0x5617a788fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30083)[0m     @     0x5617a791abaf _PyEval_EvalCodeWithName
[2m[36m(pid=30083)[0m     @     0x5617a791ba20 method_vectorcall
[2m[36m(pid=30083)[0m     @     0x5617a788fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30083)[0m     @     0x5617a791abaf _PyEval_EvalCodeWithName
[2m[36m(pid=30083)[0m     @     0x5617a791b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30083)[0m     @     0x5617a7890689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30083)[0m     @     0x5617a791abaf _PyEval_EvalCodeWithName
[2m[36m(pid=30083)[0m     @     0x5617a791b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30083)[0m     @     0x5617a7890689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30083)[0m     @     0x5617a791abaf _PyEval_EvalCodeWithName
[2m[36m(pid=30083)[0m     @     0x5617a791b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30057)[0m     @     0x7ef9e21d679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30057)[0m     @     0x5601361d6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30057)[0m     @     0x560136131b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30057)[0m     @     0x5601361bcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30057)[0m     @     0x5601361bda20 method_vectorcall
[2m[36m(pid=30057)[0m     @     0x560136131bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30057)[0m     @     0x5601361bcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30057)[0m     @     0x5601361bd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30057)[0m     @     0x560136132689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30057)[0m     @     0x5601361bcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30057)[0m     @     0x5601361bd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30057)[0m     @     0x560136132689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30057)[0m     @     0x5601361bcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30057)[0m     @     0x5601361bd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30057)[0m     @     0x560136132689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30057)[0m     @     0x5601361bcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30057)[0m     @     0x5601361bd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30057)[0m     @     0x560136132689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30127)[0m     @     0x7f49b35e44f5 at::Tensor::copy_()
[2m[36m(pid=30127)[0m     @     0x7f49b968f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30127)[0m     @     0x55b06d2b9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30127)[0m     @     0x55b06d214b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30127)[0m     @     0x55b06d29fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30127)[0m     @     0x55b06d2a0a20 method_vectorcall
[2m[36m(pid=30127)[0m     @     0x55b06d214bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30127)[0m     @     0x55b06d29fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30127)[0m     @     0x55b06d2a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30127)[0m     @     0x55b06d215689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30127)[0m     @     0x55b06d29fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30127)[0m     @     0x55b06d2a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30127)[0m     @     0x55b06d215689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30127)[0m     @     0x55b06d29fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30127)[0m     @     0x55b06d2a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30127)[0m     @     0x55b06d215689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30127)[0m     @     0x55b06d29fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30127)[0m     @     0x55b06d2a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30127)[0m     @     0x55b06d215689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30097)[0m     @     0x7fbd871d079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30097)[0m     @     0x555ea9a0cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30097)[0m     @     0x555ea9967b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30097)[0m     @     0x555ea99f2baf _PyEval_EvalCodeWithName
[2m[36m(pid=30097)[0m     @     0x555ea99f3a20 method_vectorcall
[2m[36m(pid=30097)[0m     @     0x555ea9967bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30097)[0m     @     0x555ea99f2baf _PyEval_EvalCodeWithName
[2m[36m(pid=30097)[0m     @     0x555ea99f3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30097)[0m     @     0x555ea9968689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30097)[0m     @     0x555ea99f2baf _PyEval_EvalCodeWithName
[2m[36m(pid=30097)[0m     @     0x555ea99f3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30097)[0m     @     0x555ea9968689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30097)[0m     @     0x555ea99f2baf _PyEval_EvalCodeWithName
[2m[36m(pid=30097)[0m     @     0x555ea99f3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30097)[0m     @     0x555ea9968689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30097)[0m     @     0x555ea99f2baf _PyEval_EvalCodeWithName
[2m[36m(pid=30097)[0m     @     0x555ea99f3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30097)[0m     @     0x555ea9968689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30071)[0m     @     0x7f241df9f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30071)[0m     @     0x55d83a6cafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30071)[0m     @     0x55d83a625b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30071)[0m     @     0x55d83a6b0baf _PyEval_EvalCodeWithName
[2m[36m(pid=30071)[0m     @     0x55d83a6b1a20 method_vectorcall
[2m[36m(pid=30071)[0m     @     0x55d83a625bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30071)[0m     @     0x55d83a6b0baf _PyEval_EvalCodeWithName
[2m[36m(pid=30071)[0m     @     0x55d83a6b1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30071)[0m     @     0x55d83a626689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30071)[0m     @     0x55d83a6b0baf _PyEval_EvalCodeWithName
[2m[36m(pid=30071)[0m     @     0x55d83a6b1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30071)[0m     @     0x55d83a626689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30071)[0m     @     0x55d83a6b0baf _PyEval_EvalCodeWithName
[2m[36m(pid=30071)[0m     @     0x55d83a6b1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30071)[0m     @     0x55d83a626689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30071)[0m     @     0x55d83a6b0baf _PyEval_EvalCodeWithName
[2m[36m(pid=30071)[0m     @     0x55d83a6b1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30071)[0m     @     0x55d83a626689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30150)[0m     @     0x7fb6b86388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30150)[0m     @     0x7fb6b61654f5 at::Tensor::copy_()
[2m[36m(pid=30150)[0m     @     0x7fb6bc21079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30150)[0m     @     0x564935afafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30150)[0m     @     0x564935a55b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30122)[0m     @     0x7fc5dcf204f5 at::Tensor::copy_()
[2m[36m(pid=30122)[0m     @     0x7fc5df3f38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30154)[0m     @     0x7fa3fec658de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30154)[0m     @     0x7fa3fc7924f5 at::Tensor::copy_()
[2m[36m(pid=30154)[0m     @     0x7fa40283d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30154)[0m     @     0x556916842fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30154)[0m     @     0x55691679db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30154)[0m     @     0x556916828baf _PyEval_EvalCodeWithName
[2m[36m(pid=30154)[0m     @     0x556916829a20 method_vectorcall
[2m[36m(pid=30154)[0m     @     0x55691679dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30154)[0m     @     0x556916828baf _PyEval_EvalCodeWithName
[2m[36m(pid=30154)[0m     @     0x556916829643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30154)[0m     @     0x55691679e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30154)[0m     @     0x556916828baf _PyEval_EvalCodeWithName
[2m[36m(pid=30154)[0m     @     0x556916829643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30154)[0m     @     0x55691679e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30154)[0m     @     0x556916828baf _PyEval_EvalCodeWithName
[2m[36m(pid=30154)[0m     @     0x556916829643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30154)[0m     @     0x55691679e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30154)[0m     @     0x556916828baf _PyEval_EvalCodeWithName
[2m[36m(pid=30154)[0m     @     0x556916829643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30154)[0m     @     0x55691679e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30171)[0m     @     0x7f7ee43354f5 at::Tensor::copy_()
[2m[36m(pid=30171)[0m     @     0x7f7ee68088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30171)[0m     @     0x7f7ee43354f5 at::Tensor::copy_()
[2m[36m(pid=30171)[0m     @     0x7f7eea3e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30171)[0m     @     0x56007226cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30080)[0m     @     0x7f18f868d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30080)[0m     @     0x55d9fb58afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30080)[0m     @     0x55d9fb4e5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30080)[0m     @     0x55d9fb570baf _PyEval_EvalCodeWithName
[2m[36m(pid=30080)[0m     @     0x55d9fb571a20 method_vectorcall
[2m[36m(pid=30080)[0m     @     0x55d9fb4e5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30080)[0m     @     0x55d9fb570baf _PyEval_EvalCodeWithName
[2m[36m(pid=30080)[0m     @     0x55d9fb571643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30080)[0m     @     0x55d9fb4e6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30080)[0m     @     0x55d9fb570baf _PyEval_EvalCodeWithName
[2m[36m(pid=30080)[0m     @     0x55d9fb571643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30080)[0m     @     0x55d9fb4e6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30080)[0m     @     0x55d9fb570baf _PyEval_EvalCodeWithName
[2m[36m(pid=30080)[0m     @     0x55d9fb571643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30080)[0m     @     0x55d9fb4e6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30080)[0m     @     0x55d9fb570baf _PyEval_EvalCodeWithName
[2m[36m(pid=30080)[0m     @     0x55d9fb571643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30080)[0m     @     0x55d9fb4e6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30077)[0m     @     0x7f98a2dea4f5 at::Tensor::copy_()
[2m[36m(pid=30077)[0m     @     0x7f98a8e9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30077)[0m     @     0x557c56998fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30077)[0m     @     0x557c568f3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30077)[0m     @     0x557c5697ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=30077)[0m     @     0x557c5697fa20 method_vectorcall
[2m[36m(pid=30077)[0m     @     0x557c568f3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30077)[0m     @     0x557c5697ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=30077)[0m     @     0x557c5697f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30077)[0m     @     0x557c568f4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30077)[0m     @     0x557c5697ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=30077)[0m     @     0x557c5697f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30077)[0m     @     0x557c568f4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30077)[0m     @     0x557c5697ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=30077)[0m     @     0x557c5697f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30077)[0m     @     0x557c568f4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30077)[0m     @     0x557c5697ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=30077)[0m     @     0x557c5697f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30077)[0m     @     0x557c568f4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30134)[0m     @     0x7fc86f4f25a4 at::native::copy_()
[2m[36m(pid=30134)[0m     @     0x7fc86fbdd4f5 at::Tensor::copy_()
[2m[36m(pid=30134)[0m     @     0x7fc8720b08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30123)[0m     @     0x7f52a258d4f5 at::Tensor::copy_()
[2m[36m(pid=30123)[0m     @     0x7f52a863879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30123)[0m     @     0x55f2ca985fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30123)[0m     @     0x55f2ca8e0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30123)[0m     @     0x55f2ca96bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30123)[0m     @     0x55f2ca96ca20 method_vectorcall
[2m[36m(pid=30123)[0m     @     0x55f2ca8e0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30123)[0m     @     0x55f2ca96bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30123)[0m     @     0x55f2ca96c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30123)[0m     @     0x55f2ca8e1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30123)[0m     @     0x55f2ca96bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30123)[0m     @     0x55f2ca96c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30123)[0m     @     0x55f2ca8e1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30123)[0m     @     0x55f2ca96bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30123)[0m     @     0x55f2ca96c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30123)[0m     @     0x55f2ca8e1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30123)[0m     @     0x55f2ca96bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30123)[0m     @     0x55f2ca96c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30123)[0m     @     0x55f2ca8e1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30074)[0m     @     0x7f635ace54f5 at::Tensor::copy_()
[2m[36m(pid=30074)[0m     @     0x7f635d1b88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30163)[0m     @     0x7eff04c764f5 at::Tensor::copy_()
[2m[36m(pid=30163)[0m     @     0x7eff071498de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30163)[0m     @     0x7eff04c764f5 at::Tensor::copy_()
[2m[36m(pid=30163)[0m     @     0x7eff0ad2179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30163)[0m     @     0x562663e1dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30095)[0m     @     0x7eff9f0778de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30095)[0m     @     0x7eff9cba44f5 at::Tensor::copy_()
[2m[36m(pid=30095)[0m     @     0x7effa2c4f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30095)[0m     @     0x556724243fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30095)[0m     @     0x55672419eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30095)[0m     @     0x556724229baf _PyEval_EvalCodeWithName
[2m[36m(pid=30095)[0m     @     0x55672422aa20 method_vectorcall
[2m[36m(pid=30095)[0m     @     0x55672419ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30095)[0m     @     0x556724229baf _PyEval_EvalCodeWithName
[2m[36m(pid=30095)[0m     @     0x55672422a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30095)[0m     @     0x55672419f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30095)[0m     @     0x556724229baf _PyEval_EvalCodeWithName
[2m[36m(pid=30095)[0m     @     0x55672422a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30095)[0m     @     0x55672419f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30095)[0m     @     0x556724229baf _PyEval_EvalCodeWithName
[2m[36m(pid=30095)[0m     @     0x55672422a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30095)[0m     @     0x55672419f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30095)[0m     @     0x556724229baf _PyEval_EvalCodeWithName
[2m[36m(pid=30095)[0m     @     0x55672422a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30095)[0m     @     0x55672419f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30198)[0m     @     0x7f2c9f7b45a4 at::native::copy_()
[2m[36m(pid=30198)[0m     @     0x7f2c9fe9f4f5 at::Tensor::copy_()
[2m[36m(pid=30198)[0m     @     0x7f2ca23728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30146)[0m     @     0x7f6ab65e54f5 at::Tensor::copy_()
[2m[36m(pid=30146)[0m     @     0x7f6abc69079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30146)[0m     @     0x55726f12afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30146)[0m     @     0x55726f085b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30146)[0m     @     0x55726f110baf _PyEval_EvalCodeWithName
[2m[36m(pid=30146)[0m     @     0x55726f111a20 method_vectorcall
[2m[36m(pid=30146)[0m     @     0x55726f085bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30146)[0m     @     0x55726f110baf _PyEval_EvalCodeWithName
[2m[36m(pid=30146)[0m     @     0x55726f111643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30146)[0m     @     0x55726f086689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30146)[0m     @     0x55726f110baf _PyEval_EvalCodeWithName
[2m[36m(pid=30146)[0m     @     0x55726f111643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30146)[0m     @     0x55726f086689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30146)[0m     @     0x55726f110baf _PyEval_EvalCodeWithName
[2m[36m(pid=30146)[0m     @     0x55726f111643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30146)[0m     @     0x55726f086689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30146)[0m     @     0x55726f110baf _PyEval_EvalCodeWithName
[2m[36m(pid=30146)[0m     @     0x55726f111643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30146)[0m     @     0x55726f086689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30072)[0m     @     0x7ef8f06964f5 at::Tensor::copy_()
[2m[36m(pid=30072)[0m     @     0x7ef8f674179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30072)[0m     @     0x5557a566cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30072)[0m     @     0x5557a55c7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30072)[0m     @     0x5557a5652baf _PyEval_EvalCodeWithName
[2m[36m(pid=30072)[0m     @     0x5557a5653a20 method_vectorcall
[2m[36m(pid=30072)[0m     @     0x5557a55c7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30072)[0m     @     0x5557a5652baf _PyEval_EvalCodeWithName
[2m[36m(pid=30072)[0m     @     0x5557a5653643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30072)[0m     @     0x5557a55c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30072)[0m     @     0x5557a5652baf _PyEval_EvalCodeWithName
[2m[36m(pid=30072)[0m     @     0x5557a5653643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30072)[0m     @     0x5557a55c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30072)[0m     @     0x5557a5652baf _PyEval_EvalCodeWithName
[2m[36m(pid=30072)[0m     @     0x5557a5653643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30072)[0m     @     0x5557a55c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30072)[0m     @     0x5557a5652baf _PyEval_EvalCodeWithName
[2m[36m(pid=30072)[0m     @     0x5557a5653643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30072)[0m     @     0x5557a55c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30136)[0m     @     0x7ef4c6fc9388 at::native::copy_impl()
[2m[36m(pid=30136)[0m     @     0x7ef4c6fcb5a4 at::native::copy_()
[2m[36m(pid=30075)[0m     @     0x7f074a7e08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30075)[0m     @     0x7f074830d4f5 at::Tensor::copy_()
[2m[36m(pid=30075)[0m     @     0x7f074e3b879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30152)[0m     @     0x7f66fa65479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30152)[0m     @     0x5589007d2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30152)[0m     @     0x55890072db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30152)[0m     @     0x5589007b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=30152)[0m     @     0x5589007b9a20 method_vectorcall
[2m[36m(pid=30152)[0m     @     0x55890072dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30152)[0m     @     0x5589007b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=30152)[0m     @     0x5589007b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30152)[0m     @     0x55890072e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30152)[0m     @     0x5589007b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=30152)[0m     @     0x5589007b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30152)[0m     @     0x55890072e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30152)[0m     @     0x5589007b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=30152)[0m     @     0x5589007b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30152)[0m     @     0x55890072e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30152)[0m     @     0x5589007b8baf _PyEval_EvalCodeWithName
[2m[36m(pid=30152)[0m     @     0x5589007b9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30152)[0m     @     0x55890072e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30183)[0m     @     0x7f3f9d5cb4f5 at::Tensor::copy_()
[2m[36m(pid=30183)[0m     @     0x7f3f9fa9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30165)[0m     @     0x7fa9fcaba4f5 at::Tensor::copy_()
[2m[36m(pid=30165)[0m     @     0x7fa9fef8d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30068)[0m     @     0x7f1af2dea4f5 at::Tensor::copy_()
[2m[36m(pid=30068)[0m     @     0x7f1af52bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30128)[0m     @     0x7ede0633c5a4 at::native::copy_()
[2m[36m(pid=30128)[0m     @     0x7ede06a274f5 at::Tensor::copy_()
[2m[36m(pid=30125)[0m     @     0x7f006464c4f5 at::Tensor::copy_()
[2m[36m(pid=30125)[0m     @     0x7f0066b1f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30085)[0m     @     0x7fb80851e4f5 at::Tensor::copy_()
[2m[36m(pid=30085)[0m     @     0x7fb80e5c979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30085)[0m     @     0x5589e9df6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30085)[0m     @     0x5589e9d51b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30085)[0m     @     0x5589e9ddcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30085)[0m     @     0x5589e9ddda20 method_vectorcall
[2m[36m(pid=30085)[0m     @     0x5589e9d51bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30085)[0m     @     0x5589e9ddcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30085)[0m     @     0x5589e9ddd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30085)[0m     @     0x5589e9d52689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30085)[0m     @     0x5589e9ddcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30085)[0m     @     0x5589e9ddd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30085)[0m     @     0x5589e9d52689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30085)[0m     @     0x5589e9ddcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30085)[0m     @     0x5589e9ddd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30085)[0m     @     0x5589e9d52689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30085)[0m     @     0x5589e9ddcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30085)[0m     @     0x5589e9ddd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30085)[0m     @     0x5589e9d52689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30092)[0m     @     0x7edd06b554f5 at::Tensor::copy_()
[2m[36m(pid=30092)[0m     @     0x7edd090288de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30092)[0m     @     0x7edd06b554f5 at::Tensor::copy_()
[2m[36m(pid=30076)[0m     @     0x7ef23458d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30076)[0m     @     0x7ef2320ba4f5 at::Tensor::copy_()
[2m[36m(pid=30076)[0m     @     0x7ef23816579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30076)[0m     @     0x55574acbcfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30076)[0m     @     0x55574ac17b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30076)[0m     @     0x55574aca2baf _PyEval_EvalCodeWithName
[2m[36m(pid=30076)[0m     @     0x55574aca3a20 method_vectorcall
[2m[36m(pid=30076)[0m     @     0x55574ac17bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30076)[0m     @     0x55574aca2baf _PyEval_EvalCodeWithName
[2m[36m(pid=30076)[0m     @     0x55574aca3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30076)[0m     @     0x55574ac18689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30076)[0m     @     0x55574aca2baf _PyEval_EvalCodeWithName
[2m[36m(pid=30141)[0m     @     0x7f332b8fa4f5 at::Tensor::copy_()
[2m[36m(pid=30141)[0m     @     0x7f33319a579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30141)[0m     @     0x558668446fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30141)[0m     @     0x5586683a1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30141)[0m     @     0x55866842cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30141)[0m     @     0x55866842da20 method_vectorcall
[2m[36m(pid=30141)[0m     @     0x5586683a1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30141)[0m     @     0x55866842cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30141)[0m     @     0x55866842d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30141)[0m     @     0x5586683a2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30141)[0m     @     0x55866842cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30141)[0m     @     0x55866842d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30141)[0m     @     0x5586683a2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30141)[0m     @     0x55866842cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30141)[0m     @     0x55866842d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30141)[0m     @     0x5586683a2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30141)[0m     @     0x55866842cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30141)[0m     @     0x55866842d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30141)[0m     @     0x5586683a2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30060)[0m     @     0x7ef23c5a94f5 at::Tensor::copy_()
[2m[36m(pid=30060)[0m     @     0x7ef24265479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30060)[0m     @     0x55b704f3bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30060)[0m     @     0x55b704e96b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30060)[0m     @     0x55b704f21baf _PyEval_EvalCodeWithName
[2m[36m(pid=30060)[0m     @     0x55b704f22a20 method_vectorcall
[2m[36m(pid=30060)[0m     @     0x55b704e96bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30060)[0m     @     0x55b704f21baf _PyEval_EvalCodeWithName
[2m[36m(pid=30060)[0m     @     0x55b704f22643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30060)[0m     @     0x55b704e97689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30060)[0m     @     0x55b704f21baf _PyEval_EvalCodeWithName
[2m[36m(pid=30060)[0m     @     0x55b704f22643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30060)[0m     @     0x55b704e97689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30060)[0m     @     0x55b704f21baf _PyEval_EvalCodeWithName
[2m[36m(pid=30060)[0m     @     0x55b704f22643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30060)[0m     @     0x55b704e97689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30060)[0m     @     0x55b704f21baf _PyEval_EvalCodeWithName
[2m[36m(pid=30060)[0m     @     0x55b704f22643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30060)[0m     @     0x55b704e97689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30087)[0m     @     0x565404915baf _PyEval_EvalCodeWithName
[2m[36m(pid=30087)[0m     @     0x565404916643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30087)[0m     @     0x56540488b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30087)[0m     @     0x565404915baf _PyEval_EvalCodeWithName
[2m[36m(pid=30087)[0m     @     0x565404916643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30087)[0m     @     0x56540488b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30087)[0m     @     0x565404915baf _PyEval_EvalCodeWithName
[2m[36m(pid=30087)[0m     @     0x565404916643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30087)[0m     @     0x56540488b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30192)[0m     @     0x555eb9cfc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30192)[0m     @     0x555eb9c71689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30192)[0m     @     0x555eb9cfbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30192)[0m     @     0x555eb9cfc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30192)[0m     @     0x555eb9c71689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30073)[0m     @     0x7f950941579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30073)[0m     @     0x55d4b5ab5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30073)[0m     @     0x55d4b5a10b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30073)[0m     @     0x55d4b5a9bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30073)[0m     @     0x55d4b5a9ca20 method_vectorcall
[2m[36m(pid=30073)[0m     @     0x55d4b5a10bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30073)[0m     @     0x55d4b5a9bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30073)[0m     @     0x55d4b5a9c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30073)[0m     @     0x55d4b5a11689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30073)[0m     @     0x55d4b5a9bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30073)[0m     @     0x55d4b5a9c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30073)[0m     @     0x55d4b5a11689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30073)[0m     @     0x55d4b5a9bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30073)[0m     @     0x55d4b5a9c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30073)[0m     @     0x55d4b5a11689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30073)[0m     @     0x55d4b5a9bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30073)[0m     @     0x55d4b5a9c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30073)[0m     @     0x55d4b5a11689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30170)[0m     @     0x7fa2270504f5 at::Tensor::copy_()
[2m[36m(pid=30170)[0m     @     0x7fa2295238de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30170)[0m     @     0x7fa2270504f5 at::Tensor::copy_()
[2m[36m(pid=30170)[0m     @     0x7fa22d0fb79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30170)[0m     @     0x56555533ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30170)[0m     @     0x56555529ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30066)[0m     @     0x7f78b27d64f5 at::Tensor::copy_()
[2m[36m(pid=30066)[0m     @     0x7f78b4ca98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30066)[0m     @     0x7f78b27d64f5 at::Tensor::copy_()
[2m[36m(pid=30066)[0m     @     0x7f78b847779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30066)[0m     @     0x55fa10917fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30066)[0m     @     0x55fa10872b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30066)[0m     @     0x55fa108fdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30066)[0m     @     0x55fa108fea20 method_vectorcall
[2m[36m(pid=30066)[0m     @     0x55fa10872bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30066)[0m     @     0x55fa108fdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30066)[0m     @     0x55fa108fe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30066)[0m     @     0x55fa10873689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30066)[0m     @     0x55fa108fdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30066)[0m     @     0x55fa108fe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30066)[0m     @     0x55fa10873689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30066)[0m     @     0x55fa108fdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30066)[0m     @     0x55fa108fe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30066)[0m     @     0x55fa10873689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30066)[0m     @     0x55fa108fdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30066)[0m     @     0x55fa108fe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30066)[0m     @     0x55fa10873689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30143)[0m     @     0x556a10923689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30143)[0m     @     0x556a109adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30143)[0m     @     0x556a109ae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30143)[0m     @     0x556a10923689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30143)[0m     @     0x556a109adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30143)[0m     @     0x556a109ae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30143)[0m     @     0x556a10923689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30143)[0m     @     0x556a109adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30143)[0m     @     0x556a109ae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30143)[0m     @     0x556a10923689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30184)[0m     @     0x555a7da2dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30184)[0m     @     0x555a7da2e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30184)[0m     @     0x555a7d9a3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30094)[0m     @     0x5596a3c30643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30094)[0m     @     0x5596a3ba5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30094)[0m     @     0x5596a3c2fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30094)[0m     @     0x5596a3c30643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30094)[0m     @     0x5596a3ba5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30180)[0m     @     0x55afe55f8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30180)[0m     @     0x55afe5682baf _PyEval_EvalCodeWithName
[2m[36m(pid=30180)[0m     @     0x55afe5683643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30180)[0m     @     0x55afe55f8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30078)[0m     @     0x7fa91787979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30078)[0m     @     0x5611d0a03fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30078)[0m     @     0x5611d095eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30078)[0m     @     0x5611d09e9baf _PyEval_EvalCodeWithName
[2m[36m(pid=30078)[0m     @     0x5611d09eaa20 method_vectorcall
[2m[36m(pid=30078)[0m     @     0x5611d095ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30078)[0m     @     0x5611d09e9baf _PyEval_EvalCodeWithName
[2m[36m(pid=30078)[0m     @     0x5611d09ea643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30078)[0m     @     0x5611d095f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30078)[0m     @     0x5611d09e9baf _PyEval_EvalCodeWithName
[2m[36m(pid=30078)[0m     @     0x5611d09ea643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30078)[0m     @     0x5611d095f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30078)[0m     @     0x5611d09e9baf _PyEval_EvalCodeWithName
[2m[36m(pid=30078)[0m     @     0x5611d09ea643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30078)[0m     @     0x5611d095f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30078)[0m     @     0x5611d09e9baf _PyEval_EvalCodeWithName
[2m[36m(pid=30078)[0m     @     0x5611d09ea643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30078)[0m     @     0x5611d095f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30189)[0m     @     0x56508eb7abaf _PyEval_EvalCodeWithName
[2m[36m(pid=30189)[0m     @     0x56508eb7b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30189)[0m     @     0x56508eaf0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30189)[0m     @     0x56508eb7abaf _PyEval_EvalCodeWithName
[2m[36m(pid=30189)[0m     @     0x56508eb7b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30189)[0m     @     0x56508eaf0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30189)[0m     @     0x56508eb7abaf _PyEval_EvalCodeWithName
[2m[36m(pid=30189)[0m     @     0x56508eb7b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30189)[0m     @     0x56508eaf0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30189)[0m     @     0x56508eb7abaf _PyEval_EvalCodeWithName
[2m[36m(pid=30189)[0m     @     0x56508eb7b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30189)[0m     @     0x56508eaf0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30168)[0m     @     0x7f9e87a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30168)[0m     @     0x55660097efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30168)[0m     @     0x5566008d9b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30168)[0m     @     0x556600964baf _PyEval_EvalCodeWithName
[2m[36m(pid=30168)[0m     @     0x556600965a20 method_vectorcall
[2m[36m(pid=30168)[0m     @     0x5566008d9bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30168)[0m     @     0x556600964baf _PyEval_EvalCodeWithName
[2m[36m(pid=30168)[0m     @     0x556600965643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30168)[0m     @     0x5566008da689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30168)[0m     @     0x556600964baf _PyEval_EvalCodeWithName
[2m[36m(pid=30168)[0m     @     0x556600965643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30168)[0m     @     0x5566008da689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30168)[0m     @     0x556600964baf _PyEval_EvalCodeWithName
[2m[36m(pid=30168)[0m     @     0x556600965643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30168)[0m     @     0x5566008da689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30168)[0m     @     0x556600964baf _PyEval_EvalCodeWithName
[2m[36m(pid=30168)[0m     @     0x556600965643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30168)[0m     @     0x5566008da689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30083)[0m     @     0x5617a7890689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30083)[0m     @     0x5617a791abaf _PyEval_EvalCodeWithName
[2m[36m(pid=30083)[0m     @     0x5617a791b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30083)[0m     @     0x5617a7890689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30150)[0m     @     0x564935ae0baf _PyEval_EvalCodeWithName
[2m[36m(pid=30150)[0m     @     0x564935ae1a20 method_vectorcall
[2m[36m(pid=30150)[0m     @     0x564935a55bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30150)[0m     @     0x564935ae0baf _PyEval_EvalCodeWithName
[2m[36m(pid=30150)[0m     @     0x564935ae1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30150)[0m     @     0x564935a56689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30150)[0m     @     0x564935ae0baf _PyEval_EvalCodeWithName
[2m[36m(pid=30150)[0m     @     0x564935ae1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30150)[0m     @     0x564935a56689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30150)[0m     @     0x564935ae0baf _PyEval_EvalCodeWithName
[2m[36m(pid=30150)[0m     @     0x564935ae1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30150)[0m     @     0x564935a56689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30150)[0m     @     0x564935ae0baf _PyEval_EvalCodeWithName
[2m[36m(pid=30150)[0m     @     0x564935ae1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30150)[0m     @     0x564935a56689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30122)[0m     @     0x7fc5dcf204f5 at::Tensor::copy_()
[2m[36m(pid=30122)[0m     @     0x7fc5e2fcb79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30122)[0m     @     0x5561544f1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30122)[0m     @     0x55615444cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30122)[0m     @     0x5561544d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=30122)[0m     @     0x5561544d8a20 method_vectorcall
[2m[36m(pid=30122)[0m     @     0x55615444cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30122)[0m     @     0x5561544d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=30122)[0m     @     0x5561544d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30122)[0m     @     0x55615444d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30122)[0m     @     0x5561544d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=30122)[0m     @     0x5561544d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30122)[0m     @     0x55615444d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30122)[0m     @     0x5561544d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=30122)[0m     @     0x5561544d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30122)[0m     @     0x55615444d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30122)[0m     @     0x5561544d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=30122)[0m     @     0x5561544d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30122)[0m     @     0x55615444d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30171)[0m     @     0x5600721c7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30171)[0m     @     0x560072252baf _PyEval_EvalCodeWithName
[2m[36m(pid=30171)[0m     @     0x560072253a20 method_vectorcall
[2m[36m(pid=30171)[0m     @     0x5600721c7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30171)[0m     @     0x560072252baf _PyEval_EvalCodeWithName
[2m[36m(pid=30171)[0m     @     0x560072253643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30171)[0m     @     0x5600721c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30171)[0m     @     0x560072252baf _PyEval_EvalCodeWithName
[2m[36m(pid=30171)[0m     @     0x560072253643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30171)[0m     @     0x5600721c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30171)[0m     @     0x560072252baf _PyEval_EvalCodeWithName
[2m[36m(pid=30171)[0m     @     0x560072253643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30171)[0m     @     0x5600721c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30171)[0m     @     0x560072252baf _PyEval_EvalCodeWithName
[2m[36m(pid=30171)[0m     @     0x560072253643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30171)[0m     @     0x5600721c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30134)[0m     @     0x7fc86fbdd4f5 at::Tensor::copy_()
[2m[36m(pid=30134)[0m     @     0x7fc875c8879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30134)[0m     @     0x55cb88ecbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30134)[0m     @     0x55cb88e26b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30134)[0m     @     0x55cb88eb1baf _PyEval_EvalCodeWithName
[2m[36m(pid=30134)[0m     @     0x55cb88eb2a20 method_vectorcall
[2m[36m(pid=30134)[0m     @     0x55cb88e26bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30134)[0m     @     0x55cb88eb1baf _PyEval_EvalCodeWithName
[2m[36m(pid=30134)[0m     @     0x55cb88eb2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30134)[0m     @     0x55cb88e27689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30134)[0m     @     0x55cb88eb1baf _PyEval_EvalCodeWithName
[2m[36m(pid=30134)[0m     @     0x55cb88eb2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30134)[0m     @     0x55cb88e27689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30134)[0m     @     0x55cb88eb1baf _PyEval_EvalCodeWithName
[2m[36m(pid=30134)[0m     @     0x55cb88eb2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30134)[0m     @     0x55cb88e27689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30134)[0m     @     0x55cb88eb1baf _PyEval_EvalCodeWithName
[2m[36m(pid=30134)[0m     @     0x55cb88eb2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30134)[0m     @     0x55cb88e27689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30074)[0m     @     0x7f635ace54f5 at::Tensor::copy_()
[2m[36m(pid=30074)[0m     @     0x7f6360d9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30074)[0m     @     0x55f657d2ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30074)[0m     @     0x55f657c8ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30074)[0m     @     0x55f657d15baf _PyEval_EvalCodeWithName
[2m[36m(pid=30074)[0m     @     0x55f657d16a20 method_vectorcall
[2m[36m(pid=30074)[0m     @     0x55f657c8abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30074)[0m     @     0x55f657d15baf _PyEval_EvalCodeWithName
[2m[36m(pid=30074)[0m     @     0x55f657d16643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30074)[0m     @     0x55f657c8b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30074)[0m     @     0x55f657d15baf _PyEval_EvalCodeWithName
[2m[36m(pid=30074)[0m     @     0x55f657d16643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30074)[0m     @     0x55f657c8b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30074)[0m     @     0x55f657d15baf _PyEval_EvalCodeWithName
[2m[36m(pid=30074)[0m     @     0x55f657d16643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30074)[0m     @     0x55f657c8b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30074)[0m     @     0x55f657d15baf _PyEval_EvalCodeWithName
[2m[36m(pid=30074)[0m     @     0x55f657d16643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30074)[0m     @     0x55f657c8b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30163)[0m     @     0x562663d78b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30163)[0m     @     0x562663e03baf _PyEval_EvalCodeWithName
[2m[36m(pid=30163)[0m     @     0x562663e04a20 method_vectorcall
[2m[36m(pid=30163)[0m     @     0x562663d78bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30163)[0m     @     0x562663e03baf _PyEval_EvalCodeWithName
[2m[36m(pid=30163)[0m     @     0x562663e04643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30163)[0m     @     0x562663d79689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30163)[0m     @     0x562663e03baf _PyEval_EvalCodeWithName
[2m[36m(pid=30163)[0m     @     0x562663e04643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30163)[0m     @     0x562663d79689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30163)[0m     @     0x562663e03baf _PyEval_EvalCodeWithName
[2m[36m(pid=30163)[0m     @     0x562663e04643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30163)[0m     @     0x562663d79689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30163)[0m     @     0x562663e03baf _PyEval_EvalCodeWithName
[2m[36m(pid=30163)[0m     @     0x562663e04643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30163)[0m     @     0x562663d79689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30198)[0m     @     0x7f2c9fe9f4f5 at::Tensor::copy_()
[2m[36m(pid=30198)[0m     @     0x7f2ca5f4a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30198)[0m     @     0x5607cdf2efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30198)[0m     @     0x5607cde89b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30198)[0m     @     0x5607cdf14baf _PyEval_EvalCodeWithName
[2m[36m(pid=30198)[0m     @     0x5607cdf15a20 method_vectorcall
[2m[36m(pid=30198)[0m     @     0x5607cde89bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30198)[0m     @     0x5607cdf14baf _PyEval_EvalCodeWithName
[2m[36m(pid=30198)[0m     @     0x5607cdf15643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30198)[0m     @     0x5607cde8a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30198)[0m     @     0x5607cdf14baf _PyEval_EvalCodeWithName
[2m[36m(pid=30198)[0m     @     0x5607cdf15643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30198)[0m     @     0x5607cde8a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30198)[0m     @     0x5607cdf14baf _PyEval_EvalCodeWithName
[2m[36m(pid=30198)[0m     @     0x5607cdf15643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30198)[0m     @     0x5607cde8a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30198)[0m     @     0x5607cdf14baf _PyEval_EvalCodeWithName
[2m[36m(pid=30198)[0m     @     0x5607cdf15643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30198)[0m     @     0x5607cde8a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30136)[0m     @     0x7ef4c76b64f5 at::Tensor::copy_()
[2m[36m(pid=30136)[0m     @     0x7ef4c9b898de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30136)[0m     @     0x7ef4c76b64f5 at::Tensor::copy_()
[2m[36m(pid=30136)[0m     @     0x7ef4cd76179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30136)[0m     @     0x560d28a4ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30136)[0m     @     0x560d289aab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30136)[0m     @     0x560d28a35baf _PyEval_EvalCodeWithName
[2m[36m(pid=30136)[0m     @     0x560d28a36a20 method_vectorcall
[2m[36m(pid=30136)[0m     @     0x560d289aabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30075)[0m     @     0x56070ce77fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30075)[0m     @     0x56070cdd2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30075)[0m     @     0x56070ce5dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30075)[0m     @     0x56070ce5ea20 method_vectorcall
[2m[36m(pid=30075)[0m     @     0x56070cdd2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30075)[0m     @     0x56070ce5dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30075)[0m     @     0x56070ce5e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30075)[0m     @     == Status ==
Memory usage on this node: 24.7/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/558.11 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_e21b2_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_e21b2_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_e21b2_00000_0_2020-11-05_10-37-20/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+
0x56070cdd3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30075)[0m     @     0x56070ce5dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30075)[0m     @     0x56070ce5e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30075)[0m     @     0x56070cdd3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30075)[0m     @     0x56070ce5dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30075)[0m     @     0x56070ce5e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30075)[0m     @     0x56070cdd3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30075)[0m     @     0x56070ce5dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=30075)[0m     @     0x56070ce5e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30075)[0m     @     0x56070cdd3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30183)[0m     @     0x7f3f9d5cb4f5 at::Tensor::copy_()
[2m[36m(pid=30183)[0m     @     0x7f3fa367679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30183)[0m     @     0x55ea9592dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30183)[0m     @     0x55ea95888b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30183)[0m     @     0x55ea95913baf _PyEval_EvalCodeWithName
[2m[36m(pid=30183)[0m     @     0x55ea95914a20 method_vectorcall
[2m[36m(pid=30183)[0m     @     0x55ea95888bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30183)[0m     @     0x55ea95913baf _PyEval_EvalCodeWithName
[2m[36m(pid=30183)[0m     @     0x55ea95914643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30183)[0m     @     0x55ea95889689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30183)[0m     @     0x55ea95913baf _PyEval_EvalCodeWithName
[2m[36m(pid=30183)[0m     @     0x55ea95914643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30183)[0m     @     0x55ea95889689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30183)[0m     @     0x55ea95913baf _PyEval_EvalCodeWithName
[2m[36m(pid=30183)[0m     @     0x55ea95914643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30183)[0m     @     0x55ea95889689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30183)[0m     @     0x55ea95913baf _PyEval_EvalCodeWithName
[2m[36m(pid=30183)[0m     @     0x55ea95914643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30183)[0m     @     0x55ea95889689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30165)[0m     @     0x7fa9fcaba4f5 at::Tensor::copy_()
[2m[36m(pid=30165)[0m     @     0x7faa02b6579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30165)[0m     @     0x55c07e562fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30165)[0m     @     0x55c07e4bdb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30165)[0m     @     0x55c07e548baf _PyEval_EvalCodeWithName
[2m[36m(pid=30165)[0m     @     0x55c07e549a20 method_vectorcall
[2m[36m(pid=30165)[0m     @     0x55c07e4bdbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30165)[0m     @     0x55c07e548baf _PyEval_EvalCodeWithName
[2m[36m(pid=30165)[0m     @     0x55c07e549643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30165)[0m     @     0x55c07e4be689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30165)[0m     @     0x55c07e548baf _PyEval_EvalCodeWithName
[2m[36m(pid=30165)[0m     @     0x55c07e549643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30165)[0m     @     0x55c07e4be689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30165)[0m     @     0x55c07e548baf _PyEval_EvalCodeWithName
[2m[36m(pid=30165)[0m     @     0x55c07e549643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30165)[0m     @     0x55c07e4be689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30165)[0m     @     0x55c07e548baf _PyEval_EvalCodeWithName
[2m[36m(pid=30165)[0m     @     0x55c07e549643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30165)[0m     @     0x55c07e4be689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30068)[0m     @     0x7f1af2dea4f5 at::Tensor::copy_()
[2m[36m(pid=30068)[0m     @     0x7f1af8e9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30068)[0m     @     0x562df7621fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30068)[0m     @     0x562df757cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30068)[0m     @     0x562df7607baf _PyEval_EvalCodeWithName
[2m[36m(pid=30068)[0m     @     0x562df7608a20 method_vectorcall
[2m[36m(pid=30068)[0m     @     0x562df757cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30068)[0m     @     0x562df7607baf _PyEval_EvalCodeWithName
[2m[36m(pid=30068)[0m     @     0x562df7608643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30068)[0m     @     0x562df757d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30068)[0m     @     0x562df7607baf _PyEval_EvalCodeWithName
[2m[36m(pid=30068)[0m     @     0x562df7608643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30068)[0m     @     0x562df757d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30068)[0m     @     0x562df7607baf _PyEval_EvalCodeWithName
[2m[36m(pid=30068)[0m     @     0x562df7608643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30068)[0m     @     0x562df757d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30068)[0m     @     0x562df7607baf _PyEval_EvalCodeWithName
[2m[36m(pid=30068)[0m     @     0x562df7608643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30068)[0m     @     0x562df757d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30128)[0m     @     0x7ede08efa8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=30128)[0m     @     0x7ede06a274f5 at::Tensor::copy_()
[2m[36m(pid=30128)[0m     @     0x7ede0cad279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30128)[0m     @     0x5609e0c31fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30128)[0m     @     0x5609e0b8cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30128)[0m     @     0x5609e0c17baf _PyEval_EvalCodeWithName
[2m[36m(pid=30128)[0m     @     0x5609e0c18a20 method_vectorcall
[2m[36m(pid=30128)[0m     @     0x5609e0b8cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30128)[0m     @     0x5609e0c17baf _PyEval_EvalCodeWithName
[2m[36m(pid=30128)[0m     @     0x5609e0c18643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30128)[0m     @     0x5609e0b8d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30128)[0m     @     0x5609e0c17baf _PyEval_EvalCodeWithName
[2m[36m(pid=30128)[0m     @     0x5609e0c18643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30128)[0m     @     0x5609e0b8d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30128)[0m     @     0x5609e0c17baf _PyEval_EvalCodeWithName
[2m[36m(pid=30128)[0m     @     0x5609e0c18643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30128)[0m     @     0x5609e0b8d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30128)[0m     @     0x5609e0c17baf _PyEval_EvalCodeWithName
[2m[36m(pid=30128)[0m     @     0x5609e0c18643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30128)[0m     @     0x5609e0b8d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30125)[0m     @     0x7f006464c4f5 at::Tensor::copy_()
[2m[36m(pid=30092)[0m     @     0x7edd0cc0079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30092)[0m     @     0x55c4ed30afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30092)[0m     @     0x55c4ed265b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30092)[0m     @     0x55c4ed2f0baf _PyEval_EvalCodeWithName
[2m[36m(pid=30092)[0m     @     0x55c4ed2f1a20 method_vectorcall
[2m[36m(pid=30092)[0m     @     0x55c4ed265bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30092)[0m     @     0x55c4ed2f0baf _PyEval_EvalCodeWithName
[2m[36m(pid=30092)[0m     @     0x55c4ed2f1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30092)[0m     @     0x55c4ed266689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30092)[0m     @     0x55c4ed2f0baf _PyEval_EvalCodeWithName
[2m[36m(pid=30092)[0m     @     0x55c4ed2f1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30092)[0m     @     0x55c4ed266689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30092)[0m     @     0x55c4ed2f0baf _PyEval_EvalCodeWithName
[2m[36m(pid=30092)[0m     @     0x55c4ed2f1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30092)[0m     @     0x55c4ed266689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30092)[0m     @     0x55c4ed2f0baf _PyEval_EvalCodeWithName
[2m[36m(pid=30092)[0m     @     0x55c4ed2f1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30092)[0m     @     0x55c4ed266689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30076)[0m     @     0x55574aca3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30076)[0m     @     0x55574ac18689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30076)[0m     @     0x55574aca2baf _PyEval_EvalCodeWithName
[2m[36m(pid=30076)[0m     @     0x55574aca3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30076)[0m     @     0x55574ac18689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30076)[0m     @     0x55574aca2baf _PyEval_EvalCodeWithName
[2m[36m(pid=30076)[0m     @     0x55574aca3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30076)[0m     @     0x55574ac18689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30170)[0m     @     0x565555325baf _PyEval_EvalCodeWithName
[2m[36m(pid=30170)[0m     @     0x565555326a20 method_vectorcall
[2m[36m(pid=30170)[0m     @     0x56555529abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30170)[0m     @     0x565555325baf _PyEval_EvalCodeWithName
[2m[36m(pid=30170)[0m     @     0x565555326643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30170)[0m     @     0x56555529b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30170)[0m     @     0x565555325baf _PyEval_EvalCodeWithName
[2m[36m(pid=30170)[0m     @     0x565555326643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30170)[0m     @     0x56555529b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30170)[0m     @     0x565555325baf _PyEval_EvalCodeWithName
[2m[36m(pid=30170)[0m     @     0x565555326643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30170)[0m     @     0x56555529b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30170)[0m     @     0x565555325baf _PyEval_EvalCodeWithName
[2m[36m(pid=30170)[0m     @     0x565555326643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30170)[0m     @     0x56555529b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30136)[0m     @     0x560d28a35baf _PyEval_EvalCodeWithName
[2m[36m(pid=30136)[0m     @     0x560d28a36643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30136)[0m     @     0x560d289ab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30136)[0m     @     0x560d28a35baf _PyEval_EvalCodeWithName
[2m[36m(pid=30136)[0m     @     0x560d28a36643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30136)[0m     @     0x560d289ab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30136)[0m     @     0x560d28a35baf _PyEval_EvalCodeWithName
[2m[36m(pid=30136)[0m     @     0x560d28a36643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30136)[0m     @     0x560d289ab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30136)[0m     @     0x560d28a35baf _PyEval_EvalCodeWithName
[2m[36m(pid=30136)[0m     @     0x560d28a36643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30136)[0m     @     0x560d289ab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30125)[0m     @     0x7f006a6f779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=30125)[0m     @     0x563030b44fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=30125)[0m     @     0x563030a9fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30125)[0m     @     0x563030b2abaf _PyEval_EvalCodeWithName
[2m[36m(pid=30125)[0m     @     0x563030b2ba20 method_vectorcall
[2m[36m(pid=30125)[0m     @     0x563030a9fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30125)[0m     @     0x563030b2abaf _PyEval_EvalCodeWithName
[2m[36m(pid=30125)[0m     @     0x563030b2b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30125)[0m     @     0x563030aa0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30125)[0m     @     0x563030b2abaf _PyEval_EvalCodeWithName
[2m[36m(pid=30125)[0m     @     0x563030b2b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30125)[0m     @     0x563030aa0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30125)[0m     @     0x563030b2abaf _PyEval_EvalCodeWithName
[2m[36m(pid=30125)[0m     @     0x563030b2b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30125)[0m     @     0x563030aa0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=30125)[0m     @     0x563030b2abaf _PyEval_EvalCodeWithName
[2m[36m(pid=30125)[0m     @     0x563030b2b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=30125)[0m     @     0x563030aa0689 _PyEval_EvalFrameDefault.cold.2792
2020-11-05 10:37:27,927	ERROR trial_runner.py:567 -- Trial PPO_jss_env_e21b2_00000: Error processing event.
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py", line 515, in _process_trial
    result = self.trial_executor.fetch_result(trial)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py", line 488, in fetch_result
    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/worker.py", line 1428, in get
    raise value.as_instanceof_cause()
ray.exceptions.RayTaskError: [36mray::PPO.train()[39m (pid=30178, ip=172.17.0.4)
  File "python/ray/_raylet.pyx", line 484, in ray._raylet.execute_task
  File "python/ray/_raylet.pyx", line 438, in ray._raylet.execute_task.function_executor
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 516, in train
    raise e
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 505, in train
    result = Trainable.train(self)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py", line 336, in train
    result = self.step()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py", line 134, in step
    res = next(self.train_exec_impl)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 756, in __next__
    return next(self.built_iterator)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 876, in apply_flatten
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 828, in add_wait_hooks
    item = next(it)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 466, in base_iterator
    actor_set.init_actors()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 1238, in init_actors
    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
2020-11-05 10:37:27,928	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffbdff035801000000.
2020-11-05 10:37:27,949	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff252160a301000000.
Traceback (most recent call last):
  File "train.py", line 74, in <module>
    train_func()
  File "train.py", line 56, in train_func
    analysis = tune.run(PPOTrainer, config=config, stop=stop, name="ppo-jss")
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py", line 427, in run
    raise TuneError("Trials did not complete", incomplete_trials)
ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_e21b2_00000])
[2m[36m(pid=30178)[0m E1105 10:37:27.922379 30178 31328 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=137dbd5547ea6deabdff035801000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=bdff035801000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}
[2m[36m(pid=30178)[0m E1105 10:37:27.922562 30178 31328 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=3f75a43fb9f70f24bdff035801000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=bdff035801000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}
[2m[36m(pid=30178)[0m E1105 10:37:27.931947 30178 31328 task_manager.cc:323] Task failed: IOError: 14: failed to connect to all addresses: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=150a9d56b40e3700bdff035801000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=bdff035801000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}
[2m[36m(pid=30178)[0m E1105 10:37:27.937702 30178 31328 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=3e4916e36cb3ce60252160a301000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=252160a301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}
[2m[36m(pid=30178)[0m E1105 10:37:27.937837 30178 31328 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=c2d663ba592886f5252160a301000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=252160a301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}
[2m[36m(pid=30178)[0m E1105 10:37:27.937899 30178 31328 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=457f03c785986c89252160a301000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_