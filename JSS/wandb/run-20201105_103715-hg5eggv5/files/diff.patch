diff --git a/JSS/.ipynb_checkpoints/PPO-checkpoint.ipynb b/JSS/.ipynb_checkpoints/PPO-checkpoint.ipynb
index 4ec3a0c..9879da6 100644
--- a/JSS/.ipynb_checkpoints/PPO-checkpoint.ipynb
+++ b/JSS/.ipynb_checkpoints/PPO-checkpoint.ipynb
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 14,
    "metadata": {},
    "outputs": [
     {
@@ -64,9 +64,9 @@
     "        },\n",
     "        'parameters': {\n",
     "            'instance_path': {\n",
-    "                'values': ['/JSS/JSS/env/instances/ta51', '/JSS/JSS/env/instances/ta52', '/JSS/JSS/env/instances/ta53', '/JSS/JSS/env/instances/ta54',\n",
-    "                           '/JSS/JSS/env/instances/ta55', '/JSS/JSS/env/instances/ta56', '/JSS/JSS/env/instances/ta57', '/JSS/JSS/env/instances/ta58',\n",
-    "                           '/JSS/JSS/env/instances/ta59', '/JSS/JSS/env/instances/ta60']\n",
+    "                'values': ['/JSS/JSS/env/instances/ta40', '/JSS/JSS/env/instances/ta41', '/JSS/JSS/env/instances/ta42', '/JSS/JSS/env/instances/ta43', '/JSS/JSS/env/instances/ta44',\n",
+    "                           '/JSS/JSS/env/instances/ta45', '/JSS/JSS/env/instances/ta46', '/JSS/JSS/env/instances/ta47', '/JSS/JSS/env/instances/ta48',\n",
+    "                           '/JSS/JSS/env/instances/ta49', '/JSS/JSS/env/instances/ta50']\n",
     "            }\n",
     "        }\n",
     "    }"
@@ -74,25 +74,25 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 15,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Create sweep with ID: 1x8v92mc\n",
-      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/1x8v92mc\n"
+      "Create sweep with ID: 9xhkl8my\n",
+      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/9xhkl8my\n"
      ]
     }
    ],
    "source": [
-    "sweep_id = wandb.sweep(sweep_config, project=\"RLLIB_SWEEP_2\")"
+    "sweep_id = wandb.sweep(sweep_config, project=\"RLLIB_SWEEP_3\")"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 16,
    "metadata": {},
    "outputs": [
     {
@@ -100,67 +100,13616 @@
      "output_type": "stream",
      "text": [
       "\u001b[34m\u001b[1mwandb\u001b[0m: Starting wandb agent üïµÔ∏è\n",
-      "2020-10-13 11:45:51,946 - wandb.wandb_agent - INFO - Running runs: []\n",
-      "2020-10-13 11:45:52,259 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-13 11:45:52,260 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta51\n",
-      "2020-10-13 11:45:52,261 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python RandomGreedy.py --instance_path=/JSS/JSS/env/instances/ta51\n",
+      "2020-11-01 11:53:51,776 - wandb.wandb_agent - INFO - Running runs: []\n",
+      "2020-11-01 11:53:52,086 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-01 11:53:52,086 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/la/la11.txt\n",
+      "2020-11-01 11:53:52,088 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/la/la11.txt\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mrandom\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/1x8v92mc\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/3qwfavbb\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201013_114553-3qwfavbb\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mmisty-sweep-1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/9xhkl8my\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/kqo0l7if\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201101_115353-kqo0l7if\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "2020-10-13 11:45:57,278 - wandb.wandb_agent - INFO - Running runs: ['3qwfavbb']\n",
+      "2020-11-01 11:53:57,102 - wandb.wandb_agent - INFO - Running runs: ['kqo0l7if']\n",
+      "2020-11-01 11:53:57,683\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 39394\n",
+      "\n",
+      "\u001b[2m\u001b[36m(pid=20230)\u001b[0m 2020-11-01 11:54:00,466\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=20215)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20215)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20191)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20191)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20206)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20206)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20222)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20222)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20202)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20202)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20171)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20171)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20193)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20193)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20199)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20199)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20235)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20235)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20233)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20233)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20232)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20232)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20198)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20198)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20211)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20211)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20205)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20205)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20226)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20226)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20187)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20187)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20207)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20207)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20216)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20216)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20237)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20237)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20166)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20166)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20236)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20236)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20247)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20247)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20151)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20151)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20175)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20175)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20138)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20138)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20174)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20174)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20178)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20178)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20116)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20116)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20128)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20128)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20181)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20181)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20123)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20123)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20142)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20142)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20169)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20169)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20196)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20196)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20209)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20209)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20188)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20188)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20112)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20112)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20120)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20120)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20210)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20210)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20131)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20131)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20127)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20127)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20134)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20134)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20170)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20170)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20125)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20125)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20129)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20129)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20212)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20212)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20203)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20203)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20180)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20180)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20194)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20194)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20150)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20150)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20219)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20219)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20197)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20197)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20176)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20176)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20192)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20192)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20130)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20130)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20149)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20149)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20195)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20195)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20124)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20124)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20132)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20132)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20240)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20240)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20200)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20200)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20117)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20117)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20173)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20173)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20183)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20183)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20184)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20184)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20145)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20145)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20141)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20141)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20148)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20148)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20122)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20122)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20118)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20118)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20115)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20115)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20214)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20214)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20147)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20147)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20135)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20135)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20114)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20114)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20119)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20119)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20241)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20241)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20113)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20113)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20225)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20225)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1434.4832653061223\n",
+      "    time_step_min: 1245\n",
+      "  date: 2020-11-01_11-54-27\n",
+      "  done: false\n",
+      "  episode_len_mean: 116.93913043478261\n",
+      "  episode_reward_max: 45.68367346938774\n",
+      "  episode_reward_mean: 35.80144389771718\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1265\n",
+      "  episodes_total: 1265\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1484567523002625\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006624576014777024\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007466505475652714\n",
+      "        total_loss: 52.51902961730957\n",
+      "        vf_explained_var: 0.7593300342559814\n",
+      "        vf_loss: 52.52574666341146\n",
+      "    num_steps_sampled: 161792\n",
+      "    num_steps_trained: 161792\n",
+      "  iterations_since_restore: 1\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 31.92222222222222\n",
+      "    gpu_util_percent0: 0.3044444444444444\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.4370370370370376\n",
+      "    vram_util_percent0: 0.0819728386963546\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.17175637313856013\n",
+      "    mean_env_wait_ms: 0.6787065283307273\n",
+      "    mean_inference_ms: 5.169812775871786\n",
+      "    mean_raw_obs_processing_ms: 0.45531381926816505\n",
+      "  time_since_restore: 22.264521837234497\n",
+      "  time_this_iter_s: 22.264521837234497\n",
+      "  time_total_s: 22.264521837234497\n",
+      "  timers:\n",
+      "    learn_throughput: 11076.145\n",
+      "    learn_time_ms: 14607.249\n",
+      "    sample_throughput: 21315.374\n",
+      "    sample_time_ms: 7590.39\n",
+      "    update_time_ms: 20.181\n",
+      "  timestamp: 1604231667\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 161792\n",
+      "  training_iteration: 1\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.3/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      1 |          22.2645 | 161792 |  35.8014 |              45.6837 |              15.7347 |            116.939 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1426.9196226415095\n",
+      "    time_step_min: 1245\n",
+      "  date: 2020-11-01_11-54-49\n",
+      "  done: false\n",
+      "  episode_len_mean: 115.78401486988848\n",
+      "  episode_reward_max: 45.68367346938774\n",
+      "  episode_reward_mean: 36.37903042257795\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1425\n",
+      "  episodes_total: 2690\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.130055993795395\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00956034411986669\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011216347149456851\n",
+      "        total_loss: 10.385109821955362\n",
+      "        vf_explained_var: 0.894355058670044\n",
+      "        vf_loss: 10.394978761672974\n",
+      "    num_steps_sampled: 323584\n",
+      "    num_steps_trained: 323584\n",
+      "  iterations_since_restore: 2\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 28.388\n",
+      "    gpu_util_percent0: 0.3824\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5120000000000005\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16652532875458848\n",
+      "    mean_env_wait_ms: 0.6684123457284149\n",
+      "    mean_inference_ms: 4.952915318761355\n",
+      "    mean_raw_obs_processing_ms: 0.44064388796599707\n",
+      "  time_since_restore: 43.21846151351929\n",
+      "  time_this_iter_s: 20.95393967628479\n",
+      "  time_total_s: 43.21846151351929\n",
+      "  timers:\n",
+      "    learn_throughput: 11096.611\n",
+      "    learn_time_ms: 14580.307\n",
+      "    sample_throughput: 23271.686\n",
+      "    sample_time_ms: 6952.311\n",
+      "    update_time_ms: 21.999\n",
+      "  timestamp: 1604231689\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 323584\n",
+      "  training_iteration: 2\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      2 |          43.2185 | 323584 |   36.379 |              45.6837 |              15.7347 |            115.784 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1408.408178256611\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-55-09\n",
+      "  done: false\n",
+      "  episode_len_mean: 114.67119301648884\n",
+      "  episode_reward_max: 46.85714285714286\n",
+      "  episode_reward_mean: 37.28042419683683\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1434\n",
+      "  episodes_total: 4124\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1140848398208618\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009810077414537469\n",
+      "        model: {}\n",
+      "        policy_loss: -0.015473847355072698\n",
+      "        total_loss: 7.254512945810954\n",
+      "        vf_explained_var: 0.9246422648429871\n",
+      "        vf_loss: 7.2685816287994385\n",
+      "    num_steps_sampled: 485376\n",
+      "    num_steps_trained: 485376\n",
+      "  iterations_since_restore: 3\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.775000000000002\n",
+      "    gpu_util_percent0: 0.34500000000000003\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.516666666666667\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16318379996682947\n",
+      "    mean_env_wait_ms: 0.662199655734115\n",
+      "    mean_inference_ms: 4.788160816000921\n",
+      "    mean_raw_obs_processing_ms: 0.43056477316095654\n",
+      "  time_since_restore: 63.56497097015381\n",
+      "  time_this_iter_s: 20.34650945663452\n",
+      "  time_total_s: 63.56497097015381\n",
+      "  timers:\n",
+      "    learn_throughput: 11127.786\n",
+      "    learn_time_ms: 14539.46\n",
+      "    sample_throughput: 24626.159\n",
+      "    sample_time_ms: 6569.924\n",
+      "    update_time_ms: 21.5\n",
+      "  timestamp: 1604231709\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 485376\n",
+      "  training_iteration: 3\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      3 |           63.565 | 485376 |  37.2804 |              46.8571 |              15.7347 |            114.671 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1389.7721856660146\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-55-30\n",
+      "  done: false\n",
+      "  episode_len_mean: 113.25304608864559\n",
+      "  episode_reward_max: 46.857142857142875\n",
+      "  episode_reward_mean: 38.234928122758895\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1539\n",
+      "  episodes_total: 5663\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0880944629510243\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009488985563317934\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01440603454830125\n",
+      "        total_loss: 5.48736047744751\n",
+      "        vf_explained_var: 0.9440011978149414\n",
+      "        vf_loss: 5.500412583351135\n",
+      "    num_steps_sampled: 647168\n",
+      "    num_steps_trained: 647168\n",
+      "  iterations_since_restore: 4\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.516666666666666\n",
+      "    gpu_util_percent0: 0.34874999999999995\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5125000000000006\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16068983053902333\n",
+      "    mean_env_wait_ms: 0.6583389151369388\n",
+      "    mean_inference_ms: 4.664128900411232\n",
+      "    mean_raw_obs_processing_ms: 0.42299876801925573\n",
+      "  time_since_restore: 84.06657981872559\n",
+      "  time_this_iter_s: 20.501608848571777\n",
+      "  time_total_s: 84.06657981872559\n",
+      "  timers:\n",
+      "    learn_throughput: 11095.44\n",
+      "    learn_time_ms: 14581.846\n",
+      "    sample_throughput: 25479.527\n",
+      "    sample_time_ms: 6349.882\n",
+      "    update_time_ms: 24.143\n",
+      "  timestamp: 1604231730\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 647168\n",
+      "  training_iteration: 4\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      4 |          84.0666 | 647168 |  38.2349 |              46.8571 |              15.7347 |            113.253 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1374.424760022586\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-55-50\n",
+      "  done: false\n",
+      "  episode_len_mean: 112.05460415496911\n",
+      "  episode_reward_max: 46.857142857142875\n",
+      "  episode_reward_mean: 39.03776398262842\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1461\n",
+      "  episodes_total: 7124\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0627730786800385\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009283728742351135\n",
+      "        model: {}\n",
+      "        policy_loss: -0.015454331073366726\n",
+      "        total_loss: 4.347856322924296\n",
+      "        vf_explained_var: 0.9541513323783875\n",
+      "        vf_loss: 4.3619853258132935\n",
+      "    num_steps_sampled: 808960\n",
+      "    num_steps_trained: 808960\n",
+      "  iterations_since_restore: 5\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.604166666666668\n",
+      "    gpu_util_percent0: 0.3541666666666667\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5124999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15895058912495744\n",
+      "    mean_env_wait_ms: 0.6558977259961688\n",
+      "    mean_inference_ms: 4.577574740810779\n",
+      "    mean_raw_obs_processing_ms: 0.4175203436251983\n",
+      "  time_since_restore: 104.25312542915344\n",
+      "  time_this_iter_s: 20.186545610427856\n",
+      "  time_total_s: 104.25312542915344\n",
+      "  timers:\n",
+      "    learn_throughput: 11116.23\n",
+      "    learn_time_ms: 14554.575\n",
+      "    sample_throughput: 26067.237\n",
+      "    sample_time_ms: 6206.718\n",
+      "    update_time_ms: 26.186\n",
+      "  timestamp: 1604231750\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 808960\n",
+      "  training_iteration: 5\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      5 |          104.253 | 808960 |  39.0378 |              46.8571 |              15.7347 |            112.055 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1360.2383485601943\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-56-11\n",
+      "  done: false\n",
+      "  episode_len_mean: 110.9338091400944\n",
+      "  episode_reward_max: 46.85714285714288\n",
+      "  episode_reward_mean: 39.78162771958098\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1563\n",
+      "  episodes_total: 8687\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0209535757700603\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009677846527968844\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013495485666984072\n",
+      "        total_loss: 3.3039915561676025\n",
+      "        vf_explained_var: 0.9663781523704529\n",
+      "        vf_loss: 3.3160619735717773\n",
+      "    num_steps_sampled: 970752\n",
+      "    num_steps_trained: 970752\n",
+      "  iterations_since_restore: 6\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.1\n",
+      "    gpu_util_percent0: 0.3948\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.52\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15752045783718058\n",
+      "    mean_env_wait_ms: 0.6540636684528683\n",
+      "    mean_inference_ms: 4.50681489407211\n",
+      "    mean_raw_obs_processing_ms: 0.4129356375354034\n",
+      "  time_since_restore: 124.68163776397705\n",
+      "  time_this_iter_s: 20.42851233482361\n",
+      "  time_total_s: 124.68163776397705\n",
+      "  timers:\n",
+      "    learn_throughput: 11114.998\n",
+      "    learn_time_ms: 14556.188\n",
+      "    sample_throughput: 26385.183\n",
+      "    sample_time_ms: 6131.926\n",
+      "    update_time_ms: 25.903\n",
+      "  timestamp: 1604231771\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 970752\n",
+      "  training_iteration: 6\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      6 |          124.682 | 970752 |  39.7816 |              46.8571 |              15.7347 |            110.934 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1346.8549304058029\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-56-31\n",
+      "  done: false\n",
+      "  episode_len_mean: 109.96026166764304\n",
+      "  episode_reward_max: 46.85714285714288\n",
+      "  episode_reward_mean: 40.448761402627824\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1555\n",
+      "  episodes_total: 10242\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9796850432952245\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008622131776064634\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012602110786247067\n",
+      "        total_loss: 2.7198241551717124\n",
+      "        vf_explained_var: 0.9723749160766602\n",
+      "        vf_loss: 2.731191635131836\n",
+      "    num_steps_sampled: 1132544\n",
+      "    num_steps_trained: 1132544\n",
+      "  iterations_since_restore: 7\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.520833333333332\n",
+      "    gpu_util_percent0: 0.36541666666666667\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5208333333333335\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15640676678928592\n",
+      "    mean_env_wait_ms: 0.6528313389539068\n",
+      "    mean_inference_ms: 4.45161866768078\n",
+      "    mean_raw_obs_processing_ms: 0.40931756815016995\n",
+      "  time_since_restore: 145.21865725517273\n",
+      "  time_this_iter_s: 20.53701949119568\n",
+      "  time_total_s: 145.21865725517273\n",
+      "  timers:\n",
+      "    learn_throughput: 11103.013\n",
+      "    learn_time_ms: 14571.9\n",
+      "    sample_throughput: 26614.769\n",
+      "    sample_time_ms: 6079.031\n",
+      "    update_time_ms: 25.131\n",
+      "  timestamp: 1604231791\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1132544\n",
+      "  training_iteration: 7\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      7 |          145.219 | 1132544 |  40.4488 |              46.8571 |              15.7347 |             109.96 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1335.6309301139263\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-56-52\n",
+      "  done: false\n",
+      "  episode_len_mean: 109.09913573970513\n",
+      "  episode_reward_max: 46.8571428571429\n",
+      "  episode_reward_mean: 41.02892366911177\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1560\n",
+      "  episodes_total: 11802\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.937453493475914\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007955724994341532\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01194375741033582\n",
+      "        total_loss: 2.2597323656082153\n",
+      "        vf_explained_var: 0.9770286083221436\n",
+      "        vf_loss: 2.2705536683400473\n",
+      "    num_steps_sampled: 1294336\n",
+      "    num_steps_trained: 1294336\n",
+      "  iterations_since_restore: 8\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.436000000000003\n",
+      "    gpu_util_percent0: 0.3632\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1554915965562696\n",
+      "    mean_env_wait_ms: 0.6518904790353526\n",
+      "    mean_inference_ms: 4.406507393012131\n",
+      "    mean_raw_obs_processing_ms: 0.40631830746764874\n",
+      "  time_since_restore: 166.04925441741943\n",
+      "  time_this_iter_s: 20.830597162246704\n",
+      "  time_total_s: 166.04925441741943\n",
+      "  timers:\n",
+      "    learn_throughput: 11082.871\n",
+      "    learn_time_ms: 14598.383\n",
+      "    sample_throughput: 26705.585\n",
+      "    sample_time_ms: 6058.358\n",
+      "    update_time_ms: 26.617\n",
+      "  timestamp: 1604231812\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1294336\n",
+      "  training_iteration: 8\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      8 |          166.049 | 1294336 |  41.0289 |              46.8571 |              15.7347 |            109.099 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1325.960990247562\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-57-13\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.36514584891549\n",
+      "  episode_reward_max: 46.8571428571429\n",
+      "  episode_reward_mean: 41.523987605513405\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1568\n",
+      "  episodes_total: 13370\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8931734959284464\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007821322418749332\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011547995522657098\n",
+      "        total_loss: 1.8110616604487102\n",
+      "        vf_explained_var: 0.9818581938743591\n",
+      "        vf_loss: 1.8214919765790303\n",
+      "    num_steps_sampled: 1456128\n",
+      "    num_steps_trained: 1456128\n",
+      "  iterations_since_restore: 9\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.3625\n",
+      "    gpu_util_percent0: 0.34625\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15472443847934\n",
+      "    mean_env_wait_ms: 0.6512116120864969\n",
+      "    mean_inference_ms: 4.368900491259558\n",
+      "    mean_raw_obs_processing_ms: 0.40380683055783845\n",
+      "  time_since_restore: 186.4968512058258\n",
+      "  time_this_iter_s: 20.447596788406372\n",
+      "  time_total_s: 186.4968512058258\n",
+      "  timers:\n",
+      "    learn_throughput: 11083.852\n",
+      "    learn_time_ms: 14597.092\n",
+      "    sample_throughput: 26872.567\n",
+      "    sample_time_ms: 6020.713\n",
+      "    update_time_ms: 27.945\n",
+      "  timestamp: 1604231833\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1456128\n",
+      "  training_iteration: 9\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      9 |          186.497 | 1456128 |   41.524 |              46.8571 |              15.7347 |            108.365 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1317.3690564013145\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-57-34\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.72182462711524\n",
+      "  episode_reward_max: 46.8571428571429\n",
+      "  episode_reward_mean: 41.96634652790953\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1581\n",
+      "  episodes_total: 14951\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8531899998585383\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007403539726510644\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011224584576363364\n",
+      "        total_loss: 1.351464072863261\n",
+      "        vf_explained_var: 0.9865902066230774\n",
+      "        vf_loss: 1.3616345326105754\n",
+      "    num_steps_sampled: 1617920\n",
+      "    num_steps_trained: 1617920\n",
+      "  iterations_since_restore: 10\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.612\n",
+      "    gpu_util_percent0: 0.37999999999999995\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.572\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15406610086889994\n",
+      "    mean_env_wait_ms: 0.6506878167628722\n",
+      "    mean_inference_ms: 4.336866675743429\n",
+      "    mean_raw_obs_processing_ms: 0.4016399376622533\n",
+      "  time_since_restore: 207.11356925964355\n",
+      "  time_this_iter_s: 20.61671805381775\n",
+      "  time_total_s: 207.11356925964355\n",
+      "  timers:\n",
+      "    learn_throughput: 11075.434\n",
+      "    learn_time_ms: 14608.186\n",
+      "    sample_throughput: 27020.124\n",
+      "    sample_time_ms: 5987.833\n",
+      "    update_time_ms: 29.042\n",
+      "  timestamp: 1604231854\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1617920\n",
+      "  training_iteration: 10\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     10 |          207.114 | 1617920 |  41.9663 |              46.8571 |              15.7347 |            107.722 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1309.7214852504694\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-57-55\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.15910326907971\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 42.36176364315742\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1598\n",
+      "  episodes_total: 16549\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8141860415538152\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006707225965025525\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011368195065491212\n",
+      "        total_loss: 1.1314103106657665\n",
+      "        vf_explained_var: 0.9888380169868469\n",
+      "        vf_loss: 1.1418441633383434\n",
+      "    num_steps_sampled: 1779712\n",
+      "    num_steps_trained: 1779712\n",
+      "  iterations_since_restore: 11\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.291666666666668\n",
+      "    gpu_util_percent0: 0.38208333333333333\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15349391695430212\n",
+      "    mean_env_wait_ms: 0.6503003794675789\n",
+      "    mean_inference_ms: 4.309108284972775\n",
+      "    mean_raw_obs_processing_ms: 0.3997656568156822\n",
+      "  time_since_restore: 227.4893569946289\n",
+      "  time_this_iter_s: 20.37578773498535\n",
+      "  time_total_s: 227.4893569946289\n",
+      "  timers:\n",
+      "    learn_throughput: 11080.893\n",
+      "    learn_time_ms: 14600.989\n",
+      "    sample_throughput: 27896.222\n",
+      "    sample_time_ms: 5799.782\n",
+      "    update_time_ms: 29.058\n",
+      "  timestamp: 1604231875\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1779712\n",
+      "  training_iteration: 11\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     11 |          227.489 | 1779712 |  42.3618 |              46.8571 |              15.7347 |            107.159 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1303.0352388842862\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-58-16\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.65836318545054\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 42.7044331097002\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1596\n",
+      "  episodes_total: 18145\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7753126074870428\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006863077365172406\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012638252902737198\n",
+      "        total_loss: 0.8784026602904002\n",
+      "        vf_explained_var: 0.9913859963417053\n",
+      "        vf_loss: 0.8900559494892756\n",
+      "    num_steps_sampled: 1941504\n",
+      "    num_steps_trained: 1941504\n",
+      "  iterations_since_restore: 12\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.460000000000004\n",
+      "    gpu_util_percent0: 0.35159999999999997\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15300041083206697\n",
+      "    mean_env_wait_ms: 0.6500163020439707\n",
+      "    mean_inference_ms: 4.28507024712119\n",
+      "    mean_raw_obs_processing_ms: 0.39814727184542376\n",
+      "  time_since_restore: 248.12101984024048\n",
+      "  time_this_iter_s: 20.631662845611572\n",
+      "  time_total_s: 248.12101984024048\n",
+      "  timers:\n",
+      "    learn_throughput: 11075.423\n",
+      "    learn_time_ms: 14608.2\n",
+      "    sample_throughput: 28116.695\n",
+      "    sample_time_ms: 5754.304\n",
+      "    update_time_ms: 29.472\n",
+      "  timestamp: 1604231896\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1941504\n",
+      "  training_iteration: 12\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     12 |          248.121 | 1941504 |  42.7044 |              46.8571 |              15.7347 |            106.658 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1297.1705583756345\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-58-37\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.2274062816616\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 43.00436542398114\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1595\n",
+      "  episodes_total: 19740\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7383754253387451\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006651315527657668\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010724902463455996\n",
+      "        total_loss: 0.7107721914847692\n",
+      "        vf_explained_var: 0.9930524230003357\n",
+      "        vf_loss: 0.720536028345426\n",
+      "    num_steps_sampled: 2103296\n",
+      "    num_steps_trained: 2103296\n",
+      "  iterations_since_restore: 13\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.279166666666665\n",
+      "    gpu_util_percent0: 0.3491666666666666\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15256633452651727\n",
+      "    mean_env_wait_ms: 0.649802245161823\n",
+      "    mean_inference_ms: 4.264010160654567\n",
+      "    mean_raw_obs_processing_ms: 0.39671502855945817\n",
+      "  time_since_restore: 268.6334173679352\n",
+      "  time_this_iter_s: 20.512397527694702\n",
+      "  time_total_s: 268.6334173679352\n",
+      "  timers:\n",
+      "    learn_throughput: 11061.736\n",
+      "    learn_time_ms: 14626.276\n",
+      "    sample_throughput: 28152.503\n",
+      "    sample_time_ms: 5746.985\n",
+      "    update_time_ms: 29.255\n",
+      "  timestamp: 1604231917\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2103296\n",
+      "  training_iteration: 13\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     13 |          268.633 | 2103296 |  43.0044 |              46.8571 |              15.7347 |            106.227 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1292.0809922014469\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-58-58\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.85140204445278\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 43.26472333282933\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1586\n",
+      "  episodes_total: 21326\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7001272787650427\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0061410532022515936\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010832997679244727\n",
+      "        total_loss: 0.6119682043790817\n",
+      "        vf_explained_var: 0.9940410256385803\n",
+      "        vf_loss: 0.621923049290975\n",
+      "    num_steps_sampled: 2265088\n",
+      "    num_steps_trained: 2265088\n",
+      "  iterations_since_restore: 14\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.02\n",
+      "    gpu_util_percent0: 0.368\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15218124195639093\n",
+      "    mean_env_wait_ms: 0.6496403257727554\n",
+      "    mean_inference_ms: 4.245421485662705\n",
+      "    mean_raw_obs_processing_ms: 0.3954453584998017\n",
+      "  time_since_restore: 289.35663652420044\n",
+      "  time_this_iter_s: 20.72321915626526\n",
+      "  time_total_s: 289.35663652420044\n",
+      "  timers:\n",
+      "    learn_throughput: 11062.187\n",
+      "    learn_time_ms: 14625.679\n",
+      "    sample_throughput: 28102.045\n",
+      "    sample_time_ms: 5757.304\n",
+      "    update_time_ms: 34.762\n",
+      "  timestamp: 1604231938\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2265088\n",
+      "  training_iteration: 14\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     14 |          289.357 | 2265088 |  43.2647 |              46.8571 |              15.7347 |            105.851 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1287.5182239314745\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-59-18\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.5031847133758\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 43.497414924437614\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1596\n",
+      "  episodes_total: 22922\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6637579500675201\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005367214015374581\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009309418620735718\n",
+      "        total_loss: 0.47650496910015744\n",
+      "        vf_explained_var: 0.9953997731208801\n",
+      "        vf_loss: 0.4850728213787079\n",
+      "    num_steps_sampled: 2426880\n",
+      "    num_steps_trained: 2426880\n",
+      "  iterations_since_restore: 15\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.845833333333335\n",
+      "    gpu_util_percent0: 0.40166666666666667\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15183678083046764\n",
+      "    mean_env_wait_ms: 0.6495392872625815\n",
+      "    mean_inference_ms: 4.2286469238398325\n",
+      "    mean_raw_obs_processing_ms: 0.39431499646823304\n",
+      "  time_since_restore: 309.672310590744\n",
+      "  time_this_iter_s: 20.31567406654358\n",
+      "  time_total_s: 309.672310590744\n",
+      "  timers:\n",
+      "    learn_throughput: 11054.878\n",
+      "    learn_time_ms: 14635.35\n",
+      "    sample_throughput: 28119.821\n",
+      "    sample_time_ms: 5753.664\n",
+      "    update_time_ms: 33.135\n",
+      "  timestamp: 1604231958\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2426880\n",
+      "  training_iteration: 15\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     15 |          309.672 | 2426880 |  43.4974 |              46.8571 |              15.7347 |            105.503 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1283.4805964052287\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-59-39\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.19265905383361\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 43.70432092086426\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1598\n",
+      "  episodes_total: 24520\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6296272675196329\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0055771675348902745\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009812832868192345\n",
+      "        total_loss: 0.3527320822079976\n",
+      "        vf_explained_var: 0.9965917468070984\n",
+      "        vf_loss: 0.3617442895968755\n",
+      "    num_steps_sampled: 2588672\n",
+      "    num_steps_trained: 2588672\n",
+      "  iterations_since_restore: 16\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.162500000000005\n",
+      "    gpu_util_percent0: 0.42416666666666664\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1515236024097143\n",
+      "    mean_env_wait_ms: 0.6494728987544927\n",
+      "    mean_inference_ms: 4.213501380549204\n",
+      "    mean_raw_obs_processing_ms: 0.3932868129355243\n",
+      "  time_since_restore: 330.0610761642456\n",
+      "  time_this_iter_s: 20.388765573501587\n",
+      "  time_total_s: 330.0610761642456\n",
+      "  timers:\n",
+      "    learn_throughput: 11058.672\n",
+      "    learn_time_ms: 14630.328\n",
+      "    sample_throughput: 28143.68\n",
+      "    sample_time_ms: 5748.786\n",
+      "    update_time_ms: 32.726\n",
+      "  timestamp: 1604231979\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2588672\n",
+      "  training_iteration: 16\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     16 |          330.061 | 2588672 |  43.7043 |              46.8571 |              15.7347 |            105.193 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1279.8473329245862\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-00-00\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.910927456382\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 43.890595815920484\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1616\n",
+      "  episodes_total: 26136\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5843918571869532\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005636528095540901\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009946482673209781\n",
+      "        total_loss: 0.2803831646839778\n",
+      "        vf_explained_var: 0.9972963333129883\n",
+      "        vf_loss: 0.28949454923470813\n",
+      "    num_steps_sampled: 2750464\n",
+      "    num_steps_trained: 2750464\n",
+      "  iterations_since_restore: 17\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 24.984\n",
+      "    gpu_util_percent0: 0.36920000000000003\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15123654271663214\n",
+      "    mean_env_wait_ms: 0.6494373187304042\n",
+      "    mean_inference_ms: 4.199623866436883\n",
+      "    mean_raw_obs_processing_ms: 0.3923463354120984\n",
+      "  time_since_restore: 350.56322145462036\n",
+      "  time_this_iter_s: 20.502145290374756\n",
+      "  time_total_s: 350.56322145462036\n",
+      "  timers:\n",
+      "    learn_throughput: 11060.535\n",
+      "    learn_time_ms: 14627.863\n",
+      "    sample_throughput: 28221.412\n",
+      "    sample_time_ms: 5732.952\n",
+      "    update_time_ms: 40.383\n",
+      "  timestamp: 1604232000\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2750464\n",
+      "  training_iteration: 17\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     17 |          350.563 | 2750464 |  43.8906 |              46.8571 |              15.7347 |            104.911 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1276.563322872705\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-00-21\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.65475633036776\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.05809376302477\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1627\n",
+      "  episodes_total: 27763\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5512450536092123\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0052360318368300796\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00858212105807373\n",
+      "        total_loss: 0.2300113836924235\n",
+      "        vf_explained_var: 0.997800350189209\n",
+      "        vf_loss: 0.2378219154973825\n",
+      "    num_steps_sampled: 2912256\n",
+      "    num_steps_trained: 2912256\n",
+      "  iterations_since_restore: 18\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.133333333333336\n",
+      "    gpu_util_percent0: 0.3545833333333333\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15097539441634178\n",
+      "    mean_env_wait_ms: 0.649425583111441\n",
+      "    mean_inference_ms: 4.186930579711764\n",
+      "    mean_raw_obs_processing_ms: 0.3914892612304368\n",
+      "  time_since_restore: 371.091876745224\n",
+      "  time_this_iter_s: 20.528655290603638\n",
+      "  time_total_s: 371.091876745224\n",
+      "  timers:\n",
+      "    learn_throughput: 11066.918\n",
+      "    learn_time_ms: 14619.428\n",
+      "    sample_throughput: 28359.109\n",
+      "    sample_time_ms: 5705.116\n",
+      "    update_time_ms: 40.411\n",
+      "  timestamp: 1604232021\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2912256\n",
+      "  training_iteration: 18\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     18 |          371.092 | 2912256 |  44.0581 |              46.8571 |              15.7347 |            104.655 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1273.6519278628166\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-00-43\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.42508426105607\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.20715088200534\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1610\n",
+      "  episodes_total: 29373\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.525387316942215\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004920089112905164\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008422184953815304\n",
+      "        total_loss: 0.1757721391816934\n",
+      "        vf_explained_var: 0.9983048439025879\n",
+      "        vf_loss: 0.1834729996820291\n",
+      "    num_steps_sampled: 3074048\n",
+      "    num_steps_trained: 3074048\n",
+      "  iterations_since_restore: 19\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.212000000000003\n",
+      "    gpu_util_percent0: 0.336\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15073736984322064\n",
+      "    mean_env_wait_ms: 0.649427266881627\n",
+      "    mean_inference_ms: 4.175450336968136\n",
+      "    mean_raw_obs_processing_ms: 0.3907110068982923\n",
+      "  time_since_restore: 391.7044517993927\n",
+      "  time_this_iter_s: 20.6125750541687\n",
+      "  time_total_s: 391.7044517993927\n",
+      "  timers:\n",
+      "    learn_throughput: 11052.788\n",
+      "    learn_time_ms: 14638.117\n",
+      "    sample_throughput: 28425.972\n",
+      "    sample_time_ms: 5691.696\n",
+      "    update_time_ms: 45.734\n",
+      "  timestamp: 1604232043\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3074048\n",
+      "  training_iteration: 19\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     19 |          391.704 | 3074048 |  44.2072 |              46.8571 |              15.7347 |            104.425 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1271.0431296475913\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-01-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.21682273167582\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.34093230446844\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1597\n",
+      "  episodes_total: 30970\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.49314410984516144\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005798064754344523\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009414856787770987\n",
+      "        total_loss: 0.13895704535146555\n",
+      "        vf_explained_var: 0.9986486434936523\n",
+      "        vf_loss: 0.1480386642118295\n",
+      "    num_steps_sampled: 3235840\n",
+      "    num_steps_trained: 3235840\n",
+      "  iterations_since_restore: 20\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.116666666666664\n",
+      "    gpu_util_percent0: 0.35833333333333334\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15052181952677304\n",
+      "    mean_env_wait_ms: 0.649438443211961\n",
+      "    mean_inference_ms: 4.164995515225137\n",
+      "    mean_raw_obs_processing_ms: 0.3900008446460127\n",
+      "  time_since_restore: 412.16121435165405\n",
+      "  time_this_iter_s: 20.456762552261353\n",
+      "  time_total_s: 412.16121435165405\n",
+      "  timers:\n",
+      "    learn_throughput: 11057.384\n",
+      "    learn_time_ms: 14632.032\n",
+      "    sample_throughput: 28470.363\n",
+      "    sample_time_ms: 5682.822\n",
+      "    update_time_ms: 44.871\n",
+      "  timestamp: 1604232064\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3235840\n",
+      "  training_iteration: 20\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     20 |          412.161 | 3235840 |  44.3409 |              46.8571 |              15.7347 |            104.217 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1268.6647814593964\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-01-24\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.02566464051084\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.4626028897468\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1604\n",
+      "  episodes_total: 32574\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.46102594832579297\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005838079610839486\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00808940147787022\n",
+      "        total_loss: 0.11789208464324474\n",
+      "        vf_explained_var: 0.9988470077514648\n",
+      "        vf_loss: 0.12562819197773933\n",
+      "    num_steps_sampled: 3397632\n",
+      "    num_steps_trained: 3397632\n",
+      "  iterations_since_restore: 21\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 24.463999999999995\n",
+      "    gpu_util_percent0: 0.3728\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15032141681707573\n",
+      "    mean_env_wait_ms: 0.6494592765291238\n",
+      "    mean_inference_ms: 4.155300920389142\n",
+      "    mean_raw_obs_processing_ms: 0.3893410843403339\n",
+      "  time_since_restore: 432.50473642349243\n",
+      "  time_this_iter_s: 20.34352207183838\n",
+      "  time_total_s: 432.50473642349243\n",
+      "  timers:\n",
+      "    learn_throughput: 11057.81\n",
+      "    learn_time_ms: 14631.468\n",
+      "    sample_throughput: 28523.95\n",
+      "    sample_time_ms: 5672.146\n",
+      "    update_time_ms: 46.215\n",
+      "  timestamp: 1604232084\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3397632\n",
+      "  training_iteration: 21\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     21 |          432.505 | 3397632 |  44.4626 |              46.8571 |              15.7347 |            104.026 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1266.4863559173157\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-01-46\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.8470199450196\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.57447720270771\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1620\n",
+      "  episodes_total: 34194\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.43294235815604526\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005431869920964043\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009014388362023359\n",
+      "        total_loss: 0.08529840596020222\n",
+      "        vf_explained_var: 0.9991478323936462\n",
+      "        vf_loss: 0.09398608033855756\n",
+      "    num_steps_sampled: 3559424\n",
+      "    num_steps_trained: 3559424\n",
+      "  iterations_since_restore: 22\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 24.592\n",
+      "    gpu_util_percent0: 0.35\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.572\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1501333983360748\n",
+      "    mean_env_wait_ms: 0.6494934869624449\n",
+      "    mean_inference_ms: 4.146224608744544\n",
+      "    mean_raw_obs_processing_ms: 0.3887246826845676\n",
+      "  time_since_restore: 453.3322539329529\n",
+      "  time_this_iter_s: 20.82751750946045\n",
+      "  time_total_s: 453.3322539329529\n",
+      "  timers:\n",
+      "    learn_throughput: 11039.758\n",
+      "    learn_time_ms: 14655.394\n",
+      "    sample_throughput: 28584.579\n",
+      "    sample_time_ms: 5660.115\n",
+      "    update_time_ms: 47.568\n",
+      "  timestamp: 1604232106\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3559424\n",
+      "  training_iteration: 22\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     22 |          453.332 | 3559424 |  44.5745 |              46.8571 |              15.7347 |            103.847 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1264.481222756231\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-02-07\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.68064083956682\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.67719666296796\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1634\n",
+      "  episodes_total: 35828\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4028966749707858\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0056398319235692424\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010392234045866644\n",
+      "        total_loss: 0.08119491549829642\n",
+      "        vf_explained_var: 0.9991843700408936\n",
+      "        vf_loss: 0.0912246151516835\n",
+      "    num_steps_sampled: 3721216\n",
+      "    num_steps_trained: 3721216\n",
+      "  iterations_since_restore: 23\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.024999999999995\n",
+      "    gpu_util_percent0: 0.36624999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14995601669875397\n",
+      "    mean_env_wait_ms: 0.6495352227224097\n",
+      "    mean_inference_ms: 4.137711997351269\n",
+      "    mean_raw_obs_processing_ms: 0.38814230126504\n",
+      "  time_since_restore: 473.85256695747375\n",
+      "  time_this_iter_s: 20.520313024520874\n",
+      "  time_total_s: 473.85256695747375\n",
+      "  timers:\n",
+      "    learn_throughput: 11045.845\n",
+      "    learn_time_ms: 14647.318\n",
+      "    sample_throughput: 28580.616\n",
+      "    sample_time_ms: 5660.9\n",
+      "    update_time_ms: 49.009\n",
+      "  timestamp: 1604232127\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3721216\n",
+      "  training_iteration: 23\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     23 |          473.853 | 3721216 |  44.6772 |              46.8571 |              15.7347 |            103.681 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1262.6683067707777\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-02-28\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.53063895715354\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.77006117651676\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1608\n",
+      "  episodes_total: 37436\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3745071937640508\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005321652473260959\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007234078652497071\n",
+      "        total_loss: 0.05749547202140093\n",
+      "        vf_explained_var: 0.9994208812713623\n",
+      "        vf_loss: 0.06438463802138965\n",
+      "    num_steps_sampled: 3883008\n",
+      "    num_steps_trained: 3883008\n",
+      "  iterations_since_restore: 24\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 24.864\n",
+      "    gpu_util_percent0: 0.39199999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14979390065628823\n",
+      "    mean_env_wait_ms: 0.649588420666768\n",
+      "    mean_inference_ms: 4.1299192587977664\n",
+      "    mean_raw_obs_processing_ms: 0.38760946260698614\n",
+      "  time_since_restore: 494.24922704696655\n",
+      "  time_this_iter_s: 20.396660089492798\n",
+      "  time_total_s: 494.24922704696655\n",
+      "  timers:\n",
+      "    learn_throughput: 11054.341\n",
+      "    learn_time_ms: 14636.061\n",
+      "    sample_throughput: 28685.318\n",
+      "    sample_time_ms: 5640.237\n",
+      "    update_time_ms: 42.265\n",
+      "  timestamp: 1604232148\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3883008\n",
+      "  training_iteration: 24\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "2020-11-01 12:02:29,652\tWARNING util.py:136 -- The `process_trial` operation took 0.5228226184844971 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     24 |          494.249 | 3883008 |  44.7701 |              46.8571 |              15.7347 |            103.531 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1261.0109236371095\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-02-50\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.39151595880936\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.854644767892296\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1602\n",
+      "  episodes_total: 39038\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3481475959221522\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004828551318496466\n",
+      "        model: {}\n",
+      "        policy_loss: -0.0070124387663478656\n",
+      "        total_loss: 0.06740419659763575\n",
+      "        vf_explained_var: 0.9993410706520081\n",
+      "        vf_loss: 0.07410785431663196\n",
+      "    num_steps_sampled: 4044800\n",
+      "    num_steps_trained: 4044800\n",
+      "  iterations_since_restore: 25\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 24.944000000000003\n",
+      "    gpu_util_percent0: 0.3452\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14964195104865902\n",
+      "    mean_env_wait_ms: 0.6496402901027807\n",
+      "    mean_inference_ms: 4.122656867380491\n",
+      "    mean_raw_obs_processing_ms: 0.3871109943323948\n",
+      "  time_since_restore: 514.7466752529144\n",
+      "  time_this_iter_s: 20.497448205947876\n",
+      "  time_total_s: 514.7466752529144\n",
+      "  timers:\n",
+      "    learn_throughput: 11049.552\n",
+      "    learn_time_ms: 14642.403\n",
+      "    sample_throughput: 28661.043\n",
+      "    sample_time_ms: 5645.014\n",
+      "    update_time_ms: 44.89\n",
+      "  timestamp: 1604232170\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4044800\n",
+      "  training_iteration: 25\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "2020-11-01 12:02:51,023\tWARNING util.py:136 -- The `process_trial` operation took 0.5479519367218018 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     25 |          514.747 | 4044800 |  44.8546 |              46.8571 |              15.7347 |            103.392 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1259.4838947990543\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-03-11\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.26077543790592\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.933213572774115\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1610\n",
+      "  episodes_total: 40648\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.32285959521929425\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005153231516790886\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006437089536727096\n",
+      "        total_loss: 0.04760071821510792\n",
+      "        vf_explained_var: 0.9995192885398865\n",
+      "        vf_loss: 0.05394157860428095\n",
+      "    num_steps_sampled: 4206592\n",
+      "    num_steps_trained: 4206592\n",
+      "  iterations_since_restore: 26\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.183333333333334\n",
+      "    gpu_util_percent0: 0.30583333333333335\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14949842842548025\n",
+      "    mean_env_wait_ms: 0.6496982049535759\n",
+      "    mean_inference_ms: 4.115822249881849\n",
+      "    mean_raw_obs_processing_ms: 0.3866408622949027\n",
+      "  time_since_restore: 535.2055022716522\n",
+      "  time_this_iter_s: 20.458827018737793\n",
+      "  time_total_s: 535.2055022716522\n",
+      "  timers:\n",
+      "    learn_throughput: 11044.133\n",
+      "    learn_time_ms: 14649.588\n",
+      "    sample_throughput: 28693.76\n",
+      "    sample_time_ms: 5638.578\n",
+      "    update_time_ms: 44.672\n",
+      "  timestamp: 1604232191\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4206592\n",
+      "  training_iteration: 26\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "2020-11-01 12:03:12,271\tWARNING util.py:136 -- The `process_trial` operation took 0.5345759391784668 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     26 |          535.206 | 4206592 |  44.9332 |              46.8571 |              15.7347 |            103.261 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1258.0401912516568\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-03-32\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.137958758986\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 45.007320067641125\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1640\n",
+      "  episodes_total: 42288\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.2982073624928792\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004597992869094014\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007848733845700432\n",
+      "        total_loss: 0.03614849457517266\n",
+      "        vf_explained_var: 0.9996141791343689\n",
+      "        vf_loss: 0.043916432497402035\n",
+      "    num_steps_sampled: 4368384\n",
+      "    num_steps_trained: 4368384\n",
+      "  iterations_since_restore: 27\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 24.736\n",
+      "    gpu_util_percent0: 0.4024000000000001\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14936013846680316\n",
+      "    mean_env_wait_ms: 0.6497567301190108\n",
+      "    mean_inference_ms: 4.109265721932972\n",
+      "    mean_raw_obs_processing_ms: 0.38618524014647837\n",
+      "  time_since_restore: 555.6780240535736\n",
+      "  time_this_iter_s: 20.472521781921387\n",
+      "  time_total_s: 555.6780240535736\n",
+      "  timers:\n",
+      "    learn_throughput: 11047.092\n",
+      "    learn_time_ms: 14645.664\n",
+      "    sample_throughput: 28676.643\n",
+      "    sample_time_ms: 5641.943\n",
+      "    update_time_ms: 36.998\n",
+      "  timestamp: 1604232212\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4368384\n",
+      "  training_iteration: 27\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "2020-11-01 12:03:33,510\tWARNING util.py:136 -- The `process_trial` operation took 0.567908525466919 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     27 |          555.678 | 4368384 |  45.0073 |              46.8571 |              15.7347 |            103.138 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1256.7130644903914\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-03-53\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.02484797412713\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 45.07519232440738\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1619\n",
+      "  episodes_total: 43907\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.27154965202013653\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004386523951931546\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006109707096281151\n",
+      "        total_loss: 0.029498847822348278\n",
+      "        vf_explained_var: 0.9996840357780457\n",
+      "        vf_loss: 0.03563466699173053\n",
+      "    num_steps_sampled: 4530176\n",
+      "    num_steps_trained: 4530176\n",
+      "  iterations_since_restore: 28\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.215999999999998\n",
+      "    gpu_util_percent0: 0.35719999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14923164336873793\n",
+      "    mean_env_wait_ms: 0.6498215067723312\n",
+      "    mean_inference_ms: 4.103192802934885\n",
+      "    mean_raw_obs_processing_ms: 0.3857616555198185\n",
+      "  time_since_restore: 576.108469247818\n",
+      "  time_this_iter_s: 20.430445194244385\n",
+      "  time_total_s: 576.108469247818\n",
+      "  timers:\n",
+      "    learn_throughput: 11053.539\n",
+      "    learn_time_ms: 14637.122\n",
+      "    sample_throughput: 28704.812\n",
+      "    sample_time_ms: 5636.407\n",
+      "    update_time_ms: 34.761\n",
+      "  timestamp: 1604232233\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4530176\n",
+      "  training_iteration: 28\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "2020-11-01 12:03:54,833\tWARNING util.py:136 -- The `process_trial` operation took 0.5623390674591064 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     28 |          576.108 | 4530176 |  45.0752 |              46.8571 |              15.7347 |            103.025 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1255.498240520806\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-04-15\n",
+      "  done: false\n",
+      "  episode_len_mean: 102.92078315900501\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 45.13765263071036\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1601\n",
+      "  episodes_total: 45508\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.012500000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.25443976496656734\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004423999693244696\n",
+      "        model: {}\n",
+      "        policy_loss: -0.005417319412420814\n",
+      "        total_loss: 0.024296301572273176\n",
+      "        vf_explained_var: 0.9997418522834778\n",
+      "        vf_loss: 0.02978554057578246\n",
+      "    num_steps_sampled: 4691968\n",
+      "    num_steps_trained: 4691968\n",
+      "  iterations_since_restore: 29\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.112\n",
+      "    gpu_util_percent0: 0.33520000000000005\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1491126560484596\n",
+      "    mean_env_wait_ms: 0.6498944683718904\n",
+      "    mean_inference_ms: 4.097513752031446\n",
+      "    mean_raw_obs_processing_ms: 0.38536978766235913\n",
+      "  time_since_restore: 596.6098058223724\n",
+      "  time_this_iter_s: 20.501336574554443\n",
+      "  time_total_s: 596.6098058223724\n",
+      "  timers:\n",
+      "    learn_throughput: 11066.443\n",
+      "    learn_time_ms: 14620.054\n",
+      "    sample_throughput: 28671.129\n",
+      "    sample_time_ms: 5643.029\n",
+      "    update_time_ms: 27.975\n",
+      "  timestamp: 1604232255\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4691968\n",
+      "  training_iteration: 29\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "2020-11-01 12:04:16,277\tWARNING util.py:136 -- The `process_trial` operation took 0.5899343490600586 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     29 |           596.61 | 4691968 |  45.1377 |              46.8571 |              15.7347 |            102.921 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1254.3588893845729\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-04-36\n",
+      "  done: true\n",
+      "  episode_len_mean: 102.82308492348184\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 45.196090857543105\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1605\n",
+      "  episodes_total: 47113\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.006250000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.23119975750645003\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004294859090199073\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006582304151379503\n",
+      "        total_loss: 0.016346099126773577\n",
+      "        vf_explained_var: 0.9998031258583069\n",
+      "        vf_loss: 0.02301716012880206\n",
+      "    num_steps_sampled: 4853760\n",
+      "    num_steps_trained: 4853760\n",
+      "  iterations_since_restore: 30\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.433333333333334\n",
+      "    gpu_util_percent0: 0.3558333333333333\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1489996674476156\n",
+      "    mean_env_wait_ms: 0.6499679628512286\n",
+      "    mean_inference_ms: 4.0921381946019215\n",
+      "    mean_raw_obs_processing_ms: 0.38499719572571234\n",
+      "  time_since_restore: 616.9446895122528\n",
+      "  time_this_iter_s: 20.33488368988037\n",
+      "  time_total_s: 616.9446895122528\n",
+      "  timers:\n",
+      "    learn_throughput: 11076.785\n",
+      "    learn_time_ms: 14606.404\n",
+      "    sample_throughput: 28687.763\n",
+      "    sample_time_ms: 5639.757\n",
+      "    update_time_ms: 27.238\n",
+      "  timestamp: 1604232276\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4853760\n",
+      "  training_iteration: 30\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "2020-11-01 12:04:37,528\tWARNING util.py:136 -- The `process_trial` operation took 0.6967248916625977 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | TERMINATED |       |     30 |          616.945 | 4853760 |  45.1961 |              46.8571 |              15.7347 |            102.823 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.2/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | TERMINATED |       |     30 |          616.945 | 4853760 |  45.1961 |              46.8571 |              15.7347 |            102.823 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 20006\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201101_115353-kqo0l7if/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201101_115353-kqo0l7if/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min 1222\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step 7\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime 645\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp 1604232278\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max 1737\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean 1254.35889\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max 46.85714\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min 15.73469\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean 45.19609\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total 47113\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration 30\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step ‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mmisty-sweep-1\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/kqo0l7if\u001b[0m\n",
+      "2020-11-01 12:04:48,722 - wandb.wandb_agent - INFO - Cleaning up finished run: kqo0l7if\n",
+      "2020-11-01 12:04:49,030 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-01 12:04:49,030 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/la/la12.txt\n",
+      "2020-11-01 12:04:49,033 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/la/la12.txt\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "2020-11-01 12:04:54,049 - wandb.wandb_agent - INFO - Running runs: ['tkx2xsoj']\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mdecent-sweep-2\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/9xhkl8my\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/tkx2xsoj\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201101_120450-tkx2xsoj\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
+      "\n",
+      "2020-11-01 12:04:54,756\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "\n",
+      "\n",
+      "\u001b[2m\u001b[36m(pid=52265)\u001b[0m 2020-11-01 12:04:57,569\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=52167)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52167)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52239)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52239)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52176)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52176)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52249)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52249)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52260)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52260)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52258)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52258)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52169)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52169)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52253)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52253)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52221)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52221)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52215)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52215)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52275)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52275)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52158)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52158)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52224)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52224)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52256)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52256)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52219)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52219)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52231)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52231)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52262)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52262)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52209)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52209)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52236)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52236)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52151)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52151)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52269)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52269)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52220)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52220)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52161)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52161)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52156)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52156)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52229)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52229)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52153)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52153)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52279)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52279)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52267)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52267)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52243)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52243)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52172)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52172)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52235)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52235)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52154)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52154)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52233)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52233)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52164)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52164)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52250)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52250)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52202)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52202)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52166)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52166)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52242)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52242)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52150)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52150)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52225)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52225)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52148)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52148)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52162)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52162)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52163)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52163)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52149)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52149)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52177)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52177)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52261)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52261)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52155)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52155)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52157)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52157)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52270)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52270)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52234)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52234)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52173)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52173)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52181)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52181)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52230)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52230)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52168)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52168)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52218)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52218)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52223)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52223)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52171)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52171)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52180)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52180)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52228)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52228)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52251)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52251)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52226)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52226)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52216)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52216)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52184)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52184)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52237)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52237)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52227)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52227)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52206)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52206)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52259)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52259)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52152)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52152)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52273)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52273)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52212)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52212)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52204)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52204)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52247)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52247)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52165)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52165)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52222)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52222)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52257)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52257)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52147)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52147)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52277)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52277)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52255)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52255)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52160)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52160)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1270.6712550607288\n",
+      "    time_step_min: 1054\n",
+      "  date: 2020-11-01_12-05-25\n",
+      "  done: false\n",
+      "  episode_len_mean: 116.74350904799371\n",
+      "  episode_reward_max: 41.65306122448979\n",
+      "  episode_reward_mean: 30.6028275983879\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1271\n",
+      "  episodes_total: 1271\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1384523808956146\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006007326611628135\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006815222654646884\n",
+      "        total_loss: 36.897240002950035\n",
+      "        vf_explained_var: 0.7482123374938965\n",
+      "        vf_loss: 36.903422355651855\n",
+      "    num_steps_sampled: 161792\n",
+      "    num_steps_trained: 161792\n",
+      "  iterations_since_restore: 1\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 32.62222222222222\n",
+      "    gpu_util_percent0: 0.40222222222222226\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.4333333333333336\n",
+      "    vram_util_percent0: 0.08172381958869332\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16969461340934525\n",
+      "    mean_env_wait_ms: 0.6709388448442125\n",
+      "    mean_inference_ms: 5.213710332296094\n",
+      "    mean_raw_obs_processing_ms: 0.4500044725167772\n",
+      "  time_since_restore: 22.275667190551758\n",
+      "  time_this_iter_s: 22.275667190551758\n",
+      "  time_total_s: 22.275667190551758\n",
+      "  timers:\n",
+      "    learn_throughput: 11194.703\n",
+      "    learn_time_ms: 14452.55\n",
+      "    sample_throughput: 20900.055\n",
+      "    sample_time_ms: 7741.224\n",
+      "    update_time_ms: 42.347\n",
+      "  timestamp: 1604232325\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 161792\n",
+      "  training_iteration: 1\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.3/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      1 |          22.2757 | 161792 |  30.6028 |              41.6531 |              10.2755 |            116.744 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1252.1281568036186\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-05-46\n",
+      "  done: false\n",
+      "  episode_len_mean: 116.04722945332837\n",
+      "  episode_reward_max: 42.41836734693876\n",
+      "  episode_reward_mean: 31.48901419995294\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1418\n",
+      "  episodes_total: 2689\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1159119109312694\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.010711442679166794\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012819082303982062\n",
+      "        total_loss: 9.95718256632487\n",
+      "        vf_explained_var: 0.8801858425140381\n",
+      "        vf_loss: 9.968417485555014\n",
+      "    num_steps_sampled: 323584\n",
+      "    num_steps_trained: 323584\n",
+      "  iterations_since_restore: 2\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 29.4\n",
+      "    gpu_util_percent0: 0.3830769230769231\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5076923076923077\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1663996838490878\n",
+      "    mean_env_wait_ms: 0.6661199624654368\n",
+      "    mean_inference_ms: 5.065247663215141\n",
+      "    mean_raw_obs_processing_ms: 0.443431096131331\n",
+      "  time_since_restore: 43.45249390602112\n",
+      "  time_this_iter_s: 21.17682671546936\n",
+      "  time_total_s: 43.45249390602112\n",
+      "  timers:\n",
+      "    learn_throughput: 11200.574\n",
+      "    learn_time_ms: 14444.974\n",
+      "    sample_throughput: 22507.211\n",
+      "    sample_time_ms: 7188.452\n",
+      "    update_time_ms: 40.119\n",
+      "  timestamp: 1604232346\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 323584\n",
+      "  training_iteration: 2\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      2 |          43.4525 | 323584 |   31.489 |              42.4184 |              10.2755 |            116.047 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1229.5523227383862\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-06-06\n",
+      "  done: false\n",
+      "  episode_len_mean: 114.94789142026175\n",
+      "  episode_reward_max: 42.41836734693877\n",
+      "  episode_reward_mean: 32.67046455033783\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1437\n",
+      "  episodes_total: 4126\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0916709005832672\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.011045165204753479\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012844632374860035\n",
+      "        total_loss: 6.921001553535461\n",
+      "        vf_explained_var: 0.9159042239189148\n",
+      "        vf_loss: 6.9321829080581665\n",
+      "    num_steps_sampled: 485376\n",
+      "    num_steps_trained: 485376\n",
+      "  iterations_since_restore: 3\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 28.06\n",
+      "    gpu_util_percent0: 0.4312\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.516\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16376589972908362\n",
+      "    mean_env_wait_ms: 0.6617033666285996\n",
+      "    mean_inference_ms: 4.920294910569432\n",
+      "    mean_raw_obs_processing_ms: 0.43664206722952675\n",
+      "  time_since_restore: 63.84919023513794\n",
+      "  time_this_iter_s: 20.39669632911682\n",
+      "  time_total_s: 63.84919023513794\n",
+      "  timers:\n",
+      "    learn_throughput: 11232.084\n",
+      "    learn_time_ms: 14404.451\n",
+      "    sample_throughput: 23846.064\n",
+      "    sample_time_ms: 6784.851\n",
+      "    update_time_ms: 37.748\n",
+      "  timestamp: 1604232366\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 485376\n",
+      "  training_iteration: 3\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      3 |          63.8492 | 485376 |  32.6705 |              42.4184 |              10.2755 |            114.948 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1208.264137437366\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-06-27\n",
+      "  done: false\n",
+      "  episode_len_mean: 113.67087482219061\n",
+      "  episode_reward_max: 42.41836734693879\n",
+      "  episode_reward_mean: 33.766906406944\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1498\n",
+      "  episodes_total: 5624\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.064699391523997\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.010414493580659231\n",
+      "        model: {}\n",
+      "        policy_loss: -0.015563213809703788\n",
+      "        total_loss: 5.088392059008281\n",
+      "        vf_explained_var: 0.9388461709022522\n",
+      "        vf_loss: 5.102404753367106\n",
+      "    num_steps_sampled: 647168\n",
+      "    num_steps_trained: 647168\n",
+      "  iterations_since_restore: 4\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.656000000000002\n",
+      "    gpu_util_percent0: 0.4268\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5120000000000005\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16163926361569136\n",
+      "    mean_env_wait_ms: 0.6582592695889212\n",
+      "    mean_inference_ms: 4.803322913432019\n",
+      "    mean_raw_obs_processing_ms: 0.43060689585891204\n",
+      "  time_since_restore: 84.06805443763733\n",
+      "  time_this_iter_s: 20.21886420249939\n",
+      "  time_total_s: 84.06805443763733\n",
+      "  timers:\n",
+      "    learn_throughput: 11266.122\n",
+      "    learn_time_ms: 14360.931\n",
+      "    sample_throughput: 24659.344\n",
+      "    sample_time_ms: 6561.083\n",
+      "    update_time_ms: 34.947\n",
+      "  timestamp: 1604232387\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 647168\n",
+      "  training_iteration: 4\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      4 |          84.0681 | 647168 |  33.7669 |              42.4184 |              10.2755 |            113.671 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1189.914229193161\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-06-47\n",
+      "  done: false\n",
+      "  episode_len_mean: 112.46028398706594\n",
+      "  episode_reward_max: 42.4183673469388\n",
+      "  episode_reward_mean: 34.71768564026201\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1489\n",
+      "  episodes_total: 7113\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0440024832884471\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009285129917164644\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013422702313012755\n",
+      "        total_loss: 3.5668797492980957\n",
+      "        vf_explained_var: 0.956657886505127\n",
+      "        vf_loss: 3.5789673924446106\n",
+      "    num_steps_sampled: 808960\n",
+      "    num_steps_trained: 808960\n",
+      "  iterations_since_restore: 5\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.128\n",
+      "    gpu_util_percent0: 0.3836\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.508\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15996949149852113\n",
+      "    mean_env_wait_ms: 0.6557683164407656\n",
+      "    mean_inference_ms: 4.714004318455946\n",
+      "    mean_raw_obs_processing_ms: 0.42569876525023526\n",
+      "  time_since_restore: 104.25618076324463\n",
+      "  time_this_iter_s: 20.1881263256073\n",
+      "  time_total_s: 104.25618076324463\n",
+      "  timers:\n",
+      "    learn_throughput: 11286.122\n",
+      "    learn_time_ms: 14335.482\n",
+      "    sample_throughput: 25221.502\n",
+      "    sample_time_ms: 6414.844\n",
+      "    update_time_ms: 36.706\n",
+      "  timestamp: 1604232407\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 808960\n",
+      "  training_iteration: 5\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      5 |          104.256 | 808960 |  34.7177 |              42.4184 |              10.2755 |             112.46 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1173.5402272200324\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-07-08\n",
+      "  done: false\n",
+      "  episode_len_mean: 111.30085430616485\n",
+      "  episode_reward_max: 42.4183673469388\n",
+      "  episode_reward_mean: 35.54994369024451\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1549\n",
+      "  episodes_total: 8662\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.00481882194678\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00909763171027104\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013866825815057382\n",
+      "        total_loss: 2.7730772693951926\n",
+      "        vf_explained_var: 0.9670748114585876\n",
+      "        vf_loss: 2.785626987616221\n",
+      "    num_steps_sampled: 970752\n",
+      "    num_steps_trained: 970752\n",
+      "  iterations_since_restore: 6\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.65416666666667\n",
+      "    gpu_util_percent0: 0.4445833333333334\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5083333333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1585845452097359\n",
+      "    mean_env_wait_ms: 0.6539711743603752\n",
+      "    mean_inference_ms: 4.639796008274598\n",
+      "    mean_raw_obs_processing_ms: 0.4215553460221708\n",
+      "  time_since_restore: 124.31111264228821\n",
+      "  time_this_iter_s: 20.05493187904358\n",
+      "  time_total_s: 124.31111264228821\n",
+      "  timers:\n",
+      "    learn_throughput: 11300.348\n",
+      "    learn_time_ms: 14317.435\n",
+      "    sample_throughput: 25694.821\n",
+      "    sample_time_ms: 6296.677\n",
+      "    update_time_ms: 36.949\n",
+      "  timestamp: 1604232428\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 970752\n",
+      "  training_iteration: 6\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      6 |          124.311 | 970752 |  35.5499 |              42.4184 |              10.2755 |            111.301 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1160.6071287908626\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-07-28\n",
+      "  done: false\n",
+      "  episode_len_mean: 110.30445447409733\n",
+      "  episode_reward_max: 42.41836734693881\n",
+      "  episode_reward_mean: 36.22964990548809\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1530\n",
+      "  episodes_total: 10192\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9723203877607981\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008056929800659418\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013902826050374037\n",
+      "        total_loss: 2.177985966205597\n",
+      "        vf_explained_var: 0.9740824103355408\n",
+      "        vf_loss: 2.1907635927200317\n",
+      "    num_steps_sampled: 1132544\n",
+      "    num_steps_trained: 1132544\n",
+      "  iterations_since_restore: 7\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.691999999999997\n",
+      "    gpu_util_percent0: 0.4035999999999999\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.516\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15747431107692764\n",
+      "    mean_env_wait_ms: 0.652680726552872\n",
+      "    mean_inference_ms: 4.58049716107533\n",
+      "    mean_raw_obs_processing_ms: 0.4181133612914104\n",
+      "  time_since_restore: 144.8035752773285\n",
+      "  time_this_iter_s: 20.492462635040283\n",
+      "  time_total_s: 144.8035752773285\n",
+      "  timers:\n",
+      "    learn_throughput: 11282.551\n",
+      "    learn_time_ms: 14340.019\n",
+      "    sample_throughput: 25937.899\n",
+      "    sample_time_ms: 6237.668\n",
+      "    update_time_ms: 37.177\n",
+      "  timestamp: 1604232448\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1132544\n",
+      "  training_iteration: 7\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      7 |          144.804 | 1132544 |  36.2296 |              42.4184 |              10.2755 |            110.304 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1148.888252883383\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-07-49\n",
+      "  done: false\n",
+      "  episode_len_mean: 109.45600885784856\n",
+      "  episode_reward_max: 42.41836734693881\n",
+      "  episode_reward_mean: 36.816230060715206\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1549\n",
+      "  episodes_total: 11741\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9466134955485662\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007931554379562536\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013606403217030069\n",
+      "        total_loss: 1.6076118151346843\n",
+      "        vf_explained_var: 0.9807720184326172\n",
+      "        vf_loss: 1.6201052069664001\n",
+      "    num_steps_sampled: 1294336\n",
+      "    num_steps_trained: 1294336\n",
+      "  iterations_since_restore: 8\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.764000000000006\n",
+      "    gpu_util_percent0: 0.38\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15654498685345614\n",
+      "    mean_env_wait_ms: 0.6516967139634099\n",
+      "    mean_inference_ms: 4.530832158888852\n",
+      "    mean_raw_obs_processing_ms: 0.4150856418377815\n",
+      "  time_since_restore: 165.37314867973328\n",
+      "  time_this_iter_s: 20.569573402404785\n",
+      "  time_total_s: 165.37314867973328\n",
+      "  timers:\n",
+      "    learn_throughput: 11279.608\n",
+      "    learn_time_ms: 14343.761\n",
+      "    sample_throughput: 26039.205\n",
+      "    sample_time_ms: 6213.4\n",
+      "    update_time_ms: 37.773\n",
+      "  timestamp: 1604232469\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1294336\n",
+      "  training_iteration: 8\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      8 |          165.373 | 1294336 |  36.8162 |              42.4184 |              10.2755 |            109.456 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1139.0165774998115\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-08-10\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.7133839332682\n",
+      "  episode_reward_max: 42.41836734693881\n",
+      "  episode_reward_mean: 37.319474329147006\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1566\n",
+      "  episodes_total: 13307\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9164896359046301\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007841601696175834\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011578070591591919\n",
+      "        total_loss: 1.2525162895520527\n",
+      "        vf_explained_var: 0.985228955745697\n",
+      "        vf_loss: 1.262984275817871\n",
+      "    num_steps_sampled: 1456128\n",
+      "    num_steps_trained: 1456128\n",
+      "  iterations_since_restore: 9\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.692000000000004\n",
+      "    gpu_util_percent0: 0.4428\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15575594110735325\n",
+      "    mean_env_wait_ms: 0.6509075806283173\n",
+      "    mean_inference_ms: 4.488645311807507\n",
+      "    mean_raw_obs_processing_ms: 0.41243497179424105\n",
+      "  time_since_restore: 185.73600935935974\n",
+      "  time_this_iter_s: 20.362860679626465\n",
+      "  time_total_s: 185.73600935935974\n",
+      "  timers:\n",
+      "    learn_throughput: 11283.252\n",
+      "    learn_time_ms: 14339.128\n",
+      "    sample_throughput: 26176.544\n",
+      "    sample_time_ms: 6180.801\n",
+      "    update_time_ms: 37.693\n",
+      "  timestamp: 1604232490\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1456128\n",
+      "  training_iteration: 9\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      9 |          185.736 | 1456128 |  37.3195 |              42.4184 |              10.2755 |            108.713 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1130.5417816982022\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-08-30\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.05662658695506\n",
+      "  episode_reward_max: 42.41836734693881\n",
+      "  episode_reward_mean: 37.75363452292987\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1580\n",
+      "  episodes_total: 14887\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.879222497344017\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007466738965983192\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010042240721910881\n",
+      "        total_loss: 1.0435242255528767\n",
+      "        vf_explained_var: 0.9878211617469788\n",
+      "        vf_loss: 1.0525127152601879\n",
+      "    num_steps_sampled: 1617920\n",
+      "    num_steps_trained: 1617920\n",
+      "  iterations_since_restore: 10\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.332000000000004\n",
+      "    gpu_util_percent0: 0.3956\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15508348116310283\n",
+      "    mean_env_wait_ms: 0.6503758051109494\n",
+      "    mean_inference_ms: 4.452355943495541\n",
+      "    mean_raw_obs_processing_ms: 0.41015056238268827\n",
+      "  time_since_restore: 206.0984218120575\n",
+      "  time_this_iter_s: 20.362412452697754\n",
+      "  time_total_s: 206.0984218120575\n",
+      "  timers:\n",
+      "    learn_throughput: 11288.763\n",
+      "    learn_time_ms: 14332.129\n",
+      "    sample_throughput: 26298.441\n",
+      "    sample_time_ms: 6152.152\n",
+      "    update_time_ms: 42.189\n",
+      "  timestamp: 1604232510\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1617920\n",
+      "  training_iteration: 10\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     10 |          206.098 | 1617920 |  37.7536 |              42.4184 |              10.2755 |            108.057 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1123.1655117918795\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-08-51\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.44680980106745\n",
+      "  episode_reward_max: 42.41836734693881\n",
+      "  episode_reward_mean: 38.12998569151096\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1601\n",
+      "  episodes_total: 16488\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.852480560541153\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006807499914430082\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010430590346610794\n",
+      "        total_loss: 0.7860654095808665\n",
+      "        vf_explained_var: 0.9908618927001953\n",
+      "        vf_loss: 0.7955607374509176\n",
+      "    num_steps_sampled: 1779712\n",
+      "    num_steps_trained: 1779712\n",
+      "  iterations_since_restore: 11\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.468000000000004\n",
+      "    gpu_util_percent0: 0.3796\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15448994642998015\n",
+      "    mean_env_wait_ms: 0.6499845600676837\n",
+      "    mean_inference_ms: 4.420542043950926\n",
+      "    mean_raw_obs_processing_ms: 0.408110786931221\n",
+      "  time_since_restore: 226.6547131538391\n",
+      "  time_this_iter_s: 20.556291341781616\n",
+      "  time_total_s: 226.6547131538391\n",
+      "  timers:\n",
+      "    learn_throughput: 11290.905\n",
+      "    learn_time_ms: 14329.409\n",
+      "    sample_throughput: 27104.621\n",
+      "    sample_time_ms: 5969.167\n",
+      "    update_time_ms: 41.488\n",
+      "  timestamp: 1604232531\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1779712\n",
+      "  training_iteration: 11\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     11 |          226.655 | 1779712 |    38.13 |              42.4184 |              10.2755 |            107.447 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1116.8649711879432\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-09-12\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.92020570670206\n",
+      "  episode_reward_max: 42.41836734693881\n",
+      "  episode_reward_mean: 38.44685289510628\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1596\n",
+      "  episodes_total: 18084\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8233269800742468\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00662518401319782\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011712064248664925\n",
+      "        total_loss: 0.6785962084929148\n",
+      "        vf_explained_var: 0.9921655654907227\n",
+      "        vf_loss: 0.6893948912620544\n",
+      "    num_steps_sampled: 1941504\n",
+      "    num_steps_trained: 1941504\n",
+      "  iterations_since_restore: 12\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.354166666666668\n",
+      "    gpu_util_percent0: 0.39875\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15396759428958923\n",
+      "    mean_env_wait_ms: 0.6497269679106826\n",
+      "    mean_inference_ms: 4.392758580495196\n",
+      "    mean_raw_obs_processing_ms: 0.4063257369659057\n",
+      "  time_since_restore: 247.07435011863708\n",
+      "  time_this_iter_s: 20.419636964797974\n",
+      "  time_total_s: 247.07435011863708\n",
+      "  timers:\n",
+      "    learn_throughput: 11289.741\n",
+      "    learn_time_ms: 14330.887\n",
+      "    sample_throughput: 27482.894\n",
+      "    sample_time_ms: 5887.007\n",
+      "    update_time_ms: 40.889\n",
+      "  timestamp: 1604232552\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1941504\n",
+      "  training_iteration: 12\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     12 |          247.074 | 1941504 |  38.4469 |              42.4184 |              10.2755 |             106.92 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1111.391848572737\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-09-33\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.44390268677942\n",
+      "  episode_reward_max: 42.418367346938815\n",
+      "  episode_reward_mean: 38.727613885718846\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1605\n",
+      "  episodes_total: 19689\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7883199751377106\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006895307102240622\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01035230930817003\n",
+      "        total_loss: 0.501528188586235\n",
+      "        vf_explained_var: 0.9942240118980408\n",
+      "        vf_loss: 0.5108955974380175\n",
+      "    num_steps_sampled: 2103296\n",
+      "    num_steps_trained: 2103296\n",
+      "  iterations_since_restore: 13\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.084\n",
+      "    gpu_util_percent0: 0.40480000000000005\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15350402726485754\n",
+      "    mean_env_wait_ms: 0.6495522826808918\n",
+      "    mean_inference_ms: 4.367981018992163\n",
+      "    mean_raw_obs_processing_ms: 0.40472308429202836\n",
+      "  time_since_restore: 267.40077471733093\n",
+      "  time_this_iter_s: 20.326424598693848\n",
+      "  time_total_s: 267.40077471733093\n",
+      "  timers:\n",
+      "    learn_throughput: 11287.514\n",
+      "    learn_time_ms: 14333.714\n",
+      "    sample_throughput: 27563.917\n",
+      "    sample_time_ms: 5869.703\n",
+      "    update_time_ms: 41.691\n",
+      "  timestamp: 1604232573\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2103296\n",
+      "  training_iteration: 13\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     13 |          267.401 | 2103296 |  38.7276 |              42.4184 |              10.2755 |            106.444 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1106.5129543424084\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-09-53\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.01774397972116\n",
+      "  episode_reward_max: 42.418367346938815\n",
+      "  episode_reward_mean: 38.97570046184929\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1614\n",
+      "  episodes_total: 21303\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7583291182915369\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006845557557729383\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010322557670103075\n",
+      "        total_loss: 0.39304836342732113\n",
+      "        vf_explained_var: 0.9954751133918762\n",
+      "        vf_loss: 0.40238098055124283\n",
+      "    num_steps_sampled: 2265088\n",
+      "    num_steps_trained: 2265088\n",
+      "  iterations_since_restore: 14\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.124000000000002\n",
+      "    gpu_util_percent0: 0.4536\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15309019602292354\n",
+      "    mean_env_wait_ms: 0.6494461564466915\n",
+      "    mean_inference_ms: 4.34582608361679\n",
+      "    mean_raw_obs_processing_ms: 0.40327786899763196\n",
+      "  time_since_restore: 287.4316370487213\n",
+      "  time_this_iter_s: 20.03086233139038\n",
+      "  time_total_s: 287.4316370487213\n",
+      "  timers:\n",
+      "    learn_throughput: 11292.259\n",
+      "    learn_time_ms: 14327.692\n",
+      "    sample_throughput: 27660.58\n",
+      "    sample_time_ms: 5849.19\n",
+      "    update_time_ms: 42.894\n",
+      "  timestamp: 1604232593\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2265088\n",
+      "  training_iteration: 14\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     14 |          287.432 | 2265088 |  38.9757 |              42.4184 |              10.2755 |            106.018 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1102.2523617914626\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-10-14\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.64558951965066\n",
+      "  episode_reward_max: 42.418367346938815\n",
+      "  episode_reward_mean: 39.19350548079495\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1597\n",
+      "  episodes_total: 22900\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7275536010662714\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006344522737587492\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01266244207120811\n",
+      "        total_loss: 0.31657364467779797\n",
+      "        vf_explained_var: 0.9963433742523193\n",
+      "        vf_loss: 0.32833095143238705\n",
+      "    num_steps_sampled: 2426880\n",
+      "    num_steps_trained: 2426880\n",
+      "  iterations_since_restore: 15\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.668000000000003\n",
+      "    gpu_util_percent0: 0.4212\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15272256161153888\n",
+      "    mean_env_wait_ms: 0.6493956761565493\n",
+      "    mean_inference_ms: 4.3261627778248455\n",
+      "    mean_raw_obs_processing_ms: 0.40199333508455115\n",
+      "  time_since_restore: 308.00055265426636\n",
+      "  time_this_iter_s: 20.568915605545044\n",
+      "  time_total_s: 308.00055265426636\n",
+      "  timers:\n",
+      "    learn_throughput: 11279.674\n",
+      "    learn_time_ms: 14343.677\n",
+      "    sample_throughput: 27657.34\n",
+      "    sample_time_ms: 5849.876\n",
+      "    update_time_ms: 42.541\n",
+      "  timestamp: 1604232614\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2426880\n",
+      "  training_iteration: 15\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     15 |          308.001 | 2426880 |  39.1935 |              42.4184 |              10.2755 |            105.646 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1098.492356115108\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-10-35\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.31371428571428\n",
+      "  episode_reward_max: 42.418367346938815\n",
+      "  episode_reward_mean: 39.386209912536444\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1600\n",
+      "  episodes_total: 24500\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6992116371790568\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00605107715819031\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010152409401295396\n",
+      "        total_loss: 0.2749015986919403\n",
+      "        vf_explained_var: 0.9968383312225342\n",
+      "        vf_loss: 0.28419339408477146\n",
+      "    num_steps_sampled: 2588672\n",
+      "    num_steps_trained: 2588672\n",
+      "  iterations_since_restore: 16\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.163999999999998\n",
+      "    gpu_util_percent0: 0.4179999999999999\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1523902557025731\n",
+      "    mean_env_wait_ms: 0.6493845108910767\n",
+      "    mean_inference_ms: 4.308344642074162\n",
+      "    mean_raw_obs_processing_ms: 0.4008263717279235\n",
+      "  time_since_restore: 328.0859045982361\n",
+      "  time_this_iter_s: 20.085351943969727\n",
+      "  time_total_s: 328.0859045982361\n",
+      "  timers:\n",
+      "    learn_throughput: 11277.087\n",
+      "    learn_time_ms: 14346.967\n",
+      "    sample_throughput: 27688.425\n",
+      "    sample_time_ms: 5843.308\n",
+      "    update_time_ms: 42.686\n",
+      "  timestamp: 1604232635\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2588672\n",
+      "  training_iteration: 16\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     16 |          328.086 | 2588672 |  39.3862 |              42.4184 |              10.2755 |            105.314 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1095.0764746490756\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-10-55\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.01325162772883\n",
+      "  episode_reward_max: 42.418367346938815\n",
+      "  episode_reward_mean: 39.561036900397845\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1610\n",
+      "  episodes_total: 26110\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6637826611598333\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006695269180151324\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012259619931379953\n",
+      "        total_loss: 0.2071586512029171\n",
+      "        vf_explained_var: 0.9976064562797546\n",
+      "        vf_loss: 0.21841111406683922\n",
+      "    num_steps_sampled: 2750464\n",
+      "    num_steps_trained: 2750464\n",
+      "  iterations_since_restore: 17\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.967999999999996\n",
+      "    gpu_util_percent0: 0.3992\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15208441102089912\n",
+      "    mean_env_wait_ms: 0.649415271515101\n",
+      "    mean_inference_ms: 4.292010650770931\n",
+      "    mean_raw_obs_processing_ms: 0.3997617754479261\n",
+      "  time_since_restore: 348.3640911579132\n",
+      "  time_this_iter_s: 20.278186559677124\n",
+      "  time_total_s: 348.3640911579132\n",
+      "  timers:\n",
+      "    learn_throughput: 11280.385\n",
+      "    learn_time_ms: 14342.773\n",
+      "    sample_throughput: 27802.66\n",
+      "    sample_time_ms: 5819.299\n",
+      "    update_time_ms: 42.587\n",
+      "  timestamp: 1604232655\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2750464\n",
+      "  training_iteration: 17\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     17 |          348.364 | 2750464 |   39.561 |              42.4184 |              10.2755 |            105.013 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1091.992488262911\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-11-16\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.74269638606363\n",
+      "  episode_reward_max: 42.41836734693882\n",
+      "  episode_reward_mean: 39.71753728541839\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1616\n",
+      "  episodes_total: 27726\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6395211120446523\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005430514691397548\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008808797846237818\n",
+      "        total_loss: 0.18516152476270994\n",
+      "        vf_explained_var: 0.9978885650634766\n",
+      "        vf_loss: 0.19320398072401682\n",
+      "    num_steps_sampled: 2912256\n",
+      "    num_steps_trained: 2912256\n",
+      "  iterations_since_restore: 18\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.428\n",
+      "    gpu_util_percent0: 0.4108\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15180253257231568\n",
+      "    mean_env_wait_ms: 0.6494706645035929\n",
+      "    mean_inference_ms: 4.277042903419588\n",
+      "    mean_raw_obs_processing_ms: 0.3987841767593947\n",
+      "  time_since_restore: 368.70942068099976\n",
+      "  time_this_iter_s: 20.345329523086548\n",
+      "  time_total_s: 368.70942068099976\n",
+      "  timers:\n",
+      "    learn_throughput: 11277.054\n",
+      "    learn_time_ms: 14347.01\n",
+      "    sample_throughput: 27960.312\n",
+      "    sample_time_ms: 5786.488\n",
+      "    update_time_ms: 42.249\n",
+      "  timestamp: 1604232676\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2912256\n",
+      "  training_iteration: 18\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     18 |          368.709 | 2912256 |  39.7175 |              42.4184 |              10.2755 |            104.743 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1089.2314356857796\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-11-37\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.499846693694\n",
+      "  episode_reward_max: 42.41836734693882\n",
+      "  episode_reward_mean: 39.85814856041556\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1627\n",
+      "  episodes_total: 29353\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6059375007947286\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006107187946327031\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009194978279992938\n",
+      "        total_loss: 0.15118268628915152\n",
+      "        vf_explained_var: 0.9982755184173584\n",
+      "        vf_loss: 0.15945919354756674\n",
+      "    num_steps_sampled: 3074048\n",
+      "    num_steps_trained: 3074048\n",
+      "  iterations_since_restore: 19\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.02\n",
+      "    gpu_util_percent0: 0.35119999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15154050336998873\n",
+      "    mean_env_wait_ms: 0.6495464583308167\n",
+      "    mean_inference_ms: 4.263205291197448\n",
+      "    mean_raw_obs_processing_ms: 0.39787967312168704\n",
+      "  time_since_restore: 389.13511419296265\n",
+      "  time_this_iter_s: 20.42569351196289\n",
+      "  time_total_s: 389.13511419296265\n",
+      "  timers:\n",
+      "    learn_throughput: 11265.913\n",
+      "    learn_time_ms: 14361.197\n",
+      "    sample_throughput: 28034.364\n",
+      "    sample_time_ms: 5771.203\n",
+      "    update_time_ms: 43.0\n",
+      "  timestamp: 1604232697\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3074048\n",
+      "  training_iteration: 19\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     19 |          389.135 | 3074048 |  39.8581 |              42.4184 |              10.2755 |              104.5 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1086.7530964007374\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-11-58\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.28143673891276\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 39.98449496404396\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1606\n",
+      "  episodes_total: 30959\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5802051573991776\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006146465195342898\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010908293537795544\n",
+      "        total_loss: 0.12315286882221699\n",
+      "        vf_explained_var: 0.9985630512237549\n",
+      "        vf_loss: 0.13312197600801787\n",
+      "    num_steps_sampled: 3235840\n",
+      "    num_steps_trained: 3235840\n",
+      "  iterations_since_restore: 20\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.708000000000002\n",
+      "    gpu_util_percent0: 0.35119999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15130250937481887\n",
+      "    mean_env_wait_ms: 0.649629966463628\n",
+      "    mean_inference_ms: 4.25060756388231\n",
+      "    mean_raw_obs_processing_ms: 0.39705657157981417\n",
+      "  time_since_restore: 409.49588918685913\n",
+      "  time_this_iter_s: 20.360774993896484\n",
+      "  time_total_s: 409.49588918685913\n",
+      "  timers:\n",
+      "    learn_throughput: 11247.919\n",
+      "    learn_time_ms: 14384.172\n",
+      "    sample_throughput: 28152.747\n",
+      "    sample_time_ms: 5746.935\n",
+      "    update_time_ms: 38.327\n",
+      "  timestamp: 1604232718\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3235840\n",
+      "  training_iteration: 20\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     20 |          409.496 | 3235840 |  39.9845 |              42.4184 |              10.2755 |            104.281 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1084.4941429669484\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-12-19\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.08316697890113\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.09885276551578\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1602\n",
+      "  episodes_total: 32561\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5567689687013626\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0057975016146277385\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010689061540081942\n",
+      "        total_loss: 0.10724692543347676\n",
+      "        vf_explained_var: 0.9987431168556213\n",
+      "        vf_loss: 0.11705487407743931\n",
+      "    num_steps_sampled: 3397632\n",
+      "    num_steps_trained: 3397632\n",
+      "  iterations_since_restore: 21\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.752000000000002\n",
+      "    gpu_util_percent0: 0.2972\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15108181784508506\n",
+      "    mean_env_wait_ms: 0.6497188533760437\n",
+      "    mean_inference_ms: 4.2389675381303915\n",
+      "    mean_raw_obs_processing_ms: 0.3962976370894028\n",
+      "  time_since_restore: 429.649621963501\n",
+      "  time_this_iter_s: 20.153732776641846\n",
+      "  time_total_s: 429.649621963501\n",
+      "  timers:\n",
+      "    learn_throughput: 11259.927\n",
+      "    learn_time_ms: 14368.833\n",
+      "    sample_throughput: 28275.485\n",
+      "    sample_time_ms: 5721.988\n",
+      "    update_time_ms: 38.431\n",
+      "  timestamp: 1604232739\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3397632\n",
+      "  training_iteration: 21\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     21 |           429.65 | 3397632 |  40.0989 |              42.4184 |              10.2755 |            104.083 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1082.431136496778\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-12-40\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.90098314606742\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.20364481818009\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1615\n",
+      "  episodes_total: 34176\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5254394511381785\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005307760516492029\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007776977017783793\n",
+      "        total_loss: 0.0964116957038641\n",
+      "        vf_explained_var: 0.9988983273506165\n",
+      "        vf_loss: 0.10338984616100788\n",
+      "    num_steps_sampled: 3559424\n",
+      "    num_steps_trained: 3559424\n",
+      "  iterations_since_restore: 22\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.846153846153847\n",
+      "    gpu_util_percent0: 0.39384615384615385\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.565384615384615\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15087377501627616\n",
+      "    mean_env_wait_ms: 0.6498094517683312\n",
+      "    mean_inference_ms: 4.22804968427196\n",
+      "    mean_raw_obs_processing_ms: 0.3955819072644963\n",
+      "  time_since_restore: 449.9894530773163\n",
+      "  time_this_iter_s: 20.339831113815308\n",
+      "  time_total_s: 449.9894530773163\n",
+      "  timers:\n",
+      "    learn_throughput: 11271.985\n",
+      "    learn_time_ms: 14353.461\n",
+      "    sample_throughput: 28273.456\n",
+      "    sample_time_ms: 5722.399\n",
+      "    update_time_ms: 39.023\n",
+      "  timestamp: 1604232760\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3559424\n",
+      "  training_iteration: 22\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     22 |          449.989 | 3559424 |  40.2036 |              42.4184 |              10.2755 |            103.901 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1080.5109731890743\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-13-01\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.7305683563748\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.301032520255696\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1629\n",
+      "  episodes_total: 35805\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5021042550603548\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0054971032465497656\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00953363478280759\n",
+      "        total_loss: 0.06499722289542358\n",
+      "        vf_explained_var: 0.9992148876190186\n",
+      "        vf_loss: 0.07368248887360096\n",
+      "    num_steps_sampled: 3721216\n",
+      "    num_steps_trained: 3721216\n",
+      "  iterations_since_restore: 23\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.044\n",
+      "    gpu_util_percent0: 0.4084\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15067991150821478\n",
+      "    mean_env_wait_ms: 0.649905891759336\n",
+      "    mean_inference_ms: 4.2178278275443795\n",
+      "    mean_raw_obs_processing_ms: 0.39491348951426497\n",
+      "  time_since_restore: 470.5632412433624\n",
+      "  time_this_iter_s: 20.573788166046143\n",
+      "  time_total_s: 470.5632412433624\n",
+      "  timers:\n",
+      "    learn_throughput: 11273.798\n",
+      "    learn_time_ms: 14351.154\n",
+      "    sample_throughput: 28167.439\n",
+      "    sample_time_ms: 5743.937\n",
+      "    update_time_ms: 38.419\n",
+      "  timestamp: 1604232781\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3721216\n",
+      "  training_iteration: 23\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     23 |          470.563 | 3721216 |   40.301 |              42.4184 |              10.2755 |            103.731 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1078.7812073715463\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-13-22\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.57635678593378\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.38915989130335\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1618\n",
+      "  episodes_total: 37423\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.47640378028154373\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005069411902998884\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007647299599436034\n",
+      "        total_loss: 0.07074602444966634\n",
+      "        vf_explained_var: 0.9991908073425293\n",
+      "        vf_loss: 0.07761764402190845\n",
+      "    num_steps_sampled: 3883008\n",
+      "    num_steps_trained: 3883008\n",
+      "  iterations_since_restore: 24\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.191999999999997\n",
+      "    gpu_util_percent0: 0.3423999999999999\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1505016968490393\n",
+      "    mean_env_wait_ms: 0.6500103427408599\n",
+      "    mean_inference_ms: 4.208361564693216\n",
+      "    mean_raw_obs_processing_ms: 0.39429321916174187\n",
+      "  time_since_restore: 490.8706216812134\n",
+      "  time_this_iter_s: 20.307380437850952\n",
+      "  time_total_s: 490.8706216812134\n",
+      "  timers:\n",
+      "    learn_throughput: 11268.008\n",
+      "    learn_time_ms: 14358.528\n",
+      "    sample_throughput: 28090.142\n",
+      "    sample_time_ms: 5759.743\n",
+      "    update_time_ms: 37.55\n",
+      "  timestamp: 1604232802\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3883008\n",
+      "  training_iteration: 24\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "2020-11-01 12:13:23,494\tWARNING util.py:136 -- The `process_trial` operation took 0.5319008827209473 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     24 |          490.871 | 3883008 |  40.3892 |              42.4184 |              10.2755 |            103.576 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1077.1880225698897\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-13-43\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.43532516783682\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.4702521709755\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1603\n",
+      "  episodes_total: 39026\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4569598063826561\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005172949323120217\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008714882539303895\n",
+      "        total_loss: 0.04905764168749253\n",
+      "        vf_explained_var: 0.999389111995697\n",
+      "        vf_loss: 0.056966414054234825\n",
+      "    num_steps_sampled: 4044800\n",
+      "    num_steps_trained: 4044800\n",
+      "  iterations_since_restore: 25\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.62\n",
+      "    gpu_util_percent0: 0.41119999999999995\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15033752613342766\n",
+      "    mean_env_wait_ms: 0.6501147929596541\n",
+      "    mean_inference_ms: 4.199582565004314\n",
+      "    mean_raw_obs_processing_ms: 0.3937192610273736\n",
+      "  time_since_restore: 511.1436126232147\n",
+      "  time_this_iter_s: 20.272990942001343\n",
+      "  time_total_s: 511.1436126232147\n",
+      "  timers:\n",
+      "    learn_throughput: 11277.804\n",
+      "    learn_time_ms: 14346.056\n",
+      "    sample_throughput: 28126.832\n",
+      "    sample_time_ms: 5752.23\n",
+      "    update_time_ms: 37.351\n",
+      "  timestamp: 1604232823\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4044800\n",
+      "  training_iteration: 25\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "2020-11-01 12:13:44,581\tWARNING util.py:136 -- The `process_trial` operation took 0.5550427436828613 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     25 |          511.144 | 4044800 |  40.4703 |              42.4184 |              10.2755 |            103.435 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1075.718860070445\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-14-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.30375292235757\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.545045112914124\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1609\n",
+      "  episodes_total: 40635\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4321967264016469\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0049026469544818\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00738874361559283\n",
+      "        total_loss: 0.0522269361341993\n",
+      "        vf_explained_var: 0.9993705749511719\n",
+      "        vf_loss: 0.058851247653365135\n",
+      "    num_steps_sampled: 4206592\n",
+      "    num_steps_trained: 4206592\n",
+      "  iterations_since_restore: 26\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.028000000000002\n",
+      "    gpu_util_percent0: 0.35119999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15018377726680818\n",
+      "    mean_env_wait_ms: 0.650226839982744\n",
+      "    mean_inference_ms: 4.191307577339299\n",
+      "    mean_raw_obs_processing_ms: 0.39318264874410647\n",
+      "  time_since_restore: 531.2994961738586\n",
+      "  time_this_iter_s: 20.15588355064392\n",
+      "  time_total_s: 531.2994961738586\n",
+      "  timers:\n",
+      "    learn_throughput: 11281.716\n",
+      "    learn_time_ms: 14341.08\n",
+      "    sample_throughput: 28095.697\n",
+      "    sample_time_ms: 5758.604\n",
+      "    update_time_ms: 36.136\n",
+      "  timestamp: 1604232844\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4206592\n",
+      "  training_iteration: 26\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "2020-11-01 12:14:05,496\tWARNING util.py:136 -- The `process_trial` operation took 0.5645184516906738 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     26 |          531.299 | 4206592 |   40.545 |              42.4184 |              10.2755 |            103.304 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1074.3374860851236\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-14-26\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.18162671273399\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.61544301559989\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1622\n",
+      "  episodes_total: 42257\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.41156937927007675\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005988262050474684\n",
+      "        model: {}\n",
+      "        policy_loss: -0.0108474350903028\n",
+      "        total_loss: 0.03666358132613823\n",
+      "        vf_explained_var: 0.9995186924934387\n",
+      "        vf_loss: 0.04711797585090002\n",
+      "    num_steps_sampled: 4368384\n",
+      "    num_steps_trained: 4368384\n",
+      "  iterations_since_restore: 27\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.450000000000003\n",
+      "    gpu_util_percent0: 0.37384615384615383\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.565384615384615\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15003777931603987\n",
+      "    mean_env_wait_ms: 0.6503388710349208\n",
+      "    mean_inference_ms: 4.1834680864066325\n",
+      "    mean_raw_obs_processing_ms: 0.39267008619808885\n",
+      "  time_since_restore: 551.8160552978516\n",
+      "  time_this_iter_s: 20.51655912399292\n",
+      "  time_total_s: 551.8160552978516\n",
+      "  timers:\n",
+      "    learn_throughput: 11287.466\n",
+      "    learn_time_ms: 14333.775\n",
+      "    sample_throughput: 28001.168\n",
+      "    sample_time_ms: 5778.045\n",
+      "    update_time_ms: 35.1\n",
+      "  timestamp: 1604232866\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4368384\n",
+      "  training_iteration: 27\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "2020-11-01 12:14:26,878\tWARNING util.py:136 -- The `process_trial` operation took 0.603750467300415 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     27 |          551.816 | 4368384 |  40.6154 |              42.4184 |              10.2755 |            103.182 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1073.064150513113\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-14-47\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.0678804174452\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.68016949294415\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1629\n",
+      "  episodes_total: 43886\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.38193487375974655\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0054754362208768725\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007502093746249254\n",
+      "        total_loss: 0.052860286086797714\n",
+      "        vf_explained_var: 0.999366819858551\n",
+      "        vf_loss: 0.06000580328206221\n",
+      "    num_steps_sampled: 4530176\n",
+      "    num_steps_trained: 4530176\n",
+      "  iterations_since_restore: 28\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.916000000000004\n",
+      "    gpu_util_percent0: 0.35960000000000003\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1498996451948512\n",
+      "    mean_env_wait_ms: 0.6504529892483883\n",
+      "    mean_inference_ms: 4.176045627745146\n",
+      "    mean_raw_obs_processing_ms: 0.3921857888681881\n",
+      "  time_since_restore: 572.0441946983337\n",
+      "  time_this_iter_s: 20.228139400482178\n",
+      "  time_total_s: 572.0441946983337\n",
+      "  timers:\n",
+      "    learn_throughput: 11297.604\n",
+      "    learn_time_ms: 14320.912\n",
+      "    sample_throughput: 28005.61\n",
+      "    sample_time_ms: 5777.128\n",
+      "    update_time_ms: 32.987\n",
+      "  timestamp: 1604232887\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4530176\n",
+      "  training_iteration: 28\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "2020-11-01 12:14:47,924\tWARNING util.py:136 -- The `process_trial` operation took 0.6126041412353516 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     28 |          572.044 | 4530176 |  40.6802 |              42.4184 |              10.2755 |            103.068 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1071.8849808631385\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-15-08\n",
+      "  done: false\n",
+      "  episode_len_mean: 102.9628774891204\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.74035570973741\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1612\n",
+      "  episodes_total: 45498\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3544607609510422\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005010240633661549\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006979774484837738\n",
+      "        total_loss: 0.030745272990316153\n",
+      "        vf_explained_var: 0.999602735042572\n",
+      "        vf_loss: 0.037401253978411354\n",
+      "    num_steps_sampled: 4691968\n",
+      "    num_steps_trained: 4691968\n",
+      "  iterations_since_restore: 29\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.657692307692308\n",
+      "    gpu_util_percent0: 0.32384615384615384\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.565384615384615\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1497713859875804\n",
+      "    mean_env_wait_ms: 0.650569464769825\n",
+      "    mean_inference_ms: 4.169137947749732\n",
+      "    mean_raw_obs_processing_ms: 0.39173452138746384\n",
+      "  time_since_restore: 592.6739168167114\n",
+      "  time_this_iter_s: 20.629722118377686\n",
+      "  time_total_s: 592.6739168167114\n",
+      "  timers:\n",
+      "    learn_throughput: 11299.681\n",
+      "    learn_time_ms: 14318.28\n",
+      "    sample_throughput: 27922.916\n",
+      "    sample_time_ms: 5794.237\n",
+      "    update_time_ms: 30.389\n",
+      "  timestamp: 1604232908\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4691968\n",
+      "  training_iteration: 29\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "2020-11-01 12:15:09,523\tWARNING util.py:136 -- The `process_trial` operation took 0.6120882034301758 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     29 |          592.674 | 4691968 |  40.7404 |              42.4184 |              10.2755 |            102.963 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1070.7854881546798\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-15-29\n",
+      "  done: true\n",
+      "  episode_len_mean: 102.86573533470627\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.79621711744931\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1603\n",
+      "  episodes_total: 47101\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3281017740567525\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005293768752987186\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007335715092873822\n",
+      "        total_loss: 0.022672869653130572\n",
+      "        vf_explained_var: 0.9996854662895203\n",
+      "        vf_loss: 0.029643258700768154\n",
+      "    num_steps_sampled: 4853760\n",
+      "    num_steps_trained: 4853760\n",
+      "  iterations_since_restore: 30\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.851999999999997\n",
+      "    gpu_util_percent0: 0.41879999999999995\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1496498957417332\n",
+      "    mean_env_wait_ms: 0.6506846363524779\n",
+      "    mean_inference_ms: 4.162635555621303\n",
+      "    mean_raw_obs_processing_ms: 0.39130720698712607\n",
+      "  time_since_restore: 613.0474860668182\n",
+      "  time_this_iter_s: 20.37356925010681\n",
+      "  time_total_s: 613.0474860668182\n",
+      "  timers:\n",
+      "    learn_throughput: 11310.582\n",
+      "    learn_time_ms: 14304.481\n",
+      "    sample_throughput: 27887.371\n",
+      "    sample_time_ms: 5801.623\n",
+      "    update_time_ms: 30.76\n",
+      "  timestamp: 1604232929\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4853760\n",
+      "  training_iteration: 30\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "2020-11-01 12:15:30,803\tWARNING util.py:136 -- The `process_trial` operation took 0.6821863651275635 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.3/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | TERMINATED |       |     30 |          613.047 | 4853760 |  40.7962 |              42.4184 |              10.2755 |            102.866 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.1/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | TERMINATED |       |     30 |          613.047 | 4853760 |  40.7962 |              42.4184 |              10.2755 |            102.866 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 52047\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201101_120450-tkx2xsoj/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201101_120450-tkx2xsoj/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min 1039\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step 7\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime 641\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp 1604232931\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max 1669\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean 1070.78549\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max 42.41837\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min 10.27551\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean 40.79622\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total 47101\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration 30\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step ‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mdecent-sweep-2\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/tkx2xsoj\u001b[0m\n",
+      "2020-11-01 12:15:40,799 - wandb.wandb_agent - INFO - Cleaning up finished run: tkx2xsoj\n",
+      "2020-11-01 12:15:41,119 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-01 12:15:41,119 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/la/la13.txt\n",
+      "2020-11-01 12:15:41,121 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/la/la13.txt\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "2020-11-01 12:15:46,139 - wandb.wandb_agent - INFO - Running runs: ['dcx4y6ut']\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mdaily-sweep-3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/9xhkl8my\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/dcx4y6ut\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201101_121542-dcx4y6ut\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
+      "\n",
+      "2020-11-01 12:15:46,749\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "\n",
+      "\n",
+      "\u001b[2m\u001b[36m(pid=2614)\u001b[0m 2020-11-01 12:15:49,495\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=2570)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2570)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2590)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2590)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2557)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2557)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2589)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2589)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2599)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2599)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2591)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2591)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2583)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2583)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2625)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2625)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2573)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2573)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2595)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2595)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2597)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2597)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2587)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2587)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2582)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2582)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2621)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2621)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2600)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2600)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2615)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2615)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2594)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2594)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2527)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2527)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2554)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2554)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2526)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2526)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2560)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2560)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2561)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2561)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2562)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2562)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2511)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2511)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2556)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2556)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2501)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2501)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2553)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2553)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2520)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2520)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2571)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2571)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2612)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2612)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2508)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2508)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2493)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2493)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2565)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2565)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2605)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2605)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2566)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2566)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2506)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2506)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2518)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2518)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2502)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2502)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2503)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2503)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2507)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2507)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2576)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2576)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2567)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2567)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2610)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2610)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2487)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2487)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2603)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2603)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2488)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2488)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2492)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2492)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2497)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2497)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2552)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2552)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2504)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2504)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2563)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2563)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2500)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2500)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2558)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2558)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2555)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2555)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2496)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2496)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2579)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2579)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2564)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2564)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2523)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2523)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2598)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2598)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2524)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2524)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2572)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2572)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2551)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2551)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2505)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2505)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2592)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2592)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2514)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2514)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2498)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2498)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2580)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2580)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2495)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2495)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2568)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2568)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2490)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2490)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2602)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2602)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2569)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2569)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2489)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2489)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2491)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2491)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2559)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2559)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2517)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2517)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2509)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2509)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2596)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2596)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2577)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2577)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1589\n",
+      "    time_step_mean: 1337.9852140077821\n",
+      "    time_step_min: 1155\n",
+      "  date: 2020-11-01_12-16-16\n",
+      "  done: false\n",
+      "  episode_len_mean: 114.43149129447389\n",
+      "  episode_reward_max: 47.39175257731958\n",
+      "  episode_reward_mean: 38.01323583352193\n",
+      "  episode_reward_min: 22.08247422680411\n",
+      "  episodes_this_iter: 1321\n",
+      "  episodes_total: 1321\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1485573450724285\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005282467735620837\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007238074458048989\n",
+      "        total_loss: 63.078263918558754\n",
+      "        vf_explained_var: 0.7385819554328918\n",
+      "        vf_loss: 63.0850191116333\n",
+      "    num_steps_sampled: 161792\n",
+      "    num_steps_trained: 161792\n",
+      "  iterations_since_restore: 1\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 30.44814814814815\n",
+      "    gpu_util_percent0: 0.3718518518518519\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.4370370370370376\n",
+      "    vram_util_percent0: 0.08366130971903357\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16663877415658362\n",
+      "    mean_env_wait_ms: 0.6660098682308551\n",
+      "    mean_inference_ms: 4.715280418736184\n",
+      "    mean_raw_obs_processing_ms: 0.42943359101439976\n",
+      "  time_since_restore: 21.794464588165283\n",
+      "  time_this_iter_s: 21.794464588165283\n",
+      "  time_total_s: 21.794464588165283\n",
+      "  timers:\n",
+      "    learn_throughput: 11044.835\n",
+      "    learn_time_ms: 14648.658\n",
+      "    sample_throughput: 22922.781\n",
+      "    sample_time_ms: 7058.131\n",
+      "    update_time_ms: 38.538\n",
+      "  timestamp: 1604232976\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 161792\n",
+      "  training_iteration: 1\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.3/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      1 |          21.7945 | 161792 |  38.0132 |              47.3918 |              22.0825 |            114.431 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1326.7179115300942\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-16-37\n",
+      "  done: false\n",
+      "  episode_len_mean: 113.38081603435934\n",
+      "  episode_reward_max: 47.64948453608249\n",
+      "  episode_reward_mean: 38.63342287228155\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1473\n",
+      "  episodes_total: 2794\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1314232647418976\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009286719684799513\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01014851212191085\n",
+      "        total_loss: 10.35303783416748\n",
+      "        vf_explained_var: 0.901028573513031\n",
+      "        vf_loss: 10.361894766489664\n",
+      "    num_steps_sampled: 323584\n",
+      "    num_steps_trained: 323584\n",
+      "  iterations_since_restore: 2\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 30.084615384615383\n",
+      "    gpu_util_percent0: 0.4496153846153846\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5076923076923077\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16450090814338433\n",
+      "    mean_env_wait_ms: 0.6642577249066655\n",
+      "    mean_inference_ms: 4.744188369781305\n",
+      "    mean_raw_obs_processing_ms: 0.42877125861262844\n",
+      "  time_since_restore: 43.1419882774353\n",
+      "  time_this_iter_s: 21.34752368927002\n",
+      "  time_total_s: 43.1419882774353\n",
+      "  timers:\n",
+      "    learn_throughput: 11211.024\n",
+      "    learn_time_ms: 14431.51\n",
+      "    sample_throughput: 23059.328\n",
+      "    sample_time_ms: 7016.336\n",
+      "    update_time_ms: 41.882\n",
+      "  timestamp: 1604232997\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 323584\n",
+      "  training_iteration: 2\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      2 |           43.142 | 323584 |  38.6334 |              47.6495 |              21.2577 |            113.381 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1309.3502958579882\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-16-58\n",
+      "  done: false\n",
+      "  episode_len_mean: 112.32527575686458\n",
+      "  episode_reward_max: 47.64948453608249\n",
+      "  episode_reward_mean: 39.48478286641973\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1467\n",
+      "  episodes_total: 4261\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1132993400096893\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.010391402058303356\n",
+      "        model: {}\n",
+      "        policy_loss: -0.014095689790944258\n",
+      "        total_loss: 6.80802857875824\n",
+      "        vf_explained_var: 0.9351071715354919\n",
+      "        vf_loss: 6.820602655410767\n",
+      "    num_steps_sampled: 485376\n",
+      "    num_steps_trained: 485376\n",
+      "  iterations_since_restore: 3\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 28.832000000000004\n",
+      "    gpu_util_percent0: 0.4172\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5120000000000005\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16256613873280876\n",
+      "    mean_env_wait_ms: 0.6625184290389695\n",
+      "    mean_inference_ms: 4.69345067144062\n",
+      "    mean_raw_obs_processing_ms: 0.4260658546666288\n",
+      "  time_since_restore: 63.90490484237671\n",
+      "  time_this_iter_s: 20.762916564941406\n",
+      "  time_total_s: 63.90490484237671\n",
+      "  timers:\n",
+      "    learn_throughput: 11227.805\n",
+      "    learn_time_ms: 14409.94\n",
+      "    sample_throughput: 23883.846\n",
+      "    sample_time_ms: 6774.118\n",
+      "    update_time_ms: 41.076\n",
+      "  timestamp: 1604233018\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 485376\n",
+      "  training_iteration: 3\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      3 |          63.9049 | 485376 |  39.4848 |              47.6495 |              21.2577 |            112.325 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1293.2727912706794\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-17-19\n",
+      "  done: false\n",
+      "  episode_len_mean: 111.25918153200419\n",
+      "  episode_reward_max: 47.649484536082525\n",
+      "  episode_reward_mean: 40.30362789959723\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1457\n",
+      "  episodes_total: 5718\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.084079662958781\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009383795782923698\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013835826587940877\n",
+      "        total_loss: 4.933180093765259\n",
+      "        vf_explained_var: 0.9529300332069397\n",
+      "        vf_loss: 4.94568133354187\n",
+      "    num_steps_sampled: 647168\n",
+      "    num_steps_trained: 647168\n",
+      "  iterations_since_restore: 4\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.936\n",
+      "    gpu_util_percent0: 0.4576\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.508\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16088212665214047\n",
+      "    mean_env_wait_ms: 0.660815453354488\n",
+      "    mean_inference_ms: 4.632879361030093\n",
+      "    mean_raw_obs_processing_ms: 0.42268288067938126\n",
+      "  time_since_restore: 84.33310127258301\n",
+      "  time_this_iter_s: 20.4281964302063\n",
+      "  time_total_s: 84.33310127258301\n",
+      "  timers:\n",
+      "    learn_throughput: 11238.354\n",
+      "    learn_time_ms: 14396.415\n",
+      "    sample_throughput: 24616.712\n",
+      "    sample_time_ms: 6572.446\n",
+      "    update_time_ms: 38.648\n",
+      "  timestamp: 1604233039\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 647168\n",
+      "  training_iteration: 4\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      4 |          84.3331 | 647168 |  40.3036 |              47.6495 |              21.2577 |            111.259 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1278.2911882694702\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-17-39\n",
+      "  done: false\n",
+      "  episode_len_mean: 110.2100481761872\n",
+      "  episode_reward_max: 47.649484536082525\n",
+      "  episode_reward_mean: 41.07122129117859\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1547\n",
+      "  episodes_total: 7265\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0668250819047291\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008654051227495074\n",
+      "        model: {}\n",
+      "        policy_loss: -0.015438533756726732\n",
+      "        total_loss: 3.750304361184438\n",
+      "        vf_explained_var: 0.9650198817253113\n",
+      "        vf_loss: 3.764545480410258\n",
+      "    num_steps_sampled: 808960\n",
+      "    num_steps_trained: 808960\n",
+      "  iterations_since_restore: 5\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.02\n",
+      "    gpu_util_percent0: 0.3504\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5120000000000005\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1594046299420155\n",
+      "    mean_env_wait_ms: 0.6591918943938871\n",
+      "    mean_inference_ms: 4.572498944569763\n",
+      "    mean_raw_obs_processing_ms: 0.4190994577823986\n",
+      "  time_since_restore: 104.45204615592957\n",
+      "  time_this_iter_s: 20.118944883346558\n",
+      "  time_total_s: 104.45204615592957\n",
+      "  timers:\n",
+      "    learn_throughput: 11259.021\n",
+      "    learn_time_ms: 14369.989\n",
+      "    sample_throughput: 25254.408\n",
+      "    sample_time_ms: 6406.486\n",
+      "    update_time_ms: 37.632\n",
+      "  timestamp: 1604233059\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 808960\n",
+      "  training_iteration: 5\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      5 |          104.452 | 808960 |  41.0712 |              47.6495 |              21.2577 |             110.21 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1266.0983158852982\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-18-00\n",
+      "  done: false\n",
+      "  episode_len_mean: 109.32014959202176\n",
+      "  episode_reward_max: 47.649484536082525\n",
+      "  episode_reward_mean: 41.69816035928256\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1559\n",
+      "  episodes_total: 8824\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.034409632285436\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008218800959487757\n",
+      "        model: {}\n",
+      "        policy_loss: -0.015976834343746305\n",
+      "        total_loss: 3.275542378425598\n",
+      "        vf_explained_var: 0.9698309898376465\n",
+      "        vf_loss: 3.2903926372528076\n",
+      "    num_steps_sampled: 970752\n",
+      "    num_steps_trained: 970752\n",
+      "  iterations_since_restore: 6\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.4375\n",
+      "    gpu_util_percent0: 0.43624999999999997\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5208333333333335\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15817094139921792\n",
+      "    mean_env_wait_ms: 0.6579144407066476\n",
+      "    mean_inference_ms: 4.520312188626085\n",
+      "    mean_raw_obs_processing_ms: 0.41585575516420453\n",
+      "  time_since_restore: 124.74504113197327\n",
+      "  time_this_iter_s: 20.2929949760437\n",
+      "  time_total_s: 124.74504113197327\n",
+      "  timers:\n",
+      "    learn_throughput: 11268.321\n",
+      "    learn_time_ms: 14358.128\n",
+      "    sample_throughput: 25609.299\n",
+      "    sample_time_ms: 6317.705\n",
+      "    update_time_ms: 37.615\n",
+      "  timestamp: 1604233080\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 970752\n",
+      "  training_iteration: 6\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      6 |          124.745 | 970752 |  41.6982 |              47.6495 |              21.2577 |             109.32 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1255.5475730032877\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-18-20\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.51175563692426\n",
+      "  episode_reward_max: 47.649484536082525\n",
+      "  episode_reward_mean: 42.23890644960692\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1554\n",
+      "  episodes_total: 10378\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9993852277596792\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008948890104268989\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011871834401972592\n",
+      "        total_loss: 2.572846511999766\n",
+      "        vf_explained_var: 0.9761440753936768\n",
+      "        vf_loss: 2.5834282437960305\n",
+      "    num_steps_sampled: 1132544\n",
+      "    num_steps_trained: 1132544\n",
+      "  iterations_since_restore: 7\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.36\n",
+      "    gpu_util_percent0: 0.3956\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5120000000000005\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15713379589800733\n",
+      "    mean_env_wait_ms: 0.6568649191044983\n",
+      "    mean_inference_ms: 4.475812919755018\n",
+      "    mean_raw_obs_processing_ms: 0.4129610571474045\n",
+      "  time_since_restore: 144.9028398990631\n",
+      "  time_this_iter_s: 20.157798767089844\n",
+      "  time_total_s: 144.9028398990631\n",
+      "  timers:\n",
+      "    learn_throughput: 11276.333\n",
+      "    learn_time_ms: 14347.927\n",
+      "    sample_throughput: 25944.994\n",
+      "    sample_time_ms: 6235.962\n",
+      "    update_time_ms: 37.126\n",
+      "  timestamp: 1604233100\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1132544\n",
+      "  training_iteration: 7\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      7 |          144.903 | 1132544 |  42.2389 |              47.6495 |              21.2577 |            108.512 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1246.681210592686\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-18-41\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.82323359316068\n",
+      "  episode_reward_max: 47.649484536082525\n",
+      "  episode_reward_mean: 42.700832190594205\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1553\n",
+      "  episodes_total: 11931\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9713874608278275\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00811462321629127\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013652926543727517\n",
+      "        total_loss: 2.0792956252892814\n",
+      "        vf_explained_var: 0.9808939099311829\n",
+      "        vf_loss: 2.0918113390604653\n",
+      "    num_steps_sampled: 1294336\n",
+      "    num_steps_trained: 1294336\n",
+      "  iterations_since_restore: 8\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.708000000000002\n",
+      "    gpu_util_percent0: 0.412\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.52\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15626045608420333\n",
+      "    mean_env_wait_ms: 0.6560445478078366\n",
+      "    mean_inference_ms: 4.437668893602004\n",
+      "    mean_raw_obs_processing_ms: 0.41044660220855933\n",
+      "  time_since_restore: 165.08657550811768\n",
+      "  time_this_iter_s: 20.183735609054565\n",
+      "  time_total_s: 165.08657550811768\n",
+      "  timers:\n",
+      "    learn_throughput: 11297.099\n",
+      "    learn_time_ms: 14321.553\n",
+      "    sample_throughput: 26119.381\n",
+      "    sample_time_ms: 6194.327\n",
+      "    update_time_ms: 35.89\n",
+      "  timestamp: 1604233121\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1294336\n",
+      "  training_iteration: 8\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      8 |          165.087 | 1294336 |  42.7008 |              47.6495 |              21.2577 |            107.823 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1238.4053151213718\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-19-01\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.21781298585918\n",
+      "  episode_reward_max: 47.649484536082525\n",
+      "  episode_reward_mean: 43.115104119360794\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1576\n",
+      "  episodes_total: 13507\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9416759212811788\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0077835753715286655\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013627580524674462\n",
+      "        total_loss: 1.650565932194392\n",
+      "        vf_explained_var: 0.9848251938819885\n",
+      "        vf_loss: 1.663107653458913\n",
+      "    num_steps_sampled: 1456128\n",
+      "    num_steps_trained: 1456128\n",
+      "  iterations_since_restore: 9\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.308000000000003\n",
+      "    gpu_util_percent0: 0.392\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15550241078926047\n",
+      "    mean_env_wait_ms: 0.6554019389170324\n",
+      "    mean_inference_ms: 4.404255773765493\n",
+      "    mean_raw_obs_processing_ms: 0.40821271351444455\n",
+      "  time_since_restore: 185.5122389793396\n",
+      "  time_this_iter_s: 20.425663471221924\n",
+      "  time_total_s: 185.5122389793396\n",
+      "  timers:\n",
+      "    learn_throughput: 11288.215\n",
+      "    learn_time_ms: 14332.825\n",
+      "    sample_throughput: 26270.178\n",
+      "    sample_time_ms: 6158.771\n",
+      "    update_time_ms: 34.616\n",
+      "  timestamp: 1604233141\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1456128\n",
+      "  training_iteration: 9\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      9 |          185.512 | 1456128 |  43.1151 |              47.6495 |              21.2577 |            107.218 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1231.2265303412562\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-19-22\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.66975758378594\n",
+      "  episode_reward_max: 47.64948453608253\n",
+      "  episode_reward_mean: 43.48257774293858\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1591\n",
+      "  episodes_total: 15098\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9080682247877121\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007657797929520409\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010565590860399729\n",
+      "        total_loss: 1.296636829773585\n",
+      "        vf_explained_var: 0.988224446773529\n",
+      "        vf_loss: 1.3061249554157257\n",
+      "    num_steps_sampled: 1617920\n",
+      "    num_steps_trained: 1617920\n",
+      "  iterations_since_restore: 10\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.03333333333333\n",
+      "    gpu_util_percent0: 0.4579166666666667\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15484288964237733\n",
+      "    mean_env_wait_ms: 0.6549145589836158\n",
+      "    mean_inference_ms: 4.3750244337617135\n",
+      "    mean_raw_obs_processing_ms: 0.4062248434702486\n",
+      "  time_since_restore: 205.5452425479889\n",
+      "  time_this_iter_s: 20.033003568649292\n",
+      "  time_total_s: 205.5452425479889\n",
+      "  timers:\n",
+      "    learn_throughput: 11294.037\n",
+      "    learn_time_ms: 14325.435\n",
+      "    sample_throughput: 26494.427\n",
+      "    sample_time_ms: 6106.643\n",
+      "    update_time_ms: 33.514\n",
+      "  timestamp: 1604233162\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1617920\n",
+      "  training_iteration: 10\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     10 |          205.545 | 1617920 |  43.4826 |              47.6495 |              21.2577 |             106.67 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1224.8779111644658\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-19-42\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.19435793004313\n",
+      "  episode_reward_max: 47.64948453608253\n",
+      "  episode_reward_mean: 43.804279931238554\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1598\n",
+      "  episodes_total: 16696\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8727221091588339\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007556108757853508\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012766734405886382\n",
+      "        total_loss: 1.0635682841142018\n",
+      "        vf_explained_var: 0.9903334975242615\n",
+      "        vf_loss: 1.0752601623535156\n",
+      "    num_steps_sampled: 1779712\n",
+      "    num_steps_trained: 1779712\n",
+      "  iterations_since_restore: 11\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.6375\n",
+      "    gpu_util_percent0: 0.4445833333333334\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1542607271772269\n",
+      "    mean_env_wait_ms: 0.6545202251025621\n",
+      "    mean_inference_ms: 4.349215320409436\n",
+      "    mean_raw_obs_processing_ms: 0.4044561449167446\n",
+      "  time_since_restore: 225.5202054977417\n",
+      "  time_this_iter_s: 19.974962949752808\n",
+      "  time_total_s: 225.5202054977417\n",
+      "  timers:\n",
+      "    learn_throughput: 11330.871\n",
+      "    learn_time_ms: 14278.867\n",
+      "    sample_throughput: 27121.909\n",
+      "    sample_time_ms: 5965.362\n",
+      "    update_time_ms: 33.265\n",
+      "  timestamp: 1604233182\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1779712\n",
+      "  training_iteration: 11\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     11 |           225.52 | 1779712 |  43.8043 |              47.6495 |              21.2577 |            106.194 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1219.3561336254106\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-20-02\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.77831219938784\n",
+      "  episode_reward_max: 47.64948453608253\n",
+      "  episode_reward_mean: 44.08295937594382\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1600\n",
+      "  episodes_total: 18296\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8348831733067831\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007376410067081451\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009320069143238166\n",
+      "        total_loss: 0.8637631287177404\n",
+      "        vf_explained_var: 0.99216228723526\n",
+      "        vf_loss: 0.8720253507296244\n",
+      "    num_steps_sampled: 1941504\n",
+      "    num_steps_trained: 1941504\n",
+      "  iterations_since_restore: 12\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.623999999999995\n",
+      "    gpu_util_percent0: 0.364\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15375450185882147\n",
+      "    mean_env_wait_ms: 0.6542416074847509\n",
+      "    mean_inference_ms: 4.326388244632185\n",
+      "    mean_raw_obs_processing_ms: 0.4028915881034749\n",
+      "  time_since_restore: 245.75802636146545\n",
+      "  time_this_iter_s: 20.237820863723755\n",
+      "  time_total_s: 245.75802636146545\n",
+      "  timers:\n",
+      "    learn_throughput: 11325.614\n",
+      "    learn_time_ms: 14285.495\n",
+      "    sample_throughput: 27660.054\n",
+      "    sample_time_ms: 5849.302\n",
+      "    update_time_ms: 30.809\n",
+      "  timestamp: 1604233202\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1941504\n",
+      "  training_iteration: 12\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     12 |          245.758 | 1941504 |   44.083 |              47.6495 |              21.2577 |            105.778 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1214.5580739397603\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-20-23\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.4173956762192\n",
+      "  episode_reward_max: 47.64948453608254\n",
+      "  episode_reward_mean: 44.32935526840925\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1594\n",
+      "  episodes_total: 19890\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7998430083195368\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006828729490128656\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011044965135321641\n",
+      "        total_loss: 0.67805515229702\n",
+      "        vf_explained_var: 0.9938119053840637\n",
+      "        vf_loss: 0.6881343126296997\n",
+      "    num_steps_sampled: 2103296\n",
+      "    num_steps_trained: 2103296\n",
+      "  iterations_since_restore: 13\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.831999999999997\n",
+      "    gpu_util_percent0: 0.43200000000000005\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.153302992513867\n",
+      "    mean_env_wait_ms: 0.6540089232561519\n",
+      "    mean_inference_ms: 4.306101213317678\n",
+      "    mean_raw_obs_processing_ms: 0.40148742506884494\n",
+      "  time_since_restore: 266.1050407886505\n",
+      "  time_this_iter_s: 20.34701442718506\n",
+      "  time_total_s: 266.1050407886505\n",
+      "  timers:\n",
+      "    learn_throughput: 11312.078\n",
+      "    learn_time_ms: 14302.589\n",
+      "    sample_throughput: 27960.684\n",
+      "    sample_time_ms: 5786.411\n",
+      "    update_time_ms: 28.901\n",
+      "  timestamp: 1604233223\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2103296\n",
+      "  training_iteration: 13\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     13 |          266.105 | 2103296 |  44.3294 |              47.6495 |              21.2577 |            105.417 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1210.317556539986\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-20-43\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.1013919277501\n",
+      "  episode_reward_max: 47.64948453608254\n",
+      "  episode_reward_mean: 44.54546357677872\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1591\n",
+      "  episodes_total: 21481\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7677376766999563\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00645853765308857\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009221890567763088\n",
+      "        total_loss: 0.5704321513573328\n",
+      "        vf_explained_var: 0.9948087334632874\n",
+      "        vf_loss: 0.5787462194760641\n",
+      "    num_steps_sampled: 2265088\n",
+      "    num_steps_trained: 2265088\n",
+      "  iterations_since_restore: 14\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.299999999999997\n",
+      "    gpu_util_percent0: 0.3692\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15289862610010913\n",
+      "    mean_env_wait_ms: 0.6538353499990455\n",
+      "    mean_inference_ms: 4.287840220794161\n",
+      "    mean_raw_obs_processing_ms: 0.40022401934261076\n",
+      "  time_since_restore: 286.03195905685425\n",
+      "  time_this_iter_s: 19.926918268203735\n",
+      "  time_total_s: 286.03195905685425\n",
+      "  timers:\n",
+      "    learn_throughput: 11326.239\n",
+      "    learn_time_ms: 14284.707\n",
+      "    sample_throughput: 28153.263\n",
+      "    sample_time_ms: 5746.83\n",
+      "    update_time_ms: 28.453\n",
+      "  timestamp: 1604233243\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2265088\n",
+      "  training_iteration: 14\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     14 |          286.032 | 2265088 |  44.5455 |              47.6495 |              21.2577 |            105.101 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1206.554523354749\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-21-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.81341019417475\n",
+      "  episode_reward_max: 47.64948453608254\n",
+      "  episode_reward_mean: 44.73924255043826\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1591\n",
+      "  episodes_total: 23072\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.733478844165802\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00630180553222696\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01086452438418443\n",
+      "        total_loss: 0.44883622725804645\n",
+      "        vf_explained_var: 0.9958701133728027\n",
+      "        vf_loss: 0.4588071381052335\n",
+      "    num_steps_sampled: 2426880\n",
+      "    num_steps_trained: 2426880\n",
+      "  iterations_since_restore: 15\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.691666666666666\n",
+      "    gpu_util_percent0: 0.42\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1525331053770261\n",
+      "    mean_env_wait_ms: 0.6537007767835614\n",
+      "    mean_inference_ms: 4.271271460769205\n",
+      "    mean_raw_obs_processing_ms: 0.39907289277823804\n",
+      "  time_since_restore: 306.18409848213196\n",
+      "  time_this_iter_s: 20.15213942527771\n",
+      "  time_total_s: 306.18409848213196\n",
+      "  timers:\n",
+      "    learn_throughput: 11336.437\n",
+      "    learn_time_ms: 14271.856\n",
+      "    sample_throughput: 28161.1\n",
+      "    sample_time_ms: 5745.23\n",
+      "    update_time_ms: 27.237\n",
+      "  timestamp: 1604233264\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2426880\n",
+      "  training_iteration: 15\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     15 |          306.184 | 2426880 |  44.7392 |              47.6495 |              21.2577 |            104.813 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1203.1918253034055\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-21-25\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.54650832894256\n",
+      "  episode_reward_max: 47.64948453608254\n",
+      "  episode_reward_mean: 44.91062311529655\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1601\n",
+      "  episodes_total: 24673\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7046740502119064\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00598089622023205\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010109954212869829\n",
+      "        total_loss: 0.3878796820839246\n",
+      "        vf_explained_var: 0.9964661002159119\n",
+      "        vf_loss: 0.39714578290780383\n",
+      "    num_steps_sampled: 2588672\n",
+      "    num_steps_trained: 2588672\n",
+      "  iterations_since_restore: 16\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.084\n",
+      "    gpu_util_percent0: 0.4572\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15220062387999952\n",
+      "    mean_env_wait_ms: 0.653596423305203\n",
+      "    mean_inference_ms: 4.256089606710892\n",
+      "    mean_raw_obs_processing_ms: 0.3980153671992771\n",
+      "  time_since_restore: 326.27552032470703\n",
+      "  time_this_iter_s: 20.091421842575073\n",
+      "  time_total_s: 326.27552032470703\n",
+      "  timers:\n",
+      "    learn_throughput: 11333.689\n",
+      "    learn_time_ms: 14275.316\n",
+      "    sample_throughput: 28301.321\n",
+      "    sample_time_ms: 5716.765\n",
+      "    update_time_ms: 25.405\n",
+      "  timestamp: 1604233285\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2588672\n",
+      "  training_iteration: 16\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     16 |          326.276 | 2588672 |  44.9106 |              47.6495 |              21.2577 |            104.547 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1200.1823688521467\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-21-45\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.30184515883583\n",
+      "  episode_reward_max: 47.64948453608254\n",
+      "  episode_reward_mean: 45.06611508661011\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1612\n",
+      "  episodes_total: 26285\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6727208147446314\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0061663844001789885\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00950972737094465\n",
+      "        total_loss: 0.2949073016643524\n",
+      "        vf_explained_var: 0.9973233342170715\n",
+      "        vf_loss: 0.3035201082626979\n",
+      "    num_steps_sampled: 2750464\n",
+      "    num_steps_trained: 2750464\n",
+      "  iterations_since_restore: 17\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.068\n",
+      "    gpu_util_percent0: 0.38800000000000007\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15189563586672175\n",
+      "    mean_env_wait_ms: 0.653528700746639\n",
+      "    mean_inference_ms: 4.242058406187237\n",
+      "    mean_raw_obs_processing_ms: 0.3970431055250104\n",
+      "  time_since_restore: 346.44066858291626\n",
+      "  time_this_iter_s: 20.16514825820923\n",
+      "  time_total_s: 346.44066858291626\n",
+      "  timers:\n",
+      "    learn_throughput: 11331.786\n",
+      "    learn_time_ms: 14277.714\n",
+      "    sample_throughput: 28373.21\n",
+      "    sample_time_ms: 5702.28\n",
+      "    update_time_ms: 26.064\n",
+      "  timestamp: 1604233305\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2750464\n",
+      "  training_iteration: 17\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     17 |          346.441 | 2750464 |  45.0661 |              47.6495 |              21.2577 |            104.302 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1197.4265528618562\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-22-06\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.07865329512894\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.20858749593833\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1635\n",
+      "  episodes_total: 27920\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6462279756863912\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005753972722838323\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01063174061710015\n",
+      "        total_loss: 0.2318790778517723\n",
+      "        vf_explained_var: 0.997880220413208\n",
+      "        vf_loss: 0.2416831391553084\n",
+      "    num_steps_sampled: 2912256\n",
+      "    num_steps_trained: 2912256\n",
+      "  iterations_since_restore: 18\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.45416666666667\n",
+      "    gpu_util_percent0: 0.44875\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1516142332871325\n",
+      "    mean_env_wait_ms: 0.6534803822249593\n",
+      "    mean_inference_ms: 4.229062941307127\n",
+      "    mean_raw_obs_processing_ms: 0.3961363429731068\n",
+      "  time_since_restore: 366.4673285484314\n",
+      "  time_this_iter_s: 20.026659965515137\n",
+      "  time_total_s: 366.4673285484314\n",
+      "  timers:\n",
+      "    learn_throughput: 11321.995\n",
+      "    learn_time_ms: 14290.061\n",
+      "    sample_throughput: 28529.416\n",
+      "    sample_time_ms: 5671.059\n",
+      "    update_time_ms: 25.131\n",
+      "  timestamp: 1604233326\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2912256\n",
+      "  training_iteration: 18\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     18 |          366.467 | 2912256 |  45.2086 |              47.6495 |              21.2577 |            104.079 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1194.9799281209737\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-22-27\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.87829326109042\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.33514231552049\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1610\n",
+      "  episodes_total: 29530\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6139073818922043\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005659738904796541\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009704548533287985\n",
+      "        total_loss: 0.19860607013106346\n",
+      "        vf_explained_var: 0.9981780648231506\n",
+      "        vf_loss: 0.20748562117417654\n",
+      "    num_steps_sampled: 3074048\n",
+      "    num_steps_trained: 3074048\n",
+      "  iterations_since_restore: 19\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.747999999999998\n",
+      "    gpu_util_percent0: 0.39640000000000003\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15135749897686426\n",
+      "    mean_env_wait_ms: 0.6534384087466466\n",
+      "    mean_inference_ms: 4.217280786349381\n",
+      "    mean_raw_obs_processing_ms: 0.3953083892816526\n",
+      "  time_since_restore: 386.6138005256653\n",
+      "  time_this_iter_s: 20.146471977233887\n",
+      "  time_total_s: 386.6138005256653\n",
+      "  timers:\n",
+      "    learn_throughput: 11328.703\n",
+      "    learn_time_ms: 14281.599\n",
+      "    sample_throughput: 28668.019\n",
+      "    sample_time_ms: 5643.641\n",
+      "    update_time_ms: 26.007\n",
+      "  timestamp: 1604233347\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3074048\n",
+      "  training_iteration: 19\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     19 |          386.614 | 3074048 |  45.3351 |              47.6495 |              21.2577 |            103.878 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1192.755491943006\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-22-47\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.69467022199376\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.44938246008456\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1597\n",
+      "  episodes_total: 31127\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5885171492894491\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00575300360408922\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008459999109618366\n",
+      "        total_loss: 0.1491255114475886\n",
+      "        vf_explained_var: 0.9986266493797302\n",
+      "        vf_loss: 0.15672916546463966\n",
+      "    num_steps_sampled: 3235840\n",
+      "    num_steps_trained: 3235840\n",
+      "  iterations_since_restore: 20\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.32\n",
+      "    gpu_util_percent0: 0.33520000000000005\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15111988887105687\n",
+      "    mean_env_wait_ms: 0.6534000992030266\n",
+      "    mean_inference_ms: 4.206433415272165\n",
+      "    mean_raw_obs_processing_ms: 0.39454176059647716\n",
+      "  time_since_restore: 406.58024430274963\n",
+      "  time_this_iter_s: 19.96644377708435\n",
+      "  time_total_s: 406.58024430274963\n",
+      "  timers:\n",
+      "    learn_throughput: 11334.136\n",
+      "    learn_time_ms: 14274.754\n",
+      "    sample_throughput: 28704.988\n",
+      "    sample_time_ms: 5636.372\n",
+      "    update_time_ms: 26.077\n",
+      "  timestamp: 1604233367\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3235840\n",
+      "  training_iteration: 20\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     20 |           406.58 | 3235840 |  45.4494 |              47.6495 |              21.2577 |            103.695 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1190.7317714705164\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-23-08\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.52679335207137\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.553595837989505\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1605\n",
+      "  episodes_total: 32732\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5605561385552088\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0051246628087634844\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00707746635695609\n",
+      "        total_loss: 0.12786801221470037\n",
+      "        vf_explained_var: 0.9988241195678711\n",
+      "        vf_loss: 0.13420082504550615\n",
+      "    num_steps_sampled: 3397632\n",
+      "    num_steps_trained: 3397632\n",
+      "  iterations_since_restore: 21\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.108\n",
+      "    gpu_util_percent0: 0.36239999999999994\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1508982454274576\n",
+      "    mean_env_wait_ms: 0.6533685645927871\n",
+      "    mean_inference_ms: 4.196348243483211\n",
+      "    mean_raw_obs_processing_ms: 0.393820825357919\n",
+      "  time_since_restore: 426.77583384513855\n",
+      "  time_this_iter_s: 20.195589542388916\n",
+      "  time_total_s: 426.77583384513855\n",
+      "  timers:\n",
+      "    learn_throughput: 11330.776\n",
+      "    learn_time_ms: 14278.986\n",
+      "    sample_throughput: 28644.617\n",
+      "    sample_time_ms: 5648.251\n",
+      "    update_time_ms: 25.717\n",
+      "  timestamp: 1604233388\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3397632\n",
+      "  training_iteration: 21\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     21 |          426.776 | 3397632 |  45.5536 |              47.6495 |              21.2577 |            103.527 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1188.871339064549\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-23-29\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.37087712148119\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.649092584828495\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1619\n",
+      "  episodes_total: 34351\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5297549913326899\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005221013678237796\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007347211508507219\n",
+      "        total_loss: 0.11089812219142914\n",
+      "        vf_explained_var: 0.9989762306213379\n",
+      "        vf_loss: 0.11746600580712159\n",
+      "    num_steps_sampled: 3559424\n",
+      "    num_steps_trained: 3559424\n",
+      "  iterations_since_restore: 22\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.358333333333334\n",
+      "    gpu_util_percent0: 0.4533333333333333\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15069056354724808\n",
+      "    mean_env_wait_ms: 0.6533427688463339\n",
+      "    mean_inference_ms: 4.1868632869880145\n",
+      "    mean_raw_obs_processing_ms: 0.3931430489205958\n",
+      "  time_since_restore: 447.03629064559937\n",
+      "  time_this_iter_s: 20.260456800460815\n",
+      "  time_total_s: 447.03629064559937\n",
+      "  timers:\n",
+      "    learn_throughput: 11328.702\n",
+      "    learn_time_ms: 14281.601\n",
+      "    sample_throughput: 28676.086\n",
+      "    sample_time_ms: 5642.053\n",
+      "    update_time_ms: 25.502\n",
+      "  timestamp: 1604233409\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3559424\n",
+      "  training_iteration: 22\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     22 |          447.036 | 3559424 |  45.6491 |              47.6495 |              21.2577 |            103.371 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1187.1485870048955\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-23-50\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.22507502500834\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.737731878552886\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1637\n",
+      "  episodes_total: 35988\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5043502772847811\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0051153005721668405\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007804131872641544\n",
+      "        total_loss: 0.08389338354269664\n",
+      "        vf_explained_var: 0.9992172718048096\n",
+      "        vf_loss: 0.09092663104335467\n",
+      "    num_steps_sampled: 3721216\n",
+      "    num_steps_trained: 3721216\n",
+      "  iterations_since_restore: 23\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.10769230769231\n",
+      "    gpu_util_percent0: 0.4111538461538462\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5692307692307685\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1504958593946037\n",
+      "    mean_env_wait_ms: 0.6533264567796601\n",
+      "    mean_inference_ms: 4.177979473432433\n",
+      "    mean_raw_obs_processing_ms: 0.39250620871910297\n",
+      "  time_since_restore: 467.43437933921814\n",
+      "  time_this_iter_s: 20.398088693618774\n",
+      "  time_total_s: 467.43437933921814\n",
+      "  timers:\n",
+      "    learn_throughput: 11352.718\n",
+      "    learn_time_ms: 14251.389\n",
+      "    sample_throughput: 28591.581\n",
+      "    sample_time_ms: 5658.729\n",
+      "    update_time_ms: 26.115\n",
+      "  timestamp: 1604233430\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3721216\n",
+      "  training_iteration: 23\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     23 |          467.434 | 3721216 |  45.7377 |              47.6495 |              21.2577 |            103.225 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1185.5975664953805\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-24-11\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.0935496741588\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.817267047191805\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1607\n",
+      "  episodes_total: 37595\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.477857805788517\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005301223369315267\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007187186017593679\n",
+      "        total_loss: 0.0712860906496644\n",
+      "        vf_explained_var: 0.9993272423744202\n",
+      "        vf_loss: 0.07765195891261101\n",
+      "    num_steps_sampled: 3883008\n",
+      "    num_steps_trained: 3883008\n",
+      "  iterations_since_restore: 24\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.808000000000003\n",
+      "    gpu_util_percent0: 0.41159999999999997\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1503165502098337\n",
+      "    mean_env_wait_ms: 0.6533168664023659\n",
+      "    mean_inference_ms: 4.1697739229427855\n",
+      "    mean_raw_obs_processing_ms: 0.39192023267055776\n",
+      "  time_since_restore: 487.5962927341461\n",
+      "  time_this_iter_s: 20.16191339492798\n",
+      "  time_total_s: 487.5962927341461\n",
+      "  timers:\n",
+      "    learn_throughput: 11345.276\n",
+      "    learn_time_ms: 14260.737\n",
+      "    sample_throughput: 28572.718\n",
+      "    sample_time_ms: 5662.465\n",
+      "    update_time_ms: 25.82\n",
+      "  timestamp: 1604233451\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3883008\n",
+      "  training_iteration: 24\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     24 |          487.596 | 3883008 |  45.8173 |              47.6495 |              21.2577 |            103.094 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1184.1811960574025\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-24-32\n",
+      "  done: false\n",
+      "  episode_len_mean: 102.9715546711567\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.8903373462669\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1603\n",
+      "  episodes_total: 39198\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4582882300019264\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004777276888489723\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006818818922814292\n",
+      "        total_loss: 0.06491830727706353\n",
+      "        vf_explained_var: 0.9993811249732971\n",
+      "        vf_loss: 0.07101081249614556\n",
+      "    num_steps_sampled: 4044800\n",
+      "    num_steps_trained: 4044800\n",
+      "  iterations_since_restore: 25\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.5\n",
+      "    gpu_util_percent0: 0.4164\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15014800244823473\n",
+      "    mean_env_wait_ms: 0.6533117275008512\n",
+      "    mean_inference_ms: 4.162086682670796\n",
+      "    mean_raw_obs_processing_ms: 0.3913710326970964\n",
+      "  time_since_restore: 507.939138174057\n",
+      "  time_this_iter_s: 20.34284543991089\n",
+      "  time_total_s: 507.939138174057\n",
+      "  timers:\n",
+      "    learn_throughput: 11324.044\n",
+      "    learn_time_ms: 14287.476\n",
+      "    sample_throughput: 28578.2\n",
+      "    sample_time_ms: 5661.378\n",
+      "    update_time_ms: 26.054\n",
+      "  timestamp: 1604233472\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4044800\n",
+      "  training_iteration: 25\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "2020-11-01 12:24:33,109\tWARNING util.py:136 -- The `process_trial` operation took 0.5145235061645508 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     25 |          507.939 | 4044800 |  45.8903 |              47.6495 |              21.2577 |            102.972 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1182.8508853681267\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-24-53\n",
+      "  done: false\n",
+      "  episode_len_mean: 102.8577064444989\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.95893087655392\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1612\n",
+      "  episodes_total: 40810\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4304437041282654\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005302870219262938\n",
+      "        model: {}\n",
+      "        policy_loss: -0.005320634130233278\n",
+      "        total_loss: 0.04602197107548515\n",
+      "        vf_explained_var: 0.9995622038841248\n",
+      "        vf_loss: 0.05102753918617964\n",
+      "    num_steps_sampled: 4206592\n",
+      "    num_steps_trained: 4206592\n",
+      "  iterations_since_restore: 26\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.031999999999996\n",
+      "    gpu_util_percent0: 0.4016\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14998848423358552\n",
+      "    mean_env_wait_ms: 0.6533120076712385\n",
+      "    mean_inference_ms: 4.154808738528033\n",
+      "    mean_raw_obs_processing_ms: 0.39085074710802764\n",
+      "  time_since_restore: 528.287171125412\n",
+      "  time_this_iter_s: 20.34803295135498\n",
+      "  time_total_s: 528.287171125412\n",
+      "  timers:\n",
+      "    learn_throughput: 11314.942\n",
+      "    learn_time_ms: 14298.969\n",
+      "    sample_throughput: 28539.444\n",
+      "    sample_time_ms: 5669.066\n",
+      "    update_time_ms: 26.44\n",
+      "  timestamp: 1604233493\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4206592\n",
+      "  training_iteration: 26\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "2020-11-01 12:24:54,161\tWARNING util.py:136 -- The `process_trial` operation took 0.5190365314483643 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     26 |          528.287 | 4206592 |  45.9589 |              47.6495 |              21.2577 |            102.858 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1181.6014053620693\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-25-14\n",
+      "  done: false\n",
+      "  episode_len_mean: 102.75047708799623\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 46.02298669108478\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1635\n",
+      "  episodes_total: 42445\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.40619519104560214\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004850935540162027\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00712713325143947\n",
+      "        total_loss: 0.04109010814378659\n",
+      "        vf_explained_var: 0.9995940327644348\n",
+      "        vf_loss: 0.047935244316856064\n",
+      "    num_steps_sampled: 4368384\n",
+      "    num_steps_trained: 4368384\n",
+      "  iterations_since_restore: 27\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.9\n",
+      "    gpu_util_percent0: 0.4608\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14983678273441456\n",
+      "    mean_env_wait_ms: 0.6533202946066505\n",
+      "    mean_inference_ms: 4.147883359756837\n",
+      "    mean_raw_obs_processing_ms: 0.3903567513935103\n",
+      "  time_since_restore: 548.3913764953613\n",
+      "  time_this_iter_s: 20.10420536994934\n",
+      "  time_total_s: 548.3913764953613\n",
+      "  timers:\n",
+      "    learn_throughput: 11320.7\n",
+      "    learn_time_ms: 14291.696\n",
+      "    sample_throughput: 28538.222\n",
+      "    sample_time_ms: 5669.309\n",
+      "    update_time_ms: 25.152\n",
+      "  timestamp: 1604233514\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4368384\n",
+      "  training_iteration: 27\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "2020-11-01 12:25:14,990\tWARNING util.py:136 -- The `process_trial` operation took 0.5334711074829102 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     27 |          548.391 | 4368384 |   46.023 |              47.6495 |              21.2577 |             102.75 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1180.4515455020326\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-25-35\n",
+      "  done: false\n",
+      "  episode_len_mean: 102.6508271495677\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 46.08214646909499\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1622\n",
+      "  episodes_total: 44067\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.380776509642601\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005104163157132764\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008030562166823074\n",
+      "        total_loss: 0.03263539479424556\n",
+      "        vf_explained_var: 0.9996626377105713\n",
+      "        vf_loss: 0.0406011367837588\n",
+      "    num_steps_sampled: 4530176\n",
+      "    num_steps_trained: 4530176\n",
+      "  iterations_since_restore: 28\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.724\n",
+      "    gpu_util_percent0: 0.3708000000000001\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14969387594042302\n",
+      "    mean_env_wait_ms: 0.6533341674809083\n",
+      "    mean_inference_ms: 4.141387554786562\n",
+      "    mean_raw_obs_processing_ms: 0.3898925942202909\n",
+      "  time_since_restore: 568.5405015945435\n",
+      "  time_this_iter_s: 20.14912509918213\n",
+      "  time_total_s: 568.5405015945435\n",
+      "  timers:\n",
+      "    learn_throughput: 11317.578\n",
+      "    learn_time_ms: 14295.638\n",
+      "    sample_throughput: 28540.327\n",
+      "    sample_time_ms: 5668.891\n",
+      "    update_time_ms: 27.131\n",
+      "  timestamp: 1604233535\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4530176\n",
+      "  training_iteration: 28\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "2020-11-01 12:25:35,895\tWARNING util.py:136 -- The `process_trial` operation took 0.5552034378051758 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     28 |          568.541 | 4530176 |  46.0821 |              47.6495 |              21.2577 |            102.651 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1179.389183503528\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-25-56\n",
+      "  done: false\n",
+      "  episode_len_mean: 102.55971097000219\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 46.136667351393584\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1603\n",
+      "  episodes_total: 45670\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3589545438687007\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005236083525232971\n",
+      "        model: {}\n",
+      "        policy_loss: -0.005505533023097087\n",
+      "        total_loss: 0.02439635860112806\n",
+      "        vf_explained_var: 0.9997479915618896\n",
+      "        vf_loss: 0.029819565049062174\n",
+      "    num_steps_sampled: 4691968\n",
+      "    num_steps_trained: 4691968\n",
+      "  iterations_since_restore: 29\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.04\n",
+      "    gpu_util_percent0: 0.3832\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14955992403902243\n",
+      "    mean_env_wait_ms: 0.65334881821503\n",
+      "    mean_inference_ms: 4.135306265563136\n",
+      "    mean_raw_obs_processing_ms: 0.3894575857046042\n",
+      "  time_since_restore: 588.7653107643127\n",
+      "  time_this_iter_s: 20.224809169769287\n",
+      "  time_total_s: 588.7653107643127\n",
+      "  timers:\n",
+      "    learn_throughput: 11315.541\n",
+      "    learn_time_ms: 14298.212\n",
+      "    sample_throughput: 28543.882\n",
+      "    sample_time_ms: 5668.185\n",
+      "    update_time_ms: 27.394\n",
+      "  timestamp: 1604233556\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4691968\n",
+      "  training_iteration: 29\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "2020-11-01 12:25:56,904\tWARNING util.py:136 -- The `process_trial` operation took 0.5792350769042969 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     29 |          588.765 | 4691968 |  46.1367 |              47.6495 |              21.2577 |             102.56 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1178.4016808145811\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-26-17\n",
+      "  done: true\n",
+      "  episode_len_mean: 102.47428873611845\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 46.187587432602626\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1605\n",
+      "  episodes_total: 47275\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.34163280328114826\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005014610709622502\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006093008596508298\n",
+      "        total_loss: 0.02250015801594903\n",
+      "        vf_explained_var: 0.9997627139091492\n",
+      "        vf_loss: 0.028513251959035795\n",
+      "    num_steps_sampled: 4853760\n",
+      "    num_steps_trained: 4853760\n",
+      "  iterations_since_restore: 30\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.592000000000002\n",
+      "    gpu_util_percent0: 0.4032\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14943275367352743\n",
+      "    mean_env_wait_ms: 0.6533656820836667\n",
+      "    mean_inference_ms: 4.129545135974801\n",
+      "    mean_raw_obs_processing_ms: 0.38904409500028486\n",
+      "  time_since_restore: 608.9674067497253\n",
+      "  time_this_iter_s: 20.202095985412598\n",
+      "  time_total_s: 608.9674067497253\n",
+      "  timers:\n",
+      "    learn_throughput: 11308.582\n",
+      "    learn_time_ms: 14307.01\n",
+      "    sample_throughput: 28493.852\n",
+      "    sample_time_ms: 5678.137\n",
+      "    update_time_ms: 27.445\n",
+      "  timestamp: 1604233577\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4853760\n",
+      "  training_iteration: 30\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "2020-11-01 12:26:18,072\tWARNING util.py:136 -- The `process_trial` operation took 0.6780698299407959 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | TERMINATED |       |     30 |          608.967 | 4853760 |  46.1876 |              47.6495 |              21.2577 |            102.474 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.2/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | TERMINATED |       |     30 |          608.967 | 4853760 |  46.1876 |              47.6495 |              21.2577 |            102.474 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 2387\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201013_114553-3qwfavbb/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201013_114553-3qwfavbb/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201101_121542-dcx4y6ut/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201101_121542-dcx4y6ut/logs/debug-internal.log\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 4473\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 261.82891\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 280.71717\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     time_step_min 3203\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 607\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602590160\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min 1150\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step 7\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime 636\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp 1604233578\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max 1662\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean 1178.40168\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max 47.64948\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min 21.25773\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean 46.18759\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total 47275\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration 30\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     time_step_min ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step ‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration ‚ñÅ\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mrandom\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/3qwfavbb\u001b[0m\n",
-      "2020-10-13 11:56:07,517 - wandb.wandb_agent - INFO - Cleaning up finished run: 3qwfavbb\n",
-      "2020-10-13 11:56:07,847 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-13 11:56:07,847 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta52\n",
-      "2020-10-13 11:56:07,849 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python RandomGreedy.py --instance_path=/JSS/JSS/env/instances/ta52\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mdaily-sweep-3\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/dcx4y6ut\u001b[0m\n",
+      "2020-11-01 12:26:27,483 - wandb.wandb_agent - INFO - Cleaning up finished run: dcx4y6ut\n",
+      "2020-11-01 12:26:27,816 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-01 12:26:27,816 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/la/la14.txt\n",
+      "2020-11-01 12:26:27,818 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/la/la14.txt\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "2020-11-01 12:26:32,836 - wandb.wandb_agent - INFO - Running runs: ['fdb3wrbz']\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mrandom\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/1x8v92mc\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/av30c7rd\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201013_115608-av30c7rd\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mpretty-sweep-4\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/9xhkl8my\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/fdb3wrbz\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201101_122629-fdb3wrbz\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "2020-10-13 11:56:12,862 - wandb.wandb_agent - INFO - Running runs: ['av30c7rd']\n"
+      "2020-11-01 12:26:33,451\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "\n",
+      "\n",
+      "\u001b[2m\u001b[36m(pid=34519)\u001b[0m 2020-11-01 12:26:36,168\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=34570)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34570)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34576)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34576)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34560)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34560)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34533)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34533)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34524)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34524)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34568)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34568)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34565)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34565)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34446)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34446)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34580)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34580)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34537)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34537)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34514)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34514)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34563)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34563)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34513)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34513)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34574)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34574)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34541)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34541)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34468)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34468)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34562)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34562)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34507)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34507)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34529)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34529)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34531)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34531)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34470)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34470)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34455)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34455)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34456)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34456)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34534)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34534)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34569)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34569)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34471)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34471)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34520)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34520)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34528)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34528)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34530)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34530)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34557)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34557)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34464)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34464)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34526)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34526)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34457)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34457)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34451)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34451)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34559)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34559)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34460)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34460)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34539)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34539)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34555)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34555)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34512)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34512)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34544)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34544)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34572)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34572)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34466)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34466)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34448)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34448)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34467)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34467)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34478)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34478)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34469)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34469)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34449)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34449)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34453)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34453)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34445)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34445)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34462)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34462)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34564)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34564)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34461)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34461)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34452)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34452)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34550)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34550)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34552)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34552)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34454)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34454)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34525)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34525)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34518)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34518)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34472)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34472)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34473)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34473)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34527)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34527)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34447)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34447)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34521)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34521)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34545)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34545)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34474)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34474)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34465)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34465)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34546)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34546)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34444)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34444)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34450)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34450)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34506)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34506)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34509)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34509)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34517)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34517)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34458)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34458)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34504)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34504)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34522)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34522)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34511)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34511)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34532)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34532)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34510)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34510)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34523)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34523)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1454.2822384428223\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-27-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 116.8627760252366\n",
+      "  episode_reward_max: 43.628865979381466\n",
+      "  episode_reward_mean: 35.1516797294221\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1268\n",
+      "  episodes_total: 1268\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1449244519074757\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007437704674278696\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00946940048985804\n",
+      "        total_loss: 55.00797367095947\n",
+      "        vf_explained_var: 0.7487528324127197\n",
+      "        vf_loss: 55.01652844746908\n",
+      "    num_steps_sampled: 161792\n",
+      "    num_steps_trained: 161792\n",
+      "  iterations_since_restore: 1\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 33.32592592592592\n",
+      "    gpu_util_percent0: 0.37481481481481477\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.4333333333333336\n",
+      "    vram_util_percent0: 0.08172381958869332\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.17352791633057102\n",
+      "    mean_env_wait_ms: 0.6811877523118316\n",
+      "    mean_inference_ms: 5.513942130136428\n",
+      "    mean_raw_obs_processing_ms: 0.46789447756981023\n",
+      "  time_since_restore: 22.46462392807007\n",
+      "  time_this_iter_s: 22.46462392807007\n",
+      "  time_total_s: 22.46462392807007\n",
+      "  timers:\n",
+      "    learn_throughput: 11371.952\n",
+      "    learn_time_ms: 14227.284\n",
+      "    sample_throughput: 19879.837\n",
+      "    sample_time_ms: 8138.497\n",
+      "    update_time_ms: 45.686\n",
+      "  timestamp: 1604233624\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 161792\n",
+      "  training_iteration: 1\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.3/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      1 |          22.4646 | 161792 |  35.1517 |              43.6289 |              15.1237 |            116.863 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1429.8942416258938\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-27-24\n",
+      "  done: false\n",
+      "  episode_len_mean: 115.70282317979198\n",
+      "  episode_reward_max: 43.62886597938149\n",
+      "  episode_reward_mean: 36.47211286591811\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1424\n",
+      "  episodes_total: 2692\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1268550356229146\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008950442192144692\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011557365185581148\n",
+      "        total_loss: 11.271961530049643\n",
+      "        vf_explained_var: 0.8903374671936035\n",
+      "        vf_loss: 11.282292207082113\n",
+      "    num_steps_sampled: 323584\n",
+      "    num_steps_trained: 323584\n",
+      "  iterations_since_restore: 2\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 28.204166666666666\n",
+      "    gpu_util_percent0: 0.3720833333333333\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5041666666666664\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16745964588212917\n",
+      "    mean_env_wait_ms: 0.6700706773938075\n",
+      "    mean_inference_ms: 5.2198211020760175\n",
+      "    mean_raw_obs_processing_ms: 0.44909095470061955\n",
+      "  time_since_restore: 43.08302044868469\n",
+      "  time_this_iter_s: 20.618396520614624\n",
+      "  time_total_s: 43.08302044868469\n",
+      "  timers:\n",
+      "    learn_throughput: 11459.566\n",
+      "    learn_time_ms: 14118.51\n",
+      "    sample_throughput: 22090.571\n",
+      "    sample_time_ms: 7324.03\n",
+      "    update_time_ms: 43.623\n",
+      "  timestamp: 1604233644\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 323584\n",
+      "  training_iteration: 2\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      2 |           43.083 | 323584 |  36.4721 |              43.6289 |              15.1237 |            115.703 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1407.1911728846624\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-27-44\n",
+      "  done: false\n",
+      "  episode_len_mean: 114.6612669245648\n",
+      "  episode_reward_max: 43.62886597938149\n",
+      "  episode_reward_mean: 37.6345041775509\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1444\n",
+      "  episodes_total: 4136\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1022506852944691\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.010415543181200823\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012739738527064523\n",
+      "        total_loss: 7.215804258982341\n",
+      "        vf_explained_var: 0.9305369257926941\n",
+      "        vf_loss: 7.227012077967326\n",
+      "    num_steps_sampled: 485376\n",
+      "    num_steps_trained: 485376\n",
+      "  iterations_since_restore: 3\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.087500000000002\n",
+      "    gpu_util_percent0: 0.37166666666666665\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5083333333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16367371839915396\n",
+      "    mean_env_wait_ms: 0.6634994267663006\n",
+      "    mean_inference_ms: 5.010201052450705\n",
+      "    mean_raw_obs_processing_ms: 0.43679686634070053\n",
+      "  time_since_restore: 63.11474633216858\n",
+      "  time_this_iter_s: 20.031725883483887\n",
+      "  time_total_s: 63.11474633216858\n",
+      "  timers:\n",
+      "    learn_throughput: 11492.021\n",
+      "    learn_time_ms: 14078.638\n",
+      "    sample_throughput: 23568.631\n",
+      "    sample_time_ms: 6864.718\n",
+      "    update_time_ms: 36.686\n",
+      "  timestamp: 1604233664\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 485376\n",
+      "  training_iteration: 3\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      3 |          63.1147 | 485376 |  37.6345 |              43.6289 |              15.1237 |            114.661 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1387.3099946552645\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-28-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 113.46689093484419\n",
+      "  episode_reward_max: 43.62886597938149\n",
+      "  episode_reward_mean: 38.66655836570194\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1512\n",
+      "  episodes_total: 5648\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0769410530726116\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0091951551536719\n",
+      "        model: {}\n",
+      "        policy_loss: -0.014317200764101775\n",
+      "        total_loss: 4.537634372711182\n",
+      "        vf_explained_var: 0.9580438733100891\n",
+      "        vf_loss: 4.550650993982951\n",
+      "    num_steps_sampled: 647168\n",
+      "    num_steps_trained: 647168\n",
+      "  iterations_since_restore: 4\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.513043478260872\n",
+      "    gpu_util_percent0: 0.4282608695652175\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5173913043478255\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16103675868646175\n",
+      "    mean_env_wait_ms: 0.6593645086787177\n",
+      "    mean_inference_ms: 4.8577089246646405\n",
+      "    mean_raw_obs_processing_ms: 0.42820753933909217\n",
+      "  time_since_restore: 82.97024512290955\n",
+      "  time_this_iter_s: 19.855498790740967\n",
+      "  time_total_s: 82.97024512290955\n",
+      "  timers:\n",
+      "    learn_throughput: 11507.373\n",
+      "    learn_time_ms: 14059.855\n",
+      "    sample_throughput: 24572.569\n",
+      "    sample_time_ms: 6584.253\n",
+      "    update_time_ms: 36.417\n",
+      "  timestamp: 1604233684\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 647168\n",
+      "  training_iteration: 4\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      4 |          82.9702 | 647168 |  38.6666 |              43.6289 |              15.1237 |            113.467 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1372.565211247704\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-28-24\n",
+      "  done: false\n",
+      "  episode_len_mean: 112.40185601799774\n",
+      "  episode_reward_max: 43.62886597938149\n",
+      "  episode_reward_mean: 39.44358453260353\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1464\n",
+      "  episodes_total: 7112\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.044628421465556\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009637930120031038\n",
+      "        model: {}\n",
+      "        policy_loss: -0.015056621322097877\n",
+      "        total_loss: 3.0646530191103616\n",
+      "        vf_explained_var: 0.9720616936683655\n",
+      "        vf_loss: 3.0783043106396994\n",
+      "    num_steps_sampled: 808960\n",
+      "    num_steps_trained: 808960\n",
+      "  iterations_since_restore: 5\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.678260869565225\n",
+      "    gpu_util_percent0: 0.44782608695652176\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.508695652173913\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15917782673985395\n",
+      "    mean_env_wait_ms: 0.6566410931470792\n",
+      "    mean_inference_ms: 4.748845539400791\n",
+      "    mean_raw_obs_processing_ms: 0.4219900698653993\n",
+      "  time_since_restore: 102.53243446350098\n",
+      "  time_this_iter_s: 19.56218934059143\n",
+      "  time_total_s: 102.53243446350098\n",
+      "  timers:\n",
+      "    learn_throughput: 11519.656\n",
+      "    learn_time_ms: 14044.863\n",
+      "    sample_throughput: 25439.401\n",
+      "    sample_time_ms: 6359.898\n",
+      "    update_time_ms: 36.623\n",
+      "  timestamp: 1604233704\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 808960\n",
+      "  training_iteration: 5\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      5 |          102.532 | 808960 |  39.4436 |              43.6289 |              15.1237 |            112.402 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1360.8171568057655\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-28-44\n",
+      "  done: false\n",
+      "  episode_len_mean: 111.4935170178282\n",
+      "  episode_reward_max: 43.628865979381494\n",
+      "  episode_reward_mean: 40.051285019680485\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1526\n",
+      "  episodes_total: 8638\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.008226936062177\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008314594083155194\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011961210014609\n",
+      "        total_loss: 2.176027218500773\n",
+      "        vf_explained_var: 0.9811684489250183\n",
+      "        vf_loss: 2.1868296464284263\n",
+      "    num_steps_sampled: 970752\n",
+      "    num_steps_trained: 970752\n",
+      "  iterations_since_restore: 6\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.013043478260872\n",
+      "    gpu_util_percent0: 0.3617391304347826\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.526086956521739\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1576901249282025\n",
+      "    mean_env_wait_ms: 0.6545619856913595\n",
+      "    mean_inference_ms: 4.661154625197678\n",
+      "    mean_raw_obs_processing_ms: 0.41690510698628513\n",
+      "  time_since_restore: 122.15152668952942\n",
+      "  time_this_iter_s: 19.619092226028442\n",
+      "  time_total_s: 122.15152668952942\n",
+      "  timers:\n",
+      "    learn_throughput: 11527.252\n",
+      "    learn_time_ms: 14035.609\n",
+      "    sample_throughput: 26007.896\n",
+      "    sample_time_ms: 6220.88\n",
+      "    update_time_ms: 34.802\n",
+      "  timestamp: 1604233724\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 970752\n",
+      "  training_iteration: 6\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      6 |          122.152 | 970752 |  40.0513 |              43.6289 |              15.1237 |            111.494 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1351.9801127931137\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-29-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 110.74748570301716\n",
+      "  episode_reward_max: 43.628865979381494\n",
+      "  episode_reward_mean: 40.50685320002359\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1504\n",
+      "  episodes_total: 10142\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9799897919098536\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007559017394669354\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013409938372205943\n",
+      "        total_loss: 1.644661049048106\n",
+      "        vf_explained_var: 0.9860979914665222\n",
+      "        vf_loss: 1.657049189011256\n",
+      "    num_steps_sampled: 1132544\n",
+      "    num_steps_trained: 1132544\n",
+      "  iterations_since_restore: 7\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.617391304347827\n",
+      "    gpu_util_percent0: 0.4239130434782608\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5217391304347827\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15650830518376826\n",
+      "    mean_env_wait_ms: 0.6530945053208776\n",
+      "    mean_inference_ms: 4.592386951937845\n",
+      "    mean_raw_obs_processing_ms: 0.41293979722789786\n",
+      "  time_since_restore: 141.83420944213867\n",
+      "  time_this_iter_s: 19.682682752609253\n",
+      "  time_total_s: 141.83420944213867\n",
+      "  timers:\n",
+      "    learn_throughput: 11524.629\n",
+      "    learn_time_ms: 14038.804\n",
+      "    sample_throughput: 26444.386\n",
+      "    sample_time_ms: 6118.198\n",
+      "    update_time_ms: 34.8\n",
+      "  timestamp: 1604233744\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1132544\n",
+      "  training_iteration: 7\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      7 |          141.834 | 1132544 |  40.5069 |              43.6289 |              15.1237 |            110.747 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1344.8585277968427\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-29-24\n",
+      "  done: false\n",
+      "  episode_len_mean: 110.01317252587461\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 40.877048782789124\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1549\n",
+      "  episodes_total: 11691\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9412155350049337\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007740705274045467\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012592456245329231\n",
+      "        total_loss: 1.2588910659154255\n",
+      "        vf_explained_var: 0.9897112846374512\n",
+      "        vf_loss: 1.2704059382279713\n",
+      "    num_steps_sampled: 1294336\n",
+      "    num_steps_trained: 1294336\n",
+      "  iterations_since_restore: 8\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.641666666666662\n",
+      "    gpu_util_percent0: 0.36375\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15552725421090569\n",
+      "    mean_env_wait_ms: 0.6520038178299323\n",
+      "    mean_inference_ms: 4.534700600650504\n",
+      "    mean_raw_obs_processing_ms: 0.4096249844377919\n",
+      "  time_since_restore: 161.7805416584015\n",
+      "  time_this_iter_s: 19.946332216262817\n",
+      "  time_total_s: 161.7805416584015\n",
+      "  timers:\n",
+      "    learn_throughput: 11521.5\n",
+      "    learn_time_ms: 14042.616\n",
+      "    sample_throughput: 26651.946\n",
+      "    sample_time_ms: 6070.551\n",
+      "    update_time_ms: 35.676\n",
+      "  timestamp: 1604233764\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1294336\n",
+      "  training_iteration: 8\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      8 |          161.781 | 1294336 |   40.877 |              43.6289 |              15.1237 |            110.013 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1339.0663941252176\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-29-44\n",
+      "  done: false\n",
+      "  episode_len_mean: 109.368015705225\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 41.17822892762955\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1553\n",
+      "  episodes_total: 13244\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9079152892033259\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0072981525445356965\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010131318272518305\n",
+      "        total_loss: 0.949362243215243\n",
+      "        vf_explained_var: 0.9923892021179199\n",
+      "        vf_loss: 0.9584879080454508\n",
+      "    num_steps_sampled: 1456128\n",
+      "    num_steps_trained: 1456128\n",
+      "  iterations_since_restore: 9\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.282608695652176\n",
+      "    gpu_util_percent0: 0.4395652173913045\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5739130434782598\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15471153080234437\n",
+      "    mean_env_wait_ms: 0.6512233236906179\n",
+      "    mean_inference_ms: 4.486726941601045\n",
+      "    mean_raw_obs_processing_ms: 0.40688607613554295\n",
+      "  time_since_restore: 181.48901557922363\n",
+      "  time_this_iter_s: 19.708473920822144\n",
+      "  time_total_s: 181.48901557922363\n",
+      "  timers:\n",
+      "    learn_throughput: 11526.677\n",
+      "    learn_time_ms: 14036.31\n",
+      "    sample_throughput: 26886.791\n",
+      "    sample_time_ms: 6017.527\n",
+      "    update_time_ms: 34.242\n",
+      "  timestamp: 1604233784\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1456128\n",
+      "  training_iteration: 9\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      9 |          181.489 | 1456128 |  41.1782 |              43.6289 |              15.1237 |            109.368 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1334.3752454465434\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-30-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.81228046473926\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 41.422618434137334\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1560\n",
+      "  episodes_total: 14804\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.869762510061264\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0075428458318735165\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009666072980811199\n",
+      "        total_loss: 0.7397742619117101\n",
+      "        vf_explained_var: 0.994184672832489\n",
+      "        vf_loss: 0.7483666588862737\n",
+      "    num_steps_sampled: 1617920\n",
+      "    num_steps_trained: 1617920\n",
+      "  iterations_since_restore: 10\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.833333333333332\n",
+      "    gpu_util_percent0: 0.31916666666666665\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15401087755433693\n",
+      "    mean_env_wait_ms: 0.6506167732676298\n",
+      "    mean_inference_ms: 4.4459608456017845\n",
+      "    mean_raw_obs_processing_ms: 0.4045366030538726\n",
+      "  time_since_restore: 201.30298805236816\n",
+      "  time_this_iter_s: 19.81397247314453\n",
+      "  time_total_s: 201.30298805236816\n",
+      "  timers:\n",
+      "    learn_throughput: 11523.296\n",
+      "    learn_time_ms: 14040.428\n",
+      "    sample_throughput: 27081.39\n",
+      "    sample_time_ms: 5974.287\n",
+      "    update_time_ms: 34.416\n",
+      "  timestamp: 1604233804\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1617920\n",
+      "  training_iteration: 10\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     10 |          201.303 | 1617920 |  41.4226 |              43.6289 |              15.1237 |            108.812 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1330.5694061408346\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-30-25\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.33194716242662\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 41.6210186464785\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1548\n",
+      "  episodes_total: 16352\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8340491751829783\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006366107768068711\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009178327105473727\n",
+      "        total_loss: 0.6055479943752289\n",
+      "        vf_explained_var: 0.9953274130821228\n",
+      "        vf_loss: 0.6138701190551122\n",
+      "    num_steps_sampled: 1779712\n",
+      "    num_steps_trained: 1779712\n",
+      "  iterations_since_restore: 11\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.46666666666667\n",
+      "    gpu_util_percent0: 0.37000000000000005\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15341006651547073\n",
+      "    mean_env_wait_ms: 0.650181832154063\n",
+      "    mean_inference_ms: 4.4112331201416435\n",
+      "    mean_raw_obs_processing_ms: 0.40254424691393875\n",
+      "  time_since_restore: 221.31696248054504\n",
+      "  time_this_iter_s: 20.01397442817688\n",
+      "  time_total_s: 221.31696248054504\n",
+      "  timers:\n",
+      "    learn_throughput: 11519.218\n",
+      "    learn_time_ms: 14045.398\n",
+      "    sample_throughput: 28288.316\n",
+      "    sample_time_ms: 5719.393\n",
+      "    update_time_ms: 33.239\n",
+      "  timestamp: 1604233825\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1779712\n",
+      "  training_iteration: 11\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     11 |          221.317 | 1779712 |   41.621 |              43.6289 |              15.1237 |            108.332 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1327.2690156599554\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-30-44\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.91024281328495\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 41.79185500832971\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1563\n",
+      "  episodes_total: 17915\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8071108410755793\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006752079119905829\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009787990158656612\n",
+      "        total_loss: 0.4518005351225535\n",
+      "        vf_explained_var: 0.9965425133705139\n",
+      "        vf_loss: 0.46064166476329166\n",
+      "    num_steps_sampled: 1941504\n",
+      "    num_steps_trained: 1941504\n",
+      "  iterations_since_restore: 12\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.460869565217386\n",
+      "    gpu_util_percent0: 0.4491304347826087\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5739130434782598\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15287929224510746\n",
+      "    mean_env_wait_ms: 0.649859182584871\n",
+      "    mean_inference_ms: 4.38067919169665\n",
+      "    mean_raw_obs_processing_ms: 0.40078994113897726\n",
+      "  time_since_restore: 240.91183829307556\n",
+      "  time_this_iter_s: 19.594875812530518\n",
+      "  time_total_s: 240.91183829307556\n",
+      "  timers:\n",
+      "    learn_throughput: 11522.834\n",
+      "    learn_time_ms: 14040.99\n",
+      "    sample_throughput: 28801.969\n",
+      "    sample_time_ms: 5617.394\n",
+      "    update_time_ms: 31.109\n",
+      "  timestamp: 1604233844\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1941504\n",
+      "  training_iteration: 12\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     12 |          240.912 | 1941504 |  41.7919 |              43.6289 |              15.1237 |             107.91 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1324.5485464368408\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-31-05\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.57801746276323\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 41.93343711446106\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1555\n",
+      "  episodes_total: 19470\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7690616647402445\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0065094192589943605\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010228886812304458\n",
+      "        total_loss: 0.3978396902481715\n",
+      "        vf_explained_var: 0.9969910979270935\n",
+      "        vf_loss: 0.4071512247125308\n",
+      "    num_steps_sampled: 2103296\n",
+      "    num_steps_trained: 2103296\n",
+      "  iterations_since_restore: 13\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.712500000000002\n",
+      "    gpu_util_percent0: 0.40458333333333335\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15241252197920177\n",
+      "    mean_env_wait_ms: 0.6496173991986937\n",
+      "    mean_inference_ms: 4.353964505075953\n",
+      "    mean_raw_obs_processing_ms: 0.3992612917500714\n",
+      "  time_since_restore: 260.9479441642761\n",
+      "  time_this_iter_s: 20.03610587120056\n",
+      "  time_total_s: 260.9479441642761\n",
+      "  timers:\n",
+      "    learn_throughput: 11495.402\n",
+      "    learn_time_ms: 14074.497\n",
+      "    sample_throughput: 29007.895\n",
+      "    sample_time_ms: 5577.516\n",
+      "    update_time_ms: 31.578\n",
+      "  timestamp: 1604233865\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2103296\n",
+      "  training_iteration: 13\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     13 |          260.948 | 2103296 |  41.9334 |              43.6289 |              15.1237 |            107.578 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1322.226\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-31-25\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.29351081530783\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.054489449346825\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1565\n",
+      "  episodes_total: 21035\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7336616019407908\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0064004862603421015\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008804643754653322\n",
+      "        total_loss: 0.3278699740767479\n",
+      "        vf_explained_var: 0.9975385069847107\n",
+      "        vf_loss: 0.33576134343942005\n",
+      "    num_steps_sampled: 2265088\n",
+      "    num_steps_trained: 2265088\n",
+      "  iterations_since_restore: 14\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.491666666666664\n",
+      "    gpu_util_percent0: 0.32416666666666666\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15199672808495696\n",
+      "    mean_env_wait_ms: 0.6494243284753675\n",
+      "    mean_inference_ms: 4.330132256006824\n",
+      "    mean_raw_obs_processing_ms: 0.39788879446265113\n",
+      "  time_since_restore: 280.836660861969\n",
+      "  time_this_iter_s: 19.88871669769287\n",
+      "  time_total_s: 280.836660861969\n",
+      "  timers:\n",
+      "    learn_throughput: 11490.563\n",
+      "    learn_time_ms: 14080.424\n",
+      "    sample_throughput: 29086.085\n",
+      "    sample_time_ms: 5562.523\n",
+      "    update_time_ms: 31.329\n",
+      "  timestamp: 1604233885\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2265088\n",
+      "  training_iteration: 14\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     14 |          280.837 | 2265088 |  42.0545 |              43.6289 |              15.1237 |            107.294 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1320.1891843971632\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-31-45\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.05496791325514\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.16018734187611\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1560\n",
+      "  episodes_total: 22595\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7067601482073466\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006438710144720972\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010162829411759352\n",
+      "        total_loss: 0.2576701765259107\n",
+      "        vf_explained_var: 0.9980695843696594\n",
+      "        vf_loss: 0.26689864446719486\n",
+      "    num_steps_sampled: 2426880\n",
+      "    num_steps_trained: 2426880\n",
+      "  iterations_since_restore: 15\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.404347826086955\n",
+      "    gpu_util_percent0: 0.3060869565217391\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5739130434782598\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15162840674833306\n",
+      "    mean_env_wait_ms: 0.6492838913939692\n",
+      "    mean_inference_ms: 4.308869472451551\n",
+      "    mean_raw_obs_processing_ms: 0.3966675681414554\n",
+      "  time_since_restore: 300.50964164733887\n",
+      "  time_this_iter_s: 19.672980785369873\n",
+      "  time_total_s: 300.50964164733887\n",
+      "  timers:\n",
+      "    learn_throughput: 11490.394\n",
+      "    learn_time_ms: 14080.631\n",
+      "    sample_throughput: 29052.047\n",
+      "    sample_time_ms: 5569.04\n",
+      "    update_time_ms: 29.544\n",
+      "  timestamp: 1604233905\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2426880\n",
+      "  training_iteration: 15\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     15 |           300.51 | 2426880 |  42.1602 |              43.6289 |              15.1237 |            107.055 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1318.4346780546457\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-32-06\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.84805829262234\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.2515568060273\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1559\n",
+      "  episodes_total: 24154\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6743296881516775\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006636352161876857\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00975274900944593\n",
+      "        total_loss: 0.23658680294950804\n",
+      "        vf_explained_var: 0.9982344508171082\n",
+      "        vf_loss: 0.2453494481742382\n",
+      "    num_steps_sampled: 2588672\n",
+      "    num_steps_trained: 2588672\n",
+      "  iterations_since_restore: 16\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.991666666666664\n",
+      "    gpu_util_percent0: 0.33416666666666667\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15129670825904046\n",
+      "    mean_env_wait_ms: 0.6491675546769002\n",
+      "    mean_inference_ms: 4.289756257599939\n",
+      "    mean_raw_obs_processing_ms: 0.39556396298388297\n",
+      "  time_since_restore: 320.2244436740875\n",
+      "  time_this_iter_s: 19.714802026748657\n",
+      "  time_total_s: 320.2244436740875\n",
+      "  timers:\n",
+      "    learn_throughput: 11483.06\n",
+      "    learn_time_ms: 14089.624\n",
+      "    sample_throughput: 29083.807\n",
+      "    sample_time_ms: 5562.958\n",
+      "    update_time_ms: 30.273\n",
+      "  timestamp: 1604233926\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2588672\n",
+      "  training_iteration: 16\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     16 |          320.224 | 2588672 |  42.2516 |              43.6289 |              15.1237 |            106.848 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1316.8612322791712\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-32-26\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.6750029170394\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.333070966857214\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1557\n",
+      "  episodes_total: 25711\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6487419108549753\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006434203319561978\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010461925092386082\n",
+      "        total_loss: 0.18015940859913826\n",
+      "        vf_explained_var: 0.9986326694488525\n",
+      "        vf_loss: 0.1896588665743669\n",
+      "    num_steps_sampled: 2750464\n",
+      "    num_steps_trained: 2750464\n",
+      "  iterations_since_restore: 17\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.604347826086954\n",
+      "    gpu_util_percent0: 0.4843478260869565\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5739130434782598\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15099532910883745\n",
+      "    mean_env_wait_ms: 0.6490596721671469\n",
+      "    mean_inference_ms: 4.272450859355698\n",
+      "    mean_raw_obs_processing_ms: 0.3945623850682107\n",
+      "  time_since_restore: 339.8860158920288\n",
+      "  time_this_iter_s: 19.661572217941284\n",
+      "  time_total_s: 339.8860158920288\n",
+      "  timers:\n",
+      "    learn_throughput: 11488.521\n",
+      "    learn_time_ms: 14082.927\n",
+      "    sample_throughput: 29093.385\n",
+      "    sample_time_ms: 5561.127\n",
+      "    update_time_ms: 30.118\n",
+      "  timestamp: 1604233946\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2750464\n",
+      "  training_iteration: 17\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     17 |          339.886 | 2750464 |  42.3331 |              43.6289 |              15.1237 |            106.675 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1315.4772084481176\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-32-46\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.53646368305209\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.40514405004122\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1549\n",
+      "  episodes_total: 27260\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6147788117329279\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006190092225248615\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00844319449000371\n",
+      "        total_loss: 0.15160012369354567\n",
+      "        vf_explained_var: 0.9988699555397034\n",
+      "        vf_loss: 0.15911269187927246\n",
+      "    num_steps_sampled: 2912256\n",
+      "    num_steps_trained: 2912256\n",
+      "  iterations_since_restore: 18\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.108333333333334\n",
+      "    gpu_util_percent0: 0.40958333333333335\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15072186700405005\n",
+      "    mean_env_wait_ms: 0.6489589654205459\n",
+      "    mean_inference_ms: 4.256776083733925\n",
+      "    mean_raw_obs_processing_ms: 0.3936520268695803\n",
+      "  time_since_restore: 359.4751284122467\n",
+      "  time_this_iter_s: 19.589112520217896\n",
+      "  time_total_s: 359.4751284122467\n",
+      "  timers:\n",
+      "    learn_throughput: 11502.311\n",
+      "    learn_time_ms: 14066.043\n",
+      "    sample_throughput: 29213.386\n",
+      "    sample_time_ms: 5538.283\n",
+      "    update_time_ms: 28.725\n",
+      "  timestamp: 1604233966\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2912256\n",
+      "  training_iteration: 18\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     18 |          359.475 | 2912256 |  42.4051 |              43.6289 |              15.1237 |            106.536 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1314.2216509171762\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-33-07\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.39508657482911\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.47027859269532\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1559\n",
+      "  episodes_total: 28819\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5793089667956034\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005601404506402711\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009277280846921107\n",
+      "        total_loss: 0.12121031371255715\n",
+      "        vf_explained_var: 0.9990783333778381\n",
+      "        vf_loss: 0.1296569655338923\n",
+      "    num_steps_sampled: 3074048\n",
+      "    num_steps_trained: 3074048\n",
+      "  iterations_since_restore: 19\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.066666666666663\n",
+      "    gpu_util_percent0: 0.3979166666666667\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1504690836889304\n",
+      "    mean_env_wait_ms: 0.6488696992500765\n",
+      "    mean_inference_ms: 4.242361495701079\n",
+      "    mean_raw_obs_processing_ms: 0.39280933914753613\n",
+      "  time_since_restore: 379.6264307498932\n",
+      "  time_this_iter_s: 20.151302337646484\n",
+      "  time_total_s: 379.6264307498932\n",
+      "  timers:\n",
+      "    learn_throughput: 11477.051\n",
+      "    learn_time_ms: 14097.001\n",
+      "    sample_throughput: 29213.738\n",
+      "    sample_time_ms: 5538.216\n",
+      "    update_time_ms: 30.107\n",
+      "  timestamp: 1604233987\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3074048\n",
+      "  training_iteration: 19\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     19 |          379.626 | 3074048 |  42.4703 |              43.6289 |              15.1237 |            106.395 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1313.0996867271228\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-33-27\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.30233860342555\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.528634054575335\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1541\n",
+      "  episodes_total: 30360\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5525011867284775\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005483048929211994\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009698755030209819\n",
+      "        total_loss: 0.09727698999146621\n",
+      "        vf_explained_var: 0.9992494583129883\n",
+      "        vf_loss: 0.10615538681546847\n",
+      "    num_steps_sampled: 3235840\n",
+      "    num_steps_trained: 3235840\n",
+      "  iterations_since_restore: 20\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.075\n",
+      "    gpu_util_percent0: 0.43416666666666665\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15023976063883285\n",
+      "    mean_env_wait_ms: 0.6487841053204015\n",
+      "    mean_inference_ms: 4.22926206402729\n",
+      "    mean_raw_obs_processing_ms: 0.3920470315060969\n",
+      "  time_since_restore: 399.4815435409546\n",
+      "  time_this_iter_s: 19.8551127910614\n",
+      "  time_total_s: 399.4815435409546\n",
+      "  timers:\n",
+      "    learn_throughput: 11477.093\n",
+      "    learn_time_ms: 14096.949\n",
+      "    sample_throughput: 29223.589\n",
+      "    sample_time_ms: 5536.349\n",
+      "    update_time_ms: 30.052\n",
+      "  timestamp: 1604234007\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3235840\n",
+      "  training_iteration: 20\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     20 |          399.482 | 3235840 |  42.5286 |              43.6289 |              15.1237 |            106.302 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1312.0721969578171\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-33-47\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.19890350877193\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.58196716016847\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1560\n",
+      "  episodes_total: 31920\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5238876193761826\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005134576039078335\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009323944701463915\n",
+      "        total_loss: 0.0834660033384959\n",
+      "        vf_explained_var: 0.9993599057197571\n",
+      "        vf_loss: 0.09202497576673825\n",
+      "    num_steps_sampled: 3397632\n",
+      "    num_steps_trained: 3397632\n",
+      "  iterations_since_restore: 21\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.617391304347823\n",
+      "    gpu_util_percent0: 0.4456521739130434\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5739130434782598\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15002456451472287\n",
+      "    mean_env_wait_ms: 0.6487047149986278\n",
+      "    mean_inference_ms: 4.2170315233202755\n",
+      "    mean_raw_obs_processing_ms: 0.3913318433017469\n",
+      "  time_since_restore: 419.1035006046295\n",
+      "  time_this_iter_s: 19.621957063674927\n",
+      "  time_total_s: 419.1035006046295\n",
+      "  timers:\n",
+      "    learn_throughput: 11505.071\n",
+      "    learn_time_ms: 14062.668\n",
+      "    sample_throughput: 29282.333\n",
+      "    sample_time_ms: 5525.243\n",
+      "    update_time_ms: 30.159\n",
+      "  timestamp: 1604234027\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3397632\n",
+      "  training_iteration: 21\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     21 |          419.104 | 3397632 |   42.582 |              43.6289 |              15.1237 |            106.199 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1311.1479420914095\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-34-08\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.12468999312756\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.630005430799805\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1547\n",
+      "  episodes_total: 33467\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.49701932817697525\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005340795614756644\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010354490535974037\n",
+      "        total_loss: 0.07194800892223914\n",
+      "        vf_explained_var: 0.9994434714317322\n",
+      "        vf_loss: 0.0814828487734\n",
+      "    num_steps_sampled: 3559424\n",
+      "    num_steps_trained: 3559424\n",
+      "  iterations_since_restore: 22\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.325\n",
+      "    gpu_util_percent0: 0.37458333333333327\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14982882739957487\n",
+      "    mean_env_wait_ms: 0.6486235678612109\n",
+      "    mean_inference_ms: 4.205782708358309\n",
+      "    mean_raw_obs_processing_ms: 0.39066600076646296\n",
+      "  time_since_restore: 438.92495369911194\n",
+      "  time_this_iter_s: 19.821453094482422\n",
+      "  time_total_s: 438.92495369911194\n",
+      "  timers:\n",
+      "    learn_throughput: 11494.245\n",
+      "    learn_time_ms: 14075.914\n",
+      "    sample_throughput: 29271.325\n",
+      "    sample_time_ms: 5527.321\n",
+      "    update_time_ms: 31.246\n",
+      "  timestamp: 1604234048\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3559424\n",
+      "  training_iteration: 22\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     22 |          438.925 | 3559424 |    42.63 |              43.6289 |              15.1237 |            106.125 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1310.3136940853449\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-34-28\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.08285951027172\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.67351320494282\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1532\n",
+      "  episodes_total: 34999\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4672253554066022\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005037993270282944\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00685786875934961\n",
+      "        total_loss: 0.06014314107596874\n",
+      "        vf_explained_var: 0.9995446801185608\n",
+      "        vf_loss: 0.06622702504197757\n",
+      "    num_steps_sampled: 3721216\n",
+      "    num_steps_trained: 3721216\n",
+      "  iterations_since_restore: 23\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.15416666666667\n",
+      "    gpu_util_percent0: 0.3633333333333333\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1496488629333257\n",
+      "    mean_env_wait_ms: 0.6485461766268289\n",
+      "    mean_inference_ms: 4.195418444138528\n",
+      "    mean_raw_obs_processing_ms: 0.3900530056382457\n",
+      "  time_since_restore: 458.79926347732544\n",
+      "  time_this_iter_s: 19.8743097782135\n",
+      "  time_total_s: 458.79926347732544\n",
+      "  timers:\n",
+      "    learn_throughput: 11517.323\n",
+      "    learn_time_ms: 14047.709\n",
+      "    sample_throughput: 29258.763\n",
+      "    sample_time_ms: 5529.694\n",
+      "    update_time_ms: 32.041\n",
+      "  timestamp: 1604234068\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3721216\n",
+      "  training_iteration: 23\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     23 |          458.799 | 3721216 |  42.6735 |              43.6289 |              15.1237 |            106.083 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1309.5558966207143\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-34-49\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.0737637588303\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.71301353738489\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1523\n",
+      "  episodes_total: 36522\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4321850041548411\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0057120353837187094\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009051567967010973\n",
+      "        total_loss: 0.05148738451922933\n",
+      "        vf_explained_var: 0.9995923042297363\n",
+      "        vf_loss: 0.059612637696166836\n",
+      "    num_steps_sampled: 3883008\n",
+      "    num_steps_trained: 3883008\n",
+      "  iterations_since_restore: 24\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.6125\n",
+      "    gpu_util_percent0: 0.35374999999999995\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14948084784143242\n",
+      "    mean_env_wait_ms: 0.6484509328204054\n",
+      "    mean_inference_ms: 4.185812792415693\n",
+      "    mean_raw_obs_processing_ms: 0.38947414275749065\n",
+      "  time_since_restore: 478.84203243255615\n",
+      "  time_this_iter_s: 20.042768955230713\n",
+      "  time_total_s: 478.84203243255615\n",
+      "  timers:\n",
+      "    learn_throughput: 11501.58\n",
+      "    learn_time_ms: 14066.937\n",
+      "    sample_throughput: 29276.676\n",
+      "    sample_time_ms: 5526.31\n",
+      "    update_time_ms: 31.839\n",
+      "  timestamp: 1604234089\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3883008\n",
+      "  training_iteration: 24\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     24 |          478.842 | 3883008 |   42.713 |              43.6289 |              15.1237 |            106.074 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1308.854354630823\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-35-09\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.09423946178913\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.74960796999439\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1530\n",
+      "  episodes_total: 38052\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.40411561727523804\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004467884932334225\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007561299067068224\n",
+      "        total_loss: 0.0415184999195238\n",
+      "        vf_explained_var: 0.9996755123138428\n",
+      "        vf_loss: 0.0483882799744606\n",
+      "    num_steps_sampled: 4044800\n",
+      "    num_steps_trained: 4044800\n",
+      "  iterations_since_restore: 25\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.00833333333333\n",
+      "    gpu_util_percent0: 0.3670833333333334\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14932390485994398\n",
+      "    mean_env_wait_ms: 0.6483514849496743\n",
+      "    mean_inference_ms: 4.176778186793073\n",
+      "    mean_raw_obs_processing_ms: 0.38892542131807273\n",
+      "  time_since_restore: 498.6148178577423\n",
+      "  time_this_iter_s: 19.772785425186157\n",
+      "  time_total_s: 498.6148178577423\n",
+      "  timers:\n",
+      "    learn_throughput: 11493.615\n",
+      "    learn_time_ms: 14076.686\n",
+      "    sample_throughput: 29308.484\n",
+      "    sample_time_ms: 5520.313\n",
+      "    update_time_ms: 31.941\n",
+      "  timestamp: 1604234109\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4044800\n",
+      "  training_iteration: 25\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "2020-11-01 12:35:10,587\tWARNING util.py:136 -- The `process_trial` operation took 0.5158097743988037 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     25 |          498.615 | 4044800 |  42.7496 |              43.6289 |              15.1237 |            106.094 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1308.2223065826438\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-35-30\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.13998179427531\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.78251353698859\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1496\n",
+      "  episodes_total: 39548\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3710899030168851\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005478878777163724\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008370831223146524\n",
+      "        total_loss: 0.03866795807455977\n",
+      "        vf_explained_var: 0.9996917843818665\n",
+      "        vf_loss: 0.04667644730458657\n",
+      "    num_steps_sampled: 4206592\n",
+      "    num_steps_trained: 4206592\n",
+      "  iterations_since_restore: 26\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.104166666666668\n",
+      "    gpu_util_percent0: 0.3454166666666667\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14918014489593562\n",
+      "    mean_env_wait_ms: 0.6482521101593612\n",
+      "    mean_inference_ms: 4.168509263007074\n",
+      "    mean_raw_obs_processing_ms: 0.38842351941405706\n",
+      "  time_since_restore: 518.4228372573853\n",
+      "  time_this_iter_s: 19.808019399642944\n",
+      "  time_total_s: 518.4228372573853\n",
+      "  timers:\n",
+      "    learn_throughput: 11494.237\n",
+      "    learn_time_ms: 14075.924\n",
+      "    sample_throughput: 29292.382\n",
+      "    sample_time_ms: 5523.347\n",
+      "    update_time_ms: 32.345\n",
+      "  timestamp: 1604234130\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4206592\n",
+      "  training_iteration: 26\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "2020-11-01 12:35:31,149\tWARNING util.py:136 -- The `process_trial` operation took 0.5663919448852539 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     26 |          518.423 | 4206592 |  42.7825 |              43.6289 |              15.1237 |             106.14 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1307.6298878595808\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-35-51\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.21381074168798\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.81325152203418\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1507\n",
+      "  episodes_total: 41055\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3422661249836286\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004864616707588236\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008692707876131559\n",
+      "        total_loss: 0.03158797137439251\n",
+      "        vf_explained_var: 0.9997386336326599\n",
+      "        vf_loss: 0.03996535111218691\n",
+      "    num_steps_sampled: 4368384\n",
+      "    num_steps_trained: 4368384\n",
+      "  iterations_since_restore: 27\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.462500000000002\n",
+      "    gpu_util_percent0: 0.33499999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14904403737255034\n",
+      "    mean_env_wait_ms: 0.6481460554960611\n",
+      "    mean_inference_ms: 4.160632746558721\n",
+      "    mean_raw_obs_processing_ms: 0.38794815762152746\n",
+      "  time_since_restore: 538.5130481719971\n",
+      "  time_this_iter_s: 20.090210914611816\n",
+      "  time_total_s: 538.5130481719971\n",
+      "  timers:\n",
+      "    learn_throughput: 11475.693\n",
+      "    learn_time_ms: 14098.67\n",
+      "    sample_throughput: 29224.222\n",
+      "    sample_time_ms: 5536.23\n",
+      "    update_time_ms: 32.82\n",
+      "  timestamp: 1604234151\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4368384\n",
+      "  training_iteration: 27\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "2020-11-01 12:35:52,001\tWARNING util.py:136 -- The `process_trial` operation took 0.5398478507995605 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     27 |          538.513 | 4368384 |  42.8133 |              43.6289 |              15.1237 |            106.214 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1307.0917562892712\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-36-11\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.31207674943566\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.841272069147415\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1473\n",
+      "  episodes_total: 42528\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.31406934062639874\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00531899471146365\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006233617905915405\n",
+      "        total_loss: 0.027707914200921852\n",
+      "        vf_explained_var: 0.9997760653495789\n",
+      "        vf_loss: 0.0338326171040535\n",
+      "    num_steps_sampled: 4530176\n",
+      "    num_steps_trained: 4530176\n",
+      "  iterations_since_restore: 28\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.541666666666668\n",
+      "    gpu_util_percent0: 0.38791666666666663\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14891911374014252\n",
+      "    mean_env_wait_ms: 0.6480333835817965\n",
+      "    mean_inference_ms: 4.153395707395419\n",
+      "    mean_raw_obs_processing_ms: 0.38750819763907707\n",
+      "  time_since_restore: 558.2239861488342\n",
+      "  time_this_iter_s: 19.710937976837158\n",
+      "  time_total_s: 558.2239861488342\n",
+      "  timers:\n",
+      "    learn_throughput: 11465.354\n",
+      "    learn_time_ms: 14111.382\n",
+      "    sample_throughput: 29254.98\n",
+      "    sample_time_ms: 5530.409\n",
+      "    update_time_ms: 31.925\n",
+      "  timestamp: 1604234171\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4530176\n",
+      "  training_iteration: 28\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "2020-11-01 12:36:12,490\tWARNING util.py:136 -- The `process_trial` operation took 0.5777196884155273 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     28 |          558.224 | 4530176 |  42.8413 |              43.6289 |              15.1237 |            106.312 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1306.5912378872663\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-36-32\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.44389390185694\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.86740122159219\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1469\n",
+      "  episodes_total: 43997\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.2867726534605026\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005043890094384551\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007655571622308344\n",
+      "        total_loss: 0.01982968676990519\n",
+      "        vf_explained_var: 0.999823808670044\n",
+      "        vf_loss: 0.027376449356476467\n",
+      "    num_steps_sampled: 4691968\n",
+      "    num_steps_trained: 4691968\n",
+      "  iterations_since_restore: 29\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.208333333333332\n",
+      "    gpu_util_percent0: 0.3120833333333333\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.148801680479015\n",
+      "    mean_env_wait_ms: 0.6479110446105578\n",
+      "    mean_inference_ms: 4.146556745190422\n",
+      "    mean_raw_obs_processing_ms: 0.3870915915108458\n",
+      "  time_since_restore: 578.142192363739\n",
+      "  time_this_iter_s: 19.918206214904785\n",
+      "  time_total_s: 578.142192363739\n",
+      "  timers:\n",
+      "    learn_throughput: 11477.643\n",
+      "    learn_time_ms: 14096.274\n",
+      "    sample_throughput: 29295.707\n",
+      "    sample_time_ms: 5522.72\n",
+      "    update_time_ms: 31.506\n",
+      "  timestamp: 1604234192\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4691968\n",
+      "  training_iteration: 29\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "2020-11-01 12:36:33,192\tWARNING util.py:136 -- The `process_trial` operation took 0.567206621170044 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     29 |          578.142 | 4691968 |  42.8674 |              43.6289 |              15.1237 |            106.444 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1306.1297474625158\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-36-52\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.60159721916663\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.89145908926165\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1457\n",
+      "  episodes_total: 45454\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.25657347589731216\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004977851562822859\n",
+      "        model: {}\n",
+      "        policy_loss: -0.0074265640663118875\n",
+      "        total_loss: 0.020246487848150235\n",
+      "        vf_explained_var: 0.999823272228241\n",
+      "        vf_loss: 0.02755244541913271\n",
+      "    num_steps_sampled: 4853760\n",
+      "    num_steps_trained: 4853760\n",
+      "  iterations_since_restore: 30\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.96666666666667\n",
+      "    gpu_util_percent0: 0.34375\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1486911615858267\n",
+      "    mean_env_wait_ms: 0.647780786364401\n",
+      "    mean_inference_ms: 4.140117442125262\n",
+      "    mean_raw_obs_processing_ms: 0.3867002477159633\n",
+      "  time_since_restore: 597.9215953350067\n",
+      "  time_this_iter_s: 19.7794029712677\n",
+      "  time_total_s: 597.9215953350067\n",
+      "  timers:\n",
+      "    learn_throughput: 11482.292\n",
+      "    learn_time_ms: 14090.567\n",
+      "    sample_throughput: 29325.187\n",
+      "    sample_time_ms: 5517.169\n",
+      "    update_time_ms: 29.907\n",
+      "  timestamp: 1604234212\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4853760\n",
+      "  training_iteration: 30\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "2020-11-01 12:36:53,780\tWARNING util.py:136 -- The `process_trial` operation took 0.5981490612030029 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     30 |          597.922 | 4853760 |  42.8915 |              43.6289 |              15.1237 |            106.602 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1305.6988838856996\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-37-13\n",
+      "  done: true\n",
+      "  episode_len_mean: 106.77159124834733\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.91394806184951\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1440\n",
+      "  episodes_total: 46894\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.22576802472273508\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0045362276723608375\n",
+      "        model: {}\n",
+      "        policy_loss: -0.005217552456694345\n",
+      "        total_loss: 0.01427166493764768\n",
+      "        vf_explained_var: 0.9998777508735657\n",
+      "        vf_loss: 0.01948869600892067\n",
+      "    num_steps_sampled: 5015552\n",
+      "    num_steps_trained: 5015552\n",
+      "  iterations_since_restore: 31\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.72083333333333\n",
+      "    gpu_util_percent0: 0.36166666666666664\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14858768250616303\n",
+      "    mean_env_wait_ms: 0.6476419244786176\n",
+      "    mean_inference_ms: 4.134089086382151\n",
+      "    mean_raw_obs_processing_ms: 0.3863330350642181\n",
+      "  time_since_restore: 617.738039970398\n",
+      "  time_this_iter_s: 19.816444635391235\n",
+      "  time_total_s: 617.738039970398\n",
+      "  timers:\n",
+      "    learn_throughput: 11472.012\n",
+      "    learn_time_ms: 14103.193\n",
+      "    sample_throughput: 29323.896\n",
+      "    sample_time_ms: 5517.411\n",
+      "    update_time_ms: 29.881\n",
+      "  timestamp: 1604234233\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 5015552\n",
+      "  training_iteration: 31\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "2020-11-01 12:37:14,609\tWARNING util.py:136 -- The `process_trial` operation took 0.7420144081115723 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | TERMINATED |       |     31 |          617.738 | 5015552 |  42.9139 |              43.6289 |              15.1237 |            106.772 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1101 12:37:14.976943 34403 34403 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Socket closed\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.2/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | TERMINATED |       |     31 |          617.738 | 5015552 |  42.9139 |              43.6289 |              15.1237 |            106.772 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 34338\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201101_122629-fdb3wrbz/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201101_122629-fdb3wrbz/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min 1292\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step 7\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime 646\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp 1604234235\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max 1845\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean 1305.69888\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max 43.62887\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min 15.12371\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean 42.91395\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total 46894\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration 31\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step ‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mpretty-sweep-4\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/fdb3wrbz\u001b[0m\n",
+      "2020-11-01 12:37:24,612 - wandb.wandb_agent - INFO - Cleaning up finished run: fdb3wrbz\n",
+      "2020-11-01 12:37:24,941 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-01 12:37:24,941 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/la/la15.txt\n",
+      "2020-11-01 12:37:24,943 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/la/la15.txt\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "2020-11-01 12:37:29,961 - wandb.wandb_agent - INFO - Running runs: ['pq2fv3jo']\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mdifferent-sweep-5\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/9xhkl8my\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/pq2fv3jo\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201101_123726-pq2fv3jo\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
+      "\n",
+      "2020-11-01 12:37:30,609\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "\n",
+      "\n",
+      "\u001b[2m\u001b[36m(pid=67571)\u001b[0m 2020-11-01 12:37:33,413\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=67560)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67560)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67520)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67520)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67567)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67567)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67478)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67478)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67518)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67518)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67536)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67536)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67514)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67514)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67448)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67448)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67564)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67564)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67534)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67534)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67524)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67524)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67529)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67529)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67569)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67569)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67563)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67563)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67445)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67445)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67547)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67547)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67531)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67531)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67540)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67540)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67545)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67545)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67462)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67462)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67447)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67447)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67453)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67453)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67469)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67469)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67452)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67452)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67541)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67541)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67477)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67477)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67446)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67446)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67475)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67475)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67553)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67553)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67472)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67472)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67468)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67468)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67556)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67556)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67450)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67450)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67566)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67566)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67527)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67527)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67455)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67455)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67457)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67457)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67456)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67456)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67466)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67466)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67459)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67459)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67476)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67476)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67467)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67467)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67516)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67516)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67521)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67521)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67515)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67515)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67512)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67512)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67568)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67568)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67551)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67551)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67519)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67519)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67537)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67537)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67525)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67525)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67546)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67546)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67451)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67451)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67581)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67581)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67449)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67449)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67530)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67530)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67562)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67562)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67533)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67533)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67522)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67522)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67464)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67464)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67573)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67573)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67463)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67463)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67506)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67506)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67555)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67555)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67523)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67523)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67544)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67544)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67461)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67461)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67513)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67513)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67479)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67479)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67510)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67510)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67526)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67526)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67473)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67473)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67548)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67548)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67460)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67460)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67552)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67552)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67509)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67509)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67465)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67465)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67517)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67517)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67559)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67559)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1540.9259259259259\n",
+      "    time_step_min: 1302\n",
+      "  date: 2020-11-01_12-38-00\n",
+      "  done: false\n",
+      "  episode_len_mean: 118.22310126582279\n",
+      "  episode_reward_max: 44.242424242424256\n",
+      "  episode_reward_mean: 32.03126997826365\n",
+      "  episode_reward_min: 13.989898989898997\n",
+      "  episodes_this_iter: 1264\n",
+      "  episodes_total: 1264\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1447077592213948\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005619530449621379\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007155387702672063\n",
+      "        total_loss: 40.47618579864502\n",
+      "        vf_explained_var: 0.7891119122505188\n",
+      "        vf_loss: 40.48278999328613\n",
+      "    num_steps_sampled: 161792\n",
+      "    num_steps_trained: 161792\n",
+      "  iterations_since_restore: 1\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 30.218518518518522\n",
+      "    gpu_util_percent0: 0.36629629629629634\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.440740740740741\n",
+      "    vram_util_percent0: 0.08366130971903357\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16496450454226685\n",
+      "    mean_env_wait_ms: 0.6576280720479034\n",
+      "    mean_inference_ms: 4.788716243497749\n",
+      "    mean_raw_obs_processing_ms: 0.4281524023401697\n",
+      "  time_since_restore: 22.09221601486206\n",
+      "  time_this_iter_s: 22.09221601486206\n",
+      "  time_total_s: 22.09221601486206\n",
+      "  timers:\n",
+      "    learn_throughput: 10922.862\n",
+      "    learn_time_ms: 14812.235\n",
+      "    sample_throughput: 22479.319\n",
+      "    sample_time_ms: 7197.371\n",
+      "    update_time_ms: 46.828\n",
+      "  timestamp: 1604234280\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 161792\n",
+      "  training_iteration: 1\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.3/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      1 |          22.0922 | 161792 |  32.0313 |              44.2424 |              13.9899 |            118.223 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1531.6367083807356\n",
+      "    time_step_min: 1302\n",
+      "  date: 2020-11-01_12-38-22\n",
+      "  done: false\n",
+      "  episode_len_mean: 117.54839910647803\n",
+      "  episode_reward_max: 44.242424242424256\n",
+      "  episode_reward_mean: 32.54738374060787\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1422\n",
+      "  episodes_total: 2686\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1255147556463878\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009991972551991543\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012213830874922374\n",
+      "        total_loss: 10.040241003036499\n",
+      "        vf_explained_var: 0.9008758068084717\n",
+      "        vf_loss: 10.051019430160522\n",
+      "    num_steps_sampled: 323584\n",
+      "    num_steps_trained: 323584\n",
+      "  iterations_since_restore: 2\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 29.98846153846154\n",
+      "    gpu_util_percent0: 0.4046153846153846\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.511538461538462\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16294808968714042\n",
+      "    mean_env_wait_ms: 0.6564847478917705\n",
+      "    mean_inference_ms: 4.782872969782969\n",
+      "    mean_raw_obs_processing_ms: 0.42698163136099937\n",
+      "  time_since_restore: 43.73459029197693\n",
+      "  time_this_iter_s: 21.642374277114868\n",
+      "  time_total_s: 43.73459029197693\n",
+      "  timers:\n",
+      "    learn_throughput: 10992.045\n",
+      "    learn_time_ms: 14719.008\n",
+      "    sample_throughput: 22905.576\n",
+      "    sample_time_ms: 7063.433\n",
+      "    update_time_ms: 38.41\n",
+      "  timestamp: 1604234302\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 323584\n",
+      "  training_iteration: 2\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      2 |          43.7346 | 323584 |  32.5474 |              44.2424 |              13.0808 |            117.548 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1510.1358481262328\n",
+      "    time_step_min: 1302\n",
+      "  date: 2020-11-01_12-38-43\n",
+      "  done: false\n",
+      "  episode_len_mean: 116.32862362971986\n",
+      "  episode_reward_max: 44.79797979797981\n",
+      "  episode_reward_mean: 33.70579116376925\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1419\n",
+      "  episodes_total: 4105\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1123215953509014\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00993400338726739\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013690461909087995\n",
+      "        total_loss: 6.506547371546428\n",
+      "        vf_explained_var: 0.9344742298126221\n",
+      "        vf_loss: 6.518807013829549\n",
+      "    num_steps_sampled: 485376\n",
+      "    num_steps_trained: 485376\n",
+      "  iterations_since_restore: 3\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 28.468000000000004\n",
+      "    gpu_util_percent0: 0.36560000000000004\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.508\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16101849961752382\n",
+      "    mean_env_wait_ms: 0.6546024350645249\n",
+      "    mean_inference_ms: 4.701779084784631\n",
+      "    mean_raw_obs_processing_ms: 0.4230887594071475\n",
+      "  time_since_restore: 64.32173490524292\n",
+      "  time_this_iter_s: 20.58714461326599\n",
+      "  time_total_s: 64.32173490524292\n",
+      "  timers:\n",
+      "    learn_throughput: 11037.784\n",
+      "    learn_time_ms: 14658.015\n",
+      "    sample_throughput: 24159.746\n",
+      "    sample_time_ms: 6696.759\n",
+      "    update_time_ms: 34.468\n",
+      "  timestamp: 1604234323\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 485376\n",
+      "  training_iteration: 3\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      3 |          64.3217 | 485376 |  33.7058 |               44.798 |              13.0808 |            116.329 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1488.4381143065161\n",
+      "    time_step_min: 1270\n",
+      "  date: 2020-11-01_12-39-03\n",
+      "  done: false\n",
+      "  episode_len_mean: 114.89247699801551\n",
+      "  episode_reward_max: 46.01010101010102\n",
+      "  episode_reward_mean: 34.80499565381399\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1438\n",
+      "  episodes_total: 5543\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0760109821955364\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.010554853981981674\n",
+      "        model: {}\n",
+      "        policy_loss: -0.017120405255506437\n",
+      "        total_loss: 4.882782578468323\n",
+      "        vf_explained_var: 0.9524574279785156\n",
+      "        vf_loss: 4.898330052693685\n",
+      "    num_steps_sampled: 647168\n",
+      "    num_steps_trained: 647168\n",
+      "  iterations_since_restore: 4\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.83076923076923\n",
+      "    gpu_util_percent0: 0.33230769230769225\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5076923076923077\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15936923843872866\n",
+      "    mean_env_wait_ms: 0.6531312998927246\n",
+      "    mean_inference_ms: 4.622904338928759\n",
+      "    mean_raw_obs_processing_ms: 0.4189887193273442\n",
+      "  time_since_restore: 85.05826711654663\n",
+      "  time_this_iter_s: 20.73653221130371\n",
+      "  time_total_s: 85.05826711654663\n",
+      "  timers:\n",
+      "    learn_throughput: 11028.796\n",
+      "    learn_time_ms: 14669.96\n",
+      "    sample_throughput: 24936.84\n",
+      "    sample_time_ms: 6488.071\n",
+      "    update_time_ms: 46.059\n",
+      "  timestamp: 1604234343\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 647168\n",
+      "  training_iteration: 4\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      4 |          85.0583 | 647168 |   34.805 |              46.0101 |              13.0808 |            114.892 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1466.4215029231427\n",
+      "    time_step_min: 1237\n",
+      "  date: 2020-11-01_12-39-24\n",
+      "  done: false\n",
+      "  episode_len_mean: 113.48583970546588\n",
+      "  episode_reward_max: 47.52525252525255\n",
+      "  episode_reward_mean: 35.910843066747915\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1519\n",
+      "  episodes_total: 7062\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0269921322663624\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.010993095813319087\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013592622436893484\n",
+      "        total_loss: 3.9119317531585693\n",
+      "        vf_explained_var: 0.9633958339691162\n",
+      "        vf_loss: 3.923839290936788\n",
+      "    num_steps_sampled: 808960\n",
+      "    num_steps_trained: 808960\n",
+      "  iterations_since_restore: 5\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.444000000000006\n",
+      "    gpu_util_percent0: 0.41679999999999995\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.516\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1580018213167273\n",
+      "    mean_env_wait_ms: 0.6519685995559447\n",
+      "    mean_inference_ms: 4.555161635142564\n",
+      "    mean_raw_obs_processing_ms: 0.41520922328594023\n",
+      "  time_since_restore: 105.7582585811615\n",
+      "  time_this_iter_s: 20.699991464614868\n",
+      "  time_total_s: 105.7582585811615\n",
+      "  timers:\n",
+      "    learn_throughput: 11021.266\n",
+      "    learn_time_ms: 14679.983\n",
+      "    sample_throughput: 25435.818\n",
+      "    sample_time_ms: 6360.794\n",
+      "    update_time_ms: 44.668\n",
+      "  timestamp: 1604234364\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 808960\n",
+      "  training_iteration: 5\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      5 |          105.758 | 808960 |  35.9108 |              47.5253 |              13.0808 |            113.486 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1447.9500235183443\n",
+      "    time_step_min: 1237\n",
+      "  date: 2020-11-01_12-39-45\n",
+      "  done: false\n",
+      "  episode_len_mean: 112.33274874313106\n",
+      "  episode_reward_max: 47.52525252525255\n",
+      "  episode_reward_mean: 36.86168359616273\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1491\n",
+      "  episodes_total: 8553\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.987803190946579\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.010113457528253397\n",
+      "        model: {}\n",
+      "        policy_loss: -0.014161262234362463\n",
+      "        total_loss: 3.0733113487561545\n",
+      "        vf_explained_var: 0.9713076949119568\n",
+      "        vf_loss: 3.0859439174334207\n",
+      "    num_steps_sampled: 970752\n",
+      "    num_steps_trained: 970752\n",
+      "  iterations_since_restore: 6\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.396\n",
+      "    gpu_util_percent0: 0.3632000000000001\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5239999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15689234927636098\n",
+      "    mean_env_wait_ms: 0.651134098255352\n",
+      "    mean_inference_ms: 4.500464998774646\n",
+      "    mean_raw_obs_processing_ms: 0.4120524597642815\n",
+      "  time_since_restore: 126.29982709884644\n",
+      "  time_this_iter_s: 20.541568517684937\n",
+      "  time_total_s: 126.29982709884644\n",
+      "  timers:\n",
+      "    learn_throughput: 11029.447\n",
+      "    learn_time_ms: 14669.094\n",
+      "    sample_throughput: 25808.454\n",
+      "    sample_time_ms: 6268.954\n",
+      "    update_time_ms: 43.186\n",
+      "  timestamp: 1604234385\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 970752\n",
+      "  training_iteration: 6\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      6 |            126.3 | 970752 |  36.8617 |              47.5253 |              13.0808 |            112.333 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1430.1320079522864\n",
+      "    time_step_min: 1228\n",
+      "  date: 2020-11-01_12-40-06\n",
+      "  done: false\n",
+      "  episode_len_mean: 111.28944504896627\n",
+      "  episode_reward_max: 48.48484848484849\n",
+      "  episode_reward_mean: 37.7558351344087\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1556\n",
+      "  episodes_total: 10109\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9375320275624593\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008831425181900462\n",
+      "        model: {}\n",
+      "        policy_loss: -0.014223781297914684\n",
+      "        total_loss: 2.650870760281881\n",
+      "        vf_explained_var: 0.9759369492530823\n",
+      "        vf_loss: 2.6637970407803855\n",
+      "    num_steps_sampled: 1132544\n",
+      "    num_steps_trained: 1132544\n",
+      "  iterations_since_restore: 7\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.449999999999996\n",
+      "    gpu_util_percent0: 0.35692307692307695\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.565384615384615\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15594457790714622\n",
+      "    mean_env_wait_ms: 0.6505920718367179\n",
+      "    mean_inference_ms: 4.453229425218937\n",
+      "    mean_raw_obs_processing_ms: 0.409256308610765\n",
+      "  time_since_restore: 146.91562390327454\n",
+      "  time_this_iter_s: 20.6157968044281\n",
+      "  time_total_s: 146.91562390327454\n",
+      "  timers:\n",
+      "    learn_throughput: 11035.377\n",
+      "    learn_time_ms: 14661.212\n",
+      "    sample_throughput: 26039.628\n",
+      "    sample_time_ms: 6213.299\n",
+      "    update_time_ms: 41.221\n",
+      "  timestamp: 1604234406\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1132544\n",
+      "  training_iteration: 7\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      7 |          146.916 | 1132544 |  37.7558 |              48.4848 |              13.0808 |            111.289 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1413.9141553297743\n",
+      "    time_step_min: 1219\n",
+      "  date: 2020-11-01_12-40-27\n",
+      "  done: false\n",
+      "  episode_len_mean: 110.37700420132042\n",
+      "  episode_reward_max: 49.040404040404056\n",
+      "  episode_reward_mean: 38.58040665594469\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1554\n",
+      "  episodes_total: 11663\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8849463810523351\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00801295922913899\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012614224765760204\n",
+      "        total_loss: 2.1787688732147217\n",
+      "        vf_explained_var: 0.9803922772407532\n",
+      "        vf_loss: 2.190222958723704\n",
+      "    num_steps_sampled: 1294336\n",
+      "    num_steps_trained: 1294336\n",
+      "  iterations_since_restore: 8\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.924000000000007\n",
+      "    gpu_util_percent0: 0.3896\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15514960562097774\n",
+      "    mean_env_wait_ms: 0.650196011864452\n",
+      "    mean_inference_ms: 4.41380605191362\n",
+      "    mean_raw_obs_processing_ms: 0.40683273492153127\n",
+      "  time_since_restore: 167.58297491073608\n",
+      "  time_this_iter_s: 20.667351007461548\n",
+      "  time_total_s: 167.58297491073608\n",
+      "  timers:\n",
+      "    learn_throughput: 11046.514\n",
+      "    learn_time_ms: 14646.43\n",
+      "    sample_throughput: 26162.052\n",
+      "    sample_time_ms: 6184.224\n",
+      "    update_time_ms: 41.682\n",
+      "  timestamp: 1604234427\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1294336\n",
+      "  training_iteration: 8\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      8 |          167.583 | 1294336 |  38.5804 |              49.0404 |              13.0808 |            110.377 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1399.354544764219\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-40-48\n",
+      "  done: false\n",
+      "  episode_len_mean: 109.57285519745801\n",
+      "  episode_reward_max: 49.04040404040408\n",
+      "  episode_reward_mean: 39.3178455763567\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1555\n",
+      "  episodes_total: 13218\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8404552837212881\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007818623019071916\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011729774332100837\n",
+      "        total_loss: 1.9283219973246257\n",
+      "        vf_explained_var: 0.9828620553016663\n",
+      "        vf_loss: 1.9389082888762157\n",
+      "    num_steps_sampled: 1456128\n",
+      "    num_steps_trained: 1456128\n",
+      "  iterations_since_restore: 9\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.368000000000002\n",
+      "    gpu_util_percent0: 0.39\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15447110974777709\n",
+      "    mean_env_wait_ms: 0.6499648656278564\n",
+      "    mean_inference_ms: 4.380306434888785\n",
+      "    mean_raw_obs_processing_ms: 0.4047426878747494\n",
+      "  time_since_restore: 188.20489048957825\n",
+      "  time_this_iter_s: 20.621915578842163\n",
+      "  time_total_s: 188.20489048957825\n",
+      "  timers:\n",
+      "    learn_throughput: 11046.003\n",
+      "    learn_time_ms: 14647.108\n",
+      "    sample_throughput: 26334.762\n",
+      "    sample_time_ms: 6143.667\n",
+      "    update_time_ms: 40.969\n",
+      "  timestamp: 1604234448\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1456128\n",
+      "  training_iteration: 9\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      9 |          188.205 | 1456128 |  39.3178 |              49.0404 |              13.0808 |            109.573 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1385.9825049162541\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-41-09\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.85056772100567\n",
+      "  episode_reward_max: 49.04040404040408\n",
+      "  episode_reward_mean: 40.00051201389402\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1578\n",
+      "  episodes_total: 14796\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7908046692609787\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007631780773711701\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011734772803417096\n",
+      "        total_loss: 1.5385288000106812\n",
+      "        vf_explained_var: 0.9865396022796631\n",
+      "        vf_loss: 1.5491326252619426\n",
+      "    num_steps_sampled: 1617920\n",
+      "    num_steps_trained: 1617920\n",
+      "  iterations_since_restore: 10\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.732000000000006\n",
+      "    gpu_util_percent0: 0.38040000000000007\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15388031735599098\n",
+      "    mean_env_wait_ms: 0.6498212598888915\n",
+      "    mean_inference_ms: 4.351027781645246\n",
+      "    mean_raw_obs_processing_ms: 0.40287986554113797\n",
+      "  time_since_restore: 208.505108833313\n",
+      "  time_this_iter_s: 20.30021834373474\n",
+      "  time_total_s: 208.505108833313\n",
+      "  timers:\n",
+      "    learn_throughput: 11056.477\n",
+      "    learn_time_ms: 14633.233\n",
+      "    sample_throughput: 26549.982\n",
+      "    sample_time_ms: 6093.865\n",
+      "    update_time_ms: 40.654\n",
+      "  timestamp: 1604234469\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1617920\n",
+      "  training_iteration: 10\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     10 |          208.505 | 1617920 |  40.0005 |              49.0404 |              13.0808 |            108.851 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1373.7871090163433\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-41-29\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.19760771390212\n",
+      "  episode_reward_max: 49.040404040404084\n",
+      "  episode_reward_mean: 40.61680826327476\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1590\n",
+      "  episodes_total: 16386\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7443548093239466\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007289290855017801\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011087999266843932\n",
+      "        total_loss: 1.2828177213668823\n",
+      "        vf_explained_var: 0.9888736605644226\n",
+      "        vf_loss: 1.2928200562795003\n",
+      "    num_steps_sampled: 1779712\n",
+      "    num_steps_trained: 1779712\n",
+      "  iterations_since_restore: 11\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.136\n",
+      "    gpu_util_percent0: 0.3856\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15335957704686504\n",
+      "    mean_env_wait_ms: 0.6497293652386255\n",
+      "    mean_inference_ms: 4.325424204249887\n",
+      "    mean_raw_obs_processing_ms: 0.4011955359649914\n",
+      "  time_since_restore: 229.01598072052002\n",
+      "  time_this_iter_s: 20.51087188720703\n",
+      "  time_total_s: 229.01598072052002\n",
+      "  timers:\n",
+      "    learn_throughput: 11068.877\n",
+      "    learn_time_ms: 14616.84\n",
+      "    sample_throughput: 27216.446\n",
+      "    sample_time_ms: 5944.641\n",
+      "    update_time_ms: 39.857\n",
+      "  timestamp: 1604234489\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1779712\n",
+      "  training_iteration: 11\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     11 |          229.016 | 1779712 |  40.6168 |              49.0404 |              13.0808 |            108.198 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1362.7848496680983\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-41-50\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.6175456163774\n",
+      "  episode_reward_max: 49.040404040404084\n",
+      "  episode_reward_mean: 41.17096364175804\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1590\n",
+      "  episodes_total: 17976\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7057946672042211\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006505049881525338\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011637478950433433\n",
+      "        total_loss: 1.0556738674640656\n",
+      "        vf_explained_var: 0.9909140467643738\n",
+      "        vf_loss: 1.066363235314687\n",
+      "    num_steps_sampled: 1941504\n",
+      "    num_steps_trained: 1941504\n",
+      "  iterations_since_restore: 12\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.067999999999998\n",
+      "    gpu_util_percent0: 0.38120000000000004\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15290224314841672\n",
+      "    mean_env_wait_ms: 0.6497100863030586\n",
+      "    mean_inference_ms: 4.30291912913981\n",
+      "    mean_raw_obs_processing_ms: 0.3997009547743406\n",
+      "  time_since_restore: 249.53435850143433\n",
+      "  time_this_iter_s: 20.518377780914307\n",
+      "  time_total_s: 249.53435850143433\n",
+      "  timers:\n",
+      "    learn_throughput: 11067.812\n",
+      "    learn_time_ms: 14618.246\n",
+      "    sample_throughput: 27784.289\n",
+      "    sample_time_ms: 5823.147\n",
+      "    update_time_ms: 40.514\n",
+      "  timestamp: 1604234510\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1941504\n",
+      "  training_iteration: 12\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     12 |          249.534 | 1941504 |   41.171 |              49.0404 |              13.0808 |            107.618 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1352.7341357234316\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-42-11\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.1025339736385\n",
+      "  episode_reward_max: 49.04040404040409\n",
+      "  episode_reward_mean: 41.67515040050036\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1598\n",
+      "  episodes_total: 19574\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6686889827251434\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0063633088720962405\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01186193727577726\n",
+      "        total_loss: 0.8905991663535436\n",
+      "        vf_explained_var: 0.9923557639122009\n",
+      "        vf_loss: 0.9015227903922399\n",
+      "    num_steps_sampled: 2103296\n",
+      "    num_steps_trained: 2103296\n",
+      "  iterations_since_restore: 13\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.288461538461544\n",
+      "    gpu_util_percent0: 0.38153846153846155\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5692307692307685\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15249499620405588\n",
+      "    mean_env_wait_ms: 0.6497364450001253\n",
+      "    mean_inference_ms: 4.282874551579647\n",
+      "    mean_raw_obs_processing_ms: 0.39836613551654754\n",
+      "  time_since_restore: 270.1388850212097\n",
+      "  time_this_iter_s: 20.60452651977539\n",
+      "  time_total_s: 270.1388850212097\n",
+      "  timers:\n",
+      "    learn_throughput: 11056.406\n",
+      "    learn_time_ms: 14633.327\n",
+      "    sample_throughput: 27887.324\n",
+      "    sample_time_ms: 5801.632\n",
+      "    update_time_ms: 41.993\n",
+      "  timestamp: 1604234531\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2103296\n",
+      "  training_iteration: 13\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     13 |          270.139 | 2103296 |  41.6752 |              49.0404 |              13.0808 |            107.103 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1343.4148870685165\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-42-32\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.65310846560847\n",
+      "  episode_reward_max: 49.04040404040409\n",
+      "  episode_reward_mean: 42.142787951319704\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1594\n",
+      "  episodes_total: 21168\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6273181239763895\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006019947739938895\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009247757125801096\n",
+      "        total_loss: 0.7534371664126714\n",
+      "        vf_explained_var: 0.9935855865478516\n",
+      "        vf_loss: 0.7617945869763693\n",
+      "    num_steps_sampled: 2265088\n",
+      "    num_steps_trained: 2265088\n",
+      "  iterations_since_restore: 14\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.48\n",
+      "    gpu_util_percent0: 0.3504\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15213206388671544\n",
+      "    mean_env_wait_ms: 0.6497940000882954\n",
+      "    mean_inference_ms: 4.2649850452281735\n",
+      "    mean_raw_obs_processing_ms: 0.39716794855089166\n",
+      "  time_since_restore: 290.5424859523773\n",
+      "  time_this_iter_s: 20.403600931167603\n",
+      "  time_total_s: 290.5424859523773\n",
+      "  timers:\n",
+      "    learn_throughput: 11072.943\n",
+      "    learn_time_ms: 14611.472\n",
+      "    sample_throughput: 27934.424\n",
+      "    sample_time_ms: 5791.85\n",
+      "    update_time_ms: 35.766\n",
+      "  timestamp: 1604234552\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2265088\n",
+      "  training_iteration: 14\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     14 |          290.542 | 2265088 |  42.1428 |              49.0404 |              13.0808 |            106.653 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1334.9958170049756\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-42-53\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.25092267135325\n",
+      "  episode_reward_max: 49.04040404040409\n",
+      "  episode_reward_mean: 42.566322273703655\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1592\n",
+      "  episodes_total: 22760\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.593339666724205\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0052832565270364285\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007287261697153251\n",
+      "        total_loss: 0.6348467022180557\n",
+      "        vf_explained_var: 0.994635820388794\n",
+      "        vf_loss: 0.6413739621639252\n",
+      "    num_steps_sampled: 2426880\n",
+      "    num_steps_trained: 2426880\n",
+      "  iterations_since_restore: 15\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.588\n",
+      "    gpu_util_percent0: 0.3836\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1518110809879511\n",
+      "    mean_env_wait_ms: 0.6498897805634568\n",
+      "    mean_inference_ms: 4.248940110401404\n",
+      "    mean_raw_obs_processing_ms: 0.39609601756717205\n",
+      "  time_since_restore: 311.00591683387756\n",
+      "  time_this_iter_s: 20.463430881500244\n",
+      "  time_total_s: 311.00591683387756\n",
+      "  timers:\n",
+      "    learn_throughput: 11097.5\n",
+      "    learn_time_ms: 14579.139\n",
+      "    sample_throughput: 27995.833\n",
+      "    sample_time_ms: 5779.146\n",
+      "    update_time_ms: 35.119\n",
+      "  timestamp: 1604234573\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2426880\n",
+      "  training_iteration: 15\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     15 |          311.006 | 2426880 |  42.5663 |              49.0404 |              13.0808 |            106.251 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1327.4121421520238\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-43-14\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.89524239563237\n",
+      "  episode_reward_max: 49.04040404040409\n",
+      "  episode_reward_mean: 42.95161292328897\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1601\n",
+      "  episodes_total: 24361\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5610497693220774\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005239539352866511\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008563858728545407\n",
+      "        total_loss: 0.5433527330557505\n",
+      "        vf_explained_var: 0.9954302906990051\n",
+      "        vf_loss: 0.5511491994063059\n",
+      "    num_steps_sampled: 2588672\n",
+      "    num_steps_trained: 2588672\n",
+      "  iterations_since_restore: 16\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.983999999999995\n",
+      "    gpu_util_percent0: 0.37079999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15151777280002335\n",
+      "    mean_env_wait_ms: 0.6499960724887209\n",
+      "    mean_inference_ms: 4.234304826550604\n",
+      "    mean_raw_obs_processing_ms: 0.39511468708048586\n",
+      "  time_since_restore: 331.8462426662445\n",
+      "  time_this_iter_s: 20.840325832366943\n",
+      "  time_total_s: 331.8462426662445\n",
+      "  timers:\n",
+      "    learn_throughput: 11077.938\n",
+      "    learn_time_ms: 14604.884\n",
+      "    sample_throughput: 28012.835\n",
+      "    sample_time_ms: 5775.638\n",
+      "    update_time_ms: 35.504\n",
+      "  timestamp: 1604234594\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2588672\n",
+      "  training_iteration: 16\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     16 |          331.846 | 2588672 |  42.9516 |              49.0404 |              13.0808 |            105.895 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1320.4339440694312\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-43-36\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.57168707168707\n",
+      "  episode_reward_max: 49.04040404040409\n",
+      "  episode_reward_mean: 43.304979416090546\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1613\n",
+      "  episodes_total: 25974\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5246386776367823\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005194058952232202\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010037654642170915\n",
+      "        total_loss: 0.3729574630657832\n",
+      "        vf_explained_var: 0.9968838095664978\n",
+      "        vf_loss: 0.3822186241547267\n",
+      "    num_steps_sampled: 2750464\n",
+      "    num_steps_trained: 2750464\n",
+      "  iterations_since_restore: 17\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.15\n",
+      "    gpu_util_percent0: 0.34961538461538466\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5692307692307685\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1512500032596141\n",
+      "    mean_env_wait_ms: 0.6501069321395831\n",
+      "    mean_inference_ms: 4.2209558905247935\n",
+      "    mean_raw_obs_processing_ms: 0.3942088287210041\n",
+      "  time_since_restore: 352.6941442489624\n",
+      "  time_this_iter_s: 20.847901582717896\n",
+      "  time_total_s: 352.6941442489624\n",
+      "  timers:\n",
+      "    learn_throughput: 11060.738\n",
+      "    learn_time_ms: 14627.595\n",
+      "    sample_throughput: 28046.143\n",
+      "    sample_time_ms: 5768.779\n",
+      "    update_time_ms: 36.388\n",
+      "  timestamp: 1604234616\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2750464\n",
+      "  training_iteration: 17\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     17 |          352.694 | 2750464 |   43.305 |              49.0404 |              13.0808 |            105.572 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1314.0839173535712\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-43-57\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.28088299260548\n",
+      "  episode_reward_max: 49.0404040404041\n",
+      "  episode_reward_mean: 43.62569621105941\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1614\n",
+      "  episodes_total: 27588\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.49088098108768463\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004925240180455148\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007551613341396053\n",
+      "        total_loss: 0.27305928741892177\n",
+      "        vf_explained_var: 0.997745931148529\n",
+      "        vf_loss: 0.27987127751111984\n",
+      "    num_steps_sampled: 2912256\n",
+      "    num_steps_trained: 2912256\n",
+      "  iterations_since_restore: 18\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.076923076923077\n",
+      "    gpu_util_percent0: 0.35576923076923084\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5730769230769224\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1510024924486738\n",
+      "    mean_env_wait_ms: 0.6502222563745731\n",
+      "    mean_inference_ms: 4.208793894567712\n",
+      "    mean_raw_obs_processing_ms: 0.3933811392042326\n",
+      "  time_since_restore: 373.5547993183136\n",
+      "  time_this_iter_s: 20.860655069351196\n",
+      "  time_total_s: 373.5547993183136\n",
+      "  timers:\n",
+      "    learn_throughput: 11035.452\n",
+      "    learn_time_ms: 14661.112\n",
+      "    sample_throughput: 28141.143\n",
+      "    sample_time_ms: 5749.304\n",
+      "    update_time_ms: 34.956\n",
+      "  timestamp: 1604234637\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2912256\n",
+      "  training_iteration: 18\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     18 |          373.555 | 2912256 |  43.6257 |              49.0404 |              13.0808 |            105.281 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1308.3422956891525\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-44-18\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.01201725554643\n",
+      "  episode_reward_max: 49.0404040404041\n",
+      "  episode_reward_mean: 43.913729876137445\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1620\n",
+      "  episodes_total: 29208\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4603450372815132\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0052619769315545755\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007839118620419564\n",
+      "        total_loss: 0.24682058518131575\n",
+      "        vf_explained_var: 0.9979783892631531\n",
+      "        vf_loss: 0.25436367591222125\n",
+      "    num_steps_sampled: 3074048\n",
+      "    num_steps_trained: 3074048\n",
+      "  iterations_since_restore: 19\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.90384615384615\n",
+      "    gpu_util_percent0: 0.3811538461538462\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5692307692307685\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1507749922403882\n",
+      "    mean_env_wait_ms: 0.6503503182530888\n",
+      "    mean_inference_ms: 4.197625625739776\n",
+      "    mean_raw_obs_processing_ms: 0.3926215964880014\n",
+      "  time_since_restore: 394.43259143829346\n",
+      "  time_this_iter_s: 20.87779211997986\n",
+      "  time_total_s: 394.43259143829346\n",
+      "  timers:\n",
+      "    learn_throughput: 11025.644\n",
+      "    learn_time_ms: 14674.154\n",
+      "    sample_throughput: 28102.66\n",
+      "    sample_time_ms: 5757.177\n",
+      "    update_time_ms: 33.741\n",
+      "  timestamp: 1604234658\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3074048\n",
+      "  training_iteration: 19\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     19 |          394.433 | 3074048 |  43.9137 |              49.0404 |              13.0808 |            105.012 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1303.1952154976273\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-44-40\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.77212396560117\n",
+      "  episode_reward_max: 49.0404040404041\n",
+      "  episode_reward_mean: 44.17383145096922\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1607\n",
+      "  episodes_total: 30815\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.43477704375982285\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004907564221260448\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007642344086586188\n",
+      "        total_loss: 0.17235680421193442\n",
+      "        vf_explained_var: 0.998579740524292\n",
+      "        vf_loss: 0.17972578232487044\n",
+      "    num_steps_sampled: 3235840\n",
+      "    num_steps_trained: 3235840\n",
+      "  iterations_since_restore: 20\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.568\n",
+      "    gpu_util_percent0: 0.3516\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15056551159545464\n",
+      "    mean_env_wait_ms: 0.650477071010486\n",
+      "    mean_inference_ms: 4.187399168266206\n",
+      "    mean_raw_obs_processing_ms: 0.39192218046315624\n",
+      "  time_since_restore: 415.2149660587311\n",
+      "  time_this_iter_s: 20.782374620437622\n",
+      "  time_total_s: 415.2149660587311\n",
+      "  timers:\n",
+      "    learn_throughput: 11005.002\n",
+      "    learn_time_ms: 14701.678\n",
+      "    sample_throughput: 28031.542\n",
+      "    sample_time_ms: 5771.784\n",
+      "    update_time_ms: 33.384\n",
+      "  timestamp: 1604234680\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3235840\n",
+      "  training_iteration: 20\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     20 |          415.215 | 3235840 |  44.1738 |              49.0404 |              13.0808 |            104.772 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1298.6048573988814\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-45-01\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.55760212267062\n",
+      "  episode_reward_max: 49.0404040404041\n",
+      "  episode_reward_mean: 44.4073915135559\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1597\n",
+      "  episodes_total: 32412\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4088049481312434\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0050367383907238645\n",
+      "        model: {}\n",
+      "        policy_loss: -0.004726681110696518\n",
+      "        total_loss: 0.15046600687007108\n",
+      "        vf_explained_var: 0.9988059401512146\n",
+      "        vf_loss: 0.15514524901906648\n",
+      "    num_steps_sampled: 3397632\n",
+      "    num_steps_trained: 3397632\n",
+      "  iterations_since_restore: 21\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.25769230769231\n",
+      "    gpu_util_percent0: 0.3230769230769231\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5692307692307685\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15037307743519757\n",
+      "    mean_env_wait_ms: 0.6506021265347358\n",
+      "    mean_inference_ms: 4.177989463073186\n",
+      "    mean_raw_obs_processing_ms: 0.39127952344764305\n",
+      "  time_since_restore: 436.0554406642914\n",
+      "  time_this_iter_s: 20.840474605560303\n",
+      "  time_total_s: 436.0554406642914\n",
+      "  timers:\n",
+      "    learn_throughput: 10991.518\n",
+      "    learn_time_ms: 14719.713\n",
+      "    sample_throughput: 27990.599\n",
+      "    sample_time_ms: 5780.226\n",
+      "    update_time_ms: 33.786\n",
+      "  timestamp: 1604234701\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3397632\n",
+      "  training_iteration: 21\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     21 |          436.055 | 3397632 |  44.4074 |              49.0404 |              13.0808 |            104.558 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1294.3254164459356\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-45-23\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.35706938607576\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 44.62349862987593\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1615\n",
+      "  episodes_total: 34027\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.38861273725827533\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004962532625844081\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006052409371477552\n",
+      "        total_loss: 0.10335199224452178\n",
+      "        vf_explained_var: 0.9991534352302551\n",
+      "        vf_loss: 0.1093505813429753\n",
+      "    num_steps_sampled: 3559424\n",
+      "    num_steps_trained: 3559424\n",
+      "  iterations_since_restore: 22\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.088461538461537\n",
+      "    gpu_util_percent0: 0.34846153846153843\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.565384615384615\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15019358290939233\n",
+      "    mean_env_wait_ms: 0.6507335363952385\n",
+      "    mean_inference_ms: 4.169147396856916\n",
+      "    mean_raw_obs_processing_ms: 0.39067463008215425\n",
+      "  time_since_restore: 456.7496886253357\n",
+      "  time_this_iter_s: 20.69424796104431\n",
+      "  time_total_s: 456.7496886253357\n",
+      "  timers:\n",
+      "    learn_throughput: 10986.132\n",
+      "    learn_time_ms: 14726.93\n",
+      "    sample_throughput: 28004.762\n",
+      "    sample_time_ms: 5777.303\n",
+      "    update_time_ms: 33.873\n",
+      "  timestamp: 1604234723\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3559424\n",
+      "  training_iteration: 22\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     22 |           456.75 | 3559424 |  44.6235 |              49.0404 |              13.0808 |            104.357 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1290.3840622454425\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-45-44\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.17307152875175\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 44.82170512983978\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1623\n",
+      "  episodes_total: 35650\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.36651041358709335\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006440783229966958\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007153725775424391\n",
+      "        total_loss: 0.08216805756092072\n",
+      "        vf_explained_var: 0.999314546585083\n",
+      "        vf_loss: 0.0893440234164397\n",
+      "    num_steps_sampled: 3721216\n",
+      "    num_steps_trained: 3721216\n",
+      "  iterations_since_restore: 23\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.088\n",
+      "    gpu_util_percent0: 0.3868\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15002367096031743\n",
+      "    mean_env_wait_ms: 0.6508575565151\n",
+      "    mean_inference_ms: 4.160903003774551\n",
+      "    mean_raw_obs_processing_ms: 0.3901072062383884\n",
+      "  time_since_restore: 477.2431552410126\n",
+      "  time_this_iter_s: 20.49346661567688\n",
+      "  time_total_s: 477.2431552410126\n",
+      "  timers:\n",
+      "    learn_throughput: 11006.978\n",
+      "    learn_time_ms: 14699.039\n",
+      "    sample_throughput: 27941.378\n",
+      "    sample_time_ms: 5790.409\n",
+      "    update_time_ms: 31.7\n",
+      "  timestamp: 1604234744\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3721216\n",
+      "  training_iteration: 23\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     23 |          477.243 | 3721216 |  44.8217 |              49.0404 |              13.0808 |            104.173 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1286.7964535196131\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-46-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.00566154176393\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 45.00310735680616\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1619\n",
+      "  episodes_total: 37269\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3446768522262573\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006010537773060302\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006810000515542924\n",
+      "        total_loss: 0.05681590953220924\n",
+      "        vf_explained_var: 0.9995128512382507\n",
+      "        vf_loss: 0.06364798328528802\n",
+      "    num_steps_sampled: 3883008\n",
+      "    num_steps_trained: 3883008\n",
+      "  iterations_since_restore: 24\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.616\n",
+      "    gpu_util_percent0: 0.42919999999999997\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1498672084151353\n",
+      "    mean_env_wait_ms: 0.6509884510617694\n",
+      "    mean_inference_ms: 4.153243452307446\n",
+      "    mean_raw_obs_processing_ms: 0.38958140467964614\n",
+      "  time_since_restore: 497.40847873687744\n",
+      "  time_this_iter_s: 20.165323495864868\n",
+      "  time_total_s: 497.40847873687744\n",
+      "  timers:\n",
+      "    learn_throughput: 11023.912\n",
+      "    learn_time_ms: 14676.46\n",
+      "    sample_throughput: 27996.068\n",
+      "    sample_time_ms: 5779.097\n",
+      "    update_time_ms: 33.775\n",
+      "  timestamp: 1604234764\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3883008\n",
+      "  training_iteration: 24\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     24 |          497.408 | 3883008 |  45.0031 |              49.0404 |              13.0808 |            104.006 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1283.5285511912427\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-46-25\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.8526007099861\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 45.16817737492225\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1605\n",
+      "  episodes_total: 38874\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.32262827704350155\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005610594448323051\n",
+      "        model: {}\n",
+      "        policy_loss: -0.004409408691572025\n",
+      "        total_loss: 0.04963509986797968\n",
+      "        vf_explained_var: 0.9995853304862976\n",
+      "        vf_loss: 0.054065559059381485\n",
+      "    num_steps_sampled: 4044800\n",
+      "    num_steps_trained: 4044800\n",
+      "  iterations_since_restore: 25\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.457692307692305\n",
+      "    gpu_util_percent0: 0.4265384615384616\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.565384615384615\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14972028928263528\n",
+      "    mean_env_wait_ms: 0.6511154433665545\n",
+      "    mean_inference_ms: 4.146093777194914\n",
+      "    mean_raw_obs_processing_ms: 0.3890936155505342\n",
+      "  time_since_restore: 517.5921437740326\n",
+      "  time_this_iter_s: 20.18366503715515\n",
+      "  time_total_s: 517.5921437740326\n",
+      "  timers:\n",
+      "    learn_throughput: 11035.673\n",
+      "    learn_time_ms: 14660.819\n",
+      "    sample_throughput: 28000.79\n",
+      "    sample_time_ms: 5778.123\n",
+      "    update_time_ms: 32.664\n",
+      "  timestamp: 1604234785\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4044800\n",
+      "  training_iteration: 25\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "2020-11-01 12:46:26,652\tWARNING util.py:136 -- The `process_trial` operation took 0.5261285305023193 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     25 |          517.592 | 4044800 |  45.1682 |              49.0404 |              13.0808 |            103.853 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1280.5338148716173\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-46-46\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.71221741815936\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 45.319422763771136\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1601\n",
+      "  episodes_total: 40475\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.2999122018615405\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0053110466881965595\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006303349079341085\n",
+      "        total_loss: 0.05139423534274101\n",
+      "        vf_explained_var: 0.9995618462562561\n",
+      "        vf_loss: 0.0577147655809919\n",
+      "    num_steps_sampled: 4206592\n",
+      "    num_steps_trained: 4206592\n",
+      "  iterations_since_restore: 26\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.96\n",
+      "    gpu_util_percent0: 0.4584\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14958343418475262\n",
+      "    mean_env_wait_ms: 0.6512359147663624\n",
+      "    mean_inference_ms: 4.139411227315708\n",
+      "    mean_raw_obs_processing_ms: 0.38863613088367416\n",
+      "  time_since_restore: 537.769278049469\n",
+      "  time_this_iter_s: 20.1771342754364\n",
+      "  time_total_s: 537.769278049469\n",
+      "  timers:\n",
+      "    learn_throughput: 11085.459\n",
+      "    learn_time_ms: 14594.975\n",
+      "    sample_throughput: 28023.358\n",
+      "    sample_time_ms: 5773.469\n",
+      "    update_time_ms: 30.886\n",
+      "  timestamp: 1604234806\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4206592\n",
+      "  training_iteration: 26\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "2020-11-01 12:46:47,593\tWARNING util.py:136 -- The `process_trial` operation took 0.5515177249908447 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     26 |          537.769 | 4206592 |  45.3194 |              49.0404 |              13.0808 |            103.712 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1277.717564514211\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-47-07\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.58062906827577\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 45.461481590264796\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1619\n",
+      "  episodes_total: 42094\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.2697679474949837\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005566679639741778\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006809816346503794\n",
+      "        total_loss: 0.03190007215986649\n",
+      "        vf_explained_var: 0.9997119307518005\n",
+      "        vf_loss: 0.038705606323977314\n",
+      "    num_steps_sampled: 4368384\n",
+      "    num_steps_trained: 4368384\n",
+      "  iterations_since_restore: 27\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.436000000000003\n",
+      "    gpu_util_percent0: 0.3812\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14945344756304582\n",
+      "    mean_env_wait_ms: 0.6513545610993874\n",
+      "    mean_inference_ms: 4.133051412280412\n",
+      "    mean_raw_obs_processing_ms: 0.38819843216626215\n",
+      "  time_since_restore: 557.9500815868378\n",
+      "  time_this_iter_s: 20.180803537368774\n",
+      "  time_total_s: 557.9500815868378\n",
+      "  timers:\n",
+      "    learn_throughput: 11129.942\n",
+      "    learn_time_ms: 14536.644\n",
+      "    sample_throughput: 28097.666\n",
+      "    sample_time_ms: 5758.201\n",
+      "    update_time_ms: 30.627\n",
+      "  timestamp: 1604234827\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4368384\n",
+      "  training_iteration: 27\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "2020-11-01 12:47:08,513\tWARNING util.py:136 -- The `process_trial` operation took 0.5479977130889893 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     27 |           557.95 | 4368384 |  45.4615 |              49.0404 |              13.0808 |            103.581 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1275.0976458734085\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-47-28\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.45904339273052\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 45.59383551183082\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1623\n",
+      "  episodes_total: 43717\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.23974776516358057\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004747193811150889\n",
+      "        model: {}\n",
+      "        policy_loss: -0.004243802364120104\n",
+      "        total_loss: 0.02101877443298387\n",
+      "        vf_explained_var: 0.999813973903656\n",
+      "        vf_loss: 0.025263771259536345\n",
+      "    num_steps_sampled: 4530176\n",
+      "    num_steps_trained: 4530176\n",
+      "  iterations_since_restore: 28\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.936\n",
+      "    gpu_util_percent0: 0.364\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14933083667741634\n",
+      "    mean_env_wait_ms: 0.6514677609541502\n",
+      "    mean_inference_ms: 4.127067697966748\n",
+      "    mean_raw_obs_processing_ms: 0.3877881594254328\n",
+      "  time_since_restore: 578.1908588409424\n",
+      "  time_this_iter_s: 20.240777254104614\n",
+      "  time_total_s: 578.1908588409424\n",
+      "  timers:\n",
+      "    learn_throughput: 11182.422\n",
+      "    learn_time_ms: 14468.421\n",
+      "    sample_throughput: 28093.626\n",
+      "    sample_time_ms: 5759.029\n",
+      "    update_time_ms: 30.485\n",
+      "  timestamp: 1604234848\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4530176\n",
+      "  training_iteration: 28\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "2020-11-01 12:47:29,582\tWARNING util.py:136 -- The `process_trial` operation took 0.5904042720794678 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     28 |          578.191 | 4530176 |  45.5938 |              49.0404 |              13.0808 |            103.459 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1272.6863282026368\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-47-49\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.34723815406335\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 45.71580313859499\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1615\n",
+      "  episodes_total: 45332\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.012500000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.21396022414167723\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00464061457508554\n",
+      "        model: {}\n",
+      "        policy_loss: -0.003965421337246274\n",
+      "        total_loss: 0.02320340438745916\n",
+      "        vf_explained_var: 0.9998058676719666\n",
+      "        vf_loss: 0.027217798711111147\n",
+      "    num_steps_sampled: 4691968\n",
+      "    num_steps_trained: 4691968\n",
+      "  iterations_since_restore: 29\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.857692307692307\n",
+      "    gpu_util_percent0: 0.34076923076923077\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.565384615384615\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14921483484635445\n",
+      "    mean_env_wait_ms: 0.6515697684351597\n",
+      "    mean_inference_ms: 4.121446270442373\n",
+      "    mean_raw_obs_processing_ms: 0.38740127780397765\n",
+      "  time_since_restore: 598.5525875091553\n",
+      "  time_this_iter_s: 20.36172866821289\n",
+      "  time_total_s: 598.5525875091553\n",
+      "  timers:\n",
+      "    learn_throughput: 11221.151\n",
+      "    learn_time_ms: 14418.485\n",
+      "    sample_throughput: 28165.983\n",
+      "    sample_time_ms: 5744.234\n",
+      "    update_time_ms: 31.72\n",
+      "  timestamp: 1604234869\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4691968\n",
+      "  training_iteration: 29\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "2020-11-01 12:47:50,804\tWARNING util.py:136 -- The `process_trial` operation took 0.6144161224365234 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     29 |          598.553 | 4691968 |  45.7158 |              49.0404 |              13.0808 |            103.347 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1270.4485656393304\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-48-10\n",
+      "  done: true\n",
+      "  episode_len_mean: 103.24400221587761\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 45.82882130203902\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1602\n",
+      "  episodes_total: 46934\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.006250000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.19203581909338632\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004001018533017486\n",
+      "        model: {}\n",
+      "        policy_loss: -0.0069229137285825955\n",
+      "        total_loss: 0.009018626738300858\n",
+      "        vf_explained_var: 0.9998963475227356\n",
+      "        vf_loss: 0.01601255312561989\n",
+      "    num_steps_sampled: 4853760\n",
+      "    num_steps_trained: 4853760\n",
+      "  iterations_since_restore: 30\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.076000000000004\n",
+      "    gpu_util_percent0: 0.4292\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14910530030356728\n",
+      "    mean_env_wait_ms: 0.6516595301622415\n",
+      "    mean_inference_ms: 4.116169102966147\n",
+      "    mean_raw_obs_processing_ms: 0.3870328506532899\n",
+      "  time_since_restore: 618.7089035511017\n",
+      "  time_this_iter_s: 20.15631604194641\n",
+      "  time_total_s: 618.7089035511017\n",
+      "  timers:\n",
+      "    learn_throughput: 11261.529\n",
+      "    learn_time_ms: 14366.788\n",
+      "    sample_throughput: 28251.677\n",
+      "    sample_time_ms: 5726.81\n",
+      "    update_time_ms: 31.9\n",
+      "  timestamp: 1604234890\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4853760\n",
+      "  training_iteration: 30\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "2020-11-01 12:48:11,852\tWARNING util.py:136 -- The `process_trial` operation took 0.6959054470062256 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.3/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | TERMINATED |       |     30 |          618.709 | 4853760 |  45.8288 |              49.0404 |              13.0808 |            103.244 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.2/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | TERMINATED |       |     30 |          618.709 | 4853760 |  45.8288 |              49.0404 |              13.0808 |            103.244 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 67339\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201101_123726-pq2fv3jo/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201101_123726-pq2fv3jo/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min 1207\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step 7\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime 646\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp 1604234892\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max 1901\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean 1270.44857\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max 49.0404\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min 13.08081\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean 45.82882\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total 46934\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration 30\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step ‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mdifferent-sweep-5\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/pq2fv3jo\u001b[0m\n",
+      "2020-11-01 12:48:21,592 - wandb.wandb_agent - INFO - Cleaning up finished run: pq2fv3jo\n",
+      "2020-11-01 12:48:21,916 - wandb.wandb_agent - INFO - Agent received command: exit\n",
+      "2020-11-01 12:48:21,916 - wandb.wandb_agent - INFO - Received exit command. Killing runs and quitting.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Terminating and syncing runs. Press ctrl-c to kill.\n"
      ]
     }
    ],
    "source": [
-    "!wandb agent 1x8v92mc"
+    "!wandb agent 9xhkl8my"
    ]
   },
   {
diff --git a/JSS/.ipynb_checkpoints/Random-checkpoint.ipynb b/JSS/.ipynb_checkpoints/Random-checkpoint.ipynb
index c3d10c3..6d201e1 100644
--- a/JSS/.ipynb_checkpoints/Random-checkpoint.ipynb
+++ b/JSS/.ipynb_checkpoints/Random-checkpoint.ipynb
@@ -56,7 +56,7 @@
     "    print(\"I have detected {} CPUs here, so I'm going to create {} actors\".format(mp.cpu_count(), mp.cpu_count() - 1))\n",
     "    os.environ[\"WANDB_API_KEY\"] = '3487a01956bf67cc7882bca2a38f70c8c95f8463'\n",
     "    sweep_config = {\n",
-    "        'program': 'random_loop.py',\n",
+    "        'program': 'CP.py',\n",
     "        'method': 'grid',\n",
     "        'metric': {\n",
     "            'name': 'time_step_min',\n",
@@ -64,9 +64,9 @@
     "        },\n",
     "        'parameters': {\n",
     "            'instance_path': {\n",
-    "                'values': ['/JSS/JSS/env/instances/ta51', '/JSS/JSS/env/instances/ta52', '/JSS/JSS/env/instances/ta53', '/JSS/JSS/env/instances/ta54',\n",
-    "                           '/JSS/JSS/env/instances/ta55', '/JSS/JSS/env/instances/ta56', '/JSS/JSS/env/instances/ta57', '/JSS/JSS/env/instances/ta58',\n",
-    "                           '/JSS/JSS/env/instances/ta59', '/JSS/JSS/env/instances/ta60']\n",
+    "                'values': ['/JSS/JSS/env/instances/ta71', '/JSS/JSS/env/instances/ta72', '/JSS/JSS/env/instances/ta73', '/JSS/JSS/env/instances/ta74',\n",
+    "                           '/JSS/JSS/env/instances/ta75', '/JSS/JSS/env/instances/ta76', '/JSS/JSS/env/instances/ta77', '/JSS/JSS/env/instances/ta78',\n",
+    "                           '/JSS/JSS/env/instances/ta79', '/JSS/JSS/env/instances/ta80']\n",
     "            }\n",
     "        }\n",
     "    }"
@@ -81,8 +81,8 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Create sweep with ID: kitgghxj\n",
-      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/kitgghxj\n"
+      "Create sweep with ID: kkxvg8te\n",
+      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/kkxvg8te\n"
      ]
     }
    ],
@@ -92,7 +92,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": null,
    "metadata": {},
    "outputs": [
     {
@@ -100,239 +100,102 @@
      "output_type": "stream",
      "text": [
       "\u001b[34m\u001b[1mwandb\u001b[0m: Starting wandb agent üïµÔ∏è\n",
-      "2020-10-13 12:32:48,579 - wandb.wandb_agent - INFO - Running runs: []\n",
-      "2020-10-13 12:32:48,906 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-13 12:32:48,906 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "2020-11-03 17:48:30,968 - wandb.wandb_agent - INFO - Running runs: []\n",
+      "2020-11-03 17:48:31,522 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-03 17:48:31,522 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
       "\tinstance_path: /JSS/JSS/env/instances/ta51\n",
-      "2020-10-13 12:32:48,908 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python random_loop.py --instance_path=/JSS/JSS/env/instances/ta51\n",
+      "2020-11-03 17:48:31,524 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta51\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mdrawn-sweep-1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/kitgghxj\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/7zjyogzl\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201013_123250-7zjyogzl\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/kkxvg8te\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/quk2usr5\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201103_174832-quk2usr5\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "2020-10-13 12:32:53,926 - wandb.wandb_agent - INFO - Running runs: ['7zjyogzl']\n",
-      "2020-10-13 12:32:54,468\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
-      "== Status ==\n",
-      "Memory usage on this node: 11.5/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/558.4 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+-------+\n",
-      "| Trial name                       | status   | loc   |\n",
-      "|----------------------------------+----------+-------|\n",
-      "| RandomMasked_jss_env_3851e_00000 | RUNNING  |       |\n",
-      "+----------------------------------+----------+-------+\n",
+      "2020-11-03 17:48:36,541 - wandb.wandb_agent - INFO - Running runs: ['quk2usr5']\n",
+      "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 24629\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201103_174832-quk2usr5/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201103_174832-quk2usr5/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2762.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 603\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604426315\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/quk2usr5\u001b[0m\n",
+      "2020-11-03 17:58:41,416 - wandb.wandb_agent - INFO - Cleaning up finished run: quk2usr5\n",
+      "2020-11-03 17:58:41,795 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-03 17:58:41,795 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta52\n",
+      "2020-11-03 17:58:41,799 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta52\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/kkxvg8te\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/l0rsmjin\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201103_175842-l0rsmjin\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-03 17:58:46,817 - wandb.wandb_agent - INFO - Running runs: ['l0rsmjin']\n",
+      "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 24731\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201103_175842-l0rsmjin/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201103_175842-l0rsmjin/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2799.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 603\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604426925\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/l0rsmjin\u001b[0m\n",
+      "2020-11-03 18:08:52,752 - wandb.wandb_agent - INFO - Cleaning up finished run: l0rsmjin\n",
+      "2020-11-03 18:08:53,460 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-03 18:08:53,460 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta53\n",
+      "2020-11-03 18:08:53,462 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta53\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/kkxvg8te\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/dy77i2y1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201103_180854-dy77i2y1\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m F1013 12:32:56.746781   308   308 service_based_gcs_client.cc:207] Couldn't reconnect to GCS server. The last attempted GCS server address was 172.17.0.4:35371\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m *** Check failure stack trace: ***\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f29941c66ed  google::LogMessage::Fail()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f29941c784c  google::LogMessage::SendToLog()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f29941c63c9  google::LogMessage::Flush()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f29941c65e1  google::LogMessage::~LogMessage()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f299417d789  ray::RayLog::~RayLog()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f2993ec11ea  ray::gcs::ServiceBasedGcsClient::ReconnectGcsServer()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f2993ec12ef  ray::gcs::ServiceBasedGcsClient::GcsServiceFailureDetected()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f2993ec1491  ray::gcs::ServiceBasedGcsClient::PeriodicallyCheckGcsServerAddress()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f2993ec3801  ray::gcs::ServiceBasedGcsClient::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m F1013 12:32:56.731905   318   318 service_based_gcs_client.cc:207] Couldn't reconnect to GCS server. The last attempted GCS server address was 172.17.0.4:35371\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m *** Check failure stack trace: ***\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d8d36ed  google::LogMessage::Fail()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d8d484c  google::LogMessage::SendToLog()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d8d33c9  google::LogMessage::Flush()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d8d35e1  google::LogMessage::~LogMessage()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d88a789  ray::RayLog::~RayLog()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d5ce1ea  ray::gcs::ServiceBasedGcsClient::ReconnectGcsServer()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d5ce2ef  ray::gcs::ServiceBasedGcsClient::GcsServiceFailureDetected()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d5ce491  ray::gcs::ServiceBasedGcsClient::PeriodicallyCheckGcsServerAddress()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d5d0801  ray::gcs::ServiceBasedGcsClient::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d4df7a8  ray::gcs::GlobalStateAccessor::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d450a2c  __pyx_pw_3ray_7_raylet_19GlobalStateAccessor_3connect()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9dcc98a  method_vectorcall_NOARGS\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9d5cb08  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9de76a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9de8a20  method_vectorcall\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9d5dde6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9de7baf  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9de8643  _PyFunction_Vectorcall.localalias.353\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9d5dde6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9de76a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9de8454  PyEval_EvalCodeEx\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9e76bbc  PyEval_EvalCode\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9e76c64  run_eval_code_obj\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9ea8d14  run_mod\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9d71625  PyRun_FileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9d71a0a  PyRun_SimpleFileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9d728cf  Py_RunMain.cold.2911\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9eab829  Py_BytesMain\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914ebd8840  __libc_start_main\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9e3bb33  (unknown)\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m F1013 12:32:56.749399   329   329 service_based_gcs_client.cc:207] Couldn't reconnect to GCS server. The last attempted GCS server address was 172.17.0.4:35371\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m *** Check failure stack trace: ***\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245ddef6ed  google::LogMessage::Fail()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245ddf084c  google::LogMessage::SendToLog()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245ddef3c9  google::LogMessage::Flush()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245ddef5e1  google::LogMessage::~LogMessage()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245dda6789  ray::RayLog::~RayLog()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245daea1ea  ray::gcs::ServiceBasedGcsClient::ReconnectGcsServer()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245daea2ef  ray::gcs::ServiceBasedGcsClient::GcsServiceFailureDetected()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245daea491  ray::gcs::ServiceBasedGcsClient::PeriodicallyCheckGcsServerAddress()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245daec801  ray::gcs::ServiceBasedGcsClient::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245d9fb7a8  ray::gcs::GlobalStateAccessor::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m F1013 12:32:56.749487   437   437 service_based_gcs_client.cc:207] Couldn't reconnect to GCS server. The last attempted GCS server address was 172.17.0.4:35371\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m *** Check failure stack trace: ***\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f36026ed  google::LogMessage::Fail()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f360384c  google::LogMessage::SendToLog()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f36023c9  google::LogMessage::Flush()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f36025e1  google::LogMessage::~LogMessage()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f35b9789  ray::RayLog::~RayLog()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f32fd1ea  ray::gcs::ServiceBasedGcsClient::ReconnectGcsServer()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f32fd2ef  ray::gcs::ServiceBasedGcsClient::GcsServiceFailureDetected()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f32fd491  ray::gcs::ServiceBasedGcsClient::PeriodicallyCheckGcsServerAddress()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f32ff801  ray::gcs::ServiceBasedGcsClient::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f3280ed6  ray::CoreWorker::CoreWorker()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m F1013 12:32:56.749395   401   401 service_based_gcs_client.cc:207] Couldn't reconnect to GCS server. The last attempted GCS server address was 172.17.0.4:35371\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m *** Check failure stack trace: ***\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253f536ed  google::LogMessage::Fail()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253f5484c  google::LogMessage::SendToLog()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253f533c9  google::LogMessage::Flush()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253f535e1  google::LogMessage::~LogMessage()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253f0a789  ray::RayLog::~RayLog()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253c4e1ea  ray::gcs::ServiceBasedGcsClient::ReconnectGcsServer()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253c4e2ef  ray::gcs::ServiceBasedGcsClient::GcsServiceFailureDetected()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253c4e491  ray::gcs::ServiceBasedGcsClient::PeriodicallyCheckGcsServerAddress()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253c50801  ray::gcs::ServiceBasedGcsClient::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253bd1ed6  ray::CoreWorker::CoreWorker()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m F1013 12:32:56.749400   363   363 service_based_gcs_client.cc:207] Couldn't reconnect to GCS server. The last attempted GCS server address was 172.17.0.4:35371\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m *** Check failure stack trace: ***\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42549ba6ed  google::LogMessage::Fail()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42549bb84c  google::LogMessage::SendToLog()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42549ba3c9  google::LogMessage::Flush()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42549ba5e1  google::LogMessage::~LogMessage()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f4254971789  ray::RayLog::~RayLog()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42546b51ea  ray::gcs::ServiceBasedGcsClient::ReconnectGcsServer()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42546b52ef  ray::gcs::ServiceBasedGcsClient::GcsServiceFailureDetected()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42546b5491  ray::gcs::ServiceBasedGcsClient::PeriodicallyCheckGcsServerAddress()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42546b7801  ray::gcs::ServiceBasedGcsClient::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f4254638ed6  ray::CoreWorker::CoreWorker()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f2993dd27a8  ray::gcs::GlobalStateAccessor::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f2993d43a2c  __pyx_pw_3ray_7_raylet_19GlobalStateAccessor_3connect()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c48b98a  method_vectorcall_NOARGS\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c41bb08  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4a66a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4a7a20  method_vectorcall\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c41cde6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4a6baf  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4a7643  _PyFunction_Vectorcall.localalias.353\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c41cde6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4a66a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4a7454  PyEval_EvalCodeEx\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c535bbc  PyEval_EvalCode\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c535c64  run_eval_code_obj\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c567d14  run_mod\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c430625  PyRun_FileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c430a0a  PyRun_SimpleFileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4318cf  Py_RunMain.cold.2911\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c56a829  Py_BytesMain\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245d96ca2c  __pyx_pw_3ray_7_raylet_19GlobalStateAccessor_3connect()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f167698a  method_vectorcall_NOARGS\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1606b08  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f16916a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1692a20  method_vectorcall\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1607de6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1691baf  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1692643  _PyFunction_Vectorcall.localalias.353\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1607de6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f16916a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1692454  PyEval_EvalCodeEx\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1720bbc  PyEval_EvalCode\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1720c64  run_eval_code_obj\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f3284c14  ray::CoreWorkerProcess::CreateWorker()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f3285e82  ray::CoreWorkerProcess::CoreWorkerProcess()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253bd5c14  ray::CoreWorkerProcess::CreateWorker()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253bd6e82  ray::CoreWorkerProcess::CoreWorkerProcess()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f425463cc14  ray::CoreWorkerProcess::CreateWorker()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f425463de82  ray::CoreWorkerProcess::CoreWorkerProcess()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f29954cb840  __libc_start_main\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4fab33  (unknown)\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1752d14  run_mod\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f161b625  PyRun_FileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f161ba0a  PyRun_SimpleFileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f161c8cf  Py_RunMain.cold.2911\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1755829  Py_BytesMain\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245f0f4840  __libc_start_main\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f16e5b33  (unknown)\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f328684b  ray::CoreWorkerProcess::Initialize()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f31c4448  __pyx_pw_3ray_7_raylet_10CoreWorker_1__cinit__()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f31c5ba5  __pyx_tp_new_3ray_7_raylet_CoreWorker()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253bd784b  ray::CoreWorkerProcess::Initialize()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253b15448  __pyx_pw_3ray_7_raylet_10CoreWorker_1__cinit__()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253b16ba5  __pyx_tp_new_3ray_7_raylet_CoreWorker()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f425463e84b  ray::CoreWorkerProcess::Initialize()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f425457c448  __pyx_pw_3ray_7_raylet_10CoreWorker_1__cinit__()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f425457dba5  __pyx_tp_new_3ray_7_raylet_CoreWorker()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fad7337d  _PyObject_MakeTpCall\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d1cb37d  _PyObject_MakeTpCall\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d253d09  _PyEval_EvalFrameDefault\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d218baf  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d219643  _PyFunction_Vectorcall.localalias.353\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d18ede6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d2186a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d219454  PyEval_EvalCodeEx\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d2a7bbc  PyEval_EvalCode\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d2a7c64  run_eval_code_obj\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d2d9d14  run_mod\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d1a2625  PyRun_FileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d1a2a0a  PyRun_SimpleFileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f801b37d  _PyObject_MakeTpCall\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f80a3d09  _PyEval_EvalFrameDefault\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f8068baf  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f8069643  _PyFunction_Vectorcall.localalias.353\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f7fdede6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f80686a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f8069454  PyEval_EvalCodeEx\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f80f7bbc  PyEval_EvalCode\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f80f7c64  run_eval_code_obj\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f8129d14  run_mod\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f7ff2625  PyRun_FileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f7ff2a0a  PyRun_SimpleFileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fadfbd09  _PyEval_EvalFrameDefault\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fadc0baf  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fadc1643  _PyFunction_Vectorcall.localalias.353\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fad36de6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fadc06a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fadc1454  PyEval_EvalCodeEx\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fae4fbbc  PyEval_EvalCode\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fae4fc64  run_eval_code_obj\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fae81d14  run_mod\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fad4a625  PyRun_FileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fad4aa0a  PyRun_SimpleFileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fad4b8cf  Py_RunMain.cold.2911\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d1a38cf  Py_RunMain.cold.2911\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d2dc829  Py_BytesMain\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f4907840  __libc_start_main\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d26cb33  (unknown)\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f7ff38cf  Py_RunMain.cold.2911\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f812c829  Py_BytesMain\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1255258840  __libc_start_main\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f80bcb33  (unknown)\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fae84829  Py_BytesMain\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f4255cbf840  __libc_start_main\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fae14b33  (unknown)\n",
-      "2020-10-13 12:32:56,926\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffdf5a1a8201000000.\n",
-      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1013 12:32:56.915767   265   265 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Socket closed\n",
-      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1013 12:32:56.929625   265   265 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Socket closed\n",
-      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1013 12:32:56.932425   265   265 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Socket closed\n"
+      "2020-11-03 18:08:58,480 - wandb.wandb_agent - INFO - Running runs: ['dy77i2y1']\n"
      ]
     }
    ],
    "source": [
-    "!wandb agent kitgghxj"
+    "!wandb agent kkxvg8te"
    ]
   },
   {
diff --git a/JSS/.ipynb_checkpoints/default_config-checkpoint.py b/JSS/.ipynb_checkpoints/default_config-checkpoint.py
index 46f4d10..4729210 100644
--- a/JSS/.ipynb_checkpoints/default_config-checkpoint.py
+++ b/JSS/.ipynb_checkpoints/default_config-checkpoint.py
@@ -6,7 +6,7 @@ default_config = {
     'env': 'jss_env',
     'seed': 0,
     'framework': 'torch',
-    'log_level': 'INFO',
+    'log_level': 'WARN',
     'num_gpus': 1,
     'instance_path': '/JSS/JSS/env/instances/ta51',
     'num_envs_per_worker': 2,
diff --git a/JSS/.ipynb_checkpoints/train-checkpoint.py b/JSS/.ipynb_checkpoints/train-checkpoint.py
index d4ac941..0275259 100644
--- a/JSS/.ipynb_checkpoints/train-checkpoint.py
+++ b/JSS/.ipynb_checkpoints/train-checkpoint.py
@@ -47,10 +47,10 @@ def train_func():
     config.pop('layer_size', None)
     config.pop('layer_nb', None)
 
-    ray.init()
+    ray.init(num_gpus=1)
 
     stop = {
-        "time_total_s": 60 * 60,
+        "time_total_s": 10 * 60,
     }
 
     analysis = tune.run(PPOTrainer, config=config, stop=stop, name="ppo-jss")
diff --git a/JSS/MTWR.py b/JSS/MTWR.py
index 1b7b946..37944ef 100644
--- a/JSS/MTWR.py
+++ b/JSS/MTWR.py
@@ -21,11 +21,11 @@ def MTWR_worker(default_config):
         real_state = np.copy(state['real_obs'])
         legal_actions = state['action_mask'][:-1]
         reshaped = np.reshape(real_state, (env.jobs, 7))
-        remaining_time = reshaped[:, 3]
+        remaining_time = (reshaped[:, 3] * env.max_time_jobs) / env.jobs_length
         illegal_actions = np.invert(legal_actions)
-        mask = illegal_actions * -1e8
+        mask = illegal_actions * 1e8
         remaining_time += mask
-        MTWR_action = np.argmax(remaining_time)
+        MTWR_action = np.argmin(remaining_time)
         assert legal_actions[MTWR_action]
         state, reward, done, _ = env.step(MTWR_action)
     env.reset()
diff --git a/JSS/PPO.ipynb b/JSS/PPO.ipynb
index 23b572b..38026a3 100644
--- a/JSS/PPO.ipynb
+++ b/JSS/PPO.ipynb
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": 7,
    "metadata": {},
    "outputs": [
     {
@@ -56,7 +56,7 @@
     "    print(\"I have detected {} CPUs here, so I'm going to create {} actors\".format(mp.cpu_count(), mp.cpu_count() - 1))\n",
     "    os.environ[\"WANDB_API_KEY\"] = '3487a01956bf67cc7882bca2a38f70c8c95f8463'\n",
     "    sweep_config = {\n",
-    "        'program': 'MTWR.py',\n",
+    "        'program': 'train.py',\n",
     "        'method': 'grid',\n",
     "        'metric': {\n",
     "            'name': 'time_step_min',\n",
@@ -64,9 +64,9 @@
     "        },\n",
     "        'parameters': {\n",
     "            'instance_path': {\n",
-    "                'values': ['/JSS/JSS/env/instances/ta51', '/JSS/JSS/env/instances/ta52', '/JSS/JSS/env/instances/ta53', '/JSS/JSS/env/instances/ta54',\n",
-    "                           '/JSS/JSS/env/instances/ta55', '/JSS/JSS/env/instances/ta56', '/JSS/JSS/env/instances/ta57', '/JSS/JSS/env/instances/ta58',\n",
-    "                           '/JSS/JSS/env/instances/ta59', '/JSS/JSS/env/instances/ta60']\n",
+    "                'values': ['/JSS/JSS/env/instances/ta40', '/JSS/JSS/env/instances/ta41', '/JSS/JSS/env/instances/ta42', '/JSS/JSS/env/instances/ta43', '/JSS/JSS/env/instances/ta44',\n",
+    "                           '/JSS/JSS/env/instances/ta45', '/JSS/JSS/env/instances/ta46', '/JSS/JSS/env/instances/ta47', '/JSS/JSS/env/instances/ta48',\n",
+    "                           '/JSS/JSS/env/instances/ta49', '/JSS/JSS/env/instances/ta50']\n",
     "            }\n",
     "        }\n",
     "    }"
@@ -74,25 +74,25 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
+   "execution_count": 8,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Create sweep with ID: po3ygyxo\n",
-      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\n"
+      "Create sweep with ID: z90hgj59\n",
+      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/z90hgj59\n"
      ]
     }
    ],
    "source": [
-    "sweep_id = wandb.sweep(sweep_config, project=\"RLLIB_SWEEP_2\")"
+    "sweep_id = wandb.sweep(sweep_config, project=\"RLLIB_SWEEP_3\")"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 15,
+   "execution_count": null,
    "metadata": {},
    "outputs": [
     {
@@ -100,425 +100,13828 @@
      "output_type": "stream",
      "text": [
       "\u001b[34m\u001b[1mwandb\u001b[0m: Starting wandb agent üïµÔ∏è\n",
-      "2020-10-14 20:43:27,735 - wandb.wandb_agent - INFO - Running runs: []\n",
-      "2020-10-14 20:43:31,145 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:43:31,145 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta51\n",
-      "2020-10-14 20:43:31,147 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta51\n",
+      "2020-11-05 10:33:40,395 - wandb.wandb_agent - INFO - Running runs: []\n",
+      "2020-11-05 10:33:40,720 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-05 10:33:40,720 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta40\n",
+      "2020-11-05 10:33:40,722 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/ta40\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.9 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/9bbl2cxc\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204333-9bbl2cxc\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33msuper-sweep-1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/z90hgj59\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/xsck45b9\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201105_103342-xsck45b9\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-05 10:33:45,740 - wandb.wandb_agent - INFO - Running runs: ['xsck45b9']\n",
+      "2020-11-05 10:33:46,343\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/1 GPUs, 0.0/558.2 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_632d4_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3282\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:43:36,159 - wandb.wandb_agent - INFO - Running runs: ['9bbl2cxc']\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204333-9bbl2cxc/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204333-9bbl2cxc/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 197.38384\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 197.38384\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3753\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708214\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/9bbl2cxc\u001b[0m\n",
-      "2020-10-14 20:43:41,380 - wandb.wandb_agent - INFO - Cleaning up finished run: 9bbl2cxc\n",
-      "2020-10-14 20:43:41,772 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:43:41,772 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta52\n",
-      "2020-10-14 20:43:41,774 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta52\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/frw3hck3\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204343-frw3hck3\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m 2020-11-05 10:33:49,122\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/torch/cuda/__init__.py:125: UserWarning: \n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m GeForce RTX 2080 Ti with CUDA capability sm_75 is not compatible with the current PyTorch installation.\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 compute_37.\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m If you want to use the GeForce RTX 2080 Ti GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m \n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m   warnings.warn(incompatible_device_warn.format(device_name, capability, \" \".join(arch_list), device_name))\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m *** SIGSEGV (@0x0) received by PID 17748 (TID 0x7fa507f3d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m *** SIGSEGV (@0x0) received by PID 17757 (TID 0x7f10aab6f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m *** SIGSEGV (@0x0) received by PID 17747 (TID 0x7f8a62a6e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m *** SIGSEGV (@0x0) received by PID 17761 (TID 0x7fd3a970d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m *** SIGSEGV (@0x0) received by PID 17684 (TID 0x7f93295cf700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m *** SIGSEGV (@0x0) received by PID 17622 (TID 0x7fe234b72700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x7fe23474b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m *** SIGSEGV (@0x0) received by PID 17700 (TID 0x7f8b719e0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x7f8b715b9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x7f5c71564f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m *** SIGSEGV (@0x0) received by PID 17716 (TID 0x7fe2ef215700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x7fe2eedee390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x7fb3eed83f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x7fb3ee4ae7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m *** SIGSEGV (@0x0) received by PID 17708 (TID 0x7f4093c89700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x7f4093862390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x7f1193751f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x7f1192e7c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m *** SIGSEGV (@0x0) received by PID 17655 (TID 0x7f85a856d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x7f85a8146390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x7f56a80d4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m *** SIGSEGV (@0x0) received by PID 17709 (TID 0x7f79e6064700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m *** SIGSEGV (@0x0) received by PID 17744 (TID 0x7fa5aaf61700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x7fa5aab3a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x7f76aaa21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x7f76aa14c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x7f76aa14f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x7f76aa14fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x7fa507b16390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x7f7607ab5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x7f76071e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x7f76071e38f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x7f76071e3ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x7f10aa748390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x7ee1aa6ebf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x7ee1a9e167db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x7ee1a9e198f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x7ee1a9e19ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m *** SIGSEGV (@0x0) received by PID 17641 (TID 0x7fe24aeee700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x7fe24aac7390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x7fb34aa21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x7fb34a14c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x7f8a62647390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x7f5b624f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x7f5b61c247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x7f5b61c278f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x7f5b61c27ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m *** SIGSEGV (@0x0) received by PID 17631 (TID 0x7fa82a986700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x7fa82a55f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x7f792a512f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x7f7929c3d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x7f7929c408f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x7fd3a92e6390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x7fa4a9267f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x7fa4a89927db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x7fa4a89958f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x7fa4a8995ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m *** SIGSEGV (@0x0) received by PID 17680 (TID 0x7f87bad21700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x7f87ba8fa390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x7f58ba7bbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x7f58b9ee67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x7f58b9ee98f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m *** SIGSEGV (@0x0) received by PID 17729 (TID 0x7f55824f0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x7f55820c9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x7f268207af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x7f26817a57db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x7f26817a88f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x7f93291a8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x7f64290b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x7f64287e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x7f64287e38f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x7f64287e3ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m *** SIGSEGV (@0x0) received by PID 17721 (TID 0x7f69e1ede700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x7f69e1ab7390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m *** SIGSEGV (@0x0) received by PID 17725 (TID 0x7f6025e67700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x7f6025a40390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x7f31257f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x7f3124f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m *** SIGSEGV (@0x0) received by PID 17695 (TID 0x7f3fbf3cc700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x7f3fbefa5390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x7f10bef13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x7f10be63e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x7fb33470cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x7fb333e377db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x7f5c70c8f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x7f5c70c928f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x7fb3ee4b18f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x7fb3ee4b1ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x7f1192e7f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x7f56a77ff7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x7f79e5c3d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x7f4ae5becf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x7f4ae53177db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x7f76071e3d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x7ee1a9e19d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x7fb34a14f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x7f5b61c27d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x7f7929c40ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x7fa4a8995d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x7f58b9ee9ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x7f26817a8ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x7f64287e3d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x7f3ae1a0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x7f3ae11357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m *** SIGSEGV (@0x0) received by PID 17722 (TID 0x7f358783f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x7f3124f278f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x7f3124f27ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x7f10be6418f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x7f10be641ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x7f10be641d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x7f10bef24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x7f10bef47c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m *** SIGSEGV (@0x0) received by PID 17647 (TID 0x7f3bd21f4700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m *** SIGSEGV (@0x0) received by PID 17648 (TID 0x7f9d8368a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m *** SIGSEGV (@0x0) received by PID 17733 (TID 0x7f17b5c4f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x7f17b5828390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x7ee8b56f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x7ee8b4e1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m *** SIGSEGV (@0x0) received by PID 17719 (TID 0x7f1ef8c71700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x7fb333e3a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x7fb333e3aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x7fb333e3ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x7fb33471db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x7fb334740c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m *** SIGSEGV (@0x0) received by PID 17632 (TID 0x7f9579874700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m *** SIGSEGV (@0x0) received by PID 17704 (TID 0x7f4149dcd700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x7f5c70c92ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x7f5c70c92d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x7f5c71575b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x7f5c71598c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m *** SIGSEGV (@0x0) received by PID 17715 (TID 0x7f44b33cf700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x7fb3ee4b1d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x7fb3eed94b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x7fb3eedb7c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x7fb3ee259a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x7fb3ee257388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m *** SIGSEGV (@0x0) received by PID 17617 (TID 0x7fc59a8a5700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m *** SIGSEGV (@0x0) received by PID 17699 (TID 0x7f7b19674700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x7f1192e7fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x7f1192e7fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x7f1193762b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x7f1193785c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x7f1192c27a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x7f1192c25388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m *** SIGSEGV (@0x0) received by PID 17630 (TID 0x7fab24590700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x7f56a78028f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x7f56a7802ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x7f56a7802d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x7f56a80e5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x7f4ae531a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x7f4ae531aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m *** SIGSEGV (@0x0) received by PID 17634 (TID 0x7fc3c5297700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x7fc3c4e70390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x7f94c4e12f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x7f94c453d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m *** SIGSEGV (@0x0) received by PID 17723 (TID 0x7fdff7fa9700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m *** SIGSEGV (@0x0) received by PID 17626 (TID 0x7f220bbc7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m *** SIGSEGV (@0x0) received by PID 17727 (TID 0x7f34fc32f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m *** SIGSEGV (@0x0) received by PID 17697 (TID 0x7fd535294700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m *** SIGSEGV (@0x0) received by PID 17629 (TID 0x7f4864c3f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m *** SIGSEGV (@0x0) received by PID 17741 (TID 0x7f233dfdb700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x7f233dbb4390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m *** SIGSEGV (@0x0) received by PID 17682 (TID 0x7fe5ce7fa700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x7fe5ce3d3390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x7fb6ce34bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m *** SIGSEGV (@0x0) received by PID 17657 (TID 0x7f3b32f7d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x7f3b32b56390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x7f0c329ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x7f0c320f77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m *** SIGSEGV (@0x0) received by PID 17712 (TID 0x7fc993ed4700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m *** SIGSEGV (@0x0) received by PID 17620 (TID 0x7f9945fa7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x7f9945b80390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m *** SIGSEGV (@0x0) received by PID 17706 (TID 0x7fc15a1a4700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x7fc159d7d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x7f9259d37f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x7f92594627db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m *** SIGSEGV (@0x0) received by PID 17703 (TID 0x7fab30073700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x7fab2fc4c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x7f7c2faf5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x7f7c2f2207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x7f76aa14fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x7f76aaa32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x7f76aaa55c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x7f76a9ef7a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x7f76a9ef5388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x7f76a9ef75a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x7f76aa5e24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x7f76acab58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x7f7607ac6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x7f7607ae9c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x7f7606f8ba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x7f7606f89388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x7f7606f8b5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x7f76076764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x7f7609b498de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m *** SIGSEGV (@0x0) received by PID 17633 (TID 0x7f18791a8700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x7f1878d81390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x7ee978c74f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x7ee97839f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x7ee9783a28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x7ee1aa6fcb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x7ee1aa71fc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x7ee1a9bc1a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x7ee1a9bbf388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x7ee1a9bc15a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x7ee1aa2ac4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x7ee1ac77f8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x7fb34a14fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x7fb34a14fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x7fb34aa32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x7fb34aa55c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x7fb349ef7a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x7fb349ef5388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x7fb349ef75a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x7f5b6250ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x7f5b6252dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x7f5b619cfa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x7f5b619cd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x7f5b619cf5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x7f5b620ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x7f5b6458d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x7f7929c40d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x7f792a523b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x7f792a546c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x7f79299e8a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x7f79299e6388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x7f79299e85a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x7f792a0d34f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x7f792c5a68de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x7fa4a9278b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x7fa4a929bc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x7fa4a873da93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x7fa4a873b388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x7fa4a873d5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x7fa4a8e284f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x7fa4ab2fb8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x7f58b9ee9d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x7f58ba7ccb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x7f58ba7efc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x7f58b9c91a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x7f58b9c8f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x7f58b9c915a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x7f58ba37c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x7f58bc84f8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x7f26817a8d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x7f268208bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x7f26820aec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x7f2681550a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x7f268154e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x7f26815505a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x7f2681c3b4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x7f268410e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x7f64290c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x7f64290e9c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x7f642858ba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x7f6428589388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x7f642858b5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x7f6428c764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x7f642b1498de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m *** SIGSEGV (@0x0) received by PID 17672 (TID 0x7f32f51a5700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x7f32f4d7e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x7f03f4c74f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x7f03f439f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x7f03f43a28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m *** SIGSEGV (@0x0) received by PID 17743 (TID 0x7f4fc2f15700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x7f4fc2aee390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x7f20c29ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x7f20c20f77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x7f20c20fa8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m *** SIGSEGV (@0x0) received by PID 17624 (TID 0x7fdcd0e99700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x7fdcd0a72390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x7fadd0940f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x7fadd006b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m *** SIGSEGV (@0x0) received by PID 17677 (TID 0x7f0e2c7cf700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x7f0e2c3a8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x7edf2c336f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x7edf2ba617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x7edf2ba648f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x7f3ae11388f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x7f3ae1138ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x7f3ae1138d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x7f3ae1a1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x7f3ae1a3ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m *** SIGSEGV (@0x0) received by PID 17616 (TID 0x7fb0bf017700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x7fb0bebf0390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x7f81bea13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x7f81be13e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x7f81be1418f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m *** SIGSEGV (@0x0) received by PID 17619 (TID 0x7f83fbf8e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x7f83fbb67390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x7f54fbaf5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x7f54fb2207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x7f3587418390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x7f06873cdf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x7f0686af87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x7f0686afb8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x7f3124f27d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x7f312580ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x7f312582dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x7f3124ccfa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x7f3124ccd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x7f3124ccf5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m *** SIGSEGV (@0x0) received by PID 17676 (TID 0x7f98473b2700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x7f9846f8b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x7f6946f13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x7f694663e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x7f69466418f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x7f10be3e9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x7f10be3e7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x7f10be3e95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x7f10bead44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x7f10c0fa78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x7f3bd1dcd390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x7f0cd1d52f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x7f0cd147d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x7f0cd14808f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x7f9d83263390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x7f6e83124f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x7f6e8284f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x7f6e828528f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m *** SIGSEGV (@0x0) received by PID 17623 (TID 0x7f989601d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x7f9895bf6390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x7f6995b9ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x7f69952ca7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x7f69952cd8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m *** SIGSEGV (@0x0) received by PID 17701 (TID 0x7f8a72893700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x7f8a7246c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x7f5b7234bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x7f5b71a767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m *** SIGSEGV (@0x0) received by PID 17635 (TID 0x7fcaf43f7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x7fcaf3fd0390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x7f9bf3eb6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x7f9bf35e17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m *** SIGSEGV (@0x0) received by PID 17705 (TID 0x7f6ca145d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m *** SIGSEGV (@0x0) received by PID 17636 (TID 0x7fd27430e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x7fd273ee7390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x7fa373e89f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x7fa3735b47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x7fa3735b78f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m *** SIGSEGV (@0x0) received by PID 17627 (TID 0x7f0e25ed5700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m *** SIGSEGV (@0x0) received by PID 17688 (TID 0x7f398d1a0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m *** SIGSEGV (@0x0) received by PID 17685 (TID 0x7f7223724700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x7f72232fd390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x7f4323229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x7f43229547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m *** SIGSEGV (@0x0) received by PID 17753 (TID 0x7fa724a03700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x7fa7245dc390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x7f782457cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x7f7823ca77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m *** SIGSEGV (@0x0) received by PID 17713 (TID 0x7fba99a59700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x7fba99632390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m *** SIGSEGV (@0x0) received by PID 17644 (TID 0x7fae3623c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m *** SIGSEGV (@0x0) received by PID 17717 (TID 0x7f303c91a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x7f303c4f3390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x7f013c3e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x7f013bb0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x7f013bb118f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m *** SIGSEGV (@0x0) received by PID 17731 (TID 0x7fcbb6548700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x7fcbb6121390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x7f9cb60cdf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x7f9cb57f87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x7f9cb57fb8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x7ee8b4e228f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x7ee8b4e22ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x7ee8b4e22d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x7ee8b5705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x7f1ef884a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x7eeff8563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x7eeff7c8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x7eeff7c918f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m *** SIGSEGV (@0x0) received by PID 17653 (TID 0x7f8826820700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x7f88263f9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x7f592634bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x7f5925a767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x7f5925a798f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m *** SIGSEGV (@0x0) received by PID 17618 (TID 0x7fcced8d3700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x7fcced4ac390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x7f9ded3ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x7f9decaf77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x7f9decafa8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x7fb333be2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x7fb333be0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x7fb333be25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x7fb3342cd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x7f957944d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x7f66793ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x7f6678af77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x7f6678afa8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x7f6678afaad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x7f41499a6390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x7f12497f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x7f1248f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x7f1248f278f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x7f5c70a3aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x7f5c70a38388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x7f5c70a3a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x7f5c711254f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x7f5c735f88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m *** SIGSEGV (@0x0) received by PID 17698 (TID 0x7f96f48b7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x7f96f4490390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x7f67f4333f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x7f67f3a5e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x7f67f3a618f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x7f44b2fa8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x7f15b2f13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x7f15b263e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x7f15b26418f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x7fb3ee2595a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x7fb3ee9444f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x7fb3f0e178de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x7fb3ee9444f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x7fb3f49ef79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x559e3c798fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x559e3c6f3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x559e3c77ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x559e3c77fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x559e3c6f3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x559e3c77ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x559e3c77f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x559e3c6f4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x559e3c77ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x559e3c77f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x559e3c6f4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x559e3c77ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x559e3c77f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x559e3c6f4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x559e3c77ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x559e3c77f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17716)\u001b[0m     @     0x559e3c6f4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x7fc59a47e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x7f969a193f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x7f96998be7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x7f96998c18f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x7f96998c1ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x7f7b1924d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x7f4c190b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x7f4c187e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x7f4c187e38f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x7f1192c275a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x7f11933124f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x7f11957e58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x7fab24169390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x7f7c23ed8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x7f7c236037db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x7f7c236068f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x7f7c23606ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x7f56a8108c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x7f56a75aaa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x7f56a75a8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x7f56a75aa5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x7f4ae531ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x7f4ae5bfdb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x7f4ae5c20c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x7f4ae50c2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x7f4ae50c0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x7f94c45408f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x7f94c4540ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x7f94c4540d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x7f94c4e23b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m *** SIGSEGV (@0x0) received by PID 17674 (TID 0x7f5847050700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x7f5846c29390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x7f2946badf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x7f29462d87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m *** SIGSEGV (@0x0) received by PID 17638 (TID 0x7f1544637700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x7f1544210390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x7ee643ed8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x7ee6436037db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x7ee6436068f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x7ee643606ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m *** SIGSEGV (@0x0) received by PID 17738 (TID 0x7f1be1005700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x7f1be0bde390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x7eece097ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x7eece00aa7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x7eece00ad8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m *** SIGSEGV (@0x0) received by PID 17670 (TID 0x7f4e6c758700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x7f4e6c331390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x7f1f6c2b1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x7f1f6b9dc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x7f1f6b9df8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x7f1f6b9dfad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m *** SIGSEGV (@0x0) received by PID 17642 (TID 0x7f993c024700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x7f993bbfd390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x7f6a3baf5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x7f6a3b2207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m *** SIGSEGV (@0x0) received by PID 17659 (TID 0x7f41f4621700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x7f41f41fa390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x7f12f401cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x7f12f37477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x7f12f374a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x7f12f374aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m *** SIGSEGV (@0x0) received by PID 17707 (TID 0x7f0180981700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x7f018055a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x7ed2804f6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m *** SIGSEGV (@0x0) received by PID 17621 (TID 0x7fd9063b2700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x7fd905f8b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x7faa05e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x7faa0554f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m *** SIGSEGV (@0x0) received by PID 17650 (TID 0x7ff5b94e8700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x7ff5b90c1390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x7fc6b9075f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x7fc6b87a07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x7fc6b87a38f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x7fc6b87a3ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x7fdff7b82390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x7fb0f7af5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x7fb0f72207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x7fb0f72238f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x7fb0f7223ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m *** SIGSEGV (@0x0) received by PID 17736 (TID 0x7fef16a45700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x7fef1661e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x7fc01657cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x7fc015ca77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x7fc015caa8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x7f220b7a0390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x7ef30b61ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x7ef30ad4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x7ef30ad4d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x7ef30ad4dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x7ef30ad4dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x7ef30b630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m *** Aborted at 1604572434 (unix time) try \"date -d @1604572434\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m *** SIGSEGV (@0x0) received by PID 17694 (TID 0x7f14e84ac700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x7f14e8085390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x7ee5e7eb6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x7ee5e75e17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x7ee5e75e48f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m *** SIGSEGV (@0x0) received by PID 17702 (TID 0x7f0271bba700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x7f0271793390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x7ed3716f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x7ed370e1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x7ed370e228f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x7ed370e22ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x7f34fbf08390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x7f05fbeb6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x7f05fb5e17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x7f05fb5e48f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x7f05fb5e4ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x7fd534e6d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x7fa634e12f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x7fa63453d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x7f4864818390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x7f196474cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x7f1963e777db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x7f1963e7a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x7f1963e7aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x7ef43db5ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x7ef43d28a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x7ef43d28d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x7fb6cda767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x7fb6cda798f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x7fb6cda79ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x7f0c320fa8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x7f0c320faad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x7fc993aad390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x7f9a93a23f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x7f9a9314e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x7f9a931518f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x7f6a45ab7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x7f6a451e27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x7f6a451e58f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x7f6a451e5ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x7f92594658f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x7f9259465ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x7f7c2f2238f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x7f7c2f223ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x7f7c2f223d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x7f7c2fb06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x7f76aa5e24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x7f76b068d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x55fe2e58ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x55fe2e4eab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x55fe2e575baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x55fe2e576a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x55fe2e4eabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x55fe2e575baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x55fe2e576643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x55fe2e4eb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x55fe2e575baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x55fe2e576643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x55fe2e4eb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x55fe2e575baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x55fe2e576643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x55fe2e4eb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x55fe2e575baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x55fe2e576643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17744)\u001b[0m     @     0x55fe2e4eb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x7f76076764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x7f760d72179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x55769d1fbfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x55769d156b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x55769d1e1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x55769d1e2a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x55769d156bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x55769d1e1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x55769d1e2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x55769d157689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x55769d1e1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x55769d1e2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x55769d157689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x55769d1e1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x55769d1e2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x55769d157689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x55769d1e1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x55769d1e2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17748)\u001b[0m     @     0x55769d157689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x7ee9783a2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x7ee9783a2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x7ee978c85b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x7ee978ca8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x7ee1aa2ac4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x7ee1b035779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x55e23366ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x55e2335cab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x55e233655baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x55e233656a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x55e2335cabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x55e233655baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x55e233656643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x55e2335cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x55e233655baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x55e233656643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x55e2335cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x55e233655baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x55e233656643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x55e2335cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x55e233655baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x55e233656643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17757)\u001b[0m     @     0x55e2335cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x7fb34a5e24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x7fb34cab58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x7fb34a5e24f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x7fb35068d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x557bf6c81fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x557bf6bdcb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x557bf6c67baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x557bf6c68a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x557bf6bdcbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x557bf6c67baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x557bf6c68643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x557bf6bdd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x557bf6c67baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x557bf6c68643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x557bf6bdd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x557bf6c67baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x557bf6c68643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x557bf6bdd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x557bf6c67baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x557bf6c68643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17641)\u001b[0m     @     0x557bf6bdd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x7f5b620ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x7f5b6816579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x5580eef28fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x5580eee83b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x5580eef0ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x5580eef0fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x5580eee83bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x5580eef0ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x5580eef0f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x5580eee84689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x5580eef0ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x5580eef0f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x5580eee84689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x5580eef0ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x5580eef0f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x5580eee84689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x5580eef0ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x5580eef0f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17747)\u001b[0m     @     0x5580eee84689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x7f792a0d34f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x7f793017e79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x5565fc3e9fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x5565fc344b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x5565fc3cfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x5565fc3d0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x5565fc344bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x5565fc3cfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x5565fc3d0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x5565fc345689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x5565fc3cfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x5565fc3d0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x5565fc345689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x5565fc3cfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x5565fc3d0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x5565fc345689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x5565fc3cfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x5565fc3d0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17631)\u001b[0m     @     0x5565fc345689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x7fa4a8e284f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x7fa4aeed379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x56164c4aafd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x56164c405b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x56164c490baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x56164c491a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x56164c405bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x56164c490baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x56164c491643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x56164c406689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x56164c490baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x56164c491643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x56164c406689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x56164c490baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x56164c491643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x56164c406689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x56164c490baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x56164c491643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17761)\u001b[0m     @     0x56164c406689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x7f58ba37c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x7f58c042779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x55d017ad7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x55d017a32b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x55d017abdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x55d017abea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x55d017a32bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x55d017abdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x55d017abe643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x55d017a33689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x55d017abdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x55d017abe643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x55d017a33689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x55d017abdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x55d017abe643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x55d017a33689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x55d017abdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x55d017abe643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17680)\u001b[0m     @     0x55d017a33689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x7f2681c3b4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x7f2687ce679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x562fafce4fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x562fafc3fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x562fafccabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x562fafccba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x562fafc3fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x562fafccabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x562fafccb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x562fafc40689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x562fafccabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x562fafccb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x562fafc40689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x562fafccabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x562fafccb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x562fafc40689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x562fafccabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x562fafccb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17729)\u001b[0m     @     0x562fafc40689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x7f6428c764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x7f642ed2179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x559693b94fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x559693aefb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x559693b7abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x559693b7ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x559693aefbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x559693b7abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x559693b7b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x559693af0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x559693b7abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x559693b7b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x559693af0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x559693b7abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x559693b7b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x559693af0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x559693b7abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x559693b7b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17684)\u001b[0m     @     0x559693af0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x7f03f43a2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x7f03f43a2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x7f03f4c85b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x7f03f4ca8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x7f03f414aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x7f20c20faad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x7f20c20fad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x7f20c29ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x7f20c2a00c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x7f20c1ea2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x7fadd006e8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x7fadd006ead3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x7fadd006ed91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x7fadd0951b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x7fadd0974c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x7edf2ba64ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x7edf2ba64d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x7edf2c347b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x7edf2c36ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x7edf2b80ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x7edf2b80a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x7f3ae0ee0a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x7f3ae0ede388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x7f3ae0ee05a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x7f3ae15cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x7f3ae3a9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x7f81be141ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x7f81be141d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x7f81bea24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x7f81bea47c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x7f81bdee9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x7f54fb2238f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x7f54fb223ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x7f54fb223d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x7f54fbb06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x7f54fbb29c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x7f0686afbad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x7f0686afbd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x7f06873deb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x7f0687401c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x7f06868a3a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x7f06868a1388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x7f31253ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x7f312788d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x7f31253ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x7f312b46579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x559a17b0efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x559a17a69b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x559a17af4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x559a17af5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x559a17a69bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x559a17af4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x559a17af5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x559a17a6a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x559a17af4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x559a17af5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x559a17a6a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x559a17af4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x559a17af5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x559a17a6a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x559a17af4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x559a17af5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17725)\u001b[0m     @     0x559a17a6a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x7f6946641ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x7f6946641d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x7f6946f24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x7f6946f47c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x7f69463e9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x7f69463e7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x7f10bead44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x7f10c4b7f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x56407de04fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x56407dd5fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x56407ddeabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x56407ddeba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x56407dd5fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x56407ddeabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x56407ddeb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x56407dd60689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x56407ddeabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x56407ddeb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x56407dd60689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x56407ddeabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x56407ddeb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x56407dd60689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x56407ddeabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x56407ddeb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17695)\u001b[0m     @     0x56407dd60689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x7f0cd1480ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x7f0cd1480d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x7f0cd1d63b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x7f0cd1d86c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x7f0cd1228a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x7f0cd1226388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x7f6e82852ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x7f6e82852d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x7f6e83135b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x7f6e83158c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x7f6e825faa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x7f6e825f8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x7f69952cdad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x7f69952cdd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x7f6995bb0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x7f6995bd3c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x7f6995075a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x7f6995073388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x7f5b71a798f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x7f5b71a79ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x7f5b71a79d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x7f5b7235cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x7f5b7237fc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x7f9bf35e48f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x7f9bf35e4ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x7f9bf35e4d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x7f9bf3ec7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x7f6ca1036390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x7f3da0ea4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x7f3da05cf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x7f3da05d28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x7fa3735b7ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x7fa3735b7d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x7fa373e9ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x7fa373ebdc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x7fa37335fa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x7fa37335d388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x7f0e25aae390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x7edf25a0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x7edf251357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x7edf251388f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x7edf25138ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x7f398cd79390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x7f0a8cc1ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x7f0a8c34a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x7f43229578f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x7f4322957ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x7f4322957d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x7f432323ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x7f7823caa8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x7f7823caaad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x7f7823caad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x7f782458db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x7f78245b0c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x7f8b995e4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x7f8b98d0f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x7f8b98d128f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x7f8b98d12ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x7fae35e15390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x7f7f35da4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x7f7f354cf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x7f7f354d28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x7f7f354d2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x7f013bb11ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x7f013bb11d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x7f013c3f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x7f013c417c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x7f013b8b9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x7f9cb57fbad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x7f9cb57fbd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x7f9cb60deb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x7f9cb6101c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x7ee8b5728c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x7ee8b4bcaa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x7ee8b4bc8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x7ee8b4bca5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x7eeff7c91ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x7eeff7c91d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x7eeff8574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x7eeff8597c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x7eeff7a39a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x7eeff7a37388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x7eeff7a395a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x7f5925a79ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x7f5925a79d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x7f592635cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x7f592637fc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x7f5925821a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x7f9decafaad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x7f9decafad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x7f9ded3ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x7f9ded400c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x7f9dec8a2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x7f9dec8a0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x7fb3367a08de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x7fb3342cd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x7fb33a37879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x5602de53ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x5602de49ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x5602de525baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x5602de526a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x5602de49abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x5602de525baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x5602de526643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x5602de49b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x5602de525baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x5602de526643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x5602de49b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x5602de525baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x5602de526643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x5602de49b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x5602de525baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x5602de526643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17622)\u001b[0m     @     0x5602de49b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x7f6678afad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x7f66793ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x7f6679400c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x7f66788a2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x7f66788a0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x7f1248f27ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x7f1248f27d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x7f124980ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x7f124982dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x7f1248ccfa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x7f1248ccd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x7f5c711254f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x7f5c771d079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x5586000c8fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x558600023b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x5586000aebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x5586000afa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x558600023bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x5586000aebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x5586000af643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x558600024689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x5586000aebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x5586000af643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x558600024689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x5586000aebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x5586000af643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x558600024689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x5586000aebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x5586000af643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17700)\u001b[0m     @     0x558600024689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x7f67f3a61ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x7f67f3a61d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x7f67f4344b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x7f67f4367c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x7f67f3809a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x7f67f3807388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x7f15b2641ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x7f15b2641d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x7f15b2f24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x7f15b2f47c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x7f15b23e9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x7f15b23e7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x7f96998c1d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x7f969a1a4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x7f969a1c7c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x7f9699669a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x7f9699667388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x7f4c187e3ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x7f4c187e3d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x7f4c190c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x7f4c190e9c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x7f4c1858ba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x7f4c18589388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x7f11933124f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x7f11993bd79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x5593b85f0fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x5593b854bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x5593b85d6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x5593b85d7a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x5593b854bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x5593b85d6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x5593b85d7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x5593b854c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x5593b85d6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x5593b85d7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x5593b854c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x5593b85d6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x5593b85d7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x5593b854c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x5593b85d6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x5593b85d7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17708)\u001b[0m     @     0x5593b854c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x7f7c23606d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x7f7c23ee9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x7f7c23f0cc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x7f7c233aea93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x7f7c233ac388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x7f56a7c954f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x7f56aa1688de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x7f56a7c954f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x7f56add4079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x558e9a2edfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x558e9a248b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x558e9a2d3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x558e9a2d4a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x558e9a248bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x558e9a2d3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x558e9a2d4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x558e9a249689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x558e9a2d3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x558e9a2d4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x558e9a249689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x558e9a2d3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x558e9a2d4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x558e9a249689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x558e9a2d3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x558e9a2d4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17655)\u001b[0m     @     0x558e9a249689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x7f4ae50c25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x7f4ae57ad4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x7f4ae7c808de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x7f4ae57ad4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x7f4aeb85879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x55bc46478fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x55bc463d3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x55bc4645ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x55bc4645fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x55bc463d3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x55bc4645ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x55bc4645f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x55bc463d4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x55bc4645ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x55bc4645f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x55bc463d4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x7f94c4e46c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x7f94c42e8a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x7f94c42e6388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x7f94c42e85a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x7f29462db8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x7ee643606d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x7ee643ee9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x7ee643f0cc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x7eece00adad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x7eece00add91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x7eece0990b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x7f1f6b9dfd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x7f1f6c2c2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x7f1f6c2e5c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x7f6a3b2238f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x7f6a3b223ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x7f12f374ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x7f12f402db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x7f12f4050c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x7ed27fc217db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x7ed27fc248f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x7faa055528f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x7faa05552ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x7fc6b87a3d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x7fc6b9086b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x7fc6b90a9c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x7fc6b854ba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x7fb0f7223d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x7fb0f7b06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x7fb0f7b29c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x7fb0f6fcba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x7fb0f6fc9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x7fb0f6fcb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x7fc015caaad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x7fc015caad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x7fc01658db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x7fc0165b0c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x7fc015a52a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x7fc015a50388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x7ef30b653c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x7ef30aaf5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x7ef30aaf3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x7ef30aaf55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x7ee5e75e4ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x7ee5e75e4d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x7ee5e7ec7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x7ee5e7eeac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x7ed370e22d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x7ed371705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x7ed371728c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x7ed370bcaa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x7ed370bc8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x7f05fb5e4d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x7f05fbec7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x7f05fbeeac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x7f05fb38ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x7f05fb38a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x7fa6345408f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x7f1963e7ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x7f196475db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x7f1964780c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x7f1963c22a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x7f1963c20388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x7ef43d28dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x7ef43d28dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x7ef43db70b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x7ef43db93c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x7ef43d035a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x7fb6cda79d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x7fb6ce35cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x7fb6ce37fc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x7fb6cd821a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x7fb6cd81f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x7f0c320fad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x7f0c329ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x7f0c32a00c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x7f9a93151ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x7f9a93151d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x7f9a93a34b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x7f9a93a57c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x7f6a451e5d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x7f6a45ac8b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x7f6a45aebc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x7f6a44f8da93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x7f6a44f8b388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x7f9259465d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x7f9259d48b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x7f9259d6bc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x7f925920da93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x7f925920b388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x7f7c2fb29c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x7f7c2efcba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x7f7c2efc9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x7f7c2efcb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x7f7c2f6b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x7ee97814aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x7ee978148388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x7ee97814a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x7f03f4148388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x7f03f414a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x7f20c1ea0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x7f20c1ea25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x7fadcfe16a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x7fadcfe14388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x7fadcfe165a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x7edf2b80c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x7f3ae15cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x7f3ae767679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x56116171afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x561161675b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x561161700baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x561161701a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x561161675bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x561161700baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x561161701643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x561161676689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x561161700baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x561161701643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x561161676689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x561161700baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x561161701643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x561161676689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x561161700baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x561161701643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17721)\u001b[0m     @     0x561161676689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x7f81bdee7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x7f81bdee95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x7f54fafcba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x7f54fafc9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x7f54fafcb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x7f06868a35a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x7f0686f8e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x7f69463e95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x7f0cd12285a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x7f6e825fa5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x7f69950755a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x7f5b71821a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x7f5b7181f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x7f9bf3eeac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x7f9bf338ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x7f9bf338a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x7fa37335f5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x7fa373a4a4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x7edf25138d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x7edf25a1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x7edf25a3ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x7f0a8c34d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x7f432325dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x7f43226ffa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x7f43226fd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x7f7823a52a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x7f7823a50388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x7f8b98d12d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x7f8b995f5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x7f8b99618c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "2020-11-05 10:33:54,787\tWARNING worker.py:945 -- The driver may not be able to keep up with the stdout/stderr of the workers. To avoid forwarding logs to the driver, use 'ray.init(log_to_driver=False)'.\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x7f7f354d2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x7f7f35db5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x7f7f35dd8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x7f013b8b7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x7f013b8b95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x7f9cb55a3a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x7f9cb55a1388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x7f9cb55a35a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x7ee8b52b54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x7ee8b77888de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x7ee8b52b54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x7ee8bb36079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x55edefb95fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x55edefaf0b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x55edefb7bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x55edefb7ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x55edefaf0bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x55edefb7bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x55edefb7c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x55edefaf1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x55edefb7bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x55edefb7c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x55edefaf1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x55edefb7bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x55edefb7c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x55edefaf1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x55edefb7bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x55edefb7c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x7eeff81244f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x7eeffa5f78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x7eeff81244f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x7eeffe1cf79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x5640d88bdfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x5640d8818b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x5640d88a3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x5640d88a4a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x5640d8818bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x7f592581f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x7f59258215a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x7f5925f0c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x7f59283df8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x7f9dec8a25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x7f9decf8d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x7f9def4608de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x7f66788a25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x7f6678f8d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x7f667b4608de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x7f1248ccf5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x7f12493ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x7f124b88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x7f67f38095a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x7f67f3ef44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x7f67f63c78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x7f15b23e95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x7f15b2ad44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x7f15b4fa78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x7f96996695a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x7f9699d544f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x7f969c2278de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x7f4c1858b5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x7f4c18c764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x7f4c1b1498de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x7f7c233ae5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x7f7c23a994f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x7f7c25f6c8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x55bc4645ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x55bc4645f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x55bc463d4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x55bc4645ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x55bc4645f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17709)\u001b[0m     @     0x55bc463d4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x7f94c49d34f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x7f94c6ea68de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x7f94c49d34f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x7f94caa7e79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x55d9e7617fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x55d9e7572b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x55d9e75fdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x55d9e75fea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x55d9e7572bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x55d9e75fdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x55d9e75fe643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x55d9e7573689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x55d9e75fdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x55d9e75fe643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x55d9e7573689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x55d9e75fdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x55d9e75fe643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x55d9e7573689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x55d9e75fdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x7f29462dbad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x7ee6433aea93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x7ee6433ac388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x7ee6433ae5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x7ee643a994f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x7eece09b3c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x7eecdfe55a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x7eecdfe53388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x7eecdfe555a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x7f1f6b787a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x7f1f6b785388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x7f1f6b7875a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x7f6a3b223d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x7f6a3bb06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x7f6a3bb29c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x7f6a3afcba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x7f12f34f2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x7f12f34f0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x7f12f34f25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x7f12f3bdd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x7f12f60b08de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x7ed27fc24ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x7ed27fc24d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x7ed280507b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x7ed28052ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x7faa05552d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x7faa05e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x7faa05e58c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x7faa052faa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x7faa052f8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x7fc6b8549388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x7fc6b854b5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x7fc6b8c364f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x7fb0f76b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x7fb0f9b898de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x7fc015a525a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x7ef30b1e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x7ef30d6b38de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x7ef30b1e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x7ef31128b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x559a399e2fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x559a3993db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x559a399c8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x559a399c9a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x559a3993dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x559a399c8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x559a399c9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x7ee5e738ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x7ee5e738a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x7ee5e738c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x7ed370bca5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x7ed3712b54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x7ed3737888de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x7f05fb38c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x7f05fba774f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x7fa634540ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x7f1963c225a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x7f196430d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x7ef43d033388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x7ef43d0355a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x7fb6cd8215a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x7fb6cdf0c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x7f0c31ea2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x7f0c31ea0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x7f0c31ea25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x7f9a92ef9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x7f9a92ef7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x7f9a92ef95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x7f6a44f8d5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x7f925920d5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x7f92598f84f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x7f925bdcb8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x7f7c31b898de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x7f7c2f6b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x7f7c3576179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x5605edfb3fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x5605edf0eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x5605edf99baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x5605edf9aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x5605edf0ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x5605edf99baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x5605edf9a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x5605edf0f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x5605edf99baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x5605edf9a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x5605edf0f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x5605edf99baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x5605edf9a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x5605edf0f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x5605edf99baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x5605edf9a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17703)\u001b[0m     @     0x5605edf0f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x7ee9788354f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x7ee97ad088de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x7ee9788354f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x7ee97e8e079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x55add17effd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x55add174ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x55add17d5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x55add17d6a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x55add174abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x7f03f48354f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x7f03f6d088de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x7f03f48354f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x7f03fa8e079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x557f18ae8fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x557f18a43b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x557f18acebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x557f18acfa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x557f18a43bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x557f18acebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x557f18acf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x557f18a44689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x557f18acebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x557f18acf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x557f18a44689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x557f18acebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x557f18acf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x557f18a44689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x7f20c258d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x7f20c4a608de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x7f20c258d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x7f20c863879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x55cc517f3fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x55cc5174eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x55cc517d9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x55cc517daa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x55cc5174ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x55cc517d9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x55cc517da643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x55cc5174f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x55cc517d9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x55cc517da643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x55cc5174f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x55cc517d9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x55cc517da643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x55cc5174f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x55cc517d9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x55cc517da643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17743)\u001b[0m     @     0x55cc5174f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x7fadd05014f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x7fadd29d48de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x7fadd05014f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x7fadd61a279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x7edf2bef74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x7edf2e3ca8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x7edf2bef74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x7edf31fa279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x5558d1881fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x5558d17dcb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x5558d1867baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x5558d1868a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x5558d17dcbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x5558d1867baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x5558d1868643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x5558d17dd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x5558d1867baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x5558d1868643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x5558d17dd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x5558d1867baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x5558d1868643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x5558d17dd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x5558d1867baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x5558d1868643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17677)\u001b[0m     @     0x5558d17dd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x7f81be5d44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x7f81c0aa78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x7f81be5d44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x7f81c447779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x560c2d03cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x560c2cf97b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x560c2d022baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x560c2d023a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x560c2cf97bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x560c2d022baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x560c2d023643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x560c2cf98689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x560c2d022baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x560c2d023643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x560c2cf98689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x560c2d022baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x560c2d023643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x560c2cf98689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x7f54fb6b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x7f54fdb898de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x7f54fb6b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x7f550176179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x557a3b743fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x557a3b69eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x7f06894618de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x7f0686f8e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x7f068d03979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x55ccd6c0efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x55ccd6b69b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x55ccd6bf4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x55ccd6bf5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x55ccd6b69bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x55ccd6bf4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x55ccd6bf5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x55ccd6b6a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x55ccd6bf4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x55ccd6bf5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x55ccd6b6a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x55ccd6bf4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x55ccd6bf5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x55ccd6b6a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x55ccd6bf4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x55ccd6bf5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17722)\u001b[0m     @     0x55ccd6b6a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x7f6946ad44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x7f6948fa78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x7f6946ad44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x7f694cb7f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x564897b61fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x564897abcb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x564897b47baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x564897b48a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x564897abcbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x564897b47baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x564897b48643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x564897abd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x564897b47baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x564897b48643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x564897abd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x564897b47baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x564897b48643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x564897abd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x564897b47baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x564897b48643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17676)\u001b[0m     @     0x564897abd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x7f0cd19134f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x7f0cd3de68de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x7f0cd19134f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x7f0cd79be79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x55f06b40cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x55f06b367b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x55f06b3f2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x55f06b3f3a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x55f06b367bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x55f06b3f2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x55f06b3f3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x55f06b368689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x55f06b3f2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x55f06b3f3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x55f06b368689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x55f06b3f2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x55f06b3f3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x55f06b368689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x55f06b3f2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x55f06b3f3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17647)\u001b[0m     @     0x55f06b368689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x7f6e82ce54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x7f6e851b88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x7f6e82ce54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x7f6e88d9079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x564fd976cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x564fd96c7b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x564fd9752baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x564fd9753a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x564fd96c7bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x564fd9752baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x564fd9753643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x564fd96c8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x564fd9752baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x564fd9753643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x564fd96c8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x564fd9752baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x564fd9753643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x564fd96c8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x564fd9752baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x564fd9753643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17648)\u001b[0m     @     0x564fd96c8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x7f69957604f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x7f6997c338de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x7f69957604f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x7f699b80b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x56042e088fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x56042dfe3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x56042e06ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x56042e06fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x56042dfe3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x56042e06ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x56042e06f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x56042dfe4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x56042e06ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x56042e06f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x56042dfe4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x56042e06ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x56042e06f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x56042dfe4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x56042e06ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x56042e06f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17623)\u001b[0m     @     0x56042dfe4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x7f5b718215a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x7f5b71f0c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x7f5b743df8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x7f9bf338c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x7f9bf3a774f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x7f3da05d2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x7fa375f1d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x7fa373a4a4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x7fa379af579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x55bd8a589fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x55bd8a4e4b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x55bd8a56fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x55bd8a570a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x55bd8a4e4bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x55bd8a56fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x55bd8a570643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x55bd8a4e5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x55bd8a56fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x55bd8a570643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x55bd8a4e5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x55bd8a56fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x55bd8a570643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x55bd8a4e5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x55bd8a56fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x55bd8a570643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17636)\u001b[0m     @     0x55bd8a4e5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x7edf24ee0a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x7edf24ede388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x7edf24ee05a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x7f0a8c34dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x7f0a8c34dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x7f43226ff5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x7f4322dea4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x7f43252bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x7f7823a525a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x7f782413d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x7f78266108de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x7f8b98abaa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x7f8b98ab8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x7f8b98aba5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x7f7f3527aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x7f7f35278388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x7f7f3527a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x7f7f359654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x7f013bfa44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x7f013e4778de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x7f013bfa44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x7f014204f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x556715954fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x5567158afb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x55671593abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x55671593ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x5567158afbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x55671593abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x55671593b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x7f9cb5c8e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x7f9cb81618de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x7f9cb5c8e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x7f9cbbd3979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x5607991aefd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x560799109b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x560799194baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17733)\u001b[0m     @     0x55edefaf1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x5640d88a3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x5640d88a4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x5640d8819689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x5640d88a3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x5640d88a4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x5640d8819689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x5640d88a3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x5640d88a4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x5640d8819689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x5640d88a3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x5640d88a4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17719)\u001b[0m     @     0x5640d8819689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x7f5925f0c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x7f592bfb779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x5636dcf00fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x5636dce5bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x5636dcee6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x5636dcee7a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x5636dce5bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x5636dcee6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x5636dcee7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x5636dce5c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x5636dcee6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x5636dcee7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x5636dce5c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x5636dcee6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x5636dcee7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x5636dce5c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x5636dcee6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x5636dcee7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17653)\u001b[0m     @     0x5636dce5c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x7f9decf8d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x7f9df303879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x5584733dbfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x558473336b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x5584733c1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x5584733c2a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x558473336bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x5584733c1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x5584733c2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x558473337689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x5584733c1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x5584733c2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x558473337689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x5584733c1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x5584733c2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x558473337689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x5584733c1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x5584733c2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17618)\u001b[0m     @     0x558473337689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x7f6678f8d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x7f667f03879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x55acc89fdfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x55acc8958b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x55acc89e3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x55acc89e4a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x55acc8958bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x55acc89e3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x55acc89e4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x55acc8959689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x55acc89e3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x55acc89e4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x55acc8959689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x55acc89e3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x55acc89e4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x55acc8959689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x55acc89e3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x55acc89e4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17632)\u001b[0m     @     0x55acc8959689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x7f12493ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x7f124f46579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x557792a43fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x55779299eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x557792a29baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x557792a2aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x55779299ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x557792a29baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x557792a2a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x55779299f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x557792a29baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x557792a2a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x55779299f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x557792a29baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x557792a2a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x55779299f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x557792a29baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x557792a2a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17704)\u001b[0m     @     0x55779299f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x7f67f3ef44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x7f67f9f9f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x56153726ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x5615371cab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x561537255baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x561537256a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x5615371cabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x561537255baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x561537256643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x5615371cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x561537255baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x561537256643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x5615371cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x561537255baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x561537256643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x5615371cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x561537255baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x561537256643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17698)\u001b[0m     @     0x5615371cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x7f15b2ad44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x7f15b8b7f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x5599349acfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x559934907b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x559934992baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x559934993a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x559934907bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x559934992baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x559934993643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x559934908689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x559934992baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x559934993643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x559934908689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x559934992baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x559934993643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x559934908689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x559934992baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x559934993643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17715)\u001b[0m     @     0x559934908689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x7f9699d544f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x7f969fdff79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x55e82f8f8fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x55e82f853b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x55e82f8debaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x55e82f8dfa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x55e82f853bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x55e82f8debaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x55e82f8df643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x55e82f854689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x55e82f8debaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x55e82f8df643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x55e82f854689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x55e82f8debaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x55e82f8df643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x55e82f854689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x55e82f8debaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x55e82f8df643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17617)\u001b[0m     @     0x55e82f854689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x7f4c18c764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x7f4c1ed2179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x56051343bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x560513396b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x560513421baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x560513422a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x560513396bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x560513421baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x560513422643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x560513397689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x560513421baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x560513422643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x560513397689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x560513421baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x560513422643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x560513397689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x560513421baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x560513422643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17699)\u001b[0m     @     0x560513397689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x7f7c23a994f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x7f7c29b4479f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x55f1958dcfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x55f195837b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x55f1958c2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x55f1958c3a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x55f195837bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x55f1958c2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x55f1958c3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x55f195838689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x55f1958c2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x55f1958c3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x55f195838689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x55f1958c2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x55f1958c3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x55f195838689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x55f1958c2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x55f1958c3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17630)\u001b[0m     @     0x55f195838689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x55d9e75fe643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17634)\u001b[0m     @     0x55d9e7573689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x7f29462dbd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x7ee645f6c8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x7ee643a994f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x7eece05404f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x7eece2a138de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x7f1f6be724f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x7f1f6e3458de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x7f1f6be724f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x7f1f71f1d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x564fa6bb8fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x564fa6b13b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x564fa6b9ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x564fa6b9fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x564fa6b13bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x564fa6b9ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x564fa6b9f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x564fa6b14689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x564fa6b9ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x564fa6b9f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x564fa6b14689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x564fa6b9ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x564fa6b9f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x564fa6b14689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x564fa6b9ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x7f6a3afc9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x7f6a3afcb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x7f12f3bdd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x7f12f9c8879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x55720f9aefd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x55720f909b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x55720f994baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x55720f995a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x55720f909bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x55720f994baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x55720f995643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x55720f90a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x55720f994baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x55720f995643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x55720f90a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x55720f994baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x55720f995643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x55720f90a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x55720f994baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x55720f995643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17659)\u001b[0m     @     0x55720f90a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x7ed27f9cca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x7ed27f9ca388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x7ed27f9cc5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x7faa052fa5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x7faa059e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x7fc6bb1098de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x7fc6b8c364f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x7fc6bece179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x55f197ab9fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x55f197a14b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x55f197a9fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x55f197aa0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x55f197a14bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x55f197a9fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x55f197aa0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x55f197a15689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x55f197a9fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x55f197aa0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x55f197a15689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x55f197a9fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x55f197aa0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x55f197a15689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x55f197a9fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x55f197aa0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17650)\u001b[0m     @     0x55f197a15689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x7fb0f76b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x7fb0fd76179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x55a5b8b30fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x55a5b8a8bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x55a5b8b16baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x55a5b8b17a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x55a5b8a8bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x55a5b8b16baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x55a5b8b17643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x55a5b8a8c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x55a5b8b16baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x55a5b8b17643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x55a5b8a8c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x55a5b8b16baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x55a5b8b17643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x55a5b8a8c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x55a5b8b16baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x55a5b8b17643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17723)\u001b[0m     @     0x55a5b8a8c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x7fc01613d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x7fc0186108de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x7fc01613d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x7fc01c1e879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x55934bf6ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x55934becab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x55934bf55baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x55934bf56a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x55934becabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x55934bf55baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x55934bf56643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x55934becb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x55934bf55baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x55934bf56643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x55934becb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x55934bf55baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x55934bf56643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x55934becb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x55934bf55baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x55934bf56643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17736)\u001b[0m     @     0x55934becb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x559a3993e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x559a399c8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x559a399c9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x559a3993e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x559a399c8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x559a399c9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x559a3993e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x559a399c8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x559a399c9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17626)\u001b[0m     @     0x559a3993e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x7ee5e7a774f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x7ee5e9f4a8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x7ee5e7a774f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x7ed3712b54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x7ed37736079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x5608d512cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x5608d5087b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x5608d5112baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x5608d5113a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x5608d5087bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x5608d5112baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x5608d5113643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x5608d5088689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x5608d5112baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x5608d5113643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x5608d5088689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x5608d5112baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x5608d5113643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x5608d5088689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x5608d5112baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x5608d5113643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17702)\u001b[0m     @     0x5608d5088689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x7f05fdf4a8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x7f05fba774f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x7f0601b2279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x5640c804ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x5640c7faab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x5640c8035baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x5640c8036a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x5640c7faabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x5640c8035baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x5640c8036643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x5640c7fab689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x5640c8035baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x5640c8036643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x5640c7fab689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x5640c8035baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x5640c8036643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x5640c7fab689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x5640c8035baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x5640c8036643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17727)\u001b[0m     @     0x5640c7fab689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x7fa634540d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x7fa634e23b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x7fa634e46c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x7f19667e08de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x7f196430d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x7f196a3b879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x5626c046ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x5626c03cab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x5626c0455baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x5626c0456a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x5626c03cabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x5626c0455baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x5626c0456643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x5626c03cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x5626c0455baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x5626c0456643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x5626c03cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x5626c0455baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x5626c0456643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x5626c03cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x5626c0455baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x5626c0456643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17629)\u001b[0m     @     0x5626c03cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x7ef43d7204f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x7ef43fbf38de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x7ef43d7204f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x7ef4437cb79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x562241ee1fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x562241e3cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x562241ec7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x562241ec8a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x562241e3cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x562241ec7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x562241ec8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x562241e3d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x562241ec7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x562241ec8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x562241e3d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x562241ec7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x562241ec8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x562241e3d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x562241ec7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x562241ec8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17741)\u001b[0m     @     0x562241e3d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x7fb6d03df8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x7fb6cdf0c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x7fb6d3fb779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x55d4a0133fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x55d4a008eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x55d4a0119baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x55d4a011aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x55d4a008ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x55d4a0119baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x55d4a011a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x55d4a008f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x55d4a0119baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x55d4a011a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x55d4a008f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x55d4a0119baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x55d4a011a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x55d4a008f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x55d4a0119baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x55d4a011a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17682)\u001b[0m     @     0x55d4a008f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x7f0c3258d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x7f0c34a608de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x7f0c3258d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x7f0c3863879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x55ed45f62fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x55ed45ebdb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x55ed45f48baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x55ed45f49a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x55ed45ebdbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x55ed45f48baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x55ed45f49643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x55ed45ebe689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x55ed45f48baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x55ed45f49643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x55ed45ebe689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x55ed45f48baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x55ed45f49643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x55ed45ebe689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x55ed45f48baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x55ed45f49643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17657)\u001b[0m     @     0x55ed45ebe689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x7f9a935e44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x7f9a95ab78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x7f9a935e44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x7f9a9968f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x55eb83346fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x55eb832a1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x55eb8332cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x55eb8332da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x55eb832a1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x55eb8332cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x55eb8332d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x55eb832a2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x7f6a456784f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x7f6a47b4b8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x7f6a456784f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x7f6a4b72379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x5640aece0fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x5640aec3bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x5640aecc6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x5640aecc7a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x5640aec3bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x5640aecc6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x5640aecc7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x5640aec3c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x5640aecc6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x5640aecc7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x5640aec3c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x5640aecc6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x5640aecc7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x5640aec3c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x5640aecc6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x5640aecc7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17620)\u001b[0m     @     0x5640aec3c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x7f92598f84f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x7f925f9a379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x564d96c04fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x564d96b5fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x564d96beabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x564d96beba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x564d96b5fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x564d96beabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x564d96beb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x564d96b60689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x564d96beabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x564d96beb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x564d96b60689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x564d96beabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x564d96beb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x564d96b60689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x564d96beabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x564d96beb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17706)\u001b[0m     @     0x564d96b60689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x55add17d5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x55add17d6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x55add174b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x55add17d5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x55add17d6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x55add174b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x55add17d5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x55add17d6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x55add174b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x55add17d5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x55add17d6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17633)\u001b[0m     @     0x55add174b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x557f18acebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x557f18acf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17672)\u001b[0m     @     0x557f18a44689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x558cef347fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x558cef2a2b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x558cef32dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x558cef32ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x558cef2a2bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x558cef32dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x558cef32e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x558cef2a3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x558cef32dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x558cef32e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x558cef2a3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x558cef32dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x558cef32e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x558cef2a3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x558cef32dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x558cef32e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17624)\u001b[0m     @     0x558cef2a3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "2020-11-05 10:33:54,847\tWARNING worker.py:945 -- The driver may not be able to keep up with the stdout/stderr of the workers. To avoid forwarding logs to the driver, use 'ray.init(log_to_driver=False)'.\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x560c2d022baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x560c2d023643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17616)\u001b[0m     @     0x560c2cf98689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x557a3b729baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x557a3b72aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x557a3b69ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x557a3b729baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x557a3b72a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x557a3b69f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x557a3b729baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x557a3b72a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x557a3b69f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x557a3b729baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x557a3b72a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x557a3b69f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x557a3b729baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x557a3b72a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17619)\u001b[0m     @     0x557a3b69f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x7f5b71f0c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x7f5b77fb779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x55a0a5274fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x55a0a51cfb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x55a0a525abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x55a0a525ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x55a0a51cfbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x55a0a525abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x55a0a525b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x55a0a51d0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x55a0a525abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x55a0a525b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x55a0a51d0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x55a0a525abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x55a0a525b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x55a0a51d0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x55a0a525abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x55a0a525b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17701)\u001b[0m     @     0x55a0a51d0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x7f9bf5f4a8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x7f9bf3a774f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x7f9bf9b2279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x5587af385fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x5587af2e0b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x5587af36bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x5587af36ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x5587af2e0bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x5587af36bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x5587af36c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x5587af2e1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x5587af36bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x5587af36c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x5587af2e1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x5587af36bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x5587af36c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x5587af2e1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x5587af36bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x5587af36c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17635)\u001b[0m     @     0x5587af2e1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x7f3da05d2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x7f3da0eb5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x7f3da0ed8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x7f3da037aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x7f3da0378388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x7edf255cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x7edf27a9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x7edf255cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x7edf2b67679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x560c6c7befd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x560c6c719b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x560c6c7a4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x560c6c7a5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x560c6c719bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x560c6c7a4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x560c6c7a5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x560c6c71a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x560c6c7a4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x560c6c7a5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x560c6c71a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x560c6c7a4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x560c6c7a5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x560c6c71a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x560c6c7a4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x560c6c7a5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17627)\u001b[0m     @     0x560c6c71a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x7f0a8cc30b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x7f0a8cc53c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x7f0a8c0f5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x7f0a8c0f3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x7f4322dea4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x7f4328e9579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x55c581059fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x55c580fb4b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x55c58103fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x55c581040a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x55c580fb4bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x55c58103fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x55c581040643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x55c580fb5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x55c58103fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x55c581040643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x55c580fb5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x55c58103fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x55c581040643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x55c580fb5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x55c58103fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x55c581040643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17685)\u001b[0m     @     0x55c580fb5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x7f782413d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x7f782a1e879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x5602d3d1efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x5602d3c79b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x5602d3d04baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x5602d3d05a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x5602d3c79bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x5602d3d04baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x5602d3d05643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x5602d3c7a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x5602d3d04baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x5602d3d05643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x5602d3c7a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x5602d3d04baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x5602d3d05643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x5602d3c7a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x5602d3d04baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x5602d3d05643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17753)\u001b[0m     @     0x5602d3c7a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x7f8b991a54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x7f7f37e388de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x7f7f359654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x7f7f3ba1079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x562684baafd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x562684b05b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x562684b90baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x562684b91a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x562684b05bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x562684b90baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x562684b91643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x562684b06689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x562684b90baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x562684b91643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x562684b06689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x562684b90baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x562684b91643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x562684b06689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x562684b90baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x562684b91643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17644)\u001b[0m     @     0x562684b06689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x5567158b0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x55671593abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x55671593b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x5567158b0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x55671593abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x55671593b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x5567158b0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x55671593abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x55671593b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17717)\u001b[0m     @     0x5567158b0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x560799195a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x560799109bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x560799194baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x560799195643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x56079910a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x560799194baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x560799195643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x56079910a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x560799194baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x560799195643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x56079910a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x560799194baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x560799195643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17731)\u001b[0m     @     0x56079910a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x7f2946bbeb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x7f2946be1c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x7ee649b4479f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x564ffe0a2fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x564ffdffdb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x564ffe088baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x564ffe089a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x564ffdffdbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x564ffe088baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x564ffe089643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x564ffdffe689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x564ffe088baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x564ffe089643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x564ffdffe689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x564ffe088baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x564ffe089643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x564ffdffe689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x564ffe088baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x564ffe089643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17638)\u001b[0m     @     0x564ffdffe689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x7eece05404f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x7eece65eb79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x5629da1d3fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x5629da12eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x5629da1b9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x5629da1baa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x5629da12ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x5629da1b9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x5629da1ba643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x5629da12f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x5629da1b9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x5629da1ba643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x5629da12f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x5629da1b9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x5629da1ba643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x5629da12f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x5629da1b9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x5629da1ba643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17738)\u001b[0m     @     0x5629da12f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x564fa6b9f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17670)\u001b[0m     @     0x564fa6b14689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x7f6a3b6b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x7f6a3db898de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x7ed2800b74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x7ed28258a8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x7ed2800b74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x7ed28616279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x7faa07eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x7faa059e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x7faa0ba9079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x55b4cad44fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x55b4cac9fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x55b4cad2abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x55b4cad2ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x55b4cac9fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x55b4cad2abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x55b4cad2b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x55b4caca0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x55b4cad2abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x55b4cad2b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x55b4caca0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x55b4cad2abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x55b4cad2b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x55b4caca0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x55b4cad2abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x55b4cad2b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17621)\u001b[0m     @     0x55b4caca0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x7ee5edb2279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x557d687c0fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x557d6871bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x557d687a6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x557d687a7a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x557d6871bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x557d687a6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x557d687a7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x557d6871c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x557d687a6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x557d687a7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x557d6871c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x557d687a6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x557d687a7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x557d6871c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x557d687a6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x557d687a7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17694)\u001b[0m     @     0x557d6871c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x7fa6342e8a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x7fa6342e6388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x55eb8332cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x55eb8332d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x55eb832a2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x55eb8332cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x55eb8332d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x55eb832a2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x55eb8332cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x55eb8332d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17712)\u001b[0m     @     0x55eb832a2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x7f3da037a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x7f3da0a654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x7f0a8c0f55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x7f0a8c7e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x7f8b9b6788de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x7f8b991a54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x7f8b9f25079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x562d14534fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x562d1448fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x562d1451abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x7f2946083a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x7f2946081388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x7f6a3b6b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x7f6a4176179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x557b8501afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x56397eab3fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x56397ea0eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x56397ea99baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x56397ea9aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x56397ea0ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x56397ea99baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x56397ea9a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x56397ea0f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x56397ea99baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x56397ea9a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x56397ea0f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x56397ea99baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x56397ea9a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x56397ea0f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x56397ea99baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x56397ea9a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17707)\u001b[0m     @     0x56397ea0f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x7fa6342e85a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x7fa6349d34f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x7fa636ea68de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x7f3da2f388de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x7f3da0a654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x7f3da6b1079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x5592d29d9fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x5592d2934b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x5592d29bfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x5592d29c0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x5592d2934bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x5592d29bfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x5592d29c0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x5592d2935689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x5592d29bfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x5592d29c0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x5592d2935689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x5592d29bfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x5592d29c0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x5592d2935689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x5592d29bfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x5592d29c0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17705)\u001b[0m     @     0x5592d2935689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x7f0a8ecb38de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x7f0a8c7e04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x7f0a9288b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x55ebdf5cffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x55ebdf52ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x55ebdf5b5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x55ebdf5b6a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x55ebdf52abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x55ebdf5b5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x55ebdf5b6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x55ebdf52b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x55ebdf5b5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x55ebdf5b6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x55ebdf52b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x55ebdf5b5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x55ebdf5b6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x55ebdf52b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x55ebdf5b5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x55ebdf5b6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17688)\u001b[0m     @     0x55ebdf52b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x562d1451ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x562d1448fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x562d1451abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x562d1451b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x562d14490689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x562d1451abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x562d1451b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x562d14490689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x562d1451abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x562d1451b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x562d14490689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x562d1451abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x562d1451b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17713)\u001b[0m     @     0x562d14490689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x7f29460835a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x7f294676e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x557b84f75b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x557b85000baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x557b85001a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x557b84f75bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x557b85000baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x557b85001643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x557b84f76689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x557b85000baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x557b85001643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x557b84f76689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x557b85000baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x557b85001643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x557b84f76689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x557b85000baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x557b85001643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17642)\u001b[0m     @     0x557b84f76689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x7fa6349d34f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x7fa63aa7e79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x55d98a246fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x55d98a1a1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x55d98a22cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x55d98a22da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x55d98a1a1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x55d98a22cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x55d98a22d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x55d98a1a2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x55d98a22cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x55d98a22d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x55d98a1a2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x55d98a22cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x55d98a22d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x55d98a1a2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x55d98a22cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x55d98a22d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17697)\u001b[0m     @     0x55d98a1a2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x7f2948c418de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x7f294676e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x7f294c81979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x561fc0a99fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x561fc09f4b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x561fc0a7fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x561fc0a80a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x561fc09f4bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x561fc0a7fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x561fc0a80643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x561fc09f5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x561fc0a7fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x561fc0a80643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x561fc09f5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x561fc0a7fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x561fc0a80643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x561fc09f5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x561fc0a7fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x561fc0a80643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=17674)\u001b[0m     @     0x561fc09f5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "2020-11-05 10:33:54,969\tERROR trial_runner.py:567 -- Trial PPO_jss_env_632d4_00000: Error processing event.\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py\", line 515, in _process_trial\n",
+      "    result = self.trial_executor.fetch_result(trial)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py\", line 488, in fetch_result\n",
+      "    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1428, in get\n",
+      "    raise value.as_instanceof_cause()\n",
+      "ray.exceptions.RayTaskError: \u001b[36mray::PPO.train()\u001b[39m (pid=17739, ip=172.17.0.4)\n",
+      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
+      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 516, in train\n",
+      "    raise e\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 505, in train\n",
+      "    result = Trainable.train(self)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py\", line 336, in train\n",
+      "    result = self.step()\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py\", line 134, in step\n",
+      "    res = next(self.train_exec_impl)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 756, in __next__\n",
+      "    return next(self.built_iterator)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  [Previous line repeated 1 more time]\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 876, in apply_flatten\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 828, in add_wait_hooks\n",
+      "    item = next(it)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  [Previous line repeated 1 more time]\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 466, in base_iterator\n",
+      "    actor_set.init_actors()\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1238, in init_actors\n",
+      "    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])\n",
+      "ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.\n",
+      "2020-11-05 10:33:54,975\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffe0497dac01000000.\n",
+      "2020-11-05 10:33:54,975\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff4100f4fd01000000.\n",
+      "2020-11-05 10:33:54,975\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffa97540c201000000.\n",
+      "2020-11-05 10:33:54,975\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff252160a301000000.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/558.2 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 ERROR)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_632d4_00000 | ERROR    |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "Number of errored trials: 1\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "| Trial name              |   # failures | error file                                                                        |\n",
+      "|-------------------------+--------------+-----------------------------------------------------------------------------------|\n",
+      "| PPO_jss_env_632d4_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_632d4_00000_0_2020-11-05_10-33-47/error.txt |\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3372\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:43:46,790 - wandb.wandb_agent - INFO - Running runs: ['frw3hck3']\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204343-frw3hck3/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204343-frw3hck3/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 163.86869\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 163.86869\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3871\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 2\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708225\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/frw3hck3\u001b[0m\n",
-      "2020-10-14 20:43:52,006 - wandb.wandb_agent - INFO - Cleaning up finished run: frw3hck3\n",
-      "2020-10-14 20:43:52,326 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:43:52,327 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta53\n",
-      "2020-10-14 20:43:52,329 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta53\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/o0hyb863\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204354-o0hyb863\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/558.2 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 ERROR)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_632d4_00000 | ERROR    |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "Number of errored trials: 1\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "| Trial name              |   # failures | error file                                                                        |\n",
+      "|-------------------------+--------------+-----------------------------------------------------------------------------------|\n",
+      "| PPO_jss_env_632d4_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_632d4_00000_0_2020-11-05_10-33-47/error.txt |\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
       "\n",
+      "2020-11-05 10:33:54,986\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffc2621d1401000000.\n",
+      "2020-11-05 10:33:54,986\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff31c3fed901000000.\n",
+      "2020-11-05 10:33:54,986\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff091d563401000000.\n",
+      "Traceback (most recent call last):\n",
+      "  File \"train.py\", line 74, in <module>\n",
+      "    train_func()\n",
+      "  File \"train.py\", line 56, in train_func\n",
+      "    analysis = tune.run(PPOTrainer, config=config, stop=stop, name=\"ppo-jss\")\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py\", line 427, in run\n",
+      "    raise TuneError(\"Trials did not complete\", incomplete_trials)\n",
+      "ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_632d4_00000])\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3461\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:43:57,342 - wandb.wandb_agent - INFO - Running runs: ['o0hyb863']\n",
+      "--- Logging error ---\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 17512\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program failed with code 1.  Press ctrl-c to abort syncing.\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4e242e9f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff9f3cc57a01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff9d526f0201000000.'\n",
+      "Arguments: ()\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:33:54.965771 17575 17575 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:33:54.966594 17575 17575 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:33:54.968843 17575 17575 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:33:54.971683 17575 17575 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:33:54.978044 17575 17575 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:33:54.980012 17575 17575 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:33:54.983047 17575 17575 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:33:54.997284 17575 17575 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:33:54.998430 17575 17575 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:33:54.998840 17575 17575 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:33:55.003125 17575 17575 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m E1105 10:33:54.962189 17739 18775 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=170fdfd5d34985a7e0497dac01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=e0497dac01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m E1105 10:33:54.962371 17739 18775 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=89f63fee54d6858ee0497dac01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=e0497dac01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m E1105 10:33:54.966826 17739 18775 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=d984ee9d41b92c534100f4fd01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=4100f4fd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m E1105 10:33:54.967108 17739 18775 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=6c41da4ee8b0b4d04100f4fd01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=4100f4fd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m E1105 10:33:54.969674 17739 18775 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=fde3d5eda9f525d7a97540c201000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=a97540c201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m E1105 10:33:54.969805 17739 18775 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=d16c21eef3935840a97540c201000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=a97540c201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m E1105 10:33:54.972012 17739 18775 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=3e4916e36cb3ce60252160a301000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=252160a301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m E1105 10:33:54.972154 17739 18775 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=c2d663ba592886f5252160a301000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=252160a301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m E1105 10:33:54.974367 17739 18775 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=d88ec84d5baca957a97540c201000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=a97540c201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m E1105 10:33:54.974632 17739 18775 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=37f711ca0d66f5bd4100f4fd01000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=4100f4fd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m E1105 10:33:54.974958 17739 18775 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=c6f8a2750fad0b0de0497dac01000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=e0497dac01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m E1105 10:33:54.975983 17739 18775 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=457f03c785986c89252160a301000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=252160a301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m E1105 10:33:54.977717 17739 18775 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=9ecf84e34eb8e61dc2621d1401000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=c2621d1401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m E1105 10:33:54.977826 17739 18775 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=f3cba62d4c01820bc2621d1401000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=c2621d1401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m E1105 10:33:54.979261 17739 18775 task_manager.cc:323] Task failed: IOError: 14: failed to connect to all addresses: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=8fbf1bd7de98d288c2621d1401000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=c2621d1401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m E1105 10:33:54.980046 17739 18775 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=7dd3b2683d323ffd31c3fed901000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=31c3fed901000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m E1105 10:33:54.980137 17739 18775 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=0a51bbe8b791810831c3fed901000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=31c3fed901000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m E1105 10:33:54.980198 17739 18775 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=d7b1ed864d13e17f31c3fed901000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=31c3fed901000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m E1105 10:33:54.983085 17739 18775 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=1f6f5417a7b065f9091d563401000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=091d563401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m E1105 10:33:54.983275 17739 18775 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=e76b5820fbdeb0f2091d563401000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=091d563401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=17739)\u001b[0m E1105 10:33:54.983448 17739 18775 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=7249131d8582b825091d563401000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=091d563401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff821ddf4301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff59d91ef301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0314ce3001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8168b55d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffbdff035801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff90aded9101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff56c9ec1501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffb2413f7201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff43fb47bd01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff58dd50c101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4f9bfece01000000.'\n",
+      "Arguments: ()\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:33:55.003774 17575 17575 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:33:55.007335 17575 17575 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:33:55.008549 17575 17575 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:33:55.012406 17575 17575 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:33:55.036036 17575 17575 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:33:55.040410 17575 17575 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:33:55.050336 17575 17575 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:33:55.068451 17575 17575 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff75f329e601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff3a9488b101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0fae11b201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff302122d001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8f9a5fc701000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffef1af81501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff99d0343201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff3166f9e301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff51728d3301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff41e0fbff01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff018c9dac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff50168bc201000000.'\n",
+      "Arguments: ()\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:33:55.104971 17575 17575 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:33:55.131590 17575 17575 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff257d30801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8cd168e101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffee8852f401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff19fd5b4901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8d06128001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8edbbd3001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff80993fa801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0d557f6601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff14da135201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff20d842ad01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff5843697701000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7ef9157101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff310e963d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff2d1a71ea01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff5cc87e2501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0aeae6a301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7b2861ac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa4f7314201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff0f72e3901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff04668d8f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7a508a7a01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff71ca01c001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffc3083e0c01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffdd5654aa01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff1e7ae67b01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffffefbd9801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff34cbbac201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff702ed69e01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd989d1f001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff358dd45601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff61dc472601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffb3cace0801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff32335d4e01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7f7c936001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff452e714401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffeca600ef01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa7ad1db301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff120020c01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffccf343cc01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd8f83c3801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd784bf0601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff392716d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffda2cd21f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffe9f6a7cf01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff10f667b001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff244a7d1001000000.'\n",
+      "Arguments: ()\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204354-o0hyb863/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204354-o0hyb863/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 180.92929\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 180.92929\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3790\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708235\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201105_103342-xsck45b9/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201105_103342-xsck45b9/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/o0hyb863\u001b[0m\n",
-      "2020-10-14 20:44:02,563 - wandb.wandb_agent - INFO - Cleaning up finished run: o0hyb863\n",
-      "2020-10-14 20:44:02,910 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:44:02,911 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta54\n",
-      "2020-10-14 20:44:02,913 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta54\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33msuper-sweep-1\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/xsck45b9\u001b[0m\n",
+      "2020-11-05 10:34:06,592 - wandb.wandb_agent - INFO - Cleaning up finished run: xsck45b9\n",
+      "2020-11-05 10:34:10,005 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-05 10:34:10,005 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta41\n",
+      "2020-11-05 10:34:10,007 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/ta41\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.9 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/802owiob\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204405-802owiob\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mneat-sweep-2\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/z90hgj59\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/e2qx1gcw\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201105_103411-e2qx1gcw\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-05 10:34:15,025 - wandb.wandb_agent - INFO - Running runs: ['e2qx1gcw']\n",
+      "2020-11-05 10:34:15,528\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/1 GPUs, 0.0/558.2 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_74913_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3552\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:44:07,929 - wandb.wandb_agent - INFO - Running runs: ['802owiob']\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204405-802owiob/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204405-802owiob/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 201.68687\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 201.68687\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3601\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708246\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/802owiob\u001b[0m\n",
-      "2020-10-14 20:44:13,147 - wandb.wandb_agent - INFO - Cleaning up finished run: 802owiob\n",
-      "2020-10-14 20:44:13,451 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:44:13,451 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta55\n",
-      "2020-10-14 20:44:13,453 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta55\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/ix8moovg\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204415-ix8moovg\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "\u001b[2m\u001b[36m(pid=19323)\u001b[0m 2020-11-05 10:34:18,268\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=19323)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/torch/cuda/__init__.py:125: UserWarning: \n",
+      "\u001b[2m\u001b[36m(pid=19323)\u001b[0m GeForce RTX 2080 Ti with CUDA capability sm_75 is not compatible with the current PyTorch installation.\n",
+      "\u001b[2m\u001b[36m(pid=19323)\u001b[0m The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 compute_37.\n",
+      "\u001b[2m\u001b[36m(pid=19323)\u001b[0m If you want to use the GeForce RTX 2080 Ti GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/\n",
+      "\u001b[2m\u001b[36m(pid=19323)\u001b[0m \n",
+      "\u001b[2m\u001b[36m(pid=19323)\u001b[0m   warnings.warn(incompatible_device_warn.format(device_name, capability, \" \".join(arch_list), device_name))\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m *** SIGSEGV (@0x0) received by PID 19312 (TID 0x7f395653b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m *** SIGSEGV (@0x0) received by PID 19243 (TID 0x7fc2301e8700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x7fc22fdc1390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x7f932fd79f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x7f932f4a47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m *** SIGSEGV (@0x0) received by PID 19291 (TID 0x7fea6df9f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m *** SIGSEGV (@0x0) received by PID 19275 (TID 0x7f46a3a31700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x7f46a360a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x7f17a35b2f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m *** SIGSEGV (@0x0) received by PID 19319 (TID 0x7f80e3754700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x7f80e332d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x7f51e32abf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x7f51e29d67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m *** SIGSEGV (@0x0) received by PID 19274 (TID 0x7fd7d63b3700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x7fd7d5f8c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m *** SIGSEGV (@0x0) received by PID 19284 (TID 0x7f0fa5752700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x7f0fa532b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x7ee0a528af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x7ee0a49b57db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m *** SIGSEGV (@0x0) received by PID 19265 (TID 0x7fd8ceaf3700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x7fd8ce6cc390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x7fa9ce66bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x7fa9cdd967db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m *** SIGSEGV (@0x0) received by PID 19272 (TID 0x7fca15aed700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x7fca156c6390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x7f9b15674f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m *** SIGSEGV (@0x0) received by PID 19193 (TID 0x7fc7be55e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m *** SIGSEGV (@0x0) received by PID 19321 (TID 0x7f2ac4649700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m *** SIGSEGV (@0x0) received by PID 19294 (TID 0x7f45f6e94700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m *** SIGSEGV (@0x0) received by PID 19215 (TID 0x7facefb5e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m *** SIGSEGV (@0x0) received by PID 19303 (TID 0x7fd6bad95700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x7fd6ba96e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m *** SIGSEGV (@0x0) received by PID 19299 (TID 0x7fdfce2b6700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m *** SIGSEGV (@0x0) received by PID 19278 (TID 0x7f571df10700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x7f571dae9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m *** SIGSEGV (@0x0) received by PID 19271 (TID 0x7fb47de68700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x7fb47da41390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x7f857d7f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x7f857cf247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m *** SIGSEGV (@0x0) received by PID 19269 (TID 0x7f2408b2e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m *** SIGSEGV (@0x0) received by PID 19289 (TID 0x7f5bd5d2c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x7f5bd5905390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x7f2cd57f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x7f2cd4f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m *** SIGSEGV (@0x0) received by PID 19250 (TID 0x7f29983e7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x7f2997fc0390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m *** SIGSEGV (@0x0) received by PID 19205 (TID 0x7f89f2d6d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m *** SIGSEGV (@0x0) received by PID 19304 (TID 0x7f091970f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x7f09192e8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m *** SIGSEGV (@0x0) received by PID 19197 (TID 0x7f9d0cadc700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m *** SIGSEGV (@0x0) received by PID 19201 (TID 0x7efc91d22700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m *** SIGSEGV (@0x0) received by PID 19210 (TID 0x7ff9b4b19700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m *** SIGSEGV (@0x0) received by PID 19270 (TID 0x7fb30ee75700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x7fb30ea4e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m *** SIGSEGV (@0x0) received by PID 19266 (TID 0x7f3a24827700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x7f3a24400390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x7f0b243a3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x7f0b23ace7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m *** SIGSEGV (@0x0) received by PID 19314 (TID 0x7f6b57349700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x7f6b56f22390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x7f3c56c15f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x7f3c563407db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m *** SIGSEGV (@0x0) received by PID 19290 (TID 0x7fa05334b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x7fa052f24390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x7f7152ea6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x7f71525d17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m *** SIGSEGV (@0x0) received by PID 19194 (TID 0x7fe58fd23700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x7fe58f8fc390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m *** SIGSEGV (@0x0) received by PID 19310 (TID 0x7fbc6c689700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x7fbc6c262390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x7f8d6c01cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m *** SIGSEGV (@0x0) received by PID 19257 (TID 0x7ff7e2b32700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m *** SIGSEGV (@0x0) received by PID 19219 (TID 0x7f13dd8a8700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x7f13dd481390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m *** SIGSEGV (@0x0) received by PID 19199 (TID 0x7fd7e0a31700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x7fd7e060a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x7fa8e05a1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x7fa8dfccc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x7f3956114390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x7f0a560cdf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x7f0a557f87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x7f0a557fb8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x7f932f4a78f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x7f932f4a7ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x7fea6db78390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x7fbb6da0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x7fbb6d1357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x7fbb6d1388f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x7f17a2cdd7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x7f17a2ce08f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x7f17a2ce0ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x7f51e29d98f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x7f51e29d9ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x7f51e29d9d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x7f51e32bcb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x7f51e32dfc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x7fa8d5e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x7fa8d554f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x7fa8d55528f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x7fa8d5552ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x7fa8d5552d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x7ee0a49b88f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x7ee0a49b8ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x7ee0a49b8d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x7ee0a529bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x7ee0a52bec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x7fa9cdd998f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x7fa9cdd99ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x7fa9cdd99d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x7fa9ce67cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x7fa9ce69fc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x7f9b14d9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x7f9b14da28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x7f9b14da2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x7f9b14da2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x7f9b15685b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x7fc7be137390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x7f98be0f5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x7f98bd8207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x7f98bd8238f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x7f98bd823ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x7f2ac4222390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x7efbc401cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x7efbc37477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x7efbc374a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x7efbc374aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x7f45f6a6d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x7f16f69f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x7f16f611f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x7f16f61228f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x7f16f6122ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m *** SIGSEGV (@0x0) received by PID 19259 (TID 0x7fa36cca4700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x7fa36c87d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x7f746c825f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x7f746bf507db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x7f746bf538f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x7facef737390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x7f7deec15f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x7f7dee3407db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x7f7dee3438f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x7f7dee343ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x7fa7ba70af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x7fa7b9e357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x7fa7b9e388f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x7fa7b9e38ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x7fa7b9e38d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x7fdfcde8f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x7fb0cddf7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x7fb0cd5227db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x7fb0cd5258f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x7f281da0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x7f281d1357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x7f281d1388f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x7f281d138ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x7f281d138d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x7f857cf278f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x7f857cf27ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x7f857cf27d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x7f857d80ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x7f857d82dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x7f2408707390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x7ef508563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x7ef507c8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x7ef507c918f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x7ef507c91ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x7f2cd4f278f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x7f2cd4f27ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x7f2cd4f27d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x7f2cd580ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x7efa97e0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x7efa975367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x7efa975398f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x7efa97539ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x7f89f2946390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x7f5af270af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x7f5af1e357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x7f5af1e388f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x7f5af1e38ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x7eda1924af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x7eda189757db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x7eda189788f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x7eda18978ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x7f9d0c6b5390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x7f6e0c67af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x7f6e0bda57db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x7f6e0bda88f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x7f6e0bda8ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x7efc918fb390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x7ecd917f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x7ecd90f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x7ecd90f278f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x7ecd90f27ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m *** SIGSEGV (@0x0) received by PID 19202 (TID 0x7f1854bad700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x7ff9b46f2390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x7fcab460ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x7fcab3d397db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x7fcab3d3c8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x7fcab3d3cad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x7f840e9ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x7f840e0f77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x7f840e0fa8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x7f840e0faad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x7f0b23ad18f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x7f0b23ad1ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x7f0b23ad1d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x7f0b243b4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x7f0b243d7c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x7f3c563438f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x7f3c56343ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x7f3c56343d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x7f3c56c26b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x7f71525d48f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x7f71525d4ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x7f71525d4d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x7f7152eb7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x7fb68f751f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x7fb68ee7c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x7fb68ee7f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x7fb68ee7fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x7f8d6b7477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x7f8d6b74a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x7f8d6b74aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x7ff7e270b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x7fc8e257cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x7fc8e1ca77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x7fc8e1caa8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x7fc8e1caaad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x7ee4dd3ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x7ee4dcaf77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x7ee4dcafa8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x7ee4dcafaad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x7fa8dfccf8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x7fa8dfccfad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x7fa8dfccfd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x7fa8e05b2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x7fa8e05d5c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m *** SIGSEGV (@0x0) received by PID 19188 (TID 0x7fef16ccc700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x7fef168a5390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x7fc015940f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x7fc01506b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m *** SIGSEGV (@0x0) received by PID 19249 (TID 0x7f2f28b85700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m *** SIGSEGV (@0x0) received by PID 19203 (TID 0x7fee2e10d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m *** SIGSEGV (@0x0) received by PID 19239 (TID 0x7f8fe0dcb700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x7f8fe09a4390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m *** SIGSEGV (@0x0) received by PID 19189 (TID 0x7fc9eab84700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x7fc9ea75d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x7f9aea5a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x7f9ae9ccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m *** SIGSEGV (@0x0) received by PID 19231 (TID 0x7f504164a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x7f5041223390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m *** SIGSEGV (@0x0) received by PID 19247 (TID 0x7f6712c02700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m *** SIGSEGV (@0x0) received by PID 19216 (TID 0x7fd4e7432700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x7fd4e700b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m *** SIGSEGV (@0x0) received by PID 19261 (TID 0x7f7f379b7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m *** SIGSEGV (@0x0) received by PID 19187 (TID 0x7f03baa4b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x7f03ba624390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x7ed4ba57cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x7ed4b9ca77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x7f0a557fbad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x7f0a557fbd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x7f0a560deb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x7f0a56101c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x7f932f4a7d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x7f932fd8ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x7f932fdadc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x7f932f24fa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x7f932f24d388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x7f932f24f5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x7fbb6d138ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x7fbb6d138d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x7fbb6da1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x7fbb6da3ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x7fbb6cee0a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x7fbb6cede388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x7f17a2ce0d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x7f17a35c3b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x7f17a35e6c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x7f17a2a88a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x7f17a2a86388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x7f17a2a885a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x7f51e2781a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x7f51e277f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x7f51e27815a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x7fa8d5e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x7fa8d5e58c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x7fa8d52faa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x7fa8d52f8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x7ee0a4760a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x7ee0a475e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x7ee0a47605a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x7ee0a4e4b4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x7fa9cdb41a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x7fa9cdb3f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x7fa9cdb415a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x7f9b156a8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x7f9b14b4aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x7f9b14b48388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x7f9b14b4a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x7f98bd823d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x7f98be106b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x7f98be129c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x7f98bd5cba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x7f98bd5c9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x7efbc374ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x7efbc402db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x7efbc4050c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x7efbc34f2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x7efbc34f0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m *** SIGSEGV (@0x0) received by PID 19204 (TID 0x7f41f0faa700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x7f41f0b83390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x7f12f09e8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m *** SIGSEGV (@0x0) received by PID 19192 (TID 0x7f9f52568700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x7f9f52141390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x7f70520faf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x7f70518257db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x7f16f6122d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x7f16f6a05b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x7f16f6a28c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x7f16f5ecaa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x7f16f5ec8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m *** SIGSEGV (@0x0) received by PID 19200 (TID 0x7f51d74c4700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x7f51d709d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x7f22d7037f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x7f746bf53ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x7f746bf53d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x7f746c836b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x7f746c859c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x7f746bcfba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m *** SIGSEGV (@0x0) received by PID 19190 (TID 0x7f27a3f5a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x7f27a3b33390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x7ef8a3ac8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x7f7dee343d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x7f7deec26b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x7f7deec49c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x7f7dee0eba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x7f7dee0e9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x7fa7ba71bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x7fa7ba73ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x7fa7b9be0a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x7fa7b9bde388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x7fb0cd525ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x7fb0cd525d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x7fb0cde08b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x7fb0cde2bc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x7f281da1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x7f281da3ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x7f281cee0a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x7f281cede388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x7f857cccfa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x7f857cccd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x7f857cccf5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x7ef507c91d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x7ef508574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x7ef508597c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x7ef507a39a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x7ef507a37388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x7f2cd582dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x7f2cd4ccfa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x7f2cd4ccd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x7f2cd4ccf5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x7efa97539d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x7efa97e1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x7efa97e3fc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x7efa972e1a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x7efa972df388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x7f5af1e38d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x7f5af271bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x7f5af273ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x7f5af1be0a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x7f5af1bde388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x7eda18978d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x7eda1925bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x7eda1927ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x7eda18720a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x7eda1871e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x7f6e0bda8d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x7f6e0c68bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x7f6e0c6aec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x7f6e0bb50a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x7f6e0bb4e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m *** SIGSEGV (@0x0) received by PID 19213 (TID 0x7f14081ae700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x7f1407d87390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x7ee507cfff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x7ecd90f27d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x7ecd9180ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x7ecd9182dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x7ecd90ccfa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x7ecd90ccd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m *** SIGSEGV (@0x0) received by PID 19225 (TID 0x7fa8ea8cb700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x7fa8ea4a4390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x7f1854786390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x7ee95460ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x7ee953d397db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x7ee953d3c8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x7fcab3d3cd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x7fcab461fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x7fcab4642c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x7fcab3ae4a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x7fcab3ae2388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m *** SIGSEGV (@0x0) received by PID 19288 (TID 0x7f20dfd71700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m *** SIGSEGV (@0x0) received by PID 19286 (TID 0x7f85ee8f8700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m *** SIGSEGV (@0x0) received by PID 19224 (TID 0x7fdb8b531700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x7fdb8b10a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x7fac8b0b7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x7fac8a7e27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m *** SIGSEGV (@0x0) received by PID 19208 (TID 0x7f6f72064700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x7f6f71c3d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x7f4071becf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m *** SIGSEGV (@0x0) received by PID 19256 (TID 0x7f6c1f6fa700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x7f6c1f2d3390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m *** SIGSEGV (@0x0) received by PID 19262 (TID 0x7faf4bd54700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x7faf4b92d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m *** SIGSEGV (@0x0) received by PID 19196 (TID 0x7f514c4b3700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x7f514c08c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m *** SIGSEGV (@0x0) received by PID 19206 (TID 0x7f942a936700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m *** SIGSEGV (@0x0) received by PID 19268 (TID 0x7f7bf4a54700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x7f7bf462d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m *** SIGSEGV (@0x0) received by PID 19223 (TID 0x7f470ad28700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x7f470a901390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x7f180a7bbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m *** SIGSEGV (@0x0) received by PID 19191 (TID 0x7f963579a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x7f9635373390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x7f67352fcf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m *** SIGSEGV (@0x0) received by PID 19309 (TID 0x7f12e6447700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x7f12e6020390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x7ee3e5e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x7f840e0fad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x7f840e9ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x7f840ea00c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x7f840dea2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x7f840dea0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x7f840dea25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x7f0b23879a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x7f0b23877388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x7f0b238795a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x7f0b23f644f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x7f0b264378de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x7f3c56c49c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x7f3c560eba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x7f3c560e9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x7f3c560eb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x7f3c567d64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x7f7152edac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x7f715237ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x7f715237a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x7f715237c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x7f7152a674f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x7fb68ee7fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x7fb68f762b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x7fb68f785c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x7fb68ec27a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x7fb68ec25388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x7fb68ec275a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x7fb68f3124f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x7f8d6b74ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x7f8d6c02db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x7f8d6c050c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x7f8d6b4f2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x7f8d6b4f0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x7f8d6b4f25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x7fc8e1caad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x7fc8e258db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x7fc8e25b0c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x7fc8e1a52a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x7fc8e1a50388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x7fc8e1a525a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x7ee4dcafad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x7ee4dd3ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x7ee4dd400c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x7ee4dc8a2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x7ee4dc8a0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x7ee4dc8a25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x7ee4dcf8d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m *** SIGSEGV (@0x0) received by PID 19255 (TID 0x7f98cd87c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x7f98cd455390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x7f69cd3ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x7f69ccaf77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x7f69ccafa8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m *** SIGSEGV (@0x0) received by PID 19263 (TID 0x7f555cef7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x7f555cad0390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x7f265c95df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x7f265c0887db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x7f265c08b8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m *** SIGSEGV (@0x0) received by PID 19297 (TID 0x7f67f33f3700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x7f67f2fcc390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x7f38f2f13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x7f38f263e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x7f38f26418f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m *** SIGSEGV (@0x0) received by PID 19222 (TID 0x7fb18c3d1700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x7fb18bfaa390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x7f828be0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x7f828b5367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m *** SIGSEGV (@0x0) received by PID 19318 (TID 0x7f3cc7c81700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x7f3cc785a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x7f0dc77fbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x7f0dc6f267db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m *** SIGSEGV (@0x0) received by PID 19229 (TID 0x7fe2025b8700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x7fe202191390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x7fb30213af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x7fb3018657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x7fb3018688f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m *** SIGSEGV (@0x0) received by PID 19287 (TID 0x7f6f8de5c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x7f6f8da35390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m *** SIGSEGV (@0x0) received by PID 19329 (TID 0x7f4807976700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x7f480754f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x7f19073edf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x7f1906b187db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m *** SIGSEGV (@0x0) received by PID 19316 (TID 0x7fe71415b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m *** SIGSEGV (@0x0) received by PID 19267 (TID 0x7f25066fb700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x7f25062d4390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x7ef606279f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x7ef6059a47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x7ef6059a78f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m *** SIGSEGV (@0x0) received by PID 19253 (TID 0x7f1dadeed700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x7f1dadac6390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x7eeeada0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x7eeead1357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x7fa8dfa77a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x7fa8dfa75388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x7fa8dfa775a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x7fc01506e8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x7fc01506ead3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x7f2f2875e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x7f0028563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x7f0027c8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x7f0027c918f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x7fee2dce6390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x7fbf2dc0df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x7fbf2d3387db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x7fbf2d33b8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x7f60e077cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x7f60dfea77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x7f60dfeaa8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x7f60dfeaaad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m *** SIGSEGV (@0x0) received by PID 19308 (TID 0x7f038e672700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x7f038e24b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x7ed48e13af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x7ed48d8657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x7f9ae9cd28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x7f9ae9cd2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x7f9ae9cd2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x7f21410b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x7f21407e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x7f21407e38f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x7f21407e3ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m *** SIGSEGV (@0x0) received by PID 19301 (TID 0x7f1dbc703700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x7f1dbc2dc390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x7f67127db390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x7f38125a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x7f3811ccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x7f3811cd28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x7f3811cd2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m *** SIGSEGV (@0x0) received by PID 19264 (TID 0x7f7e84126700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x7f7e83cff390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x7fa5e6f13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x7fa5e663e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x7fa5e66418f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x7fa5e6641ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x7f7f37590390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x7f503743af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x7f5036b657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x7f5036b688f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x7ed4b9caa8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x7ed4b9caaad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x7ed4b9caad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x7ed4ba58db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x7f0a555a3a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x7f0a555a1388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x7f0a555a35a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x7f0a55c8e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x7f932f93a4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x7f9331e0d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x7f932f93a4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x7f93359e579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x562068d2efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x562068c89b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x562068d14baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x562068d15a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x562068c89bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x562068d14baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x562068d15643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x562068c8a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x562068d14baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x562068d15643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x562068c8a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x562068d14baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x562068d15643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x562068c8a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x562068d14baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x562068d15643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19243)\u001b[0m     @     0x562068c8a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x7fbb6cee05a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x7fbb6d5cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x7fbb6fa9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x7fbb6d5cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x7f17a31734f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x7f17a56468de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x7f17a31734f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x7f17a921e79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x55560ad21fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x55560ac7cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x55560ad07baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x55560ad08a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x55560ac7cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x55560ad07baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x55560ad08643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x55560ac7d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x55560ad07baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x55560ad08643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x55560ac7d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x55560ad07baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x55560ad08643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x55560ac7d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x55560ad07baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x55560ad08643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19275)\u001b[0m     @     0x55560ac7d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x7f51e2e6c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x7f51e533f8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x7f51e2e6c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x7f51e8f1779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x55f1a40dffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x55f1a403ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x55f1a40c5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x55f1a40c6a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x55f1a403abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x55f1a40c5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x55f1a40c6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x55f1a403b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x55f1a40c5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x55f1a40c6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x55f1a403b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x55f1a40c5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x55f1a40c6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x55f1a403b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x55f1a40c5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x55f1a40c6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19319)\u001b[0m     @     0x55f1a403b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x7fa8d52fa5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x7fa8d59e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x7fa8d7eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x7fa8d59e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x7fa8dba9079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x5639bf7a6fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x5639bf701b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x5639bf78cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x5639bf78da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x5639bf701bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x5639bf78cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x5639bf78d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x5639bf702689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x5639bf78cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x5639bf78d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x5639bf702689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x5639bf78cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x5639bf78d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x5639bf702689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x5639bf78cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x7ee0a731e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x7ee0a4e4b4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x7ee0aaef679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x558b1d684fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x558b1d5dfb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x558b1d66abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x558b1d66ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x558b1d5dfbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x558b1d66abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x558b1d66b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x558b1d5e0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x558b1d66abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x558b1d66b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x558b1d5e0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x558b1d66abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x558b1d66b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x558b1d5e0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x558b1d66abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x558b1d66b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19284)\u001b[0m     @     0x558b1d5e0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x7fa9ce22c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x7fa9d06ff8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x7fa9ce22c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x7fa9d42d779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x55c347d09fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x55c347c64b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x55c347cefbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x55c347cf0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x55c347c64bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x55c347cefbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x55c347cf0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x55c347c65689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x55c347cefbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x55c347cf0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x55c347c65689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x55c347cefbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x55c347cf0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x55c347c65689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x55c347cefbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x55c347cf0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19265)\u001b[0m     @     0x55c347c65689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x7f9b152354f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x7f9b177088de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x7f9b152354f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x7f9b1b2e079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x55ed152eefd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x55ed15249b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x55ed152d4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x55ed152d5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x55ed15249bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x55ed152d4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x55ed152d5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x55ed1524a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x55ed152d4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x55ed152d5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x55ed1524a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x55ed152d4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x55ed152d5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x55ed1524a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x55ed152d4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x55ed152d5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19272)\u001b[0m     @     0x55ed1524a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x7f98bd5cb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x7f98bdcb64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x7f98c01898de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x7f98bdcb64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x7f98c3d6179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x55a358a32fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x55a35898db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x55a358a18baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x55a358a19a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x55a35898dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x55a358a18baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x55a358a19643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x55a35898e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x55a358a18baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x55a358a19643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x55a35898e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x55a358a18baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x55a358a19643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x55a35898e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x7efbc34f25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x7efbc3bdd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x7efbc60b08de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x7efbc3bdd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x7efbc9c8879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x560f2bfe5fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x560f2bf40b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x560f2bfcbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x560f2bfcca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x7f12f01137db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x7f12f01168f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x7f12f0116ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x7f12f0116d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x7f70518288f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x7f7051828ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x7f7051828d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x7f16f5eca5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x7f16f65b54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x7f16f8a888de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x7f22d67627db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x7f22d67658f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x7f22d6765ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x7f22d6765d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x7f746bcf9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x7f746bcfb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x7f746c3e64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x7f746e8b98de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x7ef8a31f37db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x7ef8a31f68f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x7ef8a31f6ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x7ef8a31f6d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x7f7dee0eb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x7f7dee7d64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x7f7df0ca98de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x7f7dee7d64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x7f7df447779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x55e5d0607fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x55e5d0562b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x55e5d05edbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x55e5d05eea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x55e5d0562bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x55e5d05edbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x55e5d05ee643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x55e5d0563689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x55e5d05edbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x7fa7b9be05a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x7fa7ba2cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x7fa7bc79e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x7fa7ba2cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x7fa7c037679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x555a213b7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x555a21312b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x555a2139dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x555a2139ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x555a21312bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x7fb0cd2cda93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x7fb0cd2cb388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x7fb0cd2cd5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x7fb0cd9b84f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x7f281cee05a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x7f281d5cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x7f281fa9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x7f281d5cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x7f282367679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x55b58821bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x55b588176b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x55b588201baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x55b588202a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x55b588176bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x7f857d3ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x7f857f88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x7f857d3ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x7f858346579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x55b8e42b5fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x55b8e4210b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x55b8e429bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x55b8e429ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x55b8e4210bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x55b8e429bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x55b8e429c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x55b8e4211689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x55b8e429bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x55b8e429c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x55b8e4211689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x55b8e429bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x55b8e429c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x55b8e4211689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x55b8e429bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x55b8e429c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19271)\u001b[0m     @     0x55b8e4211689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x7ef507a395a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x7ef5081244f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x7ef50a5f78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x7ef5081244f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x7ef50e1cf79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x5579ac7aafd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x5579ac705b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x5579ac790baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x5579ac791a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x5579ac705bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x5579ac790baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x5579ac791643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x5579ac706689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x5579ac790baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x5579ac791643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x5579ac706689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x5579ac790baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x5579ac791643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x5579ac706689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x5579ac790baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x5579ac791643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19269)\u001b[0m     @     0x5579ac706689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x7f2cd53ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x7f2cd788d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x7f2cd53ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x7f2cdb46579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x55c3646c9fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x55c364624b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x55c3646afbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x55c3646b0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x55c364624bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x55c3646afbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x55c3646b0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x55c364625689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x55c3646afbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x55c3646b0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x55c364625689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x55c3646afbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x55c3646b0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x55c364625689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x55c3646afbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x55c3646b0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19289)\u001b[0m     @     0x55c364625689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x7efa972e15a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x7efa979cc4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x7efa99e9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x7efa979cc4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x7f5af1be05a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x7f5af22cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x7f5af479e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x7f5af22cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x7f5af837679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x7eda187205a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x7eda18e0b4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x7eda1b2de8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x7eda18e0b4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x7f6e0bb505a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x7f6e0c23b4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x7f6e0e70e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x7ee50742a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x7ee50742d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x7ee50742dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x7ee50742dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x7ee507d10b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x7ecd90ccf5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x7ecd913ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x7ecd9388d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x7f79ea2baf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x7f79e99e57db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x7f79e99e88f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x7f79e99e8ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x7ee953d3cad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x7ee953d3cd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x7ee95461fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x7ee954642c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x7ee953ae4a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x7ee953ae2388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x7fcab3ae45a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x7fcab41cf4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x7fcab66a28de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x7f20df94a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x7ef1df751f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x7ef1dee7c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x7ef1dee7f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x7ef1dee7fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x7f85ee4d1390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x7f56ee365f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x7f56eda907db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x7f56eda938f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x7f56eda93ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x7fac8a7e58f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x7fac8a7e5ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x7fac8a7e5d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x7fac8b0c8b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x7f40713177db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x7f407131a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x7f407131aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x7f3d1f279f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x7f3d1e9a47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x7f3d1e9a78f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x7f3d1e9a7ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x7f804b5eff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x7f804ad1a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x7f804ad1d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x7f804ad1dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m *** Aborted at 1604572463 (unix time) try \"date -d @1604572463\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m *** SIGSEGV (@0x0) received by PID 19276 (TID 0x7f9337827700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x7f9337400390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x7f224c01cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x7f224b7477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x7f224b74a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x7f224b74aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x7f942a50f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x7f652a494f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x7f6529bbf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x7f4cf4563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x7f4cf3c8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x7f4cf3c918f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x7f4cf3c91ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x7f4cf3c91d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x7f1809ee67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x7f1809ee98f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x7f1809ee9ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x7f1809ee9d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x7f6734a277db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x7f6734a2a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x7f6734a2aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x7f6734a2ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x7f673530db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x7f6735330c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x7ee3e554f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x7ee3e55528f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x7ee3e5552ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x7ee3e5552d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x7f840e58d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x7f8410a608de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x7f840e58d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x7f841463879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x55884bbb5fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x55884bb10b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x55884bb9bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x55884bb9ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x55884bb10bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x55884bb9bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x55884bb9c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x55884bb11689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x55884bb9bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x55884bb9c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x55884bb11689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x55884bb9bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x55884bb9c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x55884bb11689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x55884bb9bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x55884bb9c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19270)\u001b[0m     @     0x55884bb11689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x7f0b23f644f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x7f0b2a00f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x558349c18fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x558349b73b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x558349bfebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x558349bffa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x558349b73bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x558349bfebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x558349bff643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x558349b74689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x558349bfebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x558349bff643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x558349b74689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x558349bfebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x558349bff643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x558349b74689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x558349bfebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x558349bff643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19266)\u001b[0m     @     0x558349b74689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x7f3c58ca98de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x7f3c567d64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x7f3c5c47779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x55efbdc12fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x55efbdb6db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x55efbdbf8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x55efbdbf9a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x55efbdb6dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x55efbdbf8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x55efbdbf9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x55efbdb6e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x55efbdbf8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x55efbdbf9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x55efbdb6e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x55efbdbf8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x55efbdbf9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x55efbdb6e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x55efbdbf8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x55efbdbf9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19314)\u001b[0m     @     0x55efbdb6e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x7f7154f3a8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x7f7152a674f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x7f7158b1279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x5610c8629fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x5610c8584b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x5610c860fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x5610c8610a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x5610c8584bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x5610c860fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x5610c8610643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x5610c8585689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x5610c860fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x5610c8610643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x5610c8585689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x5610c860fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x5610c8610643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x5610c8585689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x5610c860fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x5610c8610643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19290)\u001b[0m     @     0x5610c8585689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x7fb6917e58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x7fb68f3124f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x7fb6953bd79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x555dc1b2afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x555dc1a85b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x555dc1b10baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x555dc1b11a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x555dc1a85bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x555dc1b10baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x555dc1b11643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x555dc1a86689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x555dc1b10baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x555dc1b11643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x555dc1a86689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x555dc1b10baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x555dc1b11643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x555dc1a86689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x555dc1b10baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x555dc1b11643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19194)\u001b[0m     @     0x555dc1a86689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x7f8d6bbdd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x7f8d6e0b08de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x7f8d6bbdd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x7f8d71c8879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x557d9cd27fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x557d9cc82b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x557d9cd0dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x557d9cd0ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x557d9cc82bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x557d9cd0dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x557d9cd0e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x557d9cc83689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x557d9cd0dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x557d9cd0e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x557d9cc83689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x557d9cd0dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x557d9cd0e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x557d9cc83689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x557d9cd0dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x557d9cd0e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19310)\u001b[0m     @     0x557d9cc83689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x7fc8e213d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x7fc8e46108de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x7fc8e213d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x7fc8e81e879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x556bfe982fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x556bfe8ddb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x556bfe968baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x556bfe969a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x556bfe8ddbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x556bfe968baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x556bfe969643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x556bfe8de689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x556bfe968baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x556bfe969643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x556bfe8de689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x556bfe968baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x556bfe969643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x556bfe8de689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x556bfe968baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x556bfe969643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19257)\u001b[0m     @     0x556bfe8de689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x7ee4df4608de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x7ee4dcf8d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x7ee4e303879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x5586bd467fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x5586bd3c2b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x5586bd44dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x5586bd44ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x5586bd3c2bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x5586bd44dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x5586bd44e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x5586bd3c3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x5586bd44dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x5586bd44e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x5586bd3c3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x5586bd44dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x5586bd44e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x5586bd3c3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x5586bd44dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x5586bd44e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19219)\u001b[0m     @     0x5586bd3c3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x7f69ccafaad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x7f69ccafad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x7f69cd3ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x7f69cd400c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x7f265c08bad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x7f265c08bd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x7f265c96eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x7f265c991c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x7f38f2641ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x7f38f2641d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x7f38f2f24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x7f38f2f47c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x7f828b5398f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x7f828b539ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x7f828b539d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x7f828be1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x7f828be3fc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x7f0dc6f298f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x7f0dc6f29ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x7f0dc6f29d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x7f0dc780cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x7fb301868ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x7fb301868d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x7fb30214bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x7f408d7f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x7f408cf247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x7f408cf278f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x7f408cf27ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x7f408cf27d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x7f1906b1b8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x7f1906b1bad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x7fe713d34390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x7fb813cbbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x7fb8133e67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x7fb8133e98f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x7ef6059a7ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x7ef6059a7d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x7ef60628ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x7ef6062adc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x7ef60574fa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x7ef60574d388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x7eeead1388f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x7eeead138ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x7eeead138d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x7eeeada1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x7eeeada3ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x7fa8e01624f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x7fa8e26358de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x7fa8e01624f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x7fa8e620d79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x558755858fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x5587557b3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x55875583ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x55875583fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x5587557b3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x55875583ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x55875583f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x5587557b4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x55875583ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x55875583f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x5587557b4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x55875583ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x55875583f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x5587557b4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x55875583ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x55875583f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19199)\u001b[0m     @     0x5587557b4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x7fc01506ed91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x7fc015951b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x7fc015974c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x7fc014e16a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x7fc014e14388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x7fc014e165a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x7f0027c91ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x7f0027c91d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x7f0028574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x7f0028597c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x7f0027a39a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x7f0027a37388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x7fbf2d33bad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x7fbf2d33bd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x7fbf2dc1eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x7fbf2dc41c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x7fbf2d0e3a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x7f60dfeaad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x7f60e078db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x7f60e07b0c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x7f60dfc52a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x7f60dfc50388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x7ed48d8688f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x7ed48d868ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x7ed48d868d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x7ed48e14bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x7f9aea5b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x7f9aea5d8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x7f9ae9a7aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x7f9ae9a78388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x7f21407e3d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x7f21410c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x7f21410e9c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x7f214058ba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x7f2140589388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x7eeebc297f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x7eeebb9c27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x7f3811cd2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x7f38125b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x7f38125d8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x7f3811a7aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x7f3811a78388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x7f4f83bf7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x7f4f833227db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x7fa5e6641d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x7fa5e6f24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x7fa5e6f47c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x7fa5e63e9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x7fa5e63e7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x7f5036b68ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x7f5036b68d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x7f503744bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x7f503746ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x7ed4ba5b0c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x7ed4b9a52a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x7ed4b9a50388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x7ed4b9a525a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x7f0a581618de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x7f0a55c8e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x7f0a5bd3979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x557f63ea7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x557f63e02b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x557f63e8dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x557f63e8ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x557f63e02bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x557f63e8dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x557f63e8e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x557f63e03689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x557f63e8dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x557f63e8e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x557f63e03689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x557f63e8dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x557f63e8e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x557f63e03689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x557f63e8dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x557f63e8e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19312)\u001b[0m     @     0x557f63e03689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x7fbb7367679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x55bbfe78dfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x55bbfe6e8b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x55bbfe773baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x55bbfe774a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x55bbfe6e8bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x55bbfe773baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x55bbfe774643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x55bbfe6e9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x55bbfe773baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x55bbfe774643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x55bbfe6e9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x55bbfe773baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x55bbfe774643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x55bbfe6e9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x55bbfe773baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x55bbfe774643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19291)\u001b[0m     @     0x55bbfe6e9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x5639bf78d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19274)\u001b[0m     @     0x5639bf702689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x55a358a18baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x55a358a19643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19193)\u001b[0m     @     0x55a35898e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x560f2bf40bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x560f2bfcbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x560f2bfcc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x560f2bf41689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x560f2bfcbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x560f2bfcc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x560f2bf41689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x560f2bfcbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x560f2bfcc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x560f2bf41689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x560f2bfcbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x560f2bfcc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19321)\u001b[0m     @     0x560f2bf41689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x7f12f09f9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x7f12f0a1cc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x7f12efebea93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x7f12efebc388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x7f705210bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x7f705212ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x7f70515d0a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x7f70515ce388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x7f16f65b54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x7f16fc66079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x55dc0e196fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x55dc0e0f1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x55dc0e17cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x55dc0e17da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x55dc0e0f1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x55dc0e17cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x55dc0e17d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x55dc0e0f2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x55dc0e17cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x55dc0e17d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x55dc0e0f2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x55dc0e17cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x55dc0e17d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x55dc0e0f2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x55dc0e17cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x55dc0e17d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19294)\u001b[0m     @     0x55dc0e0f2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x7f22d7048b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x7f22d706bc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x7f22d650da93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x7f22d650b388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x7f746c3e64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x7f747249179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x559d0805cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x559d07fb7b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x559d08042baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x559d08043a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x559d07fb7bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x559d08042baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x559d08043643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x559d07fb8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x559d08042baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x559d08043643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x559d07fb8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x559d08042baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x559d08043643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x559d07fb8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x559d08042baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x559d08043643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19259)\u001b[0m     @     0x559d07fb8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x7ef8a3ad9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x7ef8a3afcc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x7ef8a2f9ea93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x7ef8a2f9c388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x55e5d05ee643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x55e5d0563689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x55e5d05edbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x55e5d05ee643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x55e5d0563689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x55e5d05edbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x55e5d05ee643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19215)\u001b[0m     @     0x55e5d0563689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x555a2139dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x555a2139e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x555a21313689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x555a2139dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x555a2139e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x555a21313689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x555a2139dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x555a2139e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x555a21313689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x555a2139dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x555a2139e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19303)\u001b[0m     @     0x555a21313689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x7fb0cfe8b8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x7fb0cd9b84f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x7fb0d3a6379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x561beed09fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x561beec64b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x561beecefbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x561beecf0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x561beec64bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x561beecefbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x561beecf0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x561beec65689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x561beecefbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x561beecf0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x561beec65689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x561beecefbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x561beecf0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x561beec65689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x561beecefbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x561beecf0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19299)\u001b[0m     @     0x561beec65689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x55b588201baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x55b588202643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x55b588177689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x55b588201baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x55b588202643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x55b588177689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x55b588201baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x55b588202643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x55b588177689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x55b588201baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x55b588202643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19278)\u001b[0m     @     0x55b588177689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x7efa9da7779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x5561d2adbfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x5561d2a36b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x5561d2ac1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x5561d2ac2a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x5561d2a36bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x5561d2ac1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x5561d2ac2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x5561d2a37689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x5561d2ac1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x5561d2ac2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x5561d2a37689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x5561d2ac1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x5561d2ac2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x5561d2a37689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x5561d2ac1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x5561d2ac2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19250)\u001b[0m     @     0x5561d2a37689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x562dd2819fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x562dd2774b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x562dd27ffbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x562dd2800a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x562dd2774bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x562dd27ffbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x562dd2800643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x562dd2775689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x562dd27ffbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x562dd2800643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x562dd2775689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x562dd27ffbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x562dd2800643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x562dd2775689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x562dd27ffbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x562dd2800643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19205)\u001b[0m     @     0x562dd2775689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x7eda1eeb679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x5617b84e3fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x5617b843eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x5617b84c9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x5617b84caa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x5617b843ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x5617b84c9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x5617b84ca643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x5617b843f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x5617b84c9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x5617b84ca643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x5617b843f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x5617b84c9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x5617b84ca643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x5617b843f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x5617b84c9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x5617b84ca643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19304)\u001b[0m     @     0x5617b843f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x7f6e0c23b4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x7f6e122e679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x5647e894dfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x5647e88a8b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x5647e8933baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x5647e8934a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x5647e88a8bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x5647e8933baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x5647e8934643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x5647e88a9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x5647e8933baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x5647e8934643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x5647e88a9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x5647e8933baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x5647e8934643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x5647e88a9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x5647e8933baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x5647e8934643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19197)\u001b[0m     @     0x5647e88a9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x7ee507d33c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x7ee5071d5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x7ee5071d3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x7ee5071d55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x7ee5078c04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x7ecd913ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x7ecd9746579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x55fcfd954fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x55fcfd8afb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x55fcfd93abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x55fcfd93ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x55fcfd8afbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x55fcfd93abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x55fcfd93b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x55fcfd8b0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x55fcfd93abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x55fcfd93b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x55fcfd8b0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x55fcfd93abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x55fcfd93b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x55fcfd8b0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x55fcfd93abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x55fcfd93b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19201)\u001b[0m     @     0x55fcfd8b0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x7f79e99e8d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x7f79ea2cbb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x7f79ea2eec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x7f79e9790a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x7f79e978e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x7f79e97905a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x7ee953ae45a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x7ee9541cf4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x7ee9566a28de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x7fcab41cf4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x7fcaba27a79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x5574bc3fffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x5574bc35ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x5574bc3e5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x5574bc3e6a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x5574bc35abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x5574bc3e5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x5574bc3e6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x5574bc35b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x5574bc3e5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x5574bc3e6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x5574bc35b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x5574bc3e5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x5574bc3e6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x5574bc35b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x5574bc3e5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x5574bc3e6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19210)\u001b[0m     @     0x5574bc35b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x7ef1dee7fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x7ef1df762b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x7ef1df785c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x7ef1dec27a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x7ef1dec25388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x7ef1dec275a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x7f56eda93d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x7f56ee376b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x7f56ee399c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x7f56ed83ba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x7f56ed839388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x7f56ed83b5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x7fac8b0ebc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x7fac8a58da93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x7fac8a58b388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x7fac8a58d5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x7f407131ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x7f4071bfdb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x7f4071c20c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x7f40710c2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x7f40710c0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x7f40710c25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x7f3d1e9a7d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x7f3d1f28ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x7f3d1f2adc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x7f3d1e74fa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x7f3d1e74d388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x7f3d1e74f5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x7f804ad1dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x7f804b600b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x7f804b623c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x7f804aac5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x7f804aac3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x7f804aac55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x7f643738df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x7f6436ab87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x7f6436abb8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x7f6436abbad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x7f224b74ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x7f224c02db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x7f224c050c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x7f224b4f2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x7f224b4f0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x7f6529bc28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x7f6529bc2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x7f6529bc2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x7f652a4a5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x7f4cf4574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x7f4cf4597c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x7f4cf3a39a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x7f4cf3a37388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x7f4cf3a395a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x7f180a7ccb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x7f180a7efc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x7f1809c91a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x7f1809c8f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x7f1809c915a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x7f67347d2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x7f67347d0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x7f67347d25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x7f6734ebd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x7ee3e5e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x7ee3e5e58c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x7ee3e52faa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x7ee3e52f8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x7ee3e52fa5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x7f69cc8a2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x7f69cc8a0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x7f69cc8a25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x7f69ccf8d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x7f69cf4608de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x7f265be33a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x7f265be31388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x7f265be335a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x7f265c51e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x7f38f23e9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x7f38f23e7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x7f38f23e95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x7f38f2ad44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x7f38f4fa78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x7f828b2e1a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x7f828b2df388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x7f828b2e15a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x7f828b9cc4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x7f0dc782fc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x7f0dc6cd1a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x7f0dc6ccf388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x7f0dc6cd15a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x7fb30216ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x7fb301610a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x7fb30160e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x7fb3016105a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x7f408d80ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x7f408d82dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x7f408cccfa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x7f408cccd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x7f1906b1bd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x7f19073feb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x7f1907421c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x7fb8133e9ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x7ef60574f5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x7ef605e3a4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x7ef60830d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x7eeeacee0a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x7eeeacede388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x7fc0155014f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x7fc0179d48de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x7f0027a395a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x7f00281244f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x7fbf2d0e1388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x7fbf2d0e35a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x7fbf2d7ce4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x7fbf2fca18de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x7f60dfc525a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x7f60e033d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x7f60e28108de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x7ed48e16ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x7ed48d610a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x7ed48d60e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x7ed48d6105a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x7ed48dcfb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x7f9ae9a7a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x7f9aea1654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x7f9aec6388de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x7f9aea1654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x7f9af021079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x5624bedc1fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x5624bed1cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x5624beda7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x5624beda8a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x5624bed1cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x5624beda7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x5624beda8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x7f214058b5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x7f2140c764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x7f21431498de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x7f2140c764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x7f2146d2179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x56301bacdfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x56301ba28b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x7eeebb9c58f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x7eeebb9c5ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x7eeebb9c5d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x7eeebc2a8b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x7eeebc2cbc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x7f3811a7a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x7f38121654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x7f38146388de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x7f4f833258f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x7f4f83325ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x7fa5e63e95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x7fa5e6ad44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x7fa5e8fa78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x7fa5e6ad44f5 at::Tensor::copy_()\n",
+      "2020-11-05 10:34:23,915\tWARNING worker.py:945 -- The driver may not be able to keep up with the stdout/stderr of the workers. To avoid forwarding logs to the driver, use 'ray.init(log_to_driver=False)'.\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x7f5036910a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x7f503690e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x7f50369105a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x7ed4ba13d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x7ed4bc6108de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x7ed4ba13d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x7ed4c01e879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x55e3b9e54fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x55e3b9dafb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x55e3b9e3abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x55e3b9e3ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x55e3b9dafbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x55e3b9e3abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x55e3b9e3b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x55e3b9db0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x55e3b9e3abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x55e3b9e3b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x55e3b9db0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x55e3b9e3abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x55e3b9e3b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x55e3b9db0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x55e3b9e3abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x55e3b9e3b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19187)\u001b[0m     @     0x55e3b9db0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x7f12efebe5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x7f12f05a94f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x7f12f2a7c8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x7f12f05a94f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x7f12f665479f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x561f9bea7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x7f70515d05a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x7f7051cbb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x7f705418e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x7f7051cbb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x7f7057d6679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x556841e71fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x7f22d650d5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x7f22d6bf84f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x7f22d90cb8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x7f22d6bf84f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x7f22dcca379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x559dcbcf6fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x559dcbc51b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x7ef8a2f9e5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x7ef8a36894f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x7ef8a5b5c8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x7ef8a36894f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x7ee509d938de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x7ee5078c04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x7ee50d96b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x7f79e9e7b4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x7f79ec34e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x7ee9541cf4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x7ee95a27a79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x563b6d164fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x563b6d0bfb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x563b6d14abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x563b6d14ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x563b6d0bfbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x563b6d14abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x563b6d14b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x563b6d0c0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x563b6d14abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x563b6d14b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x563b6d0c0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x563b6d14abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x563b6d14b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x563b6d0c0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x563b6d14abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x563b6d14b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19202)\u001b[0m     @     0x563b6d0c0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x7ef1df3124f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x7ef1e17e58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x7f56edf264f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x7f56f03f98de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x7fac8ac784f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x7fac8d14b8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x7fac8ac784f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x7f40717ad4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x7f4073c808de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x7f3d1ee3a4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x7f3d2130d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x7f804b1b04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x7f804d6838de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x7f804b1b04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x7f6436abbd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x7f643739eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x7f64373c1c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x7f6436863a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x7f224b4f25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x7f224bbdd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x7f224e0b08de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x7f652a4c8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x7f652996aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x7f6529968388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x7f4cf41244f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x7f4cf65f78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x7f180a37c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x7f180c84f8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x7f180a37c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x7f67373908de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x7f6734ebd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x7f673af6879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x55801095ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x5580108bab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x558010945baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x558010946a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x5580108babfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x558010945baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x7ee3e59e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x7ee3e7eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x7f69ccf8d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x7f69d303879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x55c52f73cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x55c52f697b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x55c52f722baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x55c52f723a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x55c52f697bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x55c52f722baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x55c52f723643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x55c52f698689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x55c52f722baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x55c52f723643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x55c52f698689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x55c52f722baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x55c52f723643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x55c52f698689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x55c52f722baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x55c52f723643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19255)\u001b[0m     @     0x55c52f698689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x7f265e9f18de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x7f265c51e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x7f26625c979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x55f6d9771fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x55f6d96ccb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x55f6d9757baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x55f6d9758a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x55f6d96ccbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x55f6d9757baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x55f6d9758643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x55f6d96cd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x55f6d9757baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x55f6d9758643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x55f6d96cd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x55f6d9757baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x55f6d9758643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x55f6d96cd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x55f6d9757baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x55f6d9758643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19263)\u001b[0m     @     0x55f6d96cd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x7f38f2ad44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x7f38f8b7f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x562162878fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x5621627d3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x56216285ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x56216285fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x5621627d3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x56216285ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x56216285f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x5621627d4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x56216285ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x56216285f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x5621627d4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x56216285ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x56216285f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x5621627d4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x56216285ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x56216285f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19297)\u001b[0m     @     0x5621627d4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x7f828de9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x7f828b9cc4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x7f8291a7779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x555dca91cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x555dca877b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x555dca902baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x555dca903a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x555dca877bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x555dca902baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x555dca903643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x555dca878689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x555dca902baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x555dca903643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x555dca878689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x555dca902baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x555dca903643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x555dca878689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x555dca902baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x555dca903643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19222)\u001b[0m     @     0x555dca878689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x7f0dc73bc4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x7f0dc988f8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x7f0dc73bc4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x7f0dcd46779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x5624f9d66fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x5624f9cc1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x5624f9d4cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x5624f9d4da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x5624f9cc1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x5624f9d4cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x7fb301cfb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x7fb3041ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x7fb301cfb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x7fb307da679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x55e81f243fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x55e81f19eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x55e81f229baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x55e81f22aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x55e81f19ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x55e81f229baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x55e81f22a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x55e81f19f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x55e81f229baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x55e81f22a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x55e81f19f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x55e81f229baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x55e81f22a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x55e81f19f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x55e81f229baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x55e81f22a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19229)\u001b[0m     @     0x55e81f19f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x7f408cccf5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x7f408d3ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x7f408f88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x7f19068c3a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x7f19068c1388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x7f19068c35a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x7f1906fae4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x7fb8133e9d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x7fb813cccb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x7fb813cefc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x7ef605e3a4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x7ef60bee579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x55a19cff8fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x55a19cf53b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x55a19cfdebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x55a19cfdfa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x55a19cf53bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x55a19cfdebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x55a19cfdf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x55a19cf54689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x55a19cfdebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x55a19cfdf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x55a19cf54689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x55a19cfdebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x55a19cfdf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x55a19cf54689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x55a19cfdebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x55a19cfdf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19267)\u001b[0m     @     0x55a19cf54689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x7eeeacee05a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x7eeead5cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x7eeeafa9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x7eeead5cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x7fc0155014f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x7fc04058379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x557812602fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x55781255db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x5578125e8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x5578125e9a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x55781255dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x5578125e8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x5578125e9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x55781255e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x5578125e8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x5578125e9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x55781255e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x5578125e8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x5578125e9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x55781255e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x5578125e8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x5578125e9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19188)\u001b[0m     @     0x55781255e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x7f002a5f78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x7f00281244f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x7f002e1cf79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x55b3d135bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x55b3d12b6b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x55b3d1341baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x55b3d1342a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x55b3d12b6bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x55b3d1341baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x55b3d1342643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x55b3d12b7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x55b3d1341baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x55b3d1342643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x55b3d12b7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x55b3d1341baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x55b3d1342643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x55b3d12b7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x55b3d1341baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x55b3d1342643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19249)\u001b[0m     @     0x55b3d12b7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x7fbf2d7ce4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=1920== Status ==\n",
+      "Memory usage on this node: 25.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/558.2 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 ERROR)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_74913_00000 | ERROR    |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "Number of errored trials: 1\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "| Trial name              |   # failures | error file                                                                        |\n",
+      "|-------------------------+--------------+-----------------------------------------------------------------------------------|\n",
+      "| PPO_jss_env_74913_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_74913_00000_0_2020-11-05_10-34-16/error.txt |\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "3)\u001b[0m     @     0x7fbf3387979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x55587fe96fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x55587fdf1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x55587fe7cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x55587fe7da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x55587fdf1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x55587fe7cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x55587fe7d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x55587fdf2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x55587fe7cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x55587fe7d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x55587fdf2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x55587fe7cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x55587fe7d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x55587fdf2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x55587fe7cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x55587fe7d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19203)\u001b[0m     @     0x55587fdf2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x7f60e033d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x7f60e63e879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x5644ea216fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x5644ea171b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x5644ea1fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x5644ea1fda20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x5644ea171bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x5644ea1fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x5644ea1fd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x5644ea172689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x5644ea1fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x5644ea1fd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x5644ea172689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x5644ea1fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x5644ea1fd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x5644ea172689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x5644ea1fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x5644ea1fd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19239)\u001b[0m     @     0x5644ea172689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x7ed4901ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x7ed48dcfb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x7ed493da679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x55fdf45bdfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x55fdf4518b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x5624bed1d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x5624beda7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x5624beda8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x5624bed1d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x5624beda7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x5624beda8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x5624bed1d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x5624beda7baf _PyEval_EvalCodeWith\n",
+      "== Status ==\n",
+      "Memory usage on this node: 25.2/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/558.2 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 ERROR)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_74913_00000 | ERROR    |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "Number of errored trials: 1\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "| Trial name              |   # failures | error file                                                                        |\n",
+      "|-------------------------+--------------+-----------------------------------------------------------------------------------|\n",
+      "| PPO_jss_env_74913_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_74913_00000_0_2020-11-05_10-34-16/error.txt |\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3642\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:44:18,469 - wandb.wandb_agent - INFO - Running runs: ['ix8moovg']\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204415-ix8moovg/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204415-ix8moovg/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 224.37374\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 224.37374\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3435\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708256\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/ix8moovg\u001b[0m\n",
-      "2020-10-14 20:44:23,694 - wandb.wandb_agent - INFO - Cleaning up finished run: ix8moovg\n",
-      "2020-10-14 20:44:24,023 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:44:24,023 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta56\n",
-      "2020-10-14 20:44:24,025 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta56\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/zda8eskt\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204426-zda8eskt\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
+      "Name\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x5624beda8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19189)\u001b[0m     @     0x5624bed1d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x56301bab3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x56301bab4a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x56301ba28bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x56301bab3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x56301bab4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x56301ba29689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x56301bab3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x56301bab4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x56301ba29689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x56301bab3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x56301bab4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x56301ba29689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x56301bab3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x56301bab4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19231)\u001b[0m     @     0x56301ba29689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x7eeebb76da93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x7eeebb76b388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x7f38121654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x7f381821079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x55646c729fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x55646c684b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x55646c70fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x55646c710a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x55646c684bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x55646c70fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x55646c710643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x55646c685689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x55646c70fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x55646c710643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x55646c685689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x55646c70fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x55646c710643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x55646c685689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x55646c70fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x55646c710643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19247)\u001b[0m     @     0x55646c685689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x7f4f83325d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x7fa5ecb7f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x559dd6f47fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x559dd6ea2b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x559dd6f2dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x559dd6f2ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x559dd6ea2bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x559dd6f2dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x559dd6f2e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x559dd6ea3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x559dd6f2dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x559dd6f2e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x559dd6ea3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x559dd6f2dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x559dd6f2e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x559dd6ea3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x559dd6f2dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x559dd6f2e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19216)\u001b[0m     @     0x559dd6ea3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x7f5036ffb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x7f50394ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x7f5036ffb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x7f503d0a679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x561f9be02b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x561f9be8dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x561f9be8ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x561f9be02bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x561f9be8dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x561f9be8e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x561f9be03689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x561f9be8dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x561f9be8e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x561f9be03689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x561f9be8dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x561f9be8e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x561f9be03689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x561f9be8dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x561f9be8e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19204)\u001b[0m     @     0x561f9be03689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x556841dccb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x556841e57baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x556841e58a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x556841dccbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x556841e57baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x556841e58643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x556841dcd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x556841e57baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x556841e58643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x556841dcd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x556841e57baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x556841e58643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x556841dcd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x556841e57baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x556841e58643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19192)\u001b[0m     @     0x556841dcd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x559dcbcdcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x559dcbcdda20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x559dcbc51bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x559dcbcdcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x559dcbcdd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x559dcbc52689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x559dcbcdcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x559dcbcdd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x559dcbc52689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x559dcbcdcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x559dcbcdd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x559dcbc52689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x559dcbcdcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x559dcbcdd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19200)\u001b[0m     @     0x559dcbc52689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x7ef8a973479f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x55d97bd3efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x55d97bc99b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x55d97bd24baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x55d97bd25a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x55d97bc99bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x55d97bd24baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x55d97bd25643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x55d97bc9a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x55d97bd24baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x55d97bd25643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x55d97bc9a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x55d97bd24baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x55d97bd25643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x55d97bc9a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x55d97bd24baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x55d97bd25643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19190)\u001b[0m     @     0x55d97bc9a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x55cd5426cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x55cd541c7b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x55cd54252baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x55cd54253a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x55cd541c7bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x55cd54252baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x55cd54253643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x55cd541c8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x55cd54252baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x55cd54253643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x55cd541c8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x55cd54252baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x55cd54253643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x55cd541c8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x55cd54252baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x55cd54253643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19213)\u001b[0m     @     0x55cd541c8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x7f79e9e7b4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x7f79eff2679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x55a72f89efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x55a72f7f9b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x55a72f884baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x55a72f885a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x55a72f7f9bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x55a72f884baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x55a72f885643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x55a72f7fa689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x55a72f884baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x55a72f885643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x55a72f7fa689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x55a72f884baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x55a72f885643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x55a72f7fa689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x55a72f884baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x55a72f885643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19225)\u001b[0m     @     0x55a72f7fa689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x7ef1df3124f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x7ef1e53bd79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x560b69e92fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x560b69dedb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x560b69e78baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x560b69e79a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x560b69dedbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x560b69e78baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x560b69e79643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x560b69dee689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x560b69e78baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x560b69e79643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x560b69dee689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x560b69e78baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x560b69e79643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x560b69dee689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x560b69e78baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x560b69e79643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19288)\u001b[0m     @     0x560b69dee689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x7f56edf264f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x7f56f3fd179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x55e5f67effd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x55e5f674ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x55e5f67d5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x55e5f67d6a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x55e5f674abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x55e5f67d5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x55e5f67d6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x55e5f674b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x55e5f67d5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x55e5f67d6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x55e5f674b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x55e5f67d5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x55e5f67d6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x55e5f674b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x55e5f67d5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x55e5f67d6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19286)\u001b[0m     @     0x55e5f674b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x7fac90d2379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x5642d9feffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x5642d9f4ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x5642d9fd5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x5642d9fd6a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x5642d9f4abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x5642d9fd5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x5642d9fd6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x5642d9f4b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x5642d9fd5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x5642d9fd6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x5642d9f4b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x5642d9fd5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x5642d9fd6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x5642d9f4b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x5642d9fd5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x5642d9fd6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19224)\u001b[0m     @     0x5642d9f4b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x7f40717ad4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x7f407785879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x555a8eb4cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x555a8eaa7b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x555a8eb32baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x555a8eb33a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x555a8eaa7bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x555a8eb32baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x555a8eb33643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x555a8eaa8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x555a8eb32baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x555a8eb33643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x555a8eaa8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x555a8eb32baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x555a8eb33643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x555a8eaa8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x555a8eb32baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x555a8eb33643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19208)\u001b[0m     @     0x555a8eaa8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x7f3d1ee3a4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x7f3d24ee579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x56445fc83fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x56445fbdeb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x56445fc69baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x56445fc6aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x56445fbdebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x56445fc69baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x56445fc6a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x56445fbdf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x56445fc69baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x56445fc6a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x56445fbdf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x56445fc69baf _PyEval_--- Logging error ---\n",
+      "EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x56445fc6a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x56445fbdf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x56445fc69baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x56445fc6a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19256)\u001b[0m     @     0x56445fbdf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x7f805125b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x556280db8fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x556280d13b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x556280d9ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x556280d9fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x556280d13bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x556280d9ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x556280d9f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x556280d14689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x556280d9ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x556280d9f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x556280d14689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x556280d9ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x556280d9f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x556280d14689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x556280d9ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x556280d9f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19262)\u001b[0m     @     0x556280d14689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x7f6436861388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x7f64368635a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x7f6436f4e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x7f64394218de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x7f224bbdd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x7f2251c8879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x55d4ea93afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x55d4ea895b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x55d4ea920baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x55d4ea921a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x55d4ea895bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x55d4ea920baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x55d4ea921643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x55d4ea896689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x55d4ea920baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x55d4ea921643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x55d4ea896689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x55d4ea920baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x55d4ea921643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x55d4ea896689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x55d4ea920baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x55d4ea921643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19196)\u001b[0m     @     0x55d4ea896689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x7f652996a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x7f652a0554f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x7f652c5288de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x7f4cf41244f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x7f4cfa1cf79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x55637b800fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x55637b75bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x55637b7e6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x55637b7e7a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x55637b75bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x55637b7e6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x55637b7e7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x55637b75c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x55637b7e6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x55637b7e7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x55637b75c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x55637b7e6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x55637b7e7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x55637b75c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x55637b7e6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x55637b7e7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19268)\u001b[0m     @     0x55637b75c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x7f181042779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x55f59e4edfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x55f59e448b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x55f59e4d3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x55f59e4d4a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x55f59e448bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x55f59e4d3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x55f59e4d4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x55f59e449689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x55f59e4d3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x55f59e4d4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x55f59e449689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x55f59e4d3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x55f59e4d4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x55f59e449689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x55f59e4d3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x55f59e4d4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19223)\u001b[0m     @     0x55f59e449689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x558010946643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x5580108bb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x558010945baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x558010946643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x5580108bb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x558010945baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x558010946643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x5580108bb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x558010945baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x558010946643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19191)\u001b[0m     @     0x5580108bb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x7ee3e59e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x7ee3eba9079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x559cf0586fd7 methTraceback (most recent call last):\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x7f4f837b84f5 at::Tensor::copy_()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "od_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x559cf04e1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x559cf056cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x559cf056da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x559cf04e1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x559cf056cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x559cf056d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x559cf04e2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x559cf056cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x559cf056d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x559cf04e2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x559cf056cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x559cf056d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x559cf04e2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x559cf056cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x559cf056d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19309)\u001b[0m     @     0x559cf04e2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x5624f9d4d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x5624f9cc2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x5624f9d4cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x5624f9d4d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x5624f9cc2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x5624f9d4cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x5624f9d4d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x5624f9cc2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x5624f9d4cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x5624f9d4d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19318)\u001b[0m     @     0x5624f9cc2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x7f408d3ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x7f409346579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x561f6e66bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x561f6e5c6b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x561f6e651baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x561f6e652a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x561f6e5c6bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x561f6e651baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x561f6e652643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x561f6e5c7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x561f6e651baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x561f6e652643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x561f6e5c7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x561f6e651baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x561f6e652643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x561f6e5c7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x561f6e651baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x561f6e652643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19287)\u001b[0m     @     0x561f6e5c7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x7f19094818de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x7f1906fae4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x7f190d05979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x7f4f85c8b8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "  @     0x55c5c40e5fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x55c5c4040b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x55c5c40cbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x55c5c40cca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x55c5c4040bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x55c5c40cbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x55c5c40cc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x55c5c4041689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x55c5c40cbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x55c5c40cc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x55c5c4041689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x55c5c40cbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x55c5c40cc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x55c5c4041689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x55c5c40cbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x55c5c40cc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19329)\u001b[0m     @     0x55c5c4041689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x7fb813191a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x7eeeb367679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x55eae9460fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x55eae93bbb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x55eae9446baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x55eae9447a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x55eae93bbbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x55eae9446baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x55eae9447643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x55eae93bc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x55eae9446baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x55eae9447643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x55eae93bc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x55eae9446baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x55eae9447643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x55eae93bc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x55eae9446baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x55eae9447643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19253)\u001b[0m     @     0x55eae93bc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x55fdf45a3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x55fdf45a4a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x55fdf4518bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x55fdf45a3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x55fdf45a4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x55fdf4519689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x55fdf45a3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x55fdf45a4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x55fdf4519689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x55fdf45a3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x55fdf45a4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x55fdf4519689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x55fdf45a3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m     @     0x55fdf45a4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19308)\u001b[0m    \u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x7f4f837b84f5 at::Tensor::copy_()\n",
+      "Call stack:\n",
+      " @     0x55fdf4519689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x7eeebb76d5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x7eeebbe584f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x7eeebe32b8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x7f4f83c08b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x7f4f83c2bc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x7f4f830cda93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x7f4f830cb388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x556438a6bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x5564389c6b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x556438a51baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x556438a52a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x5564389c6bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x556438a51baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x556438a52643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x5564389c7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x556438a51baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x556438a52643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x5564389c7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x556438a51baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x556438a52643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x5564389c7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x556438a51baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x556438a52643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19261)\u001b[0m     @     0x5564389c7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x7f6436f4e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x7f643cff979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x55e66d970fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x55e66d8cbb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x55e66d956baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x55e66d957a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x55e66d8cbbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x55e66d956baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x55e66d957643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x55e66d8cc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x55e66d956baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x55e66d957643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x55e66d8cc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x55e66d956baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x55e66d957643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x55e66d8cc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x55e66d956baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x55e66d957643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19276)\u001b[0m     @     0x55e66d8cc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x7f652a0554f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x7f653010079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x555c123ddfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x555c12338b08 _PyEval_EvalFram\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x7f4f8986379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x565237915fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x565237870b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x5652378fbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x5652378fca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x565237870bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x5652378fbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x5652378fc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x565237871689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x5652378fbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x5652378fc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x565237871689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x5652378fbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x5652378fc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x565237871689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x5652378fbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x5652378fc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x565237871689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19323)\u001b[0m E1105 10:34:24.019585 19323 20514 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=efaf5dbfabc208739f3cc57a01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=9f3cc57a01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=19323)\u001b[0m E1105 10:34:24.019757 19323 20514 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=b3b45bae970c41729f3cc57a01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=9f3cc57a01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=19323)\u001b[0m E1105 10:34:24.049988 19323 20514 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=f26c08df806c9b079d526f0201000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=9d526f0201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "eDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x555c123c3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x555c123c4a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x555c12338bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x555c123c3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x555c123c4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x555c12339689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x555c123c3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x555c123c4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x555c12339689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x555c123c3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x555c123c4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x555c12339689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x555c123c3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x555c123c4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x7fb81318f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x7fb8131915a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x7eeebbe584f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x7eeec1f0379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x55ff4515dfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x55ff450b8b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x55ff45143baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x55ff45144a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x55ff450b8bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x55ff45143baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x55ff45144643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x55ff450b9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x55ff45143baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x55ff45144643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x55ff450b9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x55ff45143baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x55ff45144643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x55ff450b9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x55ff45143baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x55ff45144643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19301)\u001b[0m     @     0x55ff450b9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19264)\u001b[0m     @     0x7f4f830cd5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19206)\u001b[0m     @     0x555c12339689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x7fb81387c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x7fb815d4f8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "2020-11-05 10:34:24,028\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff9f3cc57a01000000.\n",
+      "2020-11-05 10:34:24,028\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff9d526f0201000000.\n",
+      "2020-11-05 10:34:24,028\tERROR trial_runner.py:567 -- Trial PPO_jss_env_74913_00000: Error processing event.\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py\", line 515, in _process_trial\n",
+      "    result = self.trial_executor.fetch_result(trial)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py\", line 488, in fetch_result\n",
+      "    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1428, in get\n",
+      "    raise value.as_instanceof_cause()\n",
+      "ray.exceptions.RayTaskError: \u001b[36mray::P\u001b[2m\u001b[36m(pid=19323)\u001b[0m E1105 10:34:24.050175 19323 20514 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=3501fe38550fe14a9d526f0201000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=9d526f0201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=19323)\u001b[0m E1105 10:34:24.050328 19323 20514 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=8e79ac7e91b36714821ddf4301000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=821ddf4301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=19323)\u001b[0m E1105 10:34:24.050388 19323 20514 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=3e4916e36cb3ce60252160a301000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=252160a301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=19323)\u001b[0m E1105 10:34:24.050467 19323 20514 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=428a4b4025d91890821ddf4301000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=821ddf4301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "\u001b[2m\u001b[36m(pid=19323)\u001b[0m E1105 10:34:24.050585 19323 20514 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=c2d663ba592886f5252160a301000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=252160a301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "\u001b[2m\u001b[36m(pid=19323)\u001b[0m E1105 10:34:24.052373 19323 20514 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=457f03c785986c89252160a301000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=252160a301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=19323)\u001b[0m E1105 10:34:24.052584 19323 20514 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=4f22c19b5f703db99f3cc57a01000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=9f3cc57a01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "\u001b[2m\u001b[36m(pid=19323)\u001b[0m E1105 10:34:24.053058 19323 20514 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=38e2d2d27b716bfb821ddf4301000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=821ddf4301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=19323)\u001b[0m E1105 10:34:24.054227 19323 20514 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=d9b69b81196304409d526f0201000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=9d526f0201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "\u001b[2m\u001b[36m(pid=19323)\u001b[0m E1105 10:34:24.055213 19323 20514 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=7dd3b2683d323ffd31c3fed901000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=31c3fed901000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff43fb47bd01000000.'\n",
+      "Arguments: ()\n",
+      "\u001b[2m\u001b[36m(pid=19323)\u001b[0m E1105 10:34:24.055380 19323 20514 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=0a51bbe8b791810831c3fed901000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=31c3fed901000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "--- Logging error ---\n",
+      "\u001b[2m\u001b[36m(pid=19323)\u001b[0m E1105 10:34:24.055506 19323 20514 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=d7b1ed864d13e17f31c3fed901000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=31c3fed901000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "Traceback (most recent call last):\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.018770 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.022739 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
       "\n",
-      "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3726\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:44:29,037 - wandb.wandb_agent - INFO - Running runs: ['zda8eskt']\n",
+      "ValueError: I/O operation on closed file.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 19087\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program failed with code 1.  Press ctrl-c to abort syncing.\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.031944 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "Call stack:\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.042348 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.055240 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.073799 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.075160 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0314ce3001000000.'\n",
+      "Arguments: ()\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x7fb81387c4f5 at::Tensor::copy_()\n",
+      "--- Logging error ---\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x7fb81992779f torch::autograd::THPVariable_copy_()\n",
+      "Traceback (most recent call last):\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x55e63594afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x55e6358a5b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x55e635930baf _PyEval_EvalCodeWithName\n",
+      "ValueError: I/O operation on closed file.\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x55e635931a20 method_vectorcall\n",
+      "Call stack:\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x55e6358a5bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x55e635930baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x55e635931643 _PyFunction_Vectorcall.localalias.353\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x55e6358a6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x55e635930baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x55e635931643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x55e6358a6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x55e635930baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x55e635931643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x55e6358a6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x55e635930baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x55e635931643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=19316)\u001b[0m     @     0x55e6358a6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.078393 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.081125 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.093447 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.093824 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff091d563401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8edbbd3001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffe0497dac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8168b55d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4e242e9f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffbdff035801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffc2621d1401000000.'\n",
+      "Arguments: ()\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.097268 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.098218 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.099877 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0d557f6601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff56c9ec1501000000.'\n",
+      "Arguments: ()\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.114370 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.115296 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff59d91ef301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffdd5654aa01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff257d30801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff244a7d1001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4f9bfece01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8d06128001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff310e963d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff90aded9101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4100f4fd01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff58dd50c101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff50168bc201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd784bf0601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa4f7314201000000.'\n",
+      "Arguments: ()\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.118979 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.131718 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.161857 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.162087 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.166811 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.170110 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.172363 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff120020c01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff3166f9e301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffb2413f7201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff51728d3301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff5843697701000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.193706 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.199443 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.200444 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff41e0fbff01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa97540c201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff19fd5b4901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff3a9488b101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff302122d001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff2d1a71ea01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff80993fa801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff14da135201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffc3083e0c01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0aeae6a301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff10f667b001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd989d1f001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffee8852f401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff34cbbac201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff71ca01c001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffda2cd21f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8f9a5fc701000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff04668d8f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff1e7ae67b01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff018c9dac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa7ad1db301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffccf343cc01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff75f329e601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff392716d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff99d0343201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8cd168e101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff32335d4e01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff5cc87e2501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7f7c936001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7ef9157101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffffefbd9801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd8f83c3801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff358dd45601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0fae11b201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff452e714401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffef1af81501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.205626 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.210042 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.214673 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.224989 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffe9f6a7cf01000000.'\n",
+      "Arguments: ()\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.230175 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "--- Logging error ---\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.231897 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "Traceback (most recent call last):\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.237057 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.247388 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1105 10:34:24.250207 19146 19146 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7b2861ac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffeca600ef01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff61dc472601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffb3cace0801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff702ed69e01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7a508a7a01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff20d842ad01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff0f72e3901000000.'\n",
+      "Arguments: ()\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204426-zda8eskt/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204426-zda8eskt/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 178.59596\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 178.59596\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3881\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708267\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201105_103411-e2qx1gcw/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201105_103411-e2qx1gcw/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/zda8eskt\u001b[0m\n",
-      "2020-10-14 20:44:34,252 - wandb.wandb_agent - INFO - Cleaning up finished run: zda8eskt\n",
-      "2020-10-14 20:44:36,273 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:44:36,273 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta57\n",
-      "2020-10-14 20:44:36,275 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta57\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mneat-sweep-2\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/e2qx1gcw\u001b[0m\n",
+      "2020-11-05 10:34:35,885 - wandb.wandb_agent - INFO - Cleaning up finished run: e2qx1gcw\n",
+      "2020-11-05 10:34:36,189 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-05 10:34:36,189 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta42\n",
+      "2020-11-05 10:34:36,191 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/ta42\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.9 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "2020-11-05 10:34:41,209 - wandb.wandb_agent - INFO - Running runs: ['fpn63a60']\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/uz9lk4hk\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204438-uz9lk4hk\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mrestful-sweep-3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/z90hgj59\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/fpn63a60\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201105_103438-fpn63a60\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-05 10:34:41,879\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/1 GPUs, 0.0/558.2 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_844c5_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3824\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:44:41,292 - wandb.wandb_agent - INFO - Running runs: ['uz9lk4hk']\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204438-uz9lk4hk/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204438-uz9lk4hk/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 209.43434\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 209.43434\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3742\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708279\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/uz9lk4hk\u001b[0m\n",
-      "2020-10-14 20:44:46,515 - wandb.wandb_agent - INFO - Cleaning up finished run: uz9lk4hk\n",
-      "2020-10-14 20:44:46,834 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:44:46,834 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta58\n",
-      "2020-10-14 20:44:46,836 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta58\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/i1pzxngg\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204448-i1pzxngg\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "\u001b[2m\u001b[36m(pid=20861)\u001b[0m 2020-11-05 10:34:44,695\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=20861)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/torch/cuda/__init__.py:125: UserWarning: \n",
+      "\u001b[2m\u001b[36m(pid=20861)\u001b[0m GeForce RTX 2080 Ti with CUDA capability sm_75 is not compatible with the current PyTorch installation.\n",
+      "\u001b[2m\u001b[36m(pid=20861)\u001b[0m The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 compute_37.\n",
+      "\u001b[2m\u001b[36m(pid=20861)\u001b[0m If you want to use the GeForce RTX 2080 Ti GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/\n",
+      "\u001b[2m\u001b[36m(pid=20861)\u001b[0m \n",
+      "\u001b[2m\u001b[36m(pid=20861)\u001b[0m   warnings.warn(incompatible_device_warn.format(device_name, capability, \" \".join(arch_list), device_name))\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m *** SIGSEGV (@0x0) received by PID 20746 (TID 0x7f981cf5c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m *** SIGSEGV (@0x0) received by PID 20858 (TID 0x7f6af4550700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x7f6af4129390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x7f3bf3d2cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x7f3bf34577db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m *** SIGSEGV (@0x0) received by PID 20838 (TID 0x7f067f688700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x7f067f261390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x7ed77f124f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x7ed77e84f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m *** SIGSEGV (@0x0) received by PID 20737 (TID 0x7f1d64980700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x7f1d64559390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x7eee644f6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x7eee63c217db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m *** SIGSEGV (@0x0) received by PID 20802 (TID 0x7f08fb34f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x7f08faf28390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x7ed9faea6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x7ed9fa5d17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m *** SIGSEGV (@0x0) received by PID 20842 (TID 0x7ff9964e3700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x7ff9960bc390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x7fca9604df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x7fca957787db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m *** SIGSEGV (@0x0) received by PID 20762 (TID 0x7ff8a5010700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x7ff8a4be9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x7fc9a4b64f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x7fc9a428f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m *** SIGSEGV (@0x0) received by PID 20793 (TID 0x7f8aa9255700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x7f8aa8e2e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x7f5ba8dc9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x7f5ba84f47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x7f5ba84f78f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m *** SIGSEGV (@0x0) received by PID 20796 (TID 0x7f297a823700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x7f297a3fc390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x7efa7a34bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x7efa79a767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m *** SIGSEGV (@0x0) received by PID 20825 (TID 0x7fb4232f5700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x7fb422ece390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x7f8522e66f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x7f85225917db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m *** SIGSEGV (@0x0) received by PID 20866 (TID 0x7f5742ea0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x7f5742a79390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x7f28429fff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x7f284212a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m *** SIGSEGV (@0x0) received by PID 20811 (TID 0x7f970222a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x7f9701e03390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x7f6801d77f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x7f68014a27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m *** SIGSEGV (@0x0) received by PID 20830 (TID 0x7f64f639c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x7f64f5f75390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x7f35f5e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x7f35f554f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m *** SIGSEGV (@0x0) received by PID 20867 (TID 0x7f2094086700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x7f2093c5f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x7ef193af5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x7ef1932207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m *** SIGSEGV (@0x0) received by PID 20827 (TID 0x7f59d43d1700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x7f59d3faa390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x7f2ad3e0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m *** SIGSEGV (@0x0) received by PID 20752 (TID 0x7fb345489700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x7fb345062390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x7f8444fe3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x7f844470e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m *** SIGSEGV (@0x0) received by PID 20818 (TID 0x7f9c77ef2700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x7f9c77acb390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x7f6d77a63f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x7f6d7718e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m *** SIGSEGV (@0x0) received by PID 20831 (TID 0x7f9f565d7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x7f9f561b0390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x7f705613af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x7f70558657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m *** SIGSEGV (@0x0) received by PID 20815 (TID 0x7f39672ad700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x7f3966e86390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x7f0a66e26f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x7f0a665517db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m *** SIGSEGV (@0x0) received by PID 20747 (TID 0x7fe2587bc700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x7fe258395390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x7fb358333f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x7fb357a5e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m *** SIGSEGV (@0x0) received by PID 20816 (TID 0x7f4bcfdfe700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x7f4bcf9d7390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x7f1ccf751f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x7f1ccee7c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m *** SIGSEGV (@0x0) received by PID 20868 (TID 0x7f3db99df700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x7f3db95b8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x7f0eb94e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x7f0eb8c0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x7f0eb8c118f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m *** SIGSEGV (@0x0) received by PID 20837 (TID 0x7f1b21eaf700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x7f1b21a88390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x7eec21a0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x7eec211357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x7eec211388f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m *** SIGSEGV (@0x0) received by PID 20753 (TID 0x7f024a554700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x7f024a12d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x7ed34a0cdf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x7ed3497f87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m *** SIGSEGV (@0x0) received by PID 20754 (TID 0x7fa1ad4d2700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x7fa1ad0ab390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x7f72ad06cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x7f72ac7977db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m *** SIGSEGV (@0x0) received by PID 20852 (TID 0x7f76f49a3700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x7f76f457c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x7f47f44f6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x7f47f3c217db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m *** SIGSEGV (@0x0) received by PID 20736 (TID 0x7fdf0e544700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x7fdf0e11d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x7fb00e0cdf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x7fb00d7f87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m *** SIGSEGV (@0x0) received by PID 20734 (TID 0x7f86a076d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x7f86a0346390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x7f57a02d7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x7f579fa027db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m *** SIGSEGV (@0x0) received by PID 20735 (TID 0x7f58fe417700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x7f58fdff0390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x7f29fde24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x7f29fd54f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m *** SIGSEGV (@0x0) received by PID 20846 (TID 0x7f8eff103700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x7f8efecdc390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x7f5ffec6af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x7f5ffe3957db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x7f5ffe3988f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m *** SIGSEGV (@0x0) received by PID 20844 (TID 0x7f7ad0897700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x7f7ad0470390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x7f4bd0333f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x7f4bcfa5e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m *** SIGSEGV (@0x0) received by PID 20789 (TID 0x7f4e72e86700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x7f4e72a5f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x7f1f7270af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x7f1f71e357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m *** SIGSEGV (@0x0) received by PID 20766 (TID 0x7f082c098700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x7f082bc71390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x7ed92baf5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x7ed92b2207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m *** SIGSEGV (@0x0) received by PID 20749 (TID 0x7fb62085e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x7fb620437390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x7f8720333f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x7f871fa5e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m *** SIGSEGV (@0x0) received by PID 20745 (TID 0x7f324b1e0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x7f324adb9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x7f034acfcf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x7f034a4277db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m *** SIGSEGV (@0x0) received by PID 20739 (TID 0x7fc2048bd700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x7fc204496390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x7f9304333f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x7f9303a5e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m *** SIGSEGV (@0x0) received by PID 20828 (TID 0x7fa0ef597700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x7fa0ef170390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x7f71eef13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x7f71ee63e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m *** SIGSEGV (@0x0) received by PID 20748 (TID 0x7f240b944700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x7f240b51d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x7ef50b48ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x7ef50abba7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x7ef50abbd8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x7ef50abbdad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x7f981cb35390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x7f691cacdf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x7f691c1f87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x7f691c1fb8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x7f691c1fbad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m *** SIGSEGV (@0x0) received by PID 20743 (TID 0x7f4ed4ce5700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x7f3bf345a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x7f3bf345aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x7f3bf345ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x7ed77e8528f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x7ed77e852ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x7eee63c248f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x7eee63c24ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x7ed9fa5d48f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x7ed9fa5d4ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x7ed9fa5d4d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x7fca9577b8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x7fca9577bad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x7fca9577bd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x7fc9a42928f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x7fc9a4292ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x7f5ba84f7ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x7f5ba84f7d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x7f5ba8ddab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x7f5ba8dfdc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x7efa79a798f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x7efa79a79ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x7f85225948f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x7f8522594ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x7f284212d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x7f284212dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x7f284212dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x7f2842a10b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x7f2842a33c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x7f68014a58f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x7f68014a5ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m *** SIGSEGV (@0x0) received by PID 20829 (TID 0x7f816fa80700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x7f35f55528f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x7f35f5552ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x7f35f5552d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x7f35f5e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x7f35f5e58c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x7ef1932238f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x7ef193223ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x7ef193223d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x7ef193b06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x7f2ad35367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x7f2ad35398f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x7f2ad3539ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x7f84447118f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x7f8444711ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x7f6d771918f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x7f6d77191ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x7f70558688f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x7f7055868ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x7f7055868d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x7f705614bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x7f705616ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x7f0a665548f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x7f0a66554ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x7fb357a618f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x7fb357a61ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x7fb357a61d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x7f1ccee7f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x7f1ccee7fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x7f0eb8c11ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x7f0eb8c11d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x7f0eb94f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x7f0eb9517c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x7f0eb89b9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x7f0eb89b7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x7f0eb89b95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x7eec21138ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x7eec21138d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x7eec21a1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x7eec21a3ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x7eec20ee0a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x7eec20ede388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x7ed3497fb8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x7ed3497fbad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x7ed3497fbd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x7ed34a0deb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x7ed34a101c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x7ed3495a3a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x7ed3495a1388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x7f72ac79a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x7f72ac79aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x7f72ac79ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x7f72ad07db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x7f72ad0a0c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x7f72ac542a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x7f72ac540388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x7f47f3c248f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x7f47f3c24ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x7f47f3c24d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x7f47f4507b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x7f47f452ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x7f47f39cca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x7f47f39ca388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x7fb00d7fb8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x7fb00d7fbad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x7fb00d7fbd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x7fb00e0deb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x7fb00e101c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x7fb00d5a3a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x7fb00d5a1388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x7f579fa058f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x7f579fa05ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x7f579fa05d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x7f57a02e8b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x7f57a030bc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x7f579f7ada93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x7f579f7ab388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x7f579f7ad5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x7f29fd5528f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x7f29fd552ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x7f29fd552d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x7f29fde35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x7f29fde58c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x7f29fd2faa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x7f29fd2f8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x7f5ffe398ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x7f5ffe398d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x7f5ffec7bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x7f5ffec9ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x7f5ffe140a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x7f5ffe13e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x7f5ffe1405a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x7f4bcfa618f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x7f4bcfa61ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x7f4bcfa61d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x7f4bd0344b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x7f4bd0367c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x7f4bcf809a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x7f4bcf807388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x7f1f71e388f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x7f1f71e38ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x7f1f71e38d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x7f1f7271bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x7f1f7273ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x7f1f71be0a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x7f1f71bde388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x7ed92b2238f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x7ed92b223ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x7ed92b223d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x7ed92bb06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x7ed92bb29c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x7ed92afcba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x7ed92afc9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x7f871fa618f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x7f871fa61ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x7f871fa61d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x7f8720344b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x7f8720367c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x7f871f809a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x7f871f807388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x7f871f8095a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x7f034a42a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x7f034a42aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x7f034a42ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x7f034ad0db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x7f034ad30c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x7f034a1d2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x7f034a1d0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x7f9303a618f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x7f9303a61ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x7f9303a61d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x7f9304344b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x7f9304367c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x7f9303809a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x7f9303807388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x7f71ee6418f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x7f71ee641ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x7f71ee641d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x7f71eef24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x7f71eef47c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x7f71ee3e9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x7f71ee3e7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x7f71ee3e95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m *** SIGSEGV (@0x0) received by PID 20826 (TID 0x7fa0c59dc700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x7fa0c55b5390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x7f71c54e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x7f71c4c0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x7f71c4c118f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m *** SIGSEGV (@0x0) received by PID 20853 (TID 0x7ff241d6e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x7ff241947390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x7fc3417f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x7fc340f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m *** SIGSEGV (@0x0) received by PID 20767 (TID 0x7fb1f97fe700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x7fb1f93d7390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x7f82f9377f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x7f82f8aa27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m *** SIGSEGV (@0x0) received by PID 20740 (TID 0x7fe3bc87a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x7fe3bc453390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x7fb4bc333f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x7fb4bba5e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x7fb4bba618f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x7fb4bba61ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m *** SIGSEGV (@0x0) received by PID 20860 (TID 0x7fb00f851700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x7fb00f42a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x7f810f229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x7f810e9547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x7f810e9578f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m *** SIGSEGV (@0x0) received by PID 20758 (TID 0x7f71615e2700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x7f71611bb390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x7f42610b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x7f42607e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m *** SIGSEGV (@0x0) received by PID 20835 (TID 0x7f4f3e5d0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x7f4f3e1a9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x7f203e13af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x7f203d8657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m *** SIGSEGV (@0x0) received by PID 20768 (TID 0x7ff393118700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x7ff392cf1390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x7fc492c8ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x7fc4923ba7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x7fc4923bd8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m *** SIGSEGV (@0x0) received by PID 20819 (TID 0x7f093a80a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x7f093a3e3390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x7eda3a34bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x7eda39a767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m *** SIGSEGV (@0x0) received by PID 20864 (TID 0x7fc0d94f5700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x7fc0d90ce390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x7ef50abbdd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x7ef50b4a0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x7ef50b4c3c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x7ef50a965a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x7ef50a963388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x7ef50a9655a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m *** SIGSEGV (@0x0) received by PID 20798 (TID 0x7ffaaa573700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x7ffaaa14c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x7fcbaa0faf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x7fcba98257db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x7f691c1fbd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x7f691cadeb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x7f691cb01c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x7f691bfa3a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x7f691bfa1388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m *** SIGSEGV (@0x0) received by PID 20744 (TID 0x7f9761a63700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x7f976163c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x7f68615e4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x7f6860d0f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m *** SIGSEGV (@0x0) received by PID 20794 (TID 0x7f9cb97ce700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x7f9cb93a7390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x7f6db933af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x7f6db8a657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m *** SIGSEGV (@0x0) received by PID 20810 (TID 0x7fe0f2def700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x7fe0f29c8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x7fb1f295ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x7fb1f208a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x7fb1f208d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m *** SIGSEGV (@0x0) received by PID 20799 (TID 0x7fec2bede700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x7fec2bab7390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x7fbd2b9c5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x7fbd2b0f07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x7fbd2b0f38f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m *** SIGSEGV (@0x0) received by PID 20832 (TID 0x7ff4921b6700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x7ff491d8f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x7fc591d37f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x7fc5914627db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m *** SIGSEGV (@0x0) received by PID 20795 (TID 0x7fead4881700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x7fead445a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x7fbbd4333f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x7fbbd3a5e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x7fbbd3a618f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m *** SIGSEGV (@0x0) received by PID 20755 (TID 0x7fab0793f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x7fab07518390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x7f7c06c15f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x7f7c063407db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m *** SIGSEGV (@0x0) received by PID 20750 (TID 0x7fa6e2232700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x7fa6e1e0b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x7f77e1da4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m *** SIGSEGV (@0x0) received by PID 20813 (TID 0x7fa08c813700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x7fa08c3ec390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x7f718c136f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x7f718b8617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x7f718b8648f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x7f718b864ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m *** SIGSEGV (@0x0) received by PID 20760 (TID 0x7f8a0d1b6700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x7f8a0cd8f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x7f5b0cc74f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x7f5b0c39f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x7f5b0c3a28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x7f5b0c3a2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x7f4ed48be390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x7f1fd4864f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x7f1fd3f8f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x7f1fd3f928f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x7f1fd3f92ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m *** SIGSEGV (@0x0) received by PID 20805 (TID 0x7ff5c3275700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x7ff5c2e4e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x7fc6c2e03f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x7fc6c252e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x7fc6c25318f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x7fc6c2531ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m *** SIGSEGV (@0x0) received by PID 20741 (TID 0x7f8e9d1f3700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m *** SIGSEGV (@0x0) received by PID 20812 (TID 0x7f10f8b0f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x7f10f86e8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x7ee1f869ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x7ee1f7dca7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x7ee1f7dcd8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x7ee1f7dcdad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m *** SIGSEGV (@0x0) received by PID 20840 (TID 0x7f06d03ef700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x7f06cffc8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x7ed7cfe0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x7ed7cf5367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x7ed7cf5398f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m *** SIGSEGV (@0x0) received by PID 20787 (TID 0x7f2e06612700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x7f2e061eb390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x7eff05f8df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m *** SIGSEGV (@0x0) received by PID 20765 (TID 0x7fdb79f5e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x7fdb79b37390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x7fac79a0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x7fac791357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x7fac791388f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m *** SIGSEGV (@0x0) received by PID 20738 (TID 0x7fee1052e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x7fee10107390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x7fbf1001cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x7fbf0f7477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x7fbf0f74a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x7fbf0f74aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x7fbf0f74ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x7fbf1002db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m *** SIGSEGV (@0x0) received by PID 20808 (TID 0x7f963736a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x7f9636f43390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x7f6736e62f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x7f673658d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x7f67365908f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x7f6736590ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m *** SIGSEGV (@0x0) received by PID 20757 (TID 0x7f911301a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x7f9112bf3390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x7f6212b92f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x7f62122bd7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x7f62122c08f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x7f62122c0ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x7f3bf3d3db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x7f3bf3d60c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x7f3bf3202a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x7f3bf3200388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x7f3bf32025a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x7f3bf38ed4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x7f3bf5dc08de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x7ed77e852d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x7ed77f135b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x7ed77f158c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x7ed77e5faa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x7ed77e5f8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x7ed77e5fa5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x7ed77ece54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x7eee63c24d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x7eee64507b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x7eee6452ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x7eee639cca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x7eee639ca388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x7eee639cc5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x7ed9faeb7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x7ed9faedac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x7ed9fa37ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x7ed9fa37a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x7ed9fa37c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x7ed9faa674f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x7ed9fcf3a8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x7fca9605eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x7fca96081c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x7fca95523a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x7fca95521388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x7fca955235a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x7fca95c0e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x7fca980e18de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x7fc9a4292d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x7fc9a4b75b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x7fc9a4b98c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x7fc9a403aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x7fc9a4038388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x7fc9a403a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x7fc9a47254f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x7f5ba829fa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x7f5ba829d388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x7f5ba829f5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x7f5ba898a4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x7f5baae5d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x7efa79a79d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x7efa7a35cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x7efa7a37fc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x7efa79821a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x7efa7981f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x7efa798215a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x7efa79f0c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x7f8522594d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x7f8522e77b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x7f8522e9ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x7f852233ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x7f852233a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x7f852233c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x7f8522a274f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x7f2841ed5a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x7f2841ed3388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x7f2841ed55a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x7f28425c04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x7f2844a938de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x7f68014a5d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x7f6801d88b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x7f6801dabc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x7f680124da93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x7f680124b388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x7f680124d5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x7f68019384f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x7f816f659390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x7f526f5f2f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x7f526ed1d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x7f526ed208f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x7f526ed20ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x7f526ed20d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x7f526f603b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x7f35f52faa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x7f35f52f8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x7f35f52fa5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x7f35f59e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x7f35f7eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x7ef193b29c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x7ef192fcba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x7ef192fc9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x7ef192fcb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x7ef1936b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x7ef195b898de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x7f2ad3539d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x7f2ad3e1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x7f2ad3e3fc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x7f2ad32e1a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x7f2ad32df388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x7f2ad32e15a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x7f8444711d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x7f8444ff4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x7f8445017c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x7f84444b9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x7f84444b7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x7f84444b95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x7f8444ba44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x7f6d77191d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x7f6d77a74b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x7f6d77a97c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x7f6d76f39a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x7f6d76f37388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x7f6d76f395a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x7f6d776244f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m *** SIGSEGV (@0x0) received by PID 20851 (TID 0x7f211f4cc700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m *** SIGSEGV (@0x0) received by PID 20871 (TID 0x7fb289191700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x7fb288d6a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x7f8388c74f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x7f838839f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x7f83883a28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x7f83883a2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m *** SIGSEGV (@0x0) received by PID 20824 (TID 0x7f398cedd700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x7f398cab6390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x7f0a8c95df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x7f0a8c0887db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x7f0a8c08b8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m *** SIGSEGV (@0x0) received by PID 20834 (TID 0x7f44fddbb700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x7f44fd994390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x7f15fd7f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x7f15fcf247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x7f15fcf278f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m *** SIGSEGV (@0x0) received by PID 20817 (TID 0x7f2c4410a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m *** SIGSEGV (@0x0) received by PID 20850 (TID 0x7f227634f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x7f2275f28390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x7ef375d1df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x7ef3754487db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x7ef37544b8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x7f7055610a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x7f705560e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x7f70556105a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x7f7055cfb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x7f70581ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m *** SIGSEGV (@0x0) received by PID 20764 (TID 0x7f4266fa1700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x7f4266b7a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x7f13669ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x7f13660f77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x7f13660fa8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m *** Aborted at 1604572490 (unix time) try \"date -d @1604572490\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m *** SIGSEGV (@0x0) received by PID 20756 (TID 0x7f0b3996a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x7f0a66554d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x7f0a66e37b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x7f0a66e5ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x7f0a662fca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x7f0a662fa388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x7f0a662fc5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x7f0a669e74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x7fb358344b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x7fb358367c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x7fb357809a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x7fb357807388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x7fb3578095a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x7fb357ef44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x7fb35a3c78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x7f1ccee7fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x7f1ccf762b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x7f1ccf785c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x7f1ccec27a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x7f1ccec25388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x7f1ccec275a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x7f0eb90a44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x7f0ebb5778de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x7f0eb90a44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x7f0ebf14f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x5564ce461fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x5564ce3bcb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x5564ce447baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x5564ce448a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x5564ce3bcbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x5564ce447baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x5564ce448643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x5564ce3bd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x7eec20ee05a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x7eec215cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x7eec23a9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x7ed3495a35a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x7ed349c8e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x7ed34c1618de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x7f72ac5425a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x7f72acc2d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x7f47f39cc5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x7f47f40b74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x7f47f658a8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x7fb00d5a35a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x7fb00dc8e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x7f579fe984f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x7f57a236b8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x7f579fe984f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x7f57a5f4379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x55c583df7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x55c583d52b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x7f29fd2fa5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x7f29fd9e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x7f5ffe82b4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x7f6000cfe8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x7f4bcf8095a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x7f4bcfef44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x7f4bd23c78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x7f1f71be05a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x7f1f722cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x7f1f7479e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x7ed92afcb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x7ed92b6b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x7f871fef44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x7f87223c78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x7f871fef44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x7f8725f9f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x561ac6ac5fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x561ac6a20b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x561ac6aabbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x561ac6aaca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x561ac6a20bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x561ac6aabbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x561ac6aac643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x561ac6a21689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x561ac6aabbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x561ac6aac643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x561ac6a21689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x561ac6aabbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x561ac6aac643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x561ac6a21689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x7f034a1d25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x7f034a8bd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x7f034cd908de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x7f93038095a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x7f9303ef44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x7f71eead44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x7f71f0fa78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x7f71eead44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x7f71f4b7f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x55f7494f4fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x55f74944fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x7f71c4c11ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x7f71c4c11d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x7f71c54f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x7f71c5517c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x7fc340f278f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x7fc340f27ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x7f82f8aa58f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x7f82f8aa5ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x7fb4bba61d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x7fb4bc344b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x7fb4bc367c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x7f810e957ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x7f810e957d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x7f810f23ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x7f810f25dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x7f42607e38f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x7f42607e3ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x7f203d8688f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x7f203d868ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x7f203d868d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x7fc4923bdad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x7fc4923bdd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x7fc492ca0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x7fc492cc3c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x7fc492165a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x7eda39a798f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x7eda39a79ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x7eda39a79d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x7f91d8f4ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x7f91d867a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x7f91d867d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x7f91d867dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m *** SIGSEGV (@0x0) received by PID 20809 (TID 0x7fd3e3ea3700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x7fd3e3a7c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x7fa4e3751f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x7fa4e2e7c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x7fa4e2e7f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x7ef50b0504f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x7ef50d5238de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x7ef50b0504f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x7ef5110fb79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x55ca0b38efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x55ca0b2e9b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x55ca0b374baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x55ca0b375a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x55ca0b2e9bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x55ca0b374baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x55ca0b375643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x55ca0b2ea689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x55ca0b374baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x55ca0b375643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x55ca0b2ea689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x55ca0b374baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x55ca0b375643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x55ca0b2ea689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x55ca0b374baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x55ca0b375643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20748)\u001b[0m     @     0x55ca0b2ea689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x7fcba98288f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x7fcba9828ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x7fcba9828d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x7fcbaa10bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x7fcbaa12ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x7f691bfa35a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x7f691c68e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x7f691eb618de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x7f691c68e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x7f692273979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x5558bdeb8fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x5558bde13b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x7f6860d128f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x7f6860d12ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x7f6860d12d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x7f68615f5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x7f6db8a688f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x7f6db8a68ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x7f6db8a68d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x7f6db934bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x7f6db936ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x7fb1f208dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x7fb1f208dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x7fb1f2970b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x7fb1f2993c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x7fb1f1e35a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x7fbd2b0f3ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x7fbd2b0f3d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x7fbd2b9d6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x7fbd2b9f9c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x7fbd2ae9ba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x7fbd2ae99388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x7fc5914658f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x7fc591465ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x7fc591465d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x7fc591d48b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x7fc591d6bc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x7fbbd3a61ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x7fbbd3a61d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x7fbbd4344b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x7fbbd4367c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x7fbbd3809a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x7f7c063438f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x7f7c06343ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x7f7c06343d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x7f7c06c26b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x7f7c06c49c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x7f77e14cf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x7f77e14d28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x7f77e14d2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x7f77e14d2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x7f718b864d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x7f718c147b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x7f718c16ac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x7f718b60ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x7f5b0c3a2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x7f5b0cc85b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x7f5b0cca8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x7f5b0c14aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x7f5b0c148388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x7f1fd3f92d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x7f1fd4875b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x7fc6c2531d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x7fc6c2e14b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x7fc6c2e37c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x7fc6c22d9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x7fc6c22d7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x7f8e9cdcc390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x7f5f9cc74f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x7f5f9c39f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x7ee1f7dcdd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x7ee1f86b0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x7ee1f86d3c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x7ed7cf539ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x7ed7cf539d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x7ed7cfe1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x7ed7cfe3fc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x7eff056b87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x7eff056bb8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x7fac79138ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x7fac79138d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x7fac79a1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x7fbf10050c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x7fbf0f4f2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x7fbf0f4f0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x7fbf0f4f25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x7f6736590d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x7f6736e73b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x7f6736e96c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x7f6736338a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x7f6736336388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x7f62122c0d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x7f6212ba3b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x7f6212bc6c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x7f6212068a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x7f6212066388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x7f3bf38ed4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x7f3bf999879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x563ac5263fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x563ac51beb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x563ac5249baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x563ac524aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x563ac51bebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x563ac5249baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x563ac524a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x563ac51bf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x563ac5249baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x563ac524a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x563ac51bf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x563ac5249baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x563ac524a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x563ac51bf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x563ac5249baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x563ac524a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20858)\u001b[0m     @     0x563ac51bf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x7ed7811b88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x7ed77ece54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x7ed784d9079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x55b62dd5ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x55b62dcbab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x55b62dd45baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x55b62dd46a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x55b62dcbabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x55b62dd45baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x55b62dd46643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x55b62dcbb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x55b62dd45baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x55b62dd46643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x55b62dcbb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x55b62dd45baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x55b62dd46643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x55b62dcbb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x55b62dd45baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x55b62dd46643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20838)\u001b[0m     @     0x55b62dcbb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x7eee640b74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x7eee6658a8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x7eee640b74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x7eee6a16279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x55b2b188efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x55b2b17e9b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x55b2b1874baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x55b2b1875a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x55b2b17e9bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x55b2b1874baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x55b2b1875643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x55b2b17ea689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x55b2b1874baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x55b2b1875643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x7ed9faa674f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x7eda00b1279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x556426ba7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x556426b02b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x556426b8dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x556426b8ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x556426b02bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x556426b8dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x556426b8e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x556426b03689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x556426b8dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x556426b8e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x556426b03689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x556426b8dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x556426b8e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x556426b03689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x556426b8dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x556426b8e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20802)\u001b[0m     @     0x556426b03689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x7fca95c0e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x7fca9bcb979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x557e37eaafd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x557e37e05b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x557e37e90baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x557e37e91a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x557e37e05bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x557e37e90baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x557e37e91643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x557e37e06689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x557e37e90baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x557e37e91643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x557e37e06689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x557e37e90baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x557e37e91643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x557e37e06689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x557e37e90baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x557e37e91643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20842)\u001b[0m     @     0x557e37e06689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x7fc9a6bf88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x7fc9a47254f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x7fc9aa7d079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x5624793c4fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x56247931fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x5624793aabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x5624793aba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x56247931fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x5624793aabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x5624793ab643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x562479320689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x5624793aabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x5624793ab643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x562479320689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x5624793aabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x5624793ab643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x562479320689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x5624793aabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x5624793ab643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20762)\u001b[0m     @     0x562479320689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x7f5ba898a4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x7f5baea3579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x5595a53cbfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x5595a5326b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x5595a53b1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x5595a53b2a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x5595a5326bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x5595a53b1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x5595a53b2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x5595a5327689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x5595a53b1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x5595a53b2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x5595a5327689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x5595a53b1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x5595a53b2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x5595a5327689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x5595a53b1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x5595a53b2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20793)\u001b[0m     @     0x5595a5327689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x7efa7c3df8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x7efa79f0c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x7efa7ffb779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x55b7fd81efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x55b7fd779b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x55b7fd804baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x55b7fd805a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x55b7fd779bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x55b7fd804baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x55b7fd805643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x55b7fd77a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x55b7fd804baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x55b7fd805643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x55b7fd77a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x55b7fd804baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x55b7fd805643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x55b7fd77a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x55b7fd804baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x55b7fd805643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20796)\u001b[0m     @     0x55b7fd77a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x7f8524efa8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x7f8522a274f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x7f8528ad279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x558318842fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x55831879db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x558318828baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x558318829a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x55831879dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x558318828baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x558318829643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x55831879e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x558318828baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x558318829643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x55831879e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x558318828baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x558318829643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x55831879e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x558318828baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x558318829643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20825)\u001b[0m     @     0x55831879e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x7f28425c04f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x7f284866b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x55c3fffe9fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x55c3fff44b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x55c3fffcfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x55c3fffd0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x55c3fff44bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x55c3fffcfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x55c3fffd0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x55c3fff45689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x55c3fffcfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x55c3fffd0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x55c3fff45689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x55c3fffcfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x55c3fffd0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x55c3fff45689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x55c3fffcfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x55c3fffd0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20866)\u001b[0m     @     0x55c3fff45689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x7f6803e0b8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x7f68019384f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x7f68079e379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x55eb927d7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x55eb92732b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x55eb927bdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x55eb927bea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x55eb92732bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x55eb927bdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x55eb927be643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x55eb92733689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x55eb927bdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x55eb927be643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x55eb92733689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x55eb927bdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x55eb927be643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x55eb92733689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x55eb927bdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x55eb927be643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20811)\u001b[0m     @     0x55eb92733689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x7f526f626c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x7f526eac8a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x7f526eac6388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x7f526eac85a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x7f35f59e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x7f35fba9079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x55d184c6ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x55d184bcab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x55d184c55baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x55d184c56a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x55d184bcabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x55d184c55baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x55d184c56643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x55d184bcb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x55d184c55baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x55d184c56643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x55d184bcb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x55d184c55baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x55d184c56643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x55d184bcb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x55d184c55baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x55d184c56643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20830)\u001b[0m     @     0x55d184bcb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x7ef1936b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x7ef19976179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x560291e25fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x560291d80b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x560291e0bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x560291e0ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x560291d80bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x560291e0bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x560291e0c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x560291d81689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x560291e0bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x560291e0c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x560291d81689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x560291e0bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x560291e0c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x560291d81689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x560291e0bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x560291e0c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20867)\u001b[0m     @     0x560291d81689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x7f2ad39cc4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x7f2ad5e9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x7f2ad39cc4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x7f2ad9a7779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x55bfc0b24fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x55bfc0a7fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x55bfc0b0abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x55bfc0b0ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x55bfc0a7fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x55bfc0b0abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x55bfc0b0b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x55bfc0a80689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x55bfc0b0abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x55bfc0b0b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x55bfc0a80689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x55bfc0b0abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x55bfc0b0b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x55bfc0a80689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x55bfc0b0abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x55bfc0b0b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20827)\u001b[0m     @     0x55bfc0a80689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x7f84470778de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x7f8444ba44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x7f844ac4f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x5607548eefd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x560754849b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x5607548d4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x5607548d5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x560754849bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x5607548d4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x5607548d5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x56075484a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x5607548d4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x5607548d5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x56075484a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x5607548d4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x5607548d5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x56075484a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x5607548d4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x5607548d5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20752)\u001b[0m     @     0x56075484a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x7f6d79af78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x7f6d776244f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x7f6d7d6cf79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x55dd84a93fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x55dd849eeb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x55dd84a79baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x55dd84a7aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x55dd849eebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x55dd84a79baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x55dd84a7a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x55dd849ef689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x55dd84a79baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x55dd84a7a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x55dd849ef689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x55dd84a79baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x55dd84a7a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x55dd849ef689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x55dd84a79baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x55dd84a7a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20818)\u001b[0m     @     0x55dd849ef689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x7f211f0a5390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x7ef21f052f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x7ef21e77d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x7f83883a2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x7f8388c85b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x7f8388ca8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x7f838814aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x7f8388148388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x7f838814a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x7f0a8c08bad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x7f0a8c08bd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x7f0a8c96eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x7f0a8c991c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x7f15fcf27ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x7f15fcf27d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x7f15fd80ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x7f15fd82dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x7f2c43ce3390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x7efd43c7bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x7efd433a67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x7ef37544bad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x7ef37544bd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x7ef375d2eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x7ef375d51c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x7ef3751f3a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x7ef3751f1388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x7f7055cfb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x7f705bda679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x562c642c1fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x562c6421cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x562c642a7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x562c642a8a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x562c6421cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x562c642a7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x562c642a8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x562c6421d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x562c642a7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x562c642a8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x562c6421d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x562c642a7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x562c642a8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x562c6421d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x562c642a7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x562c642a8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20831)\u001b[0m     @     0x562c6421d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x7f13660faad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x7f13660fad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x7f13669ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x7f0b39543390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x7edc394e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x7f0a68eba8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x7f0a669e74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x7f0a6ca9279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x55b074c84fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x55b074bdfb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x55b074c6abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x55b074c6ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x55b074bdfbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x55b074c6abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x55b074c6b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x55b074be0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x55b074c6abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x55b074c6b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x55b074be0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x55b074c6abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x55b074c6b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x55b074be0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x55b074c6abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x55b074c6b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20815)\u001b[0m     @     0x55b074be0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x7fb357ef44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x7fb35df9f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x55decaa52fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x55deca9adb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x55decaa38baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x55decaa39a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x55deca9adbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x55decaa38baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x55decaa39643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x55deca9ae689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x55decaa38baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x55decaa39643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x55deca9ae689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x55decaa38baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x55decaa39643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x55deca9ae689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x55decaa38baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x55decaa39643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20747)\u001b[0m     @     0x55deca9ae689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x7f1ccf3124f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x7f1cd17e58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x7f1ccf3124f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x7f1cd53bd79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x564d5e102fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x564d5e05db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x564d5e0e8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x564d5e0e9a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x564d5e05dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x564d5e0e8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x564d5e0e9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x564d5e05e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x564d5e0e8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x564d5e0e9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x564d5e05e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x564d5e0e8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x564d5e0e9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x564d5e05e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x564d5e0e8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x564d5e0e9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20816)\u001b[0m     @     0x564d5e05e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x5564ce447baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x5564ce448643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x5564ce3bd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x5564ce447baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x5564ce448643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x5564ce3bd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x5564ce447baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x5564ce448643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20868)\u001b[0m     @     0x5564ce3bd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x7eec215cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x7eec2767679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x55c76d6b5fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x55c76d610b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x55c76d69bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x55c76d69ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x55c76d610bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x55c76d69bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x55c76d69c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x55c76d611689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x55c76d69bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x55c76d69c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x55c76d611689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x55c76d69bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x55c76d69c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x55c76d611689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x55c76d69bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x55c76d69c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20837)\u001b[0m     @     0x55c76d611689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x7ed349c8e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x7ed34fd3979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x556294987fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x5562948e2b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x55629496dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x55629496ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x5562948e2bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x55629496dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x55629496e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x5562948e3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x55629496dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x55629496e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x5562948e3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x55629496dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x55629496e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x5562948e3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x55629496dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x55629496e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20753)\u001b[0m     @     0x5562948e3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x7f72af1008de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x7f72acc2d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x7f72b2cd879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x5564150c7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x556415022b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x5564150adbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x5564150aea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x556415022bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x5564150adbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x5564150ae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x556415023689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x5564150adbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x5564150ae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x556415023689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x5564150adbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x5564150ae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x556415023689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x5564150adbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x5564150ae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20754)\u001b[0m     @     0x556415023689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x7f47f40b74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x7f47fa16279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x563b80f86fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x563b80ee1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x563b80f6cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x563b80f6da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x563b80ee1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x563b80f6cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x563b80f6d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x563b80ee2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x563b80f6cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x563b80f6d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x563b80ee2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x563b80f6cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x563b80f6d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x563b80ee2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x563b80f6cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x563b80f6d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20852)\u001b[0m     @     0x563b80ee2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x7fb0101618de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x7fb00dc8e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x7fb013d3979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x5642875fefd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x564287559b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x5642875e4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x5642875e5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x564287559bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x5642875e4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x5642875e5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x56428755a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x5642875e4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x5642875e5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x56428755a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x5642875e4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x5642875e5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x56428755a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x5642875e4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x5642875e5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20736)\u001b[0m     @     0x56428755a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x55c583dddbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x55c583ddea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x55c583d52bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x55c583dddbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x55c583dde643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x55c583d53689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x55c583dddbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x55c583dde643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x55c583d53689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x55c583dddbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x55c583dde643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x55c583d53689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x55c583dddbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x55c583dde643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20734)\u001b[0m     @     0x55c583d53689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x7f29ffeb88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x7f29fd9e54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x7f2a03a9079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x55f16a8a7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x55f16a802b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x55f16a88dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x55f16a88ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x55f16a802bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x55f16a88dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x55f16a88e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x55f16a803689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x55f16a88dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x55f16a88e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x55f16a803689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x55f16a88dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x55f16a88e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x55f16a803689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x55f16a88dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x55f16a88e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20735)\u001b[0m     @     0x55f16a803689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x7f5ffe82b4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x7f60048d679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x5558fd3d2fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x5558fd32db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x5558fd3b8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x5558fd3b9a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x5558fd32dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x5558fd3b8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x5558fd3b9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x5558fd32e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x5558fd3b8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x5558fd3b9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x5558fd32e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x5558fd3b8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x5558fd3b9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x5558fd32e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x5558fd3b8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x5558fd3b9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20846)\u001b[0m     @     0x5558fd32e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x7f4bcfef44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x7f4bd5f9f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x5569b4459fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x5569b43b4b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x5569b443fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x5569b4440a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x5569b43b4bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x5569b443fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x5569b4440643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x5569b43b5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x5569b443fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x5569b4440643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x5569b43b5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x5569b443fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x5569b4440643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x5569b43b5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x5569b443fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x5569b4440643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20844)\u001b[0m     @     0x5569b43b5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x7f1f722cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x7f1f7837679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x55a8557c7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x55a855722b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x55a8557adbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x55a8557aea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x55a855722bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x55a8557adbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x55a8557ae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x55a855723689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x55a8557adbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x55a8557ae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x55a855723689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x55a8557adbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x55a8557ae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x55a855723689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x55a8557adbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x55a8557ae643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20789)\u001b[0m     @     0x55a855723689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x7ed92db898de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x7ed92b6b64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x7ed93176179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x55f421f28fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x55f421e83b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x55f421f0ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x55f421f0fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x55f421e83bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x55f421f0ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x55f421f0f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x55f421e84689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x55f421f0ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x55f421f0f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x55f421e84689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x55f421f0ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x55f421f0f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x55f421e84689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x55f421f0ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x55f421f0f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20766)\u001b[0m     @     0x55f421e84689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x561ac6aabbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x561ac6aac643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20749)\u001b[0m     @     0x561ac6a21689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x7f034a8bd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x7f035096879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x5594c4c05fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x5594c4b60b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x5594c4bebbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x5594c4beca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x5594c4b60bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x5594c4bebbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x5594c4bec643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x5594c4b61689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x5594c4bebbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x5594c4bec643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x5594c4b61689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x5594c4bebbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x5594c4bec643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x5594c4b61689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x5594c4bebbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x5594c4bec643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20745)\u001b[0m     @     0x5594c4b61689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x7f93063c78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x7f9303ef44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x7f9309f9f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x55739b7a8fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x55739b703b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x55739b78ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x55739b78fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x55739b703bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x55739b78ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x55739b78f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x55739b704689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x55739b78ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x55739b78f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x55739b704689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x55739b78ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x55739b78f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x55739b704689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x55739b78ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x55739b78f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20739)\u001b[0m     @     0x55739b704689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x55f7494dabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x55f7494dba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x55f74944fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x55f7494dabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x55f7494db643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x55f749450689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x55f7494dabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x55f7494db643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x55f749450689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x55f7494dabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x55f7494db643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x55f749450689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x55f7494dabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x55f7494db643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20828)\u001b[0m     @     0x55f749450689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x7f71c49b9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x7f71c49b7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x7f71c49b95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x7fc340f27d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x7fc34180ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x7fc34182dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x7fc340ccfa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x7fc340ccd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x7f82f8aa5d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x7f82f9388b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x7f82f93abc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x7f82f884da93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x7f82f884b388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x7fb4bb809a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x7fb4bb807388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x7fb4bb8095a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x7fb4bbef44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x7fb4be3c78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x7f810e6ffa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x7f810e6fd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x7f810e6ff5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x7f42607e3d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x7f42610c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x7f42610e9c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x7f426058ba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x7f4260589388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x7f203e14bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x7f203e16ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x7f203d610a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x7f203d60e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x7fc492163388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x7fc4921655a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x7fc4928504f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x7eda3a35cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x7eda3a37fc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x7eda39821a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x7eda3981f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x7f91d867dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x7f91d8f60b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x7f91d8f83c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x7f91d8425a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x7f91d8423388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x7fa4e2e7fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x7fa4e2e7fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x7fa4e3762b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x7fa4e3785c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x7fcba95d0a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x7fcba95ce388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x7fcba95d05a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x5558bde9ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x5558bde9fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x5558bde13bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x5558bde9ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x5558bde9f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x5558bde14689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x5558bde9ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x5558bde9f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x5558bde14689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x5558bde9ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x5558bde9f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x5558bde14689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x5558bde9ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x5558bde9f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20746)\u001b[0m     @     0x5558bde14689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x7f6861618c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x7f6860abaa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x7f6860ab8388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x7f6db8810a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x7f6db880e388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x7f6db88105a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x7fb1f1e33388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x7fb1f1e355a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x7fb1f25204f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x7fbd2ae9b5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x7fbd2b5864f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x7fc59120da93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x7fc59120b388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x7fc59120d5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x7fbbd3807388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x7fbbd38095a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x7fbbd3ef44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x7f77e1db5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x7f77e1dd8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x7f77e127aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x7f77e1278388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x7f77e127a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x7f718b60a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x7f718b60c5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x7f718bcf74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x7f718e1ca8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x7f5b0c14a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x7f5b0c8354f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x7f5b0ed088de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x7f1fd4898c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x7f1fd3d3aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x7f1fd3d38388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x7f1fd3d3a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x7fc6c22d95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x7fc6c29c44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x7fc6c4e978de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x7f5f9c3a28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x7f5f9c3a2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x7f5f9c3a2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x7f5f9cc85b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x7ee1f7b75a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x7ee1f7b73388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x7ee1f7b755a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x7ee1f82604f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x7ee1fa7338de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x7ed7cf2e1a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x7ed7cf2df388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x7ed7cf2e15a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x7ed7cf9cc4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x7eff056bbad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x7eff056bbd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x7eff05f9eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x7eff05fc1c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x7fac79a3ec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x7fac78ee0a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x7fac78ede388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x7fac78ee05a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x7fbf0fbdd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x7fbf120b08de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x7fbf0fbdd4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x7fbf15c8879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x56148b7c5fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x56148b720b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x56148b7abbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x56148b7aca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x56148b720bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x56148b7abbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x56148b7ac643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x56148b721689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x56148b7abbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x56148b7ac643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x56148b721689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x56148b7abbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x56148b7ac643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x7f67363385a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x7f6736a234f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x7f6738ef68de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x7f62120685a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x7f62127534f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x7f6214c268de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x55b2b17ea689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x55b2b1874baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x55b2b1875643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x55b2b17ea689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x55b2b1874baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x55b2b1875643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20737)\u001b[0m     @     0x55b2b17ea689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x7f526f1b34f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x7f52716868de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x7f526f1b34f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x7f527525e79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x56369c0f5fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x56369c050b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x56369c0dbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x56369c0dca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x56369c050bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x7ef21e7808f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x7f83888354f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x7f838ad088de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x7f0a8be33a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x7f0a8be31388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x7f15fcccfa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x7f15fcccd388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x7f15fcccf5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x7efd433a98f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x7ef3751f35a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x7edc38c0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x7edc38c118f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x7f71c50a44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x7f71c75778de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x7f71c50a44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x7f71cb14f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x563a2c7eafd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x563a2c745b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x563a2c7d0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x563a2c7d1a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x563a2c745bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x563a2c7d0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x563a2c7d1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x563a2c746689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x563a2c7d0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x563a2c7d1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x563a2c746689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x563a2c7d0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x563a2c7d1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x563a2c746689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x563a2c7d0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x563a2c7d1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20826)\u001b[0m     @     0x563a2c746689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x7fc340ccf5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x7fc3413ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x7fc34388d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x7f82f884d5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x7f82f8f384f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x7f82fb40b8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x7fb4bbef44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x7fb4c1f9f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x55a2f2957fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x55a2f28b2b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x55a2f293dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x55a2f293ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x55a2f28b2bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x55a2f293dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x55a2f293e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x55a2f28b3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x55a2f293dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x55a2f293e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x55a2f28b3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x55a2f293dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x55a2f293e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x55a2f28b3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x55a2f293dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x55a2f293e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20740)\u001b[0m     @     0x55a2f28b3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x7f810edea4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x7f81112bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x7f810edea4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x7f8114e9579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x560b42d36fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x560b42c91b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x560b42d1cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x560b42d1da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x560b42c91bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x560b42d1cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x560b42d1d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x560b42c92689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x560b42d1cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x560b42d1d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x560b42c92689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x560b42d1cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x560b42d1d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x560b42c92689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x560b42d1cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x560b42d1d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20860)\u001b[0m     @     0x560b42c92689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x7f426058b5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x7f4260c764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x7f42631498de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x7f203d6105a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x7f203dcfb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x7f20401ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x7fc494d238de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x7fc4928504f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x7fc4988fb79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x55c6b5d23fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x55c6b5c7eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x55c6b5d09baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x55c6b5d0aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x55c6b5c7ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x55c6b5d09baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x55c6b5d0a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x55c6b5c7f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x55c6b5d09baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x55c6b5d0a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x55c6b5c7f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x55c6b5d09baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x55c6b5d0a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x55c6b5c7f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x55c6b5d09baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x55c6b5d0a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20768)\u001b[0m     @     0x55c6b5c7f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x7eda398215a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x7eda39f0c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x7eda3c3df8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x7f91d84255a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x7f91d8b104f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x7f91dafe38de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x7fa4e2c27a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x7fa4e2c25388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x7fa4e2c275a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x7fcba9cbb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x7fcbac18e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x7fcba9cbb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x7f6860aba5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x7f68611a54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x7f68636788de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x7f6db8efb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x7f6dbb3ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x7f6db8efb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x7f6dbefa679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x55e1acc22fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x55e1acb7db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x55e1acc08baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x55e1acc09a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x55e1acb7dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x7fb1f49f38de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x7fb1f25204f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x7fb1f85cb79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x55cf64d4ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x55cf64caab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x55cf64d35baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x55cf64d36a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x55cf64caabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x55cf64d35baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x55cf64d36643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x55cf64cab689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x55cf64d35baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x55cf64d36643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x55cf64cab689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x55cf64d35baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x55cf64d36643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x55cf64cab689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x55cf64d35baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x55cf64d36643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20810)\u001b[0m     @     0x55cf64cab689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x7fbd2da598de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x7fbd2b5864f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x7fbd3163179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x557e61617fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x557e61572b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x557e615fdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x557e615fea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x557e61572bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x557e615fdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x557e615fe643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x557e61573689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x557e615fdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x557e615fe643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x557e61573689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x557e615fdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x557e615fe643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x557e61573689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x557e615fdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x557e615fe643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20799)\u001b[0m     @     0x557e61573689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x7fc5918f84f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x7fc593dcb8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x7fc5918f84f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x7fbbd63c78de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x7fbbd3ef44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x7fbbd9f9f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x555f771a8fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x555f77103b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x555f7718ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x555f7718fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x555f77103bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x555f7718ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x555f7718f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x555f77104689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x555f7718ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x555f7718f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x555f77104689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x555f7718ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x555f7718f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x555f77104689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x555f7718ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x555f7718f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20795)\u001b[0m     @     0x555f77104689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x7f7c060eba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x7f7c060e9388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x7f77e19654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x7f77e3e388de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x7f718bcf74f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x7f7191da279f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x55bdafc98fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x55bdafbf3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x55bdafc7ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x55bdafc7fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x55bdafbf3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x55bdafc7ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x55bdafc7f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x55bdafbf4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x55bdafc7ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x55bdafc7f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x55bdafbf4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x55bdafc7ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x55bdafc7f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x55bdafbf4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x55bdafc7ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x55bdafc7f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20813)\u001b[0m     @     0x55bdafbf4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x7f5b0c8354f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x7f5b128e079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x561c9cd96fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x561c9ccf1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x561c9cd7cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x561c9cd7da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x561c9ccf1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x561c9cd7cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x561c9cd7d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x561c9ccf2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x561c9cd7cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x561c9cd7d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x561c9ccf2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x561c9cd7cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x561c9cd7d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x561c9ccf2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x561c9cd7cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x561c9cd7d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20760)\u001b[0m     @     0x561c9ccf2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x7f1fd44254f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x7f1fd68f88de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x7fc6c29c44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x7fc6c8a6f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x55a5c20affd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x55a5c200ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x55a5c2095baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x55a5c2096a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x55a5c200abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x55a5c2095baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x55a5c2096643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x55a5c200b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x55a5c2095baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x55a5c2096643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x55a5c200b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x55a5c2095baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x55a5c2096643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x55a5c200b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x55a5c2095baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x55a5c2096643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20805)\u001b[0m     @     0x55a5c200b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x7f5f9cca8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x7f5f9c14aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x7f5f9c148388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x7ee1f82604f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x7ee1fe30b79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x564072abbfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x564072a16b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x564072aa1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x564072aa2a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x564072a16bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x564072aa1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x564072aa2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x564072a17689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x564072aa1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x564072aa2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x564072a17689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x564072aa1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x564072aa2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x7ed7d1e9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x7ed7cf9cc4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x7ed7d5a7779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x55f1f152bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x55f1f1486b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x7eff05463a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x7eff05461388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x7fac795cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x7fac7ba9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x7fac795cb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x56148b721689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x56148b7abbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x56148b7ac643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20738)\u001b[0m     @     0x56148b721689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x7f6736a234f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x7f673cace79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x5649bc797fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x5649bc6f2b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x5649bc77dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x5649bc77ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x5649bc6f2bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x5649bc77dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x5649bc77e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x5649bc6f3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x5649bc77dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x5649bc77e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x5649bc6f3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x5649bc77dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x5649bc77e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x5649bc6f3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x5649bc77dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x5649bc77e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20808)\u001b[0m     @     0x5649bc6f3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x7f62127534f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x7f62187fe79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x557853097fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x557852ff2b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x55785307dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x55785307ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x557852ff2bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x55785307dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x55785307e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x557852ff3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x55785307dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x55785307e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x557852ff3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x55785307dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x55785307e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x557852ff3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x55785307dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x55785307e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20757)\u001b[0m     @     0x557852ff3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x56369c0dbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x56369c0dc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x56369c051689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x56369c0dbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x56369c0dc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x56369c051689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x56369c0dbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x56369c0dc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x56369c051689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x56369c0dbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x56369c0dc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20829)\u001b[0m     @     0x56369c051689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x7ef21e780ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x7ef21e780d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x7ef21f063b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x7ef21f086c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x7f83888354f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x7f838e8e079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x5643d2c57fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x5643d2bb2b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x5643d2c3dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x5643d2c3ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x5643d2bb2bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x5643d2c3dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x5643d2c3e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x5643d2bb3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x5643d2c3dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x5643d2c3e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x5643d2bb3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x5643d2c3dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x5643d2c3e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x5643d2bb3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x5643d2c3dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x5643d2c3e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20871)\u001b[0m     @     0x5643d2bb3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x7f0a8be335a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x7f0a8c51e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x7f0a8e9f18de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x7f0a8c51e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x7f15fd3ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x7f15ff88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x7f15fd3ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x7f160346579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x556fc8ba0fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x556fc8afbb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x556fc8b86baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x556fc8b87a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x556fc8afbbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x556fc8b86baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x556fc8b87643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x556fc8afc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x556fc8b86baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x556fc8b87643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x556fc8afc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x556fc8b86baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x556fc8b87643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x556fc8afc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x556fc8b86baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x7efd433a9ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x7efd433a9d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x7efd43c8cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x7efd43cafc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x7ef3758de4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x7ef377db18de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x7f1366a00c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x7f1365ea2a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x7f1365ea0388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x7f1365ea25a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x7edc38c11ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x7edc38c11d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x7edc394f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x7edc39517c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x7edc389b9a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x7edc389b7388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x7fc3413ba4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x7fc34746579f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x55abe7cf4fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x55abe7c4fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x55abe7cdabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x55abe7cdba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x55abe7c4fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x55abe7cdabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x55abe7cdb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x55abe7c50689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x55abe7cdabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x55abe7cdb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x55abe7c50689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x55abe7cdabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x55abe7cdb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x55abe7c50689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x55abe7cdabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x55abe7cdb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20853)\u001b[0m     @     0x55abe7c50689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x7f82f8f384f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x7f82fefe379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x5588f35effd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x5588f354ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x5588f35d5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x5588f35d6a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x5588f354abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x5588f35d5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x5588f35d6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x5588f354b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x5588f35d5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x5588f35d6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x5588f354b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x5588f35d5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x5588f35d6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x5588f354b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x5588f35d5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x5588f35d6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20767)\u001b[0m     @     0x5588f354b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x7f4260c764f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x7f4266d2179f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x55d6f5787fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x55d6f56e2b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x55d6f576dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x55d6f576ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x55d6f56e2bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x55d6f576dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x55d6f576e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x55d6f56e3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x55d6f576dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x55d6f576e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x55d6f56e3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x55d6f576dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x55d6f576e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x55d6f56e3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x55d6f576dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x55d6f576e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20758)\u001b[0m     @     0x55d6f56e3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x7f203dcfb4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x7f2043da679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x55aa5f66cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x55aa5f5c7b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x55aa5f652baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x55aa5f653a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x55aa5f5c7bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x55aa5f652baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x55aa5f653643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x55aa5f5c8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x55aa5f652baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x55aa5f653643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x55aa5f5c8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x55aa5f652baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x55aa5f653643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x55aa5f5c8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x55aa5f652baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x55aa5f653643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20835)\u001b[0m     @     0x55aa5f5c8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x7eda39f0c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x7eda3ffb779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x56078ad39fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x56078ac94b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x56078ad1fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x56078ad20a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x56078ac94bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x56078ad1fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x56078ad20643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x56078ac95689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x56078ad1fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x56078ad20643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x56078ac95689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x56078ad1fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x56078ad20643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x56078ac95689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x56078ad1fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x56078ad20643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20819)\u001b[0m     @     0x56078ac95689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x7fa4e33124f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x7fa4e57e58de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x7fcbafd6679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x55cd23117fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x55cd23072b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x55cd230fdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x55cd230fea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x55cd23072bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x55cd230fdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x55cd230fe643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x55cd23073689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x55cd230fdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x55cd230fe643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x55cd23073689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x55cd230fdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x55cd230fe643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x55cd23073689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x55cd230fdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x55cd230fe643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20798)\u001b[0m     @     0x55cd23073689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x7f68611a54f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x7f686725079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x55f6ad895fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x55f6ad7f0b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x55f6ad87bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x55f6ad87ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x55f6ad7f0bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x55f6ad87bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x55f6ad87c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x55f6ad7f1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x55f6ad87bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x55f6ad87c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x55f6ad7f1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x55f6ad87bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x55f6ad87c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x55f6ad7f1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x55f6ad87bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x55f6ad87c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20744)\u001b[0m     @     0x55f6ad7f1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x55e1acc08baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x55e1acc09643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x55e1acb7e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x55e1acc08baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x55e1acc09643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x55e1acb7e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x55e1acc08baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x55e1acc09643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x55e1acb7e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x55e1acc08baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x55e1acc09643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20794)\u001b[0m     @     0x55e1acb7e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x7fc5979a379f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x55f9159e9fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x55f915944b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x55f9159cfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x55f9159d0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x55f915944bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x55f9159cfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x55f9159d0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x55f915945689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x55f9159cfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x55f9159d0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x55f915945689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x55f9159cfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x55f9159d0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x55f915945689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x55f9159cfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x55f9159d0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20832)\u001b[0m     @     0x55f915945689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x7f7c060eb5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x7f7c067d64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x7f77e19654f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x7f77e7a1079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x564c12df1fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x564c12d4cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x564c12dd7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x564c12dd8a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x564c12d4cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x564c12dd7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x564c12dd8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x564c12d4d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x564c12dd7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x564c12dd8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x564c12d4d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x564c12dd7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x564c12dd8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x564c12d4d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x564c12dd7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x564c12dd8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20750)\u001b[0m     @     0x564c12d4d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x7f1fd44254f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x7f1fda4d079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x55e0f8cf6fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x55e0f8c51b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x55e0f8cdcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x55e0f8cdda20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x55e0f8c51bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x55e0f8cdcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x55e0f8cdd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x55e0f8c52689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x55e0f8cdcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x55e0f8cdd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x55e0f8c52689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x55e0f8cdcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x55e0f8cdd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x55e0f8c52689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x55e0f8cdcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x55e0f8cdd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20743)\u001b[0m     @     0x55e0f8c52689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x7f5f9c14a5a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x7f5f9c8354f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x7f5f9ed088de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x564072a17689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x564072aa1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x564072aa2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20812)\u001b[0m     @     0x564072a17689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x55f1f1511baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x55f1f1512a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x55f1f1486bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x55f1f1511baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x55f1f1512643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x55f1f1487689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x55f1f1511baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x55f1f1512643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x55f1f1487689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x55f1f1511baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x55f1f1512643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x55f1f1487689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x55f1f1511baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x55f1f1512643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20840)\u001b[0m     @     0x55f1f1487689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x7eff054635a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x7eff05b4e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x7eff080218de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x7fac7f67679f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x55a593918fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x55a593873b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x55a5938febaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x55a5938ffa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x55a593873bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x55a5938febaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x55a5938ff643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x55a593874689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x55a5938febaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x55a5938ff643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x55a593874689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x55a5938febaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x55a5938ff643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x55a593874689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x55a5938febaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x55a5938ff643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20765)\u001b[0m     @     0x55a593874689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x7ef21e528a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x7ef21e526388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x7f0a925c979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x55f88183dfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x55f881798b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x55f881823baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x55f881824a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x55f881798bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x55f881823baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x55f881824643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x55f881799689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x55f881823baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x55f881824643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x55f881799689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x55f881823baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x55f881824643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x55f881799689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x55f881823baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x55f881824643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20824)\u001b[0m     @     0x55f881799689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x556fc8b87643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20834)\u001b[0m     @     0x556fc8afc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x7efd43151a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x7efd4314f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x7efd431515a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x7ef3758de4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x7ef37b98979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x56495d063fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x56495cfbeb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x56495d049baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x56495d04aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x56495cfbebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x56495d049baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x56495d04a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x56495cfbf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x56495d049baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x56495d04a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x56495cfbf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x56495d049baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x56495d04a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x7f136658d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x7f1368a608de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x7edc389b95a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x7f91d8b104f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x7f91debbb79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x562380e37fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x562380d92b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x562380e1dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x562380e1ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x562380d92bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x562380e1dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x562380e1e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x562380d93689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x562380e1dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x562380e1e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x562380d93689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x562380e1dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x562380e1e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x562380d93689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x562380e1dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x562380e1e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20864)\u001b[0m     @     0x562380d93689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x7fa4e33124f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x7fa4e93bd79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x5622dd7e6fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x5622dd741b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x5622dd7ccbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x5622dd7cda20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x5622dd741bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x5622dd7ccbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x5622dd7cd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x5622dd742689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x5622dd7ccbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x5622dd7cd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x5622dd742689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x5622dd7ccbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x5622dd7cd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x5622dd742689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x5622dd7ccbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x5622dd7cd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20809)\u001b[0m     @     0x5622dd742689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x7f7c08ca98de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x7f5f9c8354f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x7f5fa28e079f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x5610a6b4cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x5610a6aa7b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x5610a6b32baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x5610a6b33a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x5610a6aa7bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x5610a6b32baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x5610a6b33643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x5610a6aa8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x5610a6b32baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x5610a6b33643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x5610a6aa8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x5610a6b32baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x5610a6b33643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x5610a6aa8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x5610a6b32baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x5610a6b33643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20741)\u001b[0m     @     0x5610a6aa8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x7eff05b4e4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x7eff0bbf979f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x563bdb2f1fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x563bdb24cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x563bdb2d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x563bdb2d8a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x563bdb24cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x563bdb2d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x563bdb2d8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x563bdb24d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x563bdb2d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x563bdb2d8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x563bdb24d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x563bdb2d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x563bdb2d8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x563bdb24d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x563bdb2d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x563bdb2d8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20787)\u001b[0m     @     0x563bdb24d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x7ef21e5285a4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x7ef21ec134f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x7ef2210e68de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x7efd4383c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x7efd45d0f8de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x56495cfbf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x56495d049baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x56495d04a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20850)\u001b[0m     @     0x56495cfbf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x7f136658d4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x7f136c63879f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x5645f3cb9fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x5645f3c14b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x5645f3c9fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x5645f3ca0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x5645f3c14bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x5645f3c9fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x5645f3ca0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x5645f3c15689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x5645f3c9fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x5645f3ca0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x5645f3c15689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x5645f3c9fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x5645f3ca0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x5645f3c15689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x5645f3c9fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x5645f3ca0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20764)\u001b[0m     @     0x5645f3c15689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x7edc390a44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x7edc3b5778de torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x7edc390a44f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x7edc3f14f79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x56398b9eefd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x56398b949b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x56398b9d4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x56398b9d5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x56398b949bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x56398b9d4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x56398b9d5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x56398b94a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x56398b9d4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x56398b9d5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x56398b94a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x56398b9d4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x56398b9d5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x56398b94a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x7f7c067d64f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x7f7c0c47779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x55b1c3adefd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x55b1c3a39b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x55b1c3ac4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x55b1c3ac5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x55b1c3a39bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x55b1c3ac4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x55b1c3ac5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x55b1c3a3a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x55b1c3ac4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x55b1c3ac5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x55b1c3a3a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x55b1c3ac4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x55b1c3ac5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x55b1c3a3a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x55b1c3ac4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x55b1c3ac5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20755)\u001b[0m     @     0x55b1c3a3a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x7ef21ec134f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x7ef224cbe79f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x55aa18568fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x55aa184c3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x55aa1854ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x55aa1854fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x55aa184c3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x55aa1854ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x55aa1854f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x55aa184c4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x55aa1854ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x55aa1854f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x55aa184c4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x55aa1854ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x55aa1854f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x55aa184c4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x55aa1854ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x55aa1854f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20851)\u001b[0m     @     0x55aa184c4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x7efd4383c4f5 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x7efd498e779f torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x55d2e9240fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x55d2e919bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x55d2e9226baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x55d2e9227a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x55d2e919bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x55d2e9226baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x55d2e9227643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x55d2e919c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x55d2e9226baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x55d2e9227643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x55d2e919c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x55d2e9226baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x55d2e9227643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x55d2e919c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x55d2e9226baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x55d2e9227643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20817)\u001b[0m     @     0x55d2e919c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x56398b9d4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x56398b9d5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=20756)\u001b[0m     @     0x56398b94a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "2020-11-05 10:34:50,558\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff091d563401000000.\n",
+      "2020-11-05 10:34:50,568\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff59d91ef301000000.\n",
+      "2020-11-05 10:34:50,573\tERROR trial_runner.py:567 -- Trial PPO_jss_env_844c5_00000: Error processing event.\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py\", line 515, in _process_trial\n",
+      "    result = self.trial_executor.fetch_result(trial)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py\", line 488, in fetch_result\n",
+      "    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1428, in get\n",
+      "    raise value.as_instanceof_cause()\n",
+      "ray.exceptions.RayTaskError: \u001b[36mray::PPO.train()\u001b[39m (pid=20861, ip=172.17.0.4)\n",
+      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
+      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 516, in train\n",
+      "    raise e\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 505, in train\n",
+      "    result = Trainable.train(self)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py\", line 336, in train\n",
+      "    result = self.step()\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py\", line 134, in step\n",
+      "    res = next(self.train_exec_impl)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 756, in __next__\n",
+      "    return next(self.built_iterator)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  [Previous line repeated 1 more time]\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 876, in apply_flatten\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 828, in add_wait_hooks\n",
+      "    item = next(it)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  [Previous line repeated 1 more time]\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 466, in base_iterator\n",
+      "    actor_set.init_actors()\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1238, in init_actors\n",
+      "    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])\n",
+      "ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.\n",
+      "2020-11-05 10:34:50,601\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff8168b55d01000000.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 23.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/558.2 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 ERROR)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_844c5_00000 | ERROR    |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "Number of errored trials: 1\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "| Trial name              |   # failures | error file                                                                        |\n",
+      "|-------------------------+--------------+-----------------------------------------------------------------------------------|\n",
+      "| PPO_jss_env_844c5_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_844c5_00000_0_2020-11-05_10-34-43/error.txt |\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3912\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:44:51,849 - wandb.wandb_agent - INFO - Running runs: ['i1pzxngg']\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204448-i1pzxngg/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204448-i1pzxngg/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 209.89899\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 209.89899\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3826\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708290\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/i1pzxngg\u001b[0m\n",
-      "2020-10-14 20:44:57,073 - wandb.wandb_agent - INFO - Cleaning up finished run: i1pzxngg\n",
-      "2020-10-14 20:44:57,383 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:44:57,384 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta59\n",
-      "2020-10-14 20:44:57,386 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta59\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/3kcee9dt\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204459-3kcee9dt\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 23.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/558.2 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 ERROR)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_844c5_00000 | ERROR    |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "Number of errored trials: 1\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "| Trial name              |   # failures | error file                                                                        |\n",
+      "|-------------------------+--------------+-----------------------------------------------------------------------------------|\n",
+      "| PPO_jss_env_844c5_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_844c5_00000_0_2020-11-05_10-34-43/error.txt |\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
       "\n",
+      "Traceback (most recent call last):\n",
+      "  File \"train.py\", line 74, in <module>\n",
+      "    train_func()\n",
+      "  File \"train.py\", line 56, in train_func\n",
+      "    analysis = tune.run(PPOTrainer, config=config, stop=stop, name=\"ppo-jss\")\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py\", line 427, in run\n",
+      "    raise TuneError(\"Trials did not complete\", incomplete_trials)\n",
+      "ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_844c5_00000])\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3998\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:45:02,401 - wandb.wandb_agent - INFO - Running runs: ['3kcee9dt']\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 20634\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program failed with code 1.  Press ctrl-c to abort syncing.\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff58dd50c101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffbdff035801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error --- 1.18MB of 1.18MB uploaded (0.00MB deduped)\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff80993fa801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4100f4fd01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0314ce3001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff75f329e601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4f9bfece01000000.'\n",
+      "Arguments: ()\n",
+      "\u001b[2m\u001b[36m(pid=20861)\u001b[0m E1105 10:34:50.565488 20861 22015 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=1f6f5417a7b065f9091d563401000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=091d563401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=20861)\u001b[0m E1105 10:34:50.565690 20861 22015 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=e76b5820fbdeb0f2091d563401000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=091d563401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=20861)\u001b[0m E1105 10:34:50.565891 20861 22015 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=8b485cbbeaa005a559d91ef301000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=59d91ef301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=20861)\u001b[0m E1105 10:34:50.565964 20861 22015 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=ca546fa1af7e507159d91ef301000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=59d91ef301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=20861)\u001b[0m E1105 10:34:50.593863 20861 22015 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=7249131d8582b825091d563401000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=091d563401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=20861)\u001b[0m E1105 10:34:50.594367 20861 22015 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=fd2b07e19848a86a59d91ef301000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=59d91ef301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=20861)\u001b[0m E1105 10:34:50.601611 20861 22015 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=726b8519c6d92b8e8168b55d01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=8168b55d01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=20861)\u001b[0m E1105 10:34:50.601752 20861 22015 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=e8fef079b20e071c8168b55d01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=8168b55d01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=20861)\u001b[0m E1105 10:34:50.601820 20861 22015 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=575b3faf45c7d0bd8168b55d01000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=8168b55d01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff31c3fed901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7ef9157101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0d557f6601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4e242e9f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff252160a301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0fae11b201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff9d526f0201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa97540c201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff120020c01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff257d30801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff51728d3301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff302122d001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffee8852f401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff821ddf4301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffe0497dac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8d06128001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff3166f9e301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff1e7ae67b01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffb2413f7201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff3a9488b101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff04668d8f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff018c9dac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8edbbd3001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff99d0343201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff43fb47bd01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8f9a5fc701000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff50168bc201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffe9f6a7cf01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff2d1a71ea01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff56c9ec1501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff41e0fbff01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffccf343cc01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff19fd5b4901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffef1af81501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd989d1f001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa4f7314201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff244a7d1001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff90aded9101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff14da135201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff9f3cc57a01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7b2861ac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8cd168e101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff310e963d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffc2621d1401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffc3083e0c01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0aeae6a301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7f7c936001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff71ca01c001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffeca600ef01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd784bf0601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffdd5654aa01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffb3cace0801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffffefbd9801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff392716d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff20d842ad01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff10f667b001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff0f72e3901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff32335d4e01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7a508a7a01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff358dd45601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa7ad1db301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff61dc472601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff5843697701000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffda2cd21f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff5cc87e2501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd8f83c3801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff452e714401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff702ed69e01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff34cbbac201000000.'\n",
+      "Arguments: ()\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204459-3kcee9dt/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204459-3kcee9dt/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 211.84848\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 211.84848\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3517\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708300\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201105_103438-fpn63a60/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201105_103438-fpn63a60/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/3kcee9dt\u001b[0m\n",
-      "2020-10-14 20:45:07,613 - wandb.wandb_agent - INFO - Cleaning up finished run: 3kcee9dt\n",
-      "2020-10-14 20:45:10,058 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:45:10,059 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta60\n",
-      "2020-10-14 20:45:10,061 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta60\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mrestful-sweep-3\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/fpn63a60\u001b[0m\n",
+      "2020-11-05 10:35:02,078 - wandb.wandb_agent - INFO - Cleaning up finished run: fpn63a60\n",
+      "2020-11-05 10:35:02,473 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-05 10:35:02,473 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta43\n",
+      "2020-11-05 10:35:02,475 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/ta43\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.9 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "2020-11-05 10:35:07,493 - wandb.wandb_agent - INFO - Running runs: ['bjp2awy3']\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/kkype8ue\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204512-kkype8ue\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mfragrant-sweep-4\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/z90hgj59\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/bjp2awy3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201105_103504-bjp2awy3\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-05 10:35:08,186\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/1 GPUs, 0.0/558.15 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_93f54_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 4096\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:45:15,074 - wandb.wandb_agent - INFO - Running runs: ['kkype8ue']\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204512-kkype8ue/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204512-kkype8ue/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 197.64646\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 197.64646\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3735\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708313\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/kkype8ue\u001b[0m\n",
-      "2020-10-14 20:45:20,294 - wandb.wandb_agent - INFO - Cleaning up finished run: kkype8ue\n",
-      "2020-10-14 20:45:20,607 - wandb.wandb_agent - INFO - Agent received command: exit\n",
-      "2020-10-14 20:45:20,607 - wandb.wandb_agent - INFO - Received exit command. Killing runs and quitting.\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Terminating and syncing runs. Press ctrl-c to kill.\n"
+      "\n",
+      "\u001b[2m\u001b[36m(pid=22415)\u001b[0m 2020-11-05 10:35:11,001\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=22415)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/torch/cuda/__init__.py:125: UserWarning: \n",
+      "\u001b[2m\u001b[36m(pid=22415)\u001b[0m GeForce RTX 2080 Ti with CUDA capability sm_75 is not compatible with the current PyTorch installation.\n",
+      "\u001b[2m\u001b[36m(pid=22415)\u001b[0m The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 compute_37.\n",
+      "\u001b[2m\u001b[36m(pid=22415)\u001b[0m If you want to use the GeForce RTX 2080 Ti GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/\n",
+      "\u001b[2m\u001b[36m(pid=22415)\u001b[0m \n",
+      "\u001b[2m\u001b[36m(pid=22415)\u001b[0m   warnings.warn(incompatible_device_warn.format(device_name, capability, \" \".join(arch_list), device_name))\n",
+      "\u001b[2m\u001b[36m(pid=22441)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22441)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22441)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22441)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22441)\u001b[0m *** SIGSEGV (@0x0) received by PID 22441 (TID 0x7f09f305b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22441)\u001b[0m     @     0x7f09f2c34390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22441)\u001b[0m     @     0x7edaf2a13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22396)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22396)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22396)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22396)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22396)\u001b[0m *** SIGSEGV (@0x0) received by PID 22396 (TID 0x7fe7f80d0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22396)\u001b[0m     @     0x7fe7f7ca9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22396)\u001b[0m     @     0x7fb8f7bc7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22396)\u001b[0m     @     0x7fb8f72f27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22382)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22382)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22382)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22382)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22382)\u001b[0m *** SIGSEGV (@0x0) received by PID 22382 (TID 0x7fd865587700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22382)\u001b[0m     @     0x7fd865160390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22382)\u001b[0m     @     0x7fa9650b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22382)\u001b[0m     @     0x7fa9647e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22433)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22433)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22433)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22433)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22433)\u001b[0m *** SIGSEGV (@0x0) received by PID 22433 (TID 0x7f7931581700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22433)\u001b[0m     @     0x7f793115a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22433)\u001b[0m     @     0x7f4a310b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22365)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22365)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22365)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22365)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22365)\u001b[0m *** SIGSEGV (@0x0) received by PID 22365 (TID 0x7fa38191d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22365)\u001b[0m     @     0x7fa3814f6390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22365)\u001b[0m     @     0x7f74812daf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22388)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22388)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22388)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22388)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22388)\u001b[0m *** SIGSEGV (@0x0) received by PID 22388 (TID 0x7ff2a5636700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22388)\u001b[0m     @     0x7ff2a520f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22388)\u001b[0m     @     0x7fc3a50b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22388)\u001b[0m     @     0x7fc3a47e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22410)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22410)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22410)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22410)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22410)\u001b[0m *** SIGSEGV (@0x0) received by PID 22410 (TID 0x7fc4c4c8f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22410)\u001b[0m     @     0x7fc4c4868390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22410)\u001b[0m     @     0x7f95c4774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22296)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22296)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22296)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22296)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22296)\u001b[0m *** SIGSEGV (@0x0) received by PID 22296 (TID 0x7fd2076ce700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22296)\u001b[0m     @     0x7fd2072a7390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22296)\u001b[0m     @     0x7fa307229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22296)\u001b[0m     @     0x7fa3069547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22424)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22424)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22424)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22424)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22424)\u001b[0m *** SIGSEGV (@0x0) received by PID 22424 (TID 0x7f89488d0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22424)\u001b[0m     @     0x7f89484a9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22424)\u001b[0m     @     0x7f5a48333f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22424)\u001b[0m     @     0x7f5a47a5e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22390)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22390)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22390)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22390)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22390)\u001b[0m *** SIGSEGV (@0x0) received by PID 22390 (TID 0x7fb81a36a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22390)\u001b[0m     @     0x7fb819f43390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22390)\u001b[0m     @     0x7f8919e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22390)\u001b[0m     @     0x7f891954f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22381)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22381)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22381)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22381)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22381)\u001b[0m *** SIGSEGV (@0x0) received by PID 22381 (TID 0x7f669aca1700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22381)\u001b[0m     @     0x7f669a87a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22381)\u001b[0m     @     0x7f379a7bbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22381)\u001b[0m     @     0x7f3799ee67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22317)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22317)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22317)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22317)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22317)\u001b[0m *** SIGSEGV (@0x0) received by PID 22317 (TID 0x7faf59c50700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22317)\u001b[0m     @     0x7faf59829390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22317)\u001b[0m     @     0x7f80596f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22409)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22409)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22409)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22409)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22409)\u001b[0m *** SIGSEGV (@0x0) received by PID 22409 (TID 0x7ff9d70d7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22409)\u001b[0m     @     0x7ff9d6cb0390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22409)\u001b[0m     @     0x7fcad6c50f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22409)\u001b[0m     @     0x7fcad637b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22399)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22399)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22399)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22399)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22399)\u001b[0m *** SIGSEGV (@0x0) received by PID 22399 (TID 0x7f861d742700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22399)\u001b[0m     @     0x7f861d31b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22399)\u001b[0m     @     0x7f571d28af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22399)\u001b[0m     @     0x7f571c9b57db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22387)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22387)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22387)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22387)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22387)\u001b[0m *** SIGSEGV (@0x0) received by PID 22387 (TID 0x7f12cd639700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22387)\u001b[0m     @     0x7f12cd212390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22387)\u001b[0m     @     0x7ee3cd0b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22387)\u001b[0m     @     0x7ee3cc7e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22427)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22427)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22427)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22427)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22427)\u001b[0m *** SIGSEGV (@0x0) received by PID 22427 (TID 0x7ff4bcf2c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22427)\u001b[0m     @     0x7ff4bcb05390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22427)\u001b[0m     @     0x7fc5bc9e8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22427)\u001b[0m     @     0x7fc5bc1137db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22378)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22378)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22378)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22378)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22378)\u001b[0m *** SIGSEGV (@0x0) received by PID 22378 (TID 0x7f322aedf700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22378)\u001b[0m     @     0x7f322aab8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22378)\u001b[0m     @     0x7f032a9ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22310)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22310)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22310)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22310)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22310)\u001b[0m *** SIGSEGV (@0x0) received by PID 22310 (TID 0x7fbe3d40e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22310)\u001b[0m     @     0x7fbe3cfe7390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22422)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22422)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22422)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22422)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22422)\u001b[0m *** SIGSEGV (@0x0) received by PID 22422 (TID 0x7f0bb8972700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22422)\u001b[0m     @     0x7f0bb854b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22422)\u001b[0m     @     0x7edcb84d9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22422)\u001b[0m     @     0x7edcb7c047db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22405)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22405)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22405)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22405)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22405)\u001b[0m *** SIGSEGV (@0x0) received by PID 22405 (TID 0x7f9e065e5700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22327)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22327)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22327)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22327)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22327)\u001b[0m *** SIGSEGV (@0x0) received by PID 22327 (TID 0x7fd6720d0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22327)\u001b[0m     @     0x7fd671ca9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22335)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22335)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22335)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22335)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22335)\u001b[0m *** SIGSEGV (@0x0) received by PID 22335 (TID 0x7f1637ad9700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22335)\u001b[0m     @     0x7f16376b2390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22376)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22376)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22376)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22376)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22376)\u001b[0m *** SIGSEGV (@0x0) received by PID 22376 (TID 0x7f52e0e9d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22376)\u001b[0m     @     0x7f52e0a76390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22376)\u001b[0m     @     0x7f23e0774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22376)\u001b[0m     @     0x7f23dfe9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22315)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22315)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22315)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22315)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22315)\u001b[0m *** SIGSEGV (@0x0) received by PID 22315 (TID 0x7f7788ec1700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22315)\u001b[0m     @     0x7f7788a9a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22315)\u001b[0m     @     0x7f48889e8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22355)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22355)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22355)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22355)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22355)\u001b[0m *** SIGSEGV (@0x0) received by PID 22355 (TID 0x7fb594556700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22355)\u001b[0m     @     0x7fb59412f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22355)\u001b[0m     @     0x7f8693eb6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22355)\u001b[0m     @     0x7f86935e17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22411)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22411)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22411)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22411)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22411)\u001b[0m *** SIGSEGV (@0x0) received by PID 22411 (TID 0x7f95ae224700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22411)\u001b[0m     @     0x7f95addfd390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22411)\u001b[0m     @     0x7f66add77f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22411)\u001b[0m     @     0x7f66ad4a27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22383)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22383)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22383)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22383)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22383)\u001b[0m *** SIGSEGV (@0x0) received by PID 22383 (TID 0x7fa8085da700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22383)\u001b[0m     @     0x7fa8081b3390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22383)\u001b[0m     @     0x7f79080cdf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22383)\u001b[0m     @     0x7f79077f87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22431)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22431)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22431)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22431)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22431)\u001b[0m *** SIGSEGV (@0x0) received by PID 22431 (TID 0x7f8067cd9700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22431)\u001b[0m     @     0x7f80678b2390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22431)\u001b[0m     @     0x7f516784cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22431)\u001b[0m     @     0x7f5166f777db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22311)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22311)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22311)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22311)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22311)\u001b[0m *** SIGSEGV (@0x0) received by PID 22311 (TID 0x7f1c670f0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22294)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22294)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22294)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22294)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22294)\u001b[0m *** SIGSEGV (@0x0) received by PID 22294 (TID 0x7f8ce50c9700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22354)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22354)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22354)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22354)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22354)\u001b[0m *** SIGSEGV (@0x0) received by PID 22354 (TID 0x7f5ab4334700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22354)\u001b[0m     @     0x7f5ab3f0d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22354)\u001b[0m     @     0x7f2bb3e0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22354)\u001b[0m     @     0x7f2bb35367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22316)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22316)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22316)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22316)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22316)\u001b[0m *** SIGSEGV (@0x0) received by PID 22316 (TID 0x7f2cef958700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22316)\u001b[0m     @     0x7f2cef531390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22316)\u001b[0m     @     0x7efdef4cff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22316)\u001b[0m     @     0x7efdeebfa7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22441)\u001b[0m     @     0x7edaf213e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22441)\u001b[0m     @     0x7edaf21418f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22396)\u001b[0m     @     0x7fb8f72f58f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22396)\u001b[0m     @     0x7fb8f72f5ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22382)\u001b[0m     @     0x7fa9647e38f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22382)\u001b[0m     @     0x7fa9647e3ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22433)\u001b[0m     @     0x7f4a307e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22365)\u001b[0m     @     0x7f7480a057db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22365)\u001b[0m     @     0x7f7480a088f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22388)\u001b[0m     @     0x7fc3a47e38f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22388)\u001b[0m     @     0x7fc3a47e3ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22410)\u001b[0m     @     0x7f95c3e9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22410)\u001b[0m     @     0x7f95c3ea28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22296)\u001b[0m     @     0x7fa3069578f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22424)\u001b[0m     @     0x7f5a47a618f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22424)\u001b[0m     @     0x7f5a47a61ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22390)\u001b[0m     @     0x7f89195528f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22381)\u001b[0m     @     0x7f3799ee98f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22381)\u001b[0m     @     0x7f3799ee9ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22317)\u001b[0m     @     0x7f8058e1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22317)\u001b[0m     @     0x7f8058e228f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22409)\u001b[0m     @     0x7fcad637e8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22399)\u001b[0m     @     0x7f571c9b88f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22387)\u001b[0m     @     0x7ee3cc7e38f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22387)\u001b[0m     @     0x7ee3cc7e3ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22427)\u001b[0m     @     0x7fc5bc1168f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22378)\u001b[0m     @     0x7f032a0f77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22378)\u001b[0m     @     0x7f032a0fa8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22310)\u001b[0m     @     0x7f8f3cea4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22310)\u001b[0m     @     0x7f8f3c5cf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22310)\u001b[0m     @     0x7f8f3c5d28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22422)\u001b[0m     @     0x7edcb7c078f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22405)\u001b[0m     @     0x7f9e061be390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22405)\u001b[0m     @     0x7f6f0613af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22405)\u001b[0m     @     0x7f6f058657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22327)\u001b[0m     @     0x7fa771c51f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22327)\u001b[0m     @     0x7fa77137c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22327)\u001b[0m     @     0x7fa77137f8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22335)\u001b[0m     @     0x7ee73761ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22335)\u001b[0m     @     0x7ee736d4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22335)\u001b[0m     @     0x7ee736d4d8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22329)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22329)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22329)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22376)\u001b[0m     @     0x7f23dfea28f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22376)\u001b[0m     @     0x7f23dfea2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22315)\u001b[0m     @     0x7f48881137db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22315)\u001b[0m     @     0x7f48881168f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22315)\u001b[0m     @     0x7f4888116ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22355)\u001b[0m     @     0x7f86935e48f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22355)\u001b[0m     @     0x7f86935e4ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22411)\u001b[0m     @     0x7f66ad4a58f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22411)\u001b[0m     @     0x7f66ad4a5ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22411)\u001b[0m     @     0x7f66ad4a5d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22383)\u001b[0m     @     0x7f79077fb8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22431)\u001b[0m     @     0x7f5166f7a8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22431)\u001b[0m     @     0x7f5166f7aad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22311)\u001b[0m     @     0x7f1c66cc9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22311)\u001b[0m     @     0x7eed66c6af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22311)\u001b[0m     @     0x7eed663957db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22294)\u001b[0m     @     0x7f8ce4ca2390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22294)\u001b[0m     @     0x7f5de1940f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22294)\u001b[0m     @     0x7f5de106b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22417)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22417)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22417)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22417)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22297)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22297)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22297)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22379)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22379)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22379)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22379)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22379)\u001b[0m *** SIGSEGV (@0x0) received by PID 22379 (TID 0x7fd1cc9bf700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22305)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22305)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22305)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22300)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22300)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22300)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22362)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22362)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22362)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22362)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22362)\u001b[0m *** SIGSEGV (@0x0) received by PID 22362 (TID 0x7fee43016700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22362)\u001b[0m     @     0x7fee42bef390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22362)\u001b[0m     @     0x7fbf42ad1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22362)\u001b[0m     @     0x7fbf421fc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=22354)\u001b[0m     @     0x7f2bb35398f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22354)\u001b[0m     @     0x7f2bb3539ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22316)\u001b[0m     @     0x7efdeebfd8f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22316)\u001b[0m     @     0x7efdeebfdad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22316)\u001b[0m     @     0x7efdeebfdd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22322)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22322)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22322)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22322)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22322)\u001b[0m *** SIGSEGV (@0x0) received by PID 22322 (TID 0x7f4bd4aa2700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22441)\u001b[0m     @     0x7edaf2141ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22396)\u001b[0m     @     0x7fb8f72f5d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22396)\u001b[0m     @     0x7fb8f7bd8b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22396)\u001b[0m     @     0x7fb8f7bfbc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22396)\u001b[0m     @     0x7fb8f709da93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=22382)\u001b[0m     @     0x7fa9647e3d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22382)\u001b[0m     @     0x7fa9650c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22382)\u001b[0m     @     0x7fa9650e9c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22382)\u001b[0m     @     0x7fa96458ba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=22433)\u001b[0m     @     0x7f4a307e38f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22433)\u001b[0m     @     0x7f4a307e3ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22365)\u001b[0m     @     0x7f7480a08ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22388)\u001b[0m     @     0x7fc3a47e3d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22388)\u001b[0m     @     0x7fc3a50c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22388)\u001b[0m     @     0x7fc3a50e9c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22388)\u001b[0m     @     0x7fc3a458ba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=22388)\u001b[0m     @     0x7fc3a4589388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=22410)\u001b[0m     @     0x7f95c3ea2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22410)\u001b[0m     @     0x7f95c3ea2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22410)\u001b[0m     @     0x7f95c4785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22410)\u001b[0m     @     0x7f95c47a8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22402)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22402)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22402)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22402)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22402)\u001b[0m *** SIGSEGV (@0x0) received by PID 22402 (TID 0x7fbe7d211700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22296)\u001b[0m     @     0x7fa306957ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22296)\u001b[0m     @     0x7fa306957d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22296)\u001b[0m     @     0x7fa30723ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22296)\u001b[0m     @     0x7fa30725dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22428)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22428)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22424)\u001b[0m     @     0x7f5a47a61d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22424)\u001b[0m     @     0x7f5a48344b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22424)\u001b[0m     @     0x7f5a48367c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22424)\u001b[0m     @     0x7f5a47809a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=22390)\u001b[0m     @     0x7f8919552ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22390)\u001b[0m     @     0x7f8919552d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22390)\u001b[0m     @     0x7f8919e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22390)\u001b[0m     @     0x7f8919e58c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22381)\u001b[0m     @     0x7f3799ee9d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22381)\u001b[0m     @     0x7f379a7ccb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22381)\u001b[0m     @     0x7f379a7efc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22381)\u001b[0m     @     0x7f3799c91a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=22381)\u001b[0m     @     0x7f3799c8f388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=22317)\u001b[0m     @     0x7f8058e22ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22317)\u001b[0m     @     0x7f8058e22d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22317)\u001b[0m     @     0x7f8059705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22317)\u001b[0m     @     0x7f8059728c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22409)\u001b[0m     @     0x7fcad637ead3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22409)\u001b[0m     @     0x7fcad637ed91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22409)\u001b[0m     @     0x7fcad6c61b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22409)\u001b[0m     @     0x7fcad6c84c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22399)\u001b[0m     @     0x7f571c9b8ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22399)\u001b[0m     @     0x7f571c9b8d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22399)\u001b[0m     @     0x7f571d29bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22399)\u001b[0m     @     0x7f571d2bec1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22312)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22312)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22312)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22387)\u001b[0m     @     0x7ee3cc7e3d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22387)\u001b[0m     @     0x7ee3cd0c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22387)\u001b[0m     @     0x7ee3cd0e9c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22387)\u001b[0m     @     0x7ee3cc58ba93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=22387)\u001b[0m     @     0x7ee3cc589388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=22427)\u001b[0m     @     0x7fc5bc116ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22427)\u001b[0m     @     0x7fc5bc116d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22427)\u001b[0m     @     0x7fc5bc9f9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22427)\u001b[0m     @     0x7fc5bca1cc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22401)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22401)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22401)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22378)\u001b[0m     @     0x7f032a0faad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22378)\u001b[0m     @     0x7f032a0fad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22378)\u001b[0m     @     0x7f032a9ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22378)\u001b[0m     @     0x7f032aa00c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22301)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22301)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22301)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22301)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22301)\u001b[0m *** SIGSEGV (@0x0) received by PID 22301 (TID 0x7f4258f0d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22301)\u001b[0m     @     0x7f4258ae6390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22310)\u001b[0m     @     0x7f8f3c5d2ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22310)\u001b[0m     @     0x7f8f3c5d2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22310)\u001b[0m     @     0x7f8f3ceb5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22310)\u001b[0m     @     0x7f8f3ced8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22422)\u001b[0m     @     0x7edcb7c07ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22422)\u001b[0m     @     0x7edcb7c07d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22422)\u001b[0m     @     0x7edcb84eab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22422)\u001b[0m     @     0x7edcb850dc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22405)\u001b[0m     @     0x7f6f058688f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22405)\u001b[0m     @     0x7f6f05868ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22405)\u001b[0m     @     0x7f6f05868d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22436)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22436)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22436)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22436)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22436)\u001b[0m *** SIGSEGV (@0x0) received by PID 22436 (TID 0x7ff288324700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22436)\u001b[0m     @     0x7ff287efd390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22404)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22404)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22404)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22404)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22404)\u001b[0m *** SIGSEGV (@0x0) received by PID 22404 (TID 0x7ff9de44a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22327)\u001b[0m     @     0x7fa77137fad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22327)\u001b[0m     @     0x7fa77137fd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22327)\u001b[0m     @     0x7fa771c62b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22327)\u001b[0m     @     0x7fa771c85c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22335)\u001b[0m     @     0x7ee736d4dad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22335)\u001b[0m     @     0x7ee736d4dd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22335)\u001b[0m     @     0x7ee737630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22335)\u001b[0m     @     0x7ee737653c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22329)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22329)\u001b[0m *** SIGSEGV (@0x0) received by PID 22329 (TID 0x7f9367160700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22329)\u001b[0m     @     0x7f9366d39390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22329)\u001b[0m     @     0x7f6466ccff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=22306)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22306)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22306)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22306)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22306)\u001b[0m *** SIGSEGV (@0x0) received by PID 22306 (TID 0x7f4bcdb49700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22324)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22324)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22324)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22324)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22324)\u001b[0m *** SIGSEGV (@0x0) received by PID 22324 (TID 0x7f4840e75700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22324)\u001b[0m     @     0x7f4840a4e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22376)\u001b[0m     @     0x7f23dfea2d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22376)\u001b[0m     @     0x7f23e0785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22376)\u001b[0m     @     0x7f23e07a8c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22376)\u001b[0m     @     0x7f23dfc4aa93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=22376)\u001b[0m     @     0x7f23dfc48388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=22364)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22364)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22364)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22364)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22364)\u001b[0m *** SIGSEGV (@0x0) received by PID 22364 (TID 0x7f4429567700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22309)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22309)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22309)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22309)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22309)\u001b[0m *** SIGSEGV (@0x0) received by PID 22309 (TID 0x7f3fe0093700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22315)\u001b[0m     @     0x7f4888116d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22315)\u001b[0m     @     0x7f48889f9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22315)\u001b[0m     @     0x7f4888a1cc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22355)\u001b[0m     @     0x7f86935e4d91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22355)\u001b[0m     @     0x7f8693ec7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22355)\u001b[0m     @     0x7f8693eeac1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22355)\u001b[0m     @     0x7f869338ca93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=22355)\u001b[0m     @     0x7f869338a388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=22411)\u001b[0m     @     0x7f66add88b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22411)\u001b[0m     @     0x7f66addabc1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22411)\u001b[0m     @     0x7f66ad24da93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=22411)\u001b[0m     @     0x7f66ad24b388 at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=22383)\u001b[0m     @     0x7f79077fbad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22383)\u001b[0m     @     0x7f79077fbd91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22431)\u001b[0m     @     0x7f5166f7ad91 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22431)\u001b[0m     @     0x7f516785db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=22431)\u001b[0m     @     0x7f5167880c1d at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=22431)\u001b[0m     @     0x7f5166d22a93 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=22311)\u001b[0m     @     0x7eed663988f7 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22311)\u001b[0m     @     0x7eed66398ad3 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=22377)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22377)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22377)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22429)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22429)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22429)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22313)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22313)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22313)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22313)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22313)\u001b[0m *** SIGSEGV (@0x0) received by PID 22313 (TID 0x7fddb8e87700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22302)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22302)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22302)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22302)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22302)\u001b[0m *** SIGSEGV (@0x0) received by PID 22302 (TID 0x7f936a9ce700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22308)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22308)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22308)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22308)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22308)\u001b[0m *** SIGSEGV (@0x0) received by PID 22308 (TID 0x7f65db0e7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=22319)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=22319)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=22319)\u001b[0m *** Aborted at 1604572516 (unix time) try \"date -d @1604572516\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=22319)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=22319)\u001b[0m *** SIGSEGV (@0x0) received by PID 22319 (TID 0x7fdbbe192700) from PID 0; stack trace: ***\n"
      ]
     }
    ],
    "source": [
-    "!wandb agent po3ygyxo"
+    "!wandb agent z90hgj59"
    ]
   },
   {
diff --git a/JSS/Random.ipynb b/JSS/Random.ipynb
index a16b1ba..30632e8 100644
--- a/JSS/Random.ipynb
+++ b/JSS/Random.ipynb
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": 7,
    "metadata": {},
    "outputs": [
     {
@@ -56,7 +56,7 @@
     "    print(\"I have detected {} CPUs here, so I'm going to create {} actors\".format(mp.cpu_count(), mp.cpu_count() - 1))\n",
     "    os.environ[\"WANDB_API_KEY\"] = '3487a01956bf67cc7882bca2a38f70c8c95f8463'\n",
     "    sweep_config = {\n",
-    "        'program': 'random_loop.py',\n",
+    "        'program': 'CP.py',\n",
     "        'method': 'grid',\n",
     "        'metric': {\n",
     "            'name': 'time_step_min',\n",
@@ -64,9 +64,9 @@
     "        },\n",
     "        'parameters': {\n",
     "            'instance_path': {\n",
-    "                'values': ['/JSS/JSS/env/instances/ta51', '/JSS/JSS/env/instances/ta52', '/JSS/JSS/env/instances/ta53', '/JSS/JSS/env/instances/ta54',\n",
-    "                           '/JSS/JSS/env/instances/ta55', '/JSS/JSS/env/instances/ta56', '/JSS/JSS/env/instances/ta57', '/JSS/JSS/env/instances/ta58',\n",
-    "                           '/JSS/JSS/env/instances/ta59', '/JSS/JSS/env/instances/ta60']\n",
+    "                'values': ['/JSS/JSS/env/instances/ta40', '/JSS/JSS/env/instances/ta41', '/JSS/JSS/env/instances/ta42', '/JSS/JSS/env/instances/ta43', '/JSS/JSS/env/instances/ta44',\n",
+    "                           '/JSS/JSS/env/instances/ta45', '/JSS/JSS/env/instances/ta46', '/JSS/JSS/env/instances/ta47', '/JSS/JSS/env/instances/ta48',\n",
+    "                           '/JSS/JSS/env/instances/ta49', '/JSS/JSS/env/instances/ta50']\n",
     "            }\n",
     "        }\n",
     "    }"
@@ -74,25 +74,25 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 8,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Create sweep with ID: lh9x5rb9\n",
-      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/lh9x5rb9\n"
+      "Create sweep with ID: wnc8ihq1\n",
+      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\n"
      ]
     }
    ],
    "source": [
-    "sweep_id = wandb.sweep(sweep_config, project=\"RLLIB_SWEEP_2\")"
+    "sweep_id = wandb.sweep(sweep_config, project=\"RLLIB_SWEEP_3\")"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 9,
    "metadata": {},
    "outputs": [
     {
@@ -100,1977 +100,422 @@
      "output_type": "stream",
      "text": [
       "\u001b[34m\u001b[1mwandb\u001b[0m: Starting wandb agent üïµÔ∏è\n",
-      "2020-10-14 18:51:58,915 - wandb.wandb_agent - INFO - Running runs: []\n",
-      "2020-10-14 18:51:59,229 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 18:51:59,229 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta51\n",
-      "2020-10-14 18:51:59,231 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python random_loop.py --instance_path=/JSS/JSS/env/instances/ta51\n",
+      "2020-11-04 21:27:40,508 - wandb.wandb_agent - INFO - Running runs: []\n",
+      "2020-11-04 21:27:40,953 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 21:27:40,953 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta40\n",
+      "2020-11-04 21:27:40,955 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta40\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
-      "2020-10-14 18:52:04,245 - wandb.wandb_agent - INFO - Running runs: ['bgm3l5ts']\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33meffortless-sweep-1\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/lh9x5rb9\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/bgm3l5ts\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_185201-bgm3l5ts\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/h3u61381\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_212741-h3u61381\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "2020-10-14 18:52:04,834\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
-      "== Status ==\n",
-      "Memory usage on this node: 11.7/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+-------+\n",
-      "| Trial name                       | status   | loc   |\n",
-      "|----------------------------------+----------+-------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | RUNNING  |       |\n",
-      "+----------------------------------+----------+-------+\n",
+      "2020-11-04 21:27:45,971 - wandb.wandb_agent - INFO - Running runs: ['h3u61381']\n",
       "\n",
-      "\n",
-      "\u001b[2m\u001b[36m(pid=25130)\u001b[0m 2020-10-14 18:52:07,658\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
-      "Result for RandomMasked_jss_env_5afa5_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-52-11\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 1d2b23a635304ca6bea1e0ffde98d7ee\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 400\n",
-      "  iterations_since_restore: 1\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 72.94000000000001\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.3600000000000003\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 25130\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 3.247757911682129\n",
-      "  time_this_iter_s: 3.247757911682129\n",
-      "  time_total_s: 3.247757911682129\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701531\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 400\n",
-      "  training_iteration: 1\n",
-      "  trial_id: 5afa5_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 21.8/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |   ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | RUNNING  | 172.17.0.4:25130 |      1 |          3.24776 |  400 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_5afa5_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-52-16\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 1d2b23a635304ca6bea1e0ffde98d7ee\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 12000\n",
-      "  iterations_since_restore: 30\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 5.3\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.9\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 25130\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 8.01456618309021\n",
-      "  time_this_iter_s: 0.16585516929626465\n",
-      "  time_total_s: 8.01456618309021\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701536\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 12000\n",
-      "  training_iteration: 30\n",
-      "  trial_id: 5afa5_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 21.9/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | RUNNING  | 172.17.0.4:25130 |     30 |          8.01457 | 12000 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_5afa5_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-52-21\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 1d2b23a635304ca6bea1e0ffde98d7ee\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 23600\n",
-      "  iterations_since_restore: 59\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 25130\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 12.782260656356812\n",
-      "  time_this_iter_s: 0.1621565818786621\n",
-      "  time_total_s: 12.782260656356812\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701541\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 23600\n",
-      "  training_iteration: 59\n",
-      "  trial_id: 5afa5_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | RUNNING  | 172.17.0.4:25130 |     59 |          12.7823 | 23600 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | RUNNING  | 172.17.0.4:25130 |     87 |          17.4055 | 34800 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_5afa5_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-52-26\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 1d2b23a635304ca6bea1e0ffde98d7ee\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 35200\n",
-      "  iterations_since_restore: 88\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 25130\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 17.567854166030884\n",
-      "  time_this_iter_s: 0.16233396530151367\n",
-      "  time_total_s: 17.567854166030884\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701546\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 35200\n",
-      "  training_iteration: 88\n",
-      "  trial_id: 5afa5_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | RUNNING  | 172.17.0.4:25130 |    116 |          22.0842 | 46400 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_5afa5_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-52-31\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 1d2b23a635304ca6bea1e0ffde98d7ee\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 46800\n",
-      "  iterations_since_restore: 117\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 25130\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 22.268078804016113\n",
-      "  time_this_iter_s: 0.18388056755065918\n",
-      "  time_total_s: 22.268078804016113\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701551\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 46800\n",
-      "  training_iteration: 117\n",
-      "  trial_id: 5afa5_00000\n",
-      "  \n",
-      "2020-10-14 18:52:32,975\tERROR worker.py:1018 -- Possible unhandled error from worker: \u001b[36mray::RolloutWorker.par_iter_next_batch()\u001b[39m (pid=25093, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1158, in par_iter_next_batch\n",
-      "    batch.append(self.par_iter_next())\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1152, in par_iter_next\n",
-      "    return next(self.local_it)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 288, in gen_rollouts\n",
-      "    yield self.sample()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 579, in sample\n",
-      "    batches = [self.input_reader.next()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 93, in next\n",
-      "    batches = [self.get_data()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 209, in get_data\n",
-      "    item = next(self.rollout_provider)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 585, in _env_runner\n",
-      "    active_envs, to_eval, outputs = _process_observations(\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 797, in _process_observations\n",
-      "    prep_obs: EnvObsType = _get_or_raise(preprocessors,\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 233, in transform\n",
-      "    self.check_shape(observation)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 61, in check_shape\n",
-      "    raise ValueError(\n",
-      "ValueError: ('Observation outside expected value range', Dict(action_mask:Box(0.0, 1.0, (51,), float32), real_obs:Box(0.0, 1.0, (350,), float64)), {'real_obs': array([0.00000000e+00, 0.00000000e+00, 4.00000000e-01, 2.46153846e-01,\n",
-      "       6.26262626e-01, 5.02564103e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 4.77948718e-01, 4.44444444e-01,\n",
-      "       8.88205128e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.66666667e-01, 6.85128205e-01, 3.73737374e-01, 8.00000000e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.07692308e-01, 3.43434343e-01, 9.21025641e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 7.27272727e-01, 6.00000000e-01, 4.10256410e-01,\n",
-      "       1.21212121e-01, 7.73333333e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.91919192e-01, 7.33333333e-01, 3.82564103e-01, 2.22222222e-01,\n",
-      "       3.95897436e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 5.54871795e-01, 1.31313131e-01, 9.23076923e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 2.72727273e-01, 8.00000000e-01,\n",
-      "       6.23589744e-01, 3.23232323e-01, 6.56410256e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 2.94358974e-01,\n",
-      "       2.02020202e-01, 2.35897436e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 9.33333333e-01, 7.12820513e-01, 4.34343434e-01,\n",
-      "       2.25641026e-04, 0.00000000e+00, 0.00000000e+00, 1.31313131e-01,\n",
-      "       4.00000000e-01, 2.28717949e-01, 7.57575758e-01, 5.10769231e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       4.41025641e-01, 4.54545455e-01, 1.76410256e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.23232323e-01, 6.00000000e-01, 6.53333333e-01,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.00000000e-01, 1.98974359e-01, 2.02020202e-02,\n",
-      "       3.54871795e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 3.25128205e-01, 1.91919192e-01, 3.85641026e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       4.20512821e-01, 3.23232323e-01, 2.42051282e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.78787879e-01, 6.00000000e-01, 5.18974359e-01,\n",
-      "       7.07070707e-02, 1.12820513e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 6.83076923e-01, 2.72727273e-01,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 2.92307692e-01, 2.92929293e-01, 2.56410256e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.00000000e-01,\n",
-      "       5.85641026e-01, 2.32323232e-01, 2.44102564e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 7.33333333e-01, 6.56410256e-01,\n",
-      "       4.24242424e-01, 3.22051282e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 4.48205128e-01, 8.68686869e-01,\n",
-      "       1.76410256e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 5.00512821e-01, 4.94949495e-01, 4.51282051e-03,\n",
-      "       0.00000000e+00, 1.00000000e+00, 0.00000000e+00, 4.00000000e-01,\n",
-      "       3.61025641e-01, 8.08080808e-02, 6.17435897e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.66666667e-01, 5.02564103e-01,\n",
-      "       8.08080808e-01, 1.94871795e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.33333333e-01, 3.64102564e-01, 1.21212121e-01,\n",
-      "       7.97948718e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.33333333e-01, 9.74358974e-02, 3.03030303e-01, 8.41025641e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.41538462e-01, 4.04040404e-01, 3.24102564e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.11111111e-01, 4.66666667e-01, 3.84615385e-01,\n",
-      "       8.18181818e-01, 1.66153846e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,\n",
-      "       2.17435897e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.00000000e+00, 7.37435897e-01, 1.00000000e+00, 1.14256410e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.66666667e-01,\n",
-      "       8.32820513e-01, 3.43434343e-01, 6.56410256e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.04040404e-02, 4.66666667e-01, 4.81025641e-01,\n",
-      "       5.35353535e-01, 1.08717949e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.33333333e-01, 1.91794872e-01, 2.02020202e-02,\n",
-      "       4.10256410e-05, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 3.89743590e-01, 5.85858586e-01, 1.49743590e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       6.70769231e-01, 2.92929293e-01, 3.28205128e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 9.33333333e-01, 7.14871795e-01,\n",
-      "       6.66666667e-01, 5.10769231e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.02020202e-02, 4.66666667e-01, 4.77948718e-01, 6.66666667e-01,\n",
-      "       4.18461538e-03, 0.00000000e+00, 0.00000000e+00, 2.52525253e-01,\n",
-      "       5.33333333e-01, 5.51794872e-01, 3.83838384e-01, 1.70256410e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       3.20000000e-01, 7.27272727e-01, 1.23076923e-02, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.43434343e-01, 6.66666667e-01, 5.40512821e-01,\n",
-      "       2.72727273e-01, 3.01538462e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 5.33333333e-01, 4.94949495e-01,\n",
-      "       7.79487179e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.66666667e-01, 4.68717949e-01, 7.57575758e-01, 3.50769231e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 9.33333333e-01,\n",
-      "       8.01025641e-01, 1.41414141e-01, 1.08717949e-03, 0.00000000e+00,\n",
-      "       1.00000000e+00, 0.00000000e+00, 8.66666667e-01, 7.94871795e-01,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.66666667e-01, 3.54871795e-01, 5.05050505e-02,\n",
-      "       9.02564103e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 6.22564103e-01, 4.54545455e-01, 8.82051282e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.47692308e-01, 4.04040404e-01, 3.07692308e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.66666667e-01, 5.30256410e-01,\n",
-      "       7.07070707e-01, 2.64615385e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.66666667e-01, 2.77948718e-01, 3.93939394e-01,\n",
-      "       1.64102564e-03, 0.00000000e+00]), 'action_mask': array([False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False,  True, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False,  True,\n",
-      "       False, False, False, False, False, False])})\n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | RUNNING  | 172.17.0.4:25130 |    145 |           26.762 | 58000 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_5afa5_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-52-37\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 1d2b23a635304ca6bea1e0ffde98d7ee\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 58800\n",
-      "  iterations_since_restore: 147\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 25130\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 27.082104921340942\n",
-      "  time_this_iter_s: 0.1581122875213623\n",
-      "  time_total_s: 27.082104921340942\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701557\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 58800\n",
-      "  training_iteration: 147\n",
-      "  trial_id: 5afa5_00000\n",
-      "  \n",
-      "2020-10-14 18:52:41,582\tERROR trial_runner.py:567 -- Trial RandomMasked_jss_env_5afa5_00000: Error processing event.\n",
-      "Traceback (most recent call last):\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py\", line 515, in _process_trial\n",
-      "    result = self.trial_executor.fetch_result(trial)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py\", line 488, in fetch_result\n",
-      "    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1428, in get\n",
-      "    raise value.as_instanceof_cause()\n",
-      "ray.exceptions.RayTaskError(ValueError): \u001b[36mray::RandomMasked.train()\u001b[39m (pid=25130, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 516, in train\n",
-      "    raise e\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 505, in train\n",
-      "    result = Trainable.train(self)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py\", line 336, in train\n",
-      "    result = self.step()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py\", line 134, in step\n",
-      "    res = next(self.train_exec_impl)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 756, in __next__\n",
-      "    return next(self.built_iterator)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 551, in base_iterator\n",
-      "    batch = ray.get(obj_ref)\n",
-      "ray.exceptions.RayTaskError(ValueError): \u001b[36mray::RolloutWorker.par_iter_next_batch()\u001b[39m (pid=25093, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1158, in par_iter_next_batch\n",
-      "    batch.append(self.par_iter_next())\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1152, in par_iter_next\n",
-      "    return next(self.local_it)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 288, in gen_rollouts\n",
-      "    yield self.sample()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 579, in sample\n",
-      "    batches = [self.input_reader.next()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 93, in next\n",
-      "    batches = [self.get_data()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 209, in get_data\n",
-      "    item = next(self.rollout_provider)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 585, in _env_runner\n",
-      "    active_envs, to_eval, outputs = _process_observations(\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 797, in _process_observations\n",
-      "    prep_obs: EnvObsType = _get_or_raise(preprocessors,\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 233, in transform\n",
-      "    self.check_shape(observation)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 61, in check_shape\n",
-      "    raise ValueError(\n",
-      "ValueError: ('Observation outside expected value range', Dict(action_mask:Box(0.0, 1.0, (51,), float32), real_obs:Box(0.0, 1.0, (350,), float64)), {'real_obs': array([0.00000000e+00, 0.00000000e+00, 4.00000000e-01, 2.46153846e-01,\n",
-      "       6.26262626e-01, 5.02564103e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 4.77948718e-01, 4.44444444e-01,\n",
-      "       8.88205128e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.66666667e-01, 6.85128205e-01, 3.73737374e-01, 8.00000000e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.07692308e-01, 3.43434343e-01, 9.21025641e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 7.27272727e-01, 6.00000000e-01, 4.10256410e-01,\n",
-      "       1.21212121e-01, 7.73333333e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.91919192e-01, 7.33333333e-01, 3.82564103e-01, 2.22222222e-01,\n",
-      "       3.95897436e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 5.54871795e-01, 1.31313131e-01, 9.23076923e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 2.72727273e-01, 8.00000000e-01,\n",
-      "       6.23589744e-01, 3.23232323e-01, 6.56410256e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 2.94358974e-01,\n",
-      "       2.02020202e-01, 2.35897436e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 9.33333333e-01, 7.12820513e-01, 4.34343434e-01,\n",
-      "       2.25641026e-04, 0.00000000e+00, 0.00000000e+00, 1.31313131e-01,\n",
-      "       4.00000000e-01, 2.28717949e-01, 7.57575758e-01, 5.10769231e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       4.41025641e-01, 4.54545455e-01, 1.76410256e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.23232323e-01, 6.00000000e-01, 6.53333333e-01,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.00000000e-01, 1.98974359e-01, 2.02020202e-02,\n",
-      "       3.54871795e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 3.25128205e-01, 1.91919192e-01, 3.85641026e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       4.20512821e-01, 3.23232323e-01, 2.42051282e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.78787879e-01, 6.00000000e-01, 5.18974359e-01,\n",
-      "       7.07070707e-02, 1.12820513e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 6.83076923e-01, 2.72727273e-01,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 2.92307692e-01, 2.92929293e-01, 2.56410256e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.00000000e-01,\n",
-      "       5.85641026e-01, 2.32323232e-01, 2.44102564e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 7.33333333e-01, 6.56410256e-01,\n",
-      "       4.24242424e-01, 3.22051282e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 4.48205128e-01, 8.68686869e-01,\n",
-      "       1.76410256e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 5.00512821e-01, 4.94949495e-01, 4.51282051e-03,\n",
-      "       0.00000000e+00, 1.00000000e+00, 0.00000000e+00, 4.00000000e-01,\n",
-      "       3.61025641e-01, 8.08080808e-02, 6.17435897e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.66666667e-01, 5.02564103e-01,\n",
-      "       8.08080808e-01, 1.94871795e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.33333333e-01, 3.64102564e-01, 1.21212121e-01,\n",
-      "       7.97948718e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.33333333e-01, 9.74358974e-02, 3.03030303e-01, 8.41025641e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.41538462e-01, 4.04040404e-01, 3.24102564e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.11111111e-01, 4.66666667e-01, 3.84615385e-01,\n",
-      "       8.18181818e-01, 1.66153846e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,\n",
-      "       2.17435897e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.00000000e+00, 7.37435897e-01, 1.00000000e+00, 1.14256410e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.66666667e-01,\n",
-      "       8.32820513e-01, 3.43434343e-01, 6.56410256e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.04040404e-02, 4.66666667e-01, 4.81025641e-01,\n",
-      "       5.35353535e-01, 1.08717949e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.33333333e-01, 1.91794872e-01, 2.02020202e-02,\n",
-      "       4.10256410e-05, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 3.89743590e-01, 5.85858586e-01, 1.49743590e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       6.70769231e-01, 2.92929293e-01, 3.28205128e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 9.33333333e-01, 7.14871795e-01,\n",
-      "       6.66666667e-01, 5.10769231e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.02020202e-02, 4.66666667e-01, 4.77948718e-01, 6.66666667e-01,\n",
-      "       4.18461538e-03, 0.00000000e+00, 0.00000000e+00, 2.52525253e-01,\n",
-      "       5.33333333e-01, 5.51794872e-01, 3.83838384e-01, 1.70256410e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       3.20000000e-01, 7.27272727e-01, 1.23076923e-02, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.43434343e-01, 6.66666667e-01, 5.40512821e-01,\n",
-      "       2.72727273e-01, 3.01538462e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 5.33333333e-01, 4.94949495e-01,\n",
-      "       7.79487179e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.66666667e-01, 4.68717949e-01, 7.57575758e-01, 3.50769231e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 9.33333333e-01,\n",
-      "       8.01025641e-01, 1.41414141e-01, 1.08717949e-03, 0.00000000e+00,\n",
-      "       1.00000000e+00, 0.00000000e+00, 8.66666667e-01, 7.94871795e-01,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.66666667e-01, 3.54871795e-01, 5.05050505e-02,\n",
-      "       9.02564103e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 6.22564103e-01, 4.54545455e-01, 8.82051282e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.47692308e-01, 4.04040404e-01, 3.07692308e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.66666667e-01, 5.30256410e-01,\n",
-      "       7.07070707e-01, 2.64615385e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.66666667e-01, 2.77948718e-01, 3.93939394e-01,\n",
-      "       1.64102564e-03, 0.00000000e+00]), 'action_mask': array([False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False,  True, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False,  True,\n",
-      "       False, False, False, False, False, False])})\n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 ERROR)\n",
-      "+----------------------------------+----------+-------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc   |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+-------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | ERROR    |       |    172 |          31.1614 | 68800 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+-------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "Number of errored trials: 1\n",
-      "+----------------------------------+--------------+--------------------------------------------------------------------------------------------+\n",
-      "| Trial name                       |   # failures | error file                                                                                 |\n",
-      "|----------------------------------+--------------+--------------------------------------------------------------------------------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 |            1 | /root/ray_results/ppo-jss/RandomMasked_jss_env_5afa5_00000_0_2020-10-14_18-52-06/error.txt |\n",
-      "+----------------------------------+--------------+--------------------------------------------------------------------------------------------+\n",
-      "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"random_loop.py\", line 73, in <module>\n",
-      "    rand_func()\n",
-      "  File \"random_loop.py\", line 55, in rand_func\n",
-      "    analysis = tune.run(RandomMaskedTrainer, config=config, stop=stop, name=\"ppo-jss\")\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py\", line 427, in run\n",
-      "    raise TuneError(\"Trials did not complete\", incomplete_trials)\n",
-      "ray.tune.error.TuneError: ('Trials did not complete', [RandomMasked_jss_env_5afa5_00000])\n",
-      "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 24896\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program failed with code 1.  Press ctrl-c to abort syncing.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 32790\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_185201-bgm3l5ts/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_185201-bgm3l5ts/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_212741-h3u61381/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_212741-h3u61381/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 1775.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604525862\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33meffortless-sweep-1\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/bgm3l5ts\u001b[0m\n",
-      "2020-10-14 18:52:51,177 - wandb.wandb_agent - INFO - Cleaning up finished run: bgm3l5ts\n",
-      "2020-10-14 18:52:51,692 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 18:52:51,693 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta52\n",
-      "2020-10-14 18:52:51,700 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python random_loop.py --instance_path=/JSS/JSS/env/instances/ta52\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/h3u61381\u001b[0m\n",
+      "2020-11-04 21:37:51,376 - wandb.wandb_agent - INFO - Cleaning up finished run: h3u61381\n",
+      "2020-11-04 21:37:51,696 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 21:37:51,696 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta41\n",
+      "2020-11-04 21:37:51,698 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta41\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33msuper-sweep-2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/lh9x5rb9\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/ezglujb0\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_185253-ezglujb0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/c18o79jq\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_213752-c18o79jq\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "2020-10-14 18:52:56,719 - wandb.wandb_agent - INFO - Running runs: ['ezglujb0']\n",
-      "2020-10-14 18:52:57,270\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
-      "== Status ==\n",
-      "Memory usage on this node: 11.7/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+-------+\n",
-      "| Trial name                       | status   | loc   |\n",
-      "|----------------------------------+----------+-------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | RUNNING  |       |\n",
-      "+----------------------------------+----------+-------+\n",
-      "\n",
-      "\n",
-      "\u001b[2m\u001b[36m(pid=26894)\u001b[0m 2020-10-14 18:53:00,066\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
-      "Result for RandomMasked_jss_env_7a318_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-53-03\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: a0d7abda875641ee8277cfe989ce99c0\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 400\n",
-      "  iterations_since_restore: 1\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 71.17999999999999\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.3600000000000003\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 26894\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 3.277367115020752\n",
-      "  time_this_iter_s: 3.277367115020752\n",
-      "  time_total_s: 3.277367115020752\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701583\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 400\n",
-      "  training_iteration: 1\n",
-      "  trial_id: 7a318_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 21.8/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |   ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | RUNNING  | 172.17.0.4:26894 |      1 |          3.27737 |  400 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_7a318_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-53-08\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: a0d7abda875641ee8277cfe989ce99c0\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 11600\n",
-      "  iterations_since_restore: 29\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 5.1\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.9\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 26894\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 7.904330253601074\n",
-      "  time_this_iter_s: 0.16050171852111816\n",
-      "  time_total_s: 7.904330253601074\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701588\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 11600\n",
-      "  training_iteration: 29\n",
-      "  trial_id: 7a318_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 21.9/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | RUNNING  | 172.17.0.4:26894 |     29 |          7.90433 | 11600 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
+      "2020-11-04 21:37:56,716 - wandb.wandb_agent - INFO - Running runs: ['c18o79jq']\n",
       "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 33712\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_213752-c18o79jq/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_213752-c18o79jq/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2137.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604526473\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/c18o79jq\u001b[0m\n",
+      "2020-11-04 21:48:02,339 - wandb.wandb_agent - INFO - Cleaning up finished run: c18o79jq\n",
+      "2020-11-04 21:48:02,711 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 21:48:02,712 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta42\n",
+      "2020-11-04 21:48:02,713 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta42\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/sb79yg44\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_214803-sb79yg44\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "Result for RandomMasked_jss_env_7a318_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-53-13\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: a0d7abda875641ee8277cfe989ce99c0\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 22400\n",
-      "  iterations_since_restore: 56\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 26894\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 12.449386596679688\n",
-      "  time_this_iter_s: 0.16517019271850586\n",
-      "  time_total_s: 12.449386596679688\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701593\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 22400\n",
-      "  training_iteration: 56\n",
-      "  trial_id: 7a318_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | RUNNING  | 172.17.0.4:26894 |     56 |          12.4494 | 22400 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_7a318_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-53-18\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: a0d7abda875641ee8277cfe989ce99c0\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 33600\n",
-      "  iterations_since_restore: 84\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 26894\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 17.05783486366272\n",
-      "  time_this_iter_s: 0.1567375659942627\n",
-      "  time_total_s: 17.05783486366272\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701598\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 33600\n",
-      "  training_iteration: 84\n",
-      "  trial_id: 7a318_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | RUNNING  | 172.17.0.4:26894 |     84 |          17.0578 | 33600 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_7a318_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-53-24\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: a0d7abda875641ee8277cfe989ce99c0\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 45200\n",
-      "  iterations_since_restore: 113\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 4.5\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.9\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 26894\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 21.754982709884644\n",
-      "  time_this_iter_s: 0.16276907920837402\n",
-      "  time_total_s: 21.754982709884644\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701604\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 45200\n",
-      "  training_iteration: 113\n",
-      "  trial_id: 7a318_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | RUNNING  | 172.17.0.4:26894 |    113 |           21.755 | 45200 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "2020-10-14 18:53:25,585\tERROR worker.py:1018 -- Possible unhandled error from worker: \u001b[36mray::RolloutWorker.par_iter_next_batch()\u001b[39m (pid=26854, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1158, in par_iter_next_batch\n",
-      "    batch.append(self.par_iter_next())\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1152, in par_iter_next\n",
-      "    return next(self.local_it)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 288, in gen_rollouts\n",
-      "    yield self.sample()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 579, in sample\n",
-      "    batches = [self.input_reader.next()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 93, in next\n",
-      "    batches = [self.get_data()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 209, in get_data\n",
-      "    item = next(self.rollout_provider)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 585, in _env_runner\n",
-      "    active_envs, to_eval, outputs = _process_observations(\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 797, in _process_observations\n",
-      "    prep_obs: EnvObsType = _get_or_raise(preprocessors,\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 233, in transform\n",
-      "    self.check_shape(observation)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 61, in check_shape\n",
-      "    raise ValueError(\n",
-      "ValueError: ('Observation outside expected value range', Dict(action_mask:Box(0.0, 1.0, (51,), float32), real_obs:Box(0.0, 1.0, (350,), float64)), {'real_obs': array([0.00000000e+00, 0.00000000e+00, 5.33333333e-01, 3.67179487e-01,\n",
-      "       5.05050505e-01, 6.72820513e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.07070707e-02, 4.00000000e-01, 3.89743590e-01, 7.47474747e-01,\n",
-      "       1.20205128e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 7.47692308e-01, 3.43434343e-01, 5.82564103e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.15151515e-01, 5.33333333e-01,\n",
-      "       5.48717949e-01, 6.76767677e-01, 1.37435897e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 7.33333333e-01, 5.56923077e-01,\n",
-      "       1.51515152e-01, 1.12820513e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 2.81025641e-01, 2.42424242e-01,\n",
-      "       1.47692308e-03, 0.00000000e+00, 0.00000000e+00, 7.07070707e-02,\n",
-      "       6.66666667e-01, 5.47692308e-01, 0.00000000e+00, 6.66666667e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 2.66666667e-01,\n",
-      "       1.79487179e-01, 7.17171717e-01, 1.95076923e-02, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 3.72307692e-01,\n",
-      "       1.71717172e-01, 1.12205128e-02, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 9.33333333e-01, 7.12820513e-01, 4.04040404e-02,\n",
-      "       2.58461538e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 3.48717949e-01, 4.34343434e-01, 1.14256410e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       4.75897436e-01, 1.01010101e-01, 5.90769231e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.66666667e-01, 7.82564103e-01,\n",
-      "       6.86868687e-01, 1.25128205e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.06060606e-02, 6.66666667e-01, 5.57948718e-01, 2.62626263e-01,\n",
-      "       5.33333333e-04, 0.00000000e+00, 1.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 4.02051282e-01, 9.69696970e-01, 5.53846154e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       5.22051282e-01, 1.51515152e-01, 1.84615385e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.08080808e-02, 8.00000000e-01, 7.04615385e-01,\n",
-      "       5.65656566e-01, 1.14871795e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 9.33333333e-01, 7.01538462e-01, 6.66666667e-01,\n",
-      "       6.25641026e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 2.92307692e-01, 6.36363636e-01, 1.12410256e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       5.40512821e-01, 1.51515152e-01, 1.43589744e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 7.33333333e-01, 6.56410256e-01,\n",
-      "       3.33333333e-01, 5.57948718e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.86868687e-01, 7.33333333e-01, 5.47692308e-01, 8.58585859e-01,\n",
-      "       1.74358974e-03, 0.00000000e+00, 0.00000000e+00, 2.02020202e-01,\n",
-      "       5.33333333e-01, 4.80000000e-01, 3.63636364e-01, 7.38461538e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       4.86153846e-01, 3.83838384e-01, 6.35897436e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 4.00000000e-01,\n",
-      "       6.26262626e-01, 3.69230769e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 8.72820513e-01, 1.00000000e+00,\n",
-      "       8.20512821e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 4.98461538e-01, 6.76767677e-01, 2.07179487e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 1.51515152e-01, 4.00000000e-01,\n",
-      "       4.74871795e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.13131313e-01, 8.00000000e-01, 6.59487179e-01,\n",
-      "       8.58585859e-01, 1.74358974e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,\n",
-      "       3.07692308e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.66666667e-01, 1.58974359e-01, 3.03030303e-02, 5.21025641e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.00000000e-01,\n",
-      "       3.84615385e-01, 5.65656566e-01, 1.25538462e-02, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 1.00000000e+00, 7.68205128e-01,\n",
-      "       1.00000000e+00, 3.36410256e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 6.26666667e-01, 1.00000000e+00,\n",
-      "       1.24923077e-02, 0.00000000e+00, 0.00000000e+00, 6.06060606e-02,\n",
-      "       5.33333333e-01, 4.31794872e-01, 4.54545455e-01, 9.23076923e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00,\n",
-      "       9.70256410e-01, 1.00000000e+00, 9.84615385e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 3.58974359e-01,\n",
-      "       1.01010101e-02, 8.41025641e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.44444444e-01, 9.33333333e-01, 8.36923077e-01, 4.04040404e-02,\n",
-      "       1.15487179e-02, 0.00000000e+00, 0.00000000e+00, 6.96969697e-01,\n",
-      "       6.00000000e-01, 5.84615385e-01, 2.92929293e-01, 1.07282051e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       4.65641026e-01, 0.00000000e+00, 3.38461538e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 9.33333333e-01, 7.02564103e-01,\n",
-      "       7.07070707e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.66666667e-01, 6.17435897e-01, 1.51515152e-01,\n",
-      "       3.38461538e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 3.81538462e-01, 2.02020202e-02, 4.59487179e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 3.13131313e-01, 5.33333333e-01,\n",
-      "       5.09743590e-01, 1.71717172e-01, 2.93333333e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.66666667e-01, 7.94871795e-01,\n",
-      "       4.94949495e-01, 6.97435897e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 4.62564103e-01, 3.23232323e-01,\n",
-      "       1.43589744e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       9.33333333e-01, 7.80512821e-01, 2.62626263e-01, 3.69230769e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 2.52525253e-01, 9.33333333e-01,\n",
-      "       8.87179487e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 5.10769231e-01,\n",
-      "       6.26262626e-01, 6.40000000e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 5.94871795e-01, 1.11111111e-01,\n",
-      "       2.21538462e-03, 0.00000000e+00]), 'action_mask': array([False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False,  True, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False,  True])})\n",
-      "2020-10-14 18:53:27,586\tERROR worker.py:1018 -- Possible unhandled error from worker: \u001b[36mray::RolloutWorker.par_iter_next_batch()\u001b[39m (pid=26840, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1158, in par_iter_next_batch\n",
-      "    batch.append(self.par_iter_next())\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1152, in par_iter_next\n",
-      "    return next(self.local_it)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 288, in gen_rollouts\n",
-      "    yield self.sample()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 579, in sample\n",
-      "    batches = [self.input_reader.next()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 93, in next\n",
-      "    batches = [self.get_data()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 209, in get_data\n",
-      "    item = next(self.rollout_provider)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 585, in _env_runner\n",
-      "    active_envs, to_eval, outputs = _process_observations(\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 797, in _process_observations\n",
-      "    prep_obs: EnvObsType = _get_or_raise(preprocessors,\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 233, in transform\n",
-      "    self.check_shape(observation)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 61, in check_shape\n",
-      "    raise ValueError(\n",
-      "ValueError: ('Observation outside expected value range', Dict(action_mask:Box(0.0, 1.0, (51,), float32), real_obs:Box(0.0, 1.0, (350,), float64)), {'real_obs': array([0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 3.80512821e-01,\n",
-      "       2.12121212e-01, 3.26153846e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.66666667e-01, 3.96923077e-01, 6.56565657e-01,\n",
-      "       1.82564103e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 6.07179487e-01, 4.84848485e-01, 1.02564103e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.35353535e-01, 4.66666667e-01,\n",
-      "       4.53333333e-01, 1.71717172e-01, 3.48717949e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.44444444e-01, 8.00000000e-01, 6.14358974e-01,\n",
-      "       4.34343434e-01, 8.82051282e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.02020202e-01, 6.66666667e-01, 3.46666667e-01, 2.72727273e-01,\n",
-      "       1.90769231e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.00000000e-01, 3.28205128e-01, 5.35353535e-01, 6.35897436e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.08080808e-02, 5.33333333e-01,\n",
-      "       3.95897436e-01, 1.41414141e-01, 2.87179487e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.06060606e-02, 6.00000000e-01, 3.89743590e-01,\n",
-      "       3.33333333e-01, 4.94358974e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 7.33333333e-01, 5.87692308e-01, 5.15151515e-01,\n",
-      "       1.43589744e-04, 0.00000000e+00, 1.00000000e+00, 0.00000000e+00,\n",
-      "       8.00000000e-01, 5.33333333e-01, 8.48484848e-01, 1.72307692e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       4.75897436e-01, 9.09090909e-02, 6.83076923e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 5.92820513e-01,\n",
-      "       8.08080808e-02, 2.46153846e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.44444444e-01, 5.33333333e-01, 4.10256410e-01, 7.87878788e-01,\n",
-      "       4.51282051e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 5.43589744e-01, 1.61616162e-01, 4.82051282e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       4.24615385e-01, 4.64646465e-01, 5.33333333e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.66666667e-01, 6.08205128e-01,\n",
-      "       6.56565657e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 6.03076923e-01, 1.21212121e-01,\n",
-      "       9.47692308e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.66666667e-01, 1.62051282e-01, 4.34343434e-01, 6.76923077e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       5.01538462e-01, 2.02020202e-01, 1.43589744e-02, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 1.00000000e+00, 8.71794872e-01,\n",
-      "       1.00000000e+00, 1.98974359e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.02020202e-01, 7.33333333e-01, 5.96923077e-01, 1.01010101e-01,\n",
-      "       8.41025641e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.00000000e+00, 7.61025641e-01, 1.00000000e+00, 1.51794872e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       3.95897436e-01, 5.05050505e-02, 6.15384615e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.00000000e-01, 5.81538462e-01,\n",
-      "       6.86868687e-01, 2.03076923e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       9.29292929e-01, 5.33333333e-01, 5.00512821e-01, 6.86868687e-01,\n",
-      "       1.82564103e-03, 0.00000000e+00, 0.00000000e+00, 4.34343434e-01,\n",
-      "       4.66666667e-01, 4.54358974e-01, 2.62626263e-01, 5.33333333e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       4.90256410e-01, 7.77777778e-01, 5.29230769e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.14141414e-01, 8.00000000e-01, 6.49230769e-01,\n",
-      "       1.01010101e-02, 2.05128205e-05, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,\n",
-      "       3.69230769e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 3.24102564e-01, 3.23232323e-01, 1.16923077e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       5.93846154e-01, 6.56565657e-01, 3.13846154e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.00000000e-01, 6.98461538e-01,\n",
-      "       1.71717172e-01, 2.64615385e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.31313131e-01, 8.00000000e-01, 5.05641026e-01, 4.84848485e-01,\n",
-      "       3.44615385e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 3.89743590e-01, 2.62626263e-01, 2.33846154e-03,\n",
-      "       0.00000000e+00, 1.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       3.53846154e-01, 4.04040404e-02, 8.20512821e-05, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.33333333e-01, 4.10256410e-01,\n",
-      "       3.33333333e-01, 8.88205128e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 7.21025641e-01, 6.76767677e-01,\n",
-      "       4.10256410e-05, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.00000000e-01, 3.36410256e-01, 4.04040404e-02, 8.10256410e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.66666667e-01,\n",
-      "       5.74358974e-01, 7.07070707e-02, 1.31282051e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.33333333e-01, 4.35897436e-01,\n",
-      "       2.82828283e-01, 2.37948718e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 5.33333333e-01, 7.77777778e-01,\n",
-      "       1.16923077e-03, 0.00000000e+00, 0.00000000e+00, 6.56565657e-01,\n",
-      "       4.66666667e-01, 2.40000000e-01, 1.81818182e-01, 2.29743590e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.00000000e-01,\n",
-      "       4.27692308e-01, 1.51515152e-01, 8.51282051e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.66666667e-01, 6.10256410e-01,\n",
-      "       1.71717172e-01, 8.20512821e-05, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.22222222e-01, 3.33333333e-01, 2.95384615e-01, 7.87878788e-01,\n",
-      "       3.54871795e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 5.16923077e-01, 3.63636364e-01, 7.79487179e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       6.00000000e-01, 1.31313131e-01, 3.48717949e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.66666667e-01, 6.70769231e-01,\n",
-      "       1.61616162e-01, 2.62564103e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 5.94871795e-01, 2.42424242e-01,\n",
-      "       3.32307692e-03, 0.00000000e+00]), 'action_mask': array([False, False, False, False, False, False, False, False, False,\n",
-      "       False,  True, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False,  True,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False])})\n",
-      "Result for RandomMasked_jss_env_7a318_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-53-29\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: a0d7abda875641ee8277cfe989ce99c0\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 56800\n",
-      "  iterations_since_restore: 142\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 26894\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 26.409894704818726\n",
-      "  time_this_iter_s: 0.16816067695617676\n",
-      "  time_total_s: 26.409894704818726\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701609\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 56800\n",
-      "  training_iteration: 142\n",
-      "  trial_id: 7a318_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | RUNNING  | 172.17.0.4:26894 |    142 |          26.4099 | 56800 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
+      "2020-11-04 21:48:07,725 - wandb.wandb_agent - INFO - Running runs: ['sb79yg44']\n",
       "\n",
-      "2020-10-14 18:53:30,587\tERROR worker.py:1018 -- Possible unhandled error from worker: \u001b[36mray::RolloutWorker.par_iter_next_batch()\u001b[39m (pid=26878, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1158, in par_iter_next_batch\n",
-      "    batch.append(self.par_iter_next())\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1152, in par_iter_next\n",
-      "    return next(self.local_it)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 288, in gen_rollouts\n",
-      "    yield self.sample()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 579, in sample\n",
-      "    batches = [self.input_reader.next()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 93, in next\n",
-      "    batches = [self.get_data()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 209, in get_data\n",
-      "    item = next(self.rollout_provider)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 585, in _env_runner\n",
-      "    active_envs, to_eval, outputs = _process_observations(\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 797, in _process_observations\n",
-      "    prep_obs: EnvObsType = _get_or_raise(preprocessors,\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 233, in transform\n",
-      "    self.check_shape(observation)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 61, in check_shape\n",
-      "    raise ValueError(\n",
-      "ValueError: ('Observation outside expected value range', Dict(action_mask:Box(0.0, 1.0, (51,), float32), real_obs:Box(0.0, 1.0, (350,), float64)), {'real_obs': array([0.00000000e+00, 3.03030303e-01, 4.66666667e-01, 3.36410256e-01,\n",
-      "       6.46464646e-01, 1.31282051e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.66666667e-01, 3.96923077e-01, 0.00000000e+00,\n",
-      "       1.84615385e-04, 0.00000000e+00, 0.00000000e+00, 1.91919192e-01,\n",
-      "       4.66666667e-01, 5.66153846e-01, 2.72727273e-01, 2.78974359e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       6.01025641e-01, 7.77777778e-01, 1.18974359e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 3.20000000e-01,\n",
-      "       7.57575758e-01, 1.38051282e-02, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 5.82564103e-01, 1.00000000e+00,\n",
-      "       6.97435897e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       8.00000000e-01, 5.95897436e-01, 1.61616162e-01, 3.05641026e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       2.87179487e-01, 7.07070707e-02, 3.89743590e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 3.72307692e-01,\n",
-      "       5.25252525e-01, 6.46153846e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.22222222e-01, 6.00000000e-01, 4.82051282e-01, 1.01010101e-02,\n",
-      "       1.57948718e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       8.00000000e-01, 5.33333333e-01, 3.63636364e-01, 1.49743590e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.15151515e-01, 4.66666667e-01,\n",
-      "       3.54871795e-01, 3.43434343e-01, 3.01538462e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.00000000e-01, 7.41538462e-01,\n",
-      "       1.41414141e-01, 2.74871795e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.00000000e-01, 1.98974359e-01, 4.34343434e-01,\n",
-      "       7.67179487e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 5.43589744e-01, 2.02020202e-02, 8.61538462e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       4.24615385e-01, 4.34343434e-01, 2.46153846e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.03030303e-02, 4.66666667e-01, 4.87179487e-01,\n",
-      "       1.01010101e-01, 5.04615385e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 7.33333333e-01, 6.37948718e-01, 1.21212121e-01,\n",
-      "       2.42051282e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.00000000e-01, 9.94871795e-02, 4.04040404e-01, 7.38461538e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 3.13131313e-01, 6.66666667e-01,\n",
-      "       5.08717949e-01, 3.33333333e-01, 2.03076923e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 1.00000000e+00, 8.71794872e-01,\n",
-      "       1.00000000e+00, 1.14871795e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 4.81025641e-01, 6.36363636e-01,\n",
-      "       2.46153846e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.66666667e-01, 5.50769231e-01, 3.63636364e-01, 3.91794872e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 3.23232323e-01, 6.00000000e-01,\n",
-      "       4.53333333e-01, 1.01010101e-01, 2.99487179e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 2.32323232e-01, 6.00000000e-01, 4.78974359e-01,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.33333333e-01, 3.64102564e-01, 4.94949495e-01,\n",
-      "       3.83589744e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 5.04615385e-01, 1.21212121e-01, 9.43589744e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       5.65128205e-01, 5.75757576e-01, 4.92307692e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 7.33333333e-01, 5.50769231e-01,\n",
-      "       3.83838384e-01, 1.92820513e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,\n",
-      "       1.06666667e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 3.82564103e-01, 2.02020202e-01, 5.80512821e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       6.98461538e-01, 6.76767677e-01, 1.06666667e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.00000000e-01, 6.98461538e-01,\n",
-      "       7.27272727e-01, 8.20512821e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 3.65128205e-01, 5.05050505e-02,\n",
-      "       1.88717949e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       8.00000000e-01, 5.88717949e-01, 6.96969697e-01, 7.58974359e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       4.34871795e-01, 1.01010101e-01, 2.13333333e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 5.25252525e-01, 6.66666667e-01, 5.46666667e-01,\n",
-      "       0.00000000e+00, 3.69230769e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.51515152e-01, 6.00000000e-01, 6.16410256e-01, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 3.23232323e-01,\n",
-      "       7.33333333e-01, 7.24102564e-01, 8.08080808e-01, 3.05641026e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 1.31313131e-01, 4.66666667e-01,\n",
-      "       3.29230769e-01, 1.11111111e-01, 6.83076923e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.33333333e-01, 4.35897436e-01,\n",
-      "       3.03030303e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 5.84615385e-01, 6.06060606e-02,\n",
-      "       1.78461538e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 3.06666667e-01, 2.12121212e-01, 9.08717949e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       4.44102564e-01, 2.42424242e-01, 2.42051282e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.66666667e-01, 6.10256410e-01,\n",
-      "       3.03030303e-02, 2.52307692e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 6.01025641e-01, 3.13131313e-01,\n",
-      "       2.21538462e-03, 0.00000000e+00, 1.00000000e+00, 0.00000000e+00,\n",
-      "       8.00000000e-01, 6.66666667e-01, 1.01010101e-01, 3.26153846e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.04040404e-02, 6.00000000e-01,\n",
-      "       6.83076923e-01, 6.06060606e-02, 1.23076923e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 5.10769231e-01,\n",
-      "       2.32323232e-01, 3.22051282e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.44444444e-01, 6.66666667e-01, 4.91282051e-01, 1.01010101e-02,\n",
-      "       1.37435897e-03, 0.00000000e+00]), 'action_mask': array([False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False,  True, False, False, False,  True])})\n",
-      "2020-10-14 18:53:33,891\tERROR trial_runner.py:567 -- Trial RandomMasked_jss_env_7a318_00000: Error processing event.\n",
-      "Traceback (most recent call last):\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py\", line 515, in _process_trial\n",
-      "    result = self.trial_executor.fetch_result(trial)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py\", line 488, in fetch_result\n",
-      "    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1428, in get\n",
-      "    raise value.as_instanceof_cause()\n",
-      "ray.exceptions.RayTaskError(ValueError): \u001b[36mray::RandomMasked.train()\u001b[39m (pid=26894, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 516, in train\n",
-      "    raise e\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 505, in train\n",
-      "    result = Trainable.train(self)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py\", line 336, in train\n",
-      "    result = self.step()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py\", line 134, in step\n",
-      "    res = next(self.train_exec_impl)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 756, in __next__\n",
-      "    return next(self.built_iterator)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 551, in base_iterator\n",
-      "    batch = ray.get(obj_ref)\n",
-      "ray.exceptions.RayTaskError(ValueError): \u001b[36mray::RolloutWorker.par_iter_next_batch()\u001b[39m (pid=26854, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1158, in par_iter_next_batch\n",
-      "    batch.append(self.par_iter_next())\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1152, in par_iter_next\n",
-      "    return next(self.local_it)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 288, in gen_rollouts\n",
-      "    yield self.sample()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 579, in sample\n",
-      "    batches = [self.input_reader.next()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 93, in next\n",
-      "    batches = [self.get_data()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 209, in get_data\n",
-      "    item = next(self.rollout_provider)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 585, in _env_runner\n",
-      "    active_envs, to_eval, outputs = _process_observations(\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 797, in _process_observations\n",
-      "    prep_obs: EnvObsType = _get_or_raise(preprocessors,\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 233, in transform\n",
-      "    self.check_shape(observation)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 61, in check_shape\n",
-      "    raise ValueError(\n",
-      "ValueError: ('Observation outside expected value range', Dict(action_mask:Box(0.0, 1.0, (51,), float32), real_obs:Box(0.0, 1.0, (350,), float64)), {'real_obs': array([0.00000000e+00, 0.00000000e+00, 5.33333333e-01, 3.67179487e-01,\n",
-      "       5.05050505e-01, 6.72820513e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.07070707e-02, 4.00000000e-01, 3.89743590e-01, 7.47474747e-01,\n",
-      "       1.20205128e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 7.47692308e-01, 3.43434343e-01, 5.82564103e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.15151515e-01, 5.33333333e-01,\n",
-      "       5.48717949e-01, 6.76767677e-01, 1.37435897e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 7.33333333e-01, 5.56923077e-01,\n",
-      "       1.51515152e-01, 1.12820513e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 2.81025641e-01, 2.42424242e-01,\n",
-      "       1.47692308e-03, 0.00000000e+00, 0.00000000e+00, 7.07070707e-02,\n",
-      "       6.66666667e-01, 5.47692308e-01, 0.00000000e+00, 6.66666667e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 2.66666667e-01,\n",
-      "       1.79487179e-01, 7.17171717e-01, 1.95076923e-02, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 3.72307692e-01,\n",
-      "       1.71717172e-01, 1.12205128e-02, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 9.33333333e-01, 7.12820513e-01, 4.04040404e-02,\n",
-      "       2.58461538e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 3.48717949e-01, 4.34343434e-01, 1.14256410e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       4.75897436e-01, 1.01010101e-01, 5.90769231e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.66666667e-01, 7.82564103e-01,\n",
-      "       6.86868687e-01, 1.25128205e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.06060606e-02, 6.66666667e-01, 5.57948718e-01, 2.62626263e-01,\n",
-      "       5.33333333e-04, 0.00000000e+00, 1.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 4.02051282e-01, 9.69696970e-01, 5.53846154e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       5.22051282e-01, 1.51515152e-01, 1.84615385e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.08080808e-02, 8.00000000e-01, 7.04615385e-01,\n",
-      "       5.65656566e-01, 1.14871795e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 9.33333333e-01, 7.01538462e-01, 6.66666667e-01,\n",
-      "       6.25641026e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 2.92307692e-01, 6.36363636e-01, 1.12410256e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       5.40512821e-01, 1.51515152e-01, 1.43589744e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 7.33333333e-01, 6.56410256e-01,\n",
-      "       3.33333333e-01, 5.57948718e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.86868687e-01, 7.33333333e-01, 5.47692308e-01, 8.58585859e-01,\n",
-      "       1.74358974e-03, 0.00000000e+00, 0.00000000e+00, 2.02020202e-01,\n",
-      "       5.33333333e-01, 4.80000000e-01, 3.63636364e-01, 7.38461538e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       4.86153846e-01, 3.83838384e-01, 6.35897436e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 4.00000000e-01,\n",
-      "       6.26262626e-01, 3.69230769e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 8.72820513e-01, 1.00000000e+00,\n",
-      "       8.20512821e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 4.98461538e-01, 6.76767677e-01, 2.07179487e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 1.51515152e-01, 4.00000000e-01,\n",
-      "       4.74871795e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.13131313e-01, 8.00000000e-01, 6.59487179e-01,\n",
-      "       8.58585859e-01, 1.74358974e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,\n",
-      "       3.07692308e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.66666667e-01, 1.58974359e-01, 3.03030303e-02, 5.21025641e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.00000000e-01,\n",
-      "       3.84615385e-01, 5.65656566e-01, 1.25538462e-02, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 1.00000000e+00, 7.68205128e-01,\n",
-      "       1.00000000e+00, 3.36410256e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 6.26666667e-01, 1.00000000e+00,\n",
-      "       1.24923077e-02, 0.00000000e+00, 0.00000000e+00, 6.06060606e-02,\n",
-      "       5.33333333e-01, 4.31794872e-01, 4.54545455e-01, 9.23076923e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00,\n",
-      "       9.70256410e-01, 1.00000000e+00, 9.84615385e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 3.58974359e-01,\n",
-      "       1.01010101e-02, 8.41025641e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.44444444e-01, 9.33333333e-01, 8.36923077e-01, 4.04040404e-02,\n",
-      "       1.15487179e-02, 0.00000000e+00, 0.00000000e+00, 6.96969697e-01,\n",
-      "       6.00000000e-01, 5.84615385e-01, 2.92929293e-01, 1.07282051e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       4.65641026e-01, 0.00000000e+00, 3.38461538e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 9.33333333e-01, 7.02564103e-01,\n",
-      "       7.07070707e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.66666667e-01, 6.17435897e-01, 1.51515152e-01,\n",
-      "       3.38461538e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 3.81538462e-01, 2.02020202e-02, 4.59487179e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 3.13131313e-01, 5.33333333e-01,\n",
-      "       5.09743590e-01, 1.71717172e-01, 2.93333333e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.66666667e-01, 7.94871795e-01,\n",
-      "       4.94949495e-01, 6.97435897e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 4.62564103e-01, 3.23232323e-01,\n",
-      "       1.43589744e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       9.33333333e-01, 7.80512821e-01, 2.62626263e-01, 3.69230769e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 2.52525253e-01, 9.33333333e-01,\n",
-      "       8.87179487e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 5.10769231e-01,\n",
-      "       6.26262626e-01, 6.40000000e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 5.94871795e-01, 1.11111111e-01,\n",
-      "       2.21538462e-03, 0.00000000e+00]), 'action_mask': array([False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False,  True, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False,  True])})\n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 ERROR)\n",
-      "+----------------------------------+----------+-------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc   |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+-------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | ERROR    |       |    171 |          30.8067 | 68400 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+-------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "Number of errored trials: 1\n",
-      "+----------------------------------+--------------+--------------------------------------------------------------------------------------------+\n",
-      "| Trial name                       |   # failures | error file                                                                                 |\n",
-      "|----------------------------------+--------------+--------------------------------------------------------------------------------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 |            1 | /root/ray_results/ppo-jss/RandomMasked_jss_env_7a318_00000_0_2020-10-14_18-52-58/error.txt |\n",
-      "+----------------------------------+--------------+--------------------------------------------------------------------------------------------+\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 33800\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_214803-sb79yg44/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_214803-sb79yg44/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2071.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604527084\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/sb79yg44\u001b[0m\n",
+      "2020-11-04 21:58:08,292 - wandb.wandb_agent - INFO - Cleaning up finished run: sb79yg44\n",
+      "2020-11-04 21:58:08,653 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 21:58:08,653 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta43\n",
+      "2020-11-04 21:58:08,655 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta43\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/p3hdb6ys\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_215809-p3hdb6ys\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"random_loop.py\", line 73, in <module>\n",
-      "    rand_func()\n",
-      "  File \"random_loop.py\", line 55, in rand_func\n",
-      "    analysis = tune.run(RandomMaskedTrainer, config=config, stop=stop, name=\"ppo-jss\")\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py\", line 427, in run\n",
-      "    raise TuneError(\"Trials did not complete\", incomplete_trials)\n",
-      "ray.tune.error.TuneError: ('Trials did not complete', [RandomMasked_jss_env_7a318_00000])\n",
+      "2020-11-04 21:58:13,672 - wandb.wandb_agent - INFO - Running runs: ['p3hdb6ys']\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 26647\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program failed with code 1.  Press ctrl-c to abort syncing.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 33846\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_185253-ezglujb0/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_185253-ezglujb0/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_215809-p3hdb6ys/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_215809-p3hdb6ys/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 1967.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604527690\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33msuper-sweep-2\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/ezglujb0\u001b[0m\n",
-      "2020-10-14 18:53:43,767 - wandb.wandb_agent - INFO - Cleaning up finished run: ezglujb0\n",
-      "2020-10-14 18:53:44,146 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 18:53:44,146 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta53\n",
-      "2020-10-14 18:53:44,148 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python random_loop.py --instance_path=/JSS/JSS/env/instances/ta53\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/p3hdb6ys\u001b[0m\n",
+      "2020-11-04 22:08:18,999 - wandb.wandb_agent - INFO - Cleaning up finished run: p3hdb6ys\n",
+      "2020-11-04 22:08:19,334 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 22:08:19,334 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta44\n",
+      "2020-11-04 22:08:19,336 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta44\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mspring-sweep-3\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/lh9x5rb9\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/gx7ht69p\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_185345-gx7ht69p\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/q6lvwcdf\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_220820-q6lvwcdf\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "2020-10-14 18:53:49,166 - wandb.wandb_agent - INFO - Running runs: ['gx7ht69p']\n",
-      "2020-10-14 18:53:49,662\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
-      "== Status ==\n",
-      "Memory usage on this node: 11.7/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+-------+\n",
-      "| Trial name                       | status   | loc   |\n",
-      "|----------------------------------+----------+-------|\n",
-      "| RandomMasked_jss_env_99699_00000 | RUNNING  |       |\n",
-      "+----------------------------------+----------+-------+\n",
+      "2020-11-04 22:08:24,353 - wandb.wandb_agent - INFO - Running runs: ['q6lvwcdf']\n",
       "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 33892\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_220820-q6lvwcdf/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_220820-q6lvwcdf/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2091.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604528301\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/q6lvwcdf\u001b[0m\n",
+      "2020-11-04 22:18:29,584 - wandb.wandb_agent - INFO - Cleaning up finished run: q6lvwcdf\n",
+      "2020-11-04 22:18:29,915 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 22:18:29,916 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta45\n",
+      "2020-11-04 22:18:29,917 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta45\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/60frjwtk\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_221830-60frjwtk\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "\u001b[2m\u001b[36m(pid=28631)\u001b[0m 2020-10-14 18:53:52,367\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
-      "Result for RandomMasked_jss_env_99699_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-53-56\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 00d9f426bb89434f8ae7ff271eb43732\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 400\n",
-      "  iterations_since_restore: 1\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 68.7\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.3600000000000003\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 28631\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 3.336198329925537\n",
-      "  time_this_iter_s: 3.336198329925537\n",
-      "  time_total_s: 3.336198329925537\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701636\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 400\n",
-      "  training_iteration: 1\n",
-      "  trial_id: '99699_00000'\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 21.8/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |   ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_99699_00000 | RUNNING  | 172.17.0.4:28631 |      1 |           3.3362 |  400 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
+      "2020-11-04 22:18:34,933 - wandb.wandb_agent - INFO - Running runs: ['60frjwtk']\n",
       "\n",
-      "Result for RandomMasked_jss_env_99699_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-54-01\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 00d9f426bb89434f8ae7ff271eb43732\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 11600\n",
-      "  iterations_since_restore: 29\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 5.2\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.9\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 28631\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 7.95437479019165\n",
-      "  time_this_iter_s: 0.16468524932861328\n",
-      "  time_total_s: 7.95437479019165\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701641\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 11600\n",
-      "  training_iteration: 29\n",
-      "  trial_id: '99699_00000'\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 21.9/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_99699_00000 | RUNNING  | 172.17.0.4:28631 |     29 |          7.95437 | 11600 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 33938\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_221830-60frjwtk/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_221830-60frjwtk/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2032.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604528911\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/60frjwtk\u001b[0m\n",
+      "2020-11-04 22:28:39,901 - wandb.wandb_agent - INFO - Cleaning up finished run: 60frjwtk\n",
+      "2020-11-04 22:28:40,319 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 22:28:40,320 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta46\n",
+      "2020-11-04 22:28:40,321 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta46\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/4w63mxn5\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_222841-4w63mxn5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-04 22:28:45,337 - wandb.wandb_agent - INFO - Running runs: ['4w63mxn5']\n",
       "\n",
-      "Result for RandomMasked_jss_env_99699_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-54-06\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 00d9f426bb89434f8ae7ff271eb43732\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 23200\n",
-      "  iterations_since_restore: 58\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 28631\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 12.706214427947998\n",
-      "  time_this_iter_s: 0.1642756462097168\n",
-      "  time_total_s: 12.706214427947998\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701646\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 23200\n",
-      "  training_iteration: 58\n",
-      "  trial_id: '99699_00000'\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_99699_00000 | RUNNING  | 172.17.0.4:28631 |     58 |          12.7062 | 23200 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 33984\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_222841-4w63mxn5/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_222841-4w63mxn5/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2070.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604529522\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/4w63mxn5\u001b[0m\n",
+      "2020-11-04 22:38:45,728 - wandb.wandb_agent - INFO - Cleaning up finished run: 4w63mxn5\n",
+      "2020-11-04 22:38:46,210 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 22:38:46,210 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta47\n",
+      "2020-11-04 22:38:46,212 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta47\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/qpbtop8x\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_223847-qpbtop8x\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-04 22:38:51,228 - wandb.wandb_agent - INFO - Running runs: ['qpbtop8x']\n",
       "\n",
-      "Result for RandomMasked_jss_env_99699_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-54-11\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 00d9f426bb89434f8ae7ff271eb43732\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 34800\n",
-      "  iterations_since_restore: 87\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 28631\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 17.468780755996704\n",
-      "  time_this_iter_s: 0.15766501426696777\n",
-      "  time_total_s: 17.468780755996704\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701651\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 34800\n",
-      "  training_iteration: 87\n",
-      "  trial_id: '99699_00000'\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_99699_00000 | RUNNING  | 172.17.0.4:28631 |     87 |          17.4688 | 34800 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 34030\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_223847-qpbtop8x/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_223847-qpbtop8x/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 1991.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604530128\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/qpbtop8x\u001b[0m\n",
+      "2020-11-04 22:48:56,548 - wandb.wandb_agent - INFO - Cleaning up finished run: qpbtop8x\n",
+      "2020-11-04 22:48:56,937 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 22:48:56,937 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta48\n",
+      "2020-11-04 22:48:56,939 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta48\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/gsihk78x\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_224857-gsihk78x\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-04 22:49:01,955 - wandb.wandb_agent - INFO - Running runs: ['gsihk78x']\n",
       "\n",
-      "Result for RandomMasked_jss_env_99699_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-54-16\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 00d9f426bb89434f8ae7ff271eb43732\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 46400\n",
-      "  iterations_since_restore: 116\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 4.3\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.9\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 28631\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 22.175960779190063\n",
-      "  time_this_iter_s: 0.1871342658996582\n",
-      "  time_total_s: 22.175960779190063\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701656\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 46400\n",
-      "  training_iteration: 116\n",
-      "  trial_id: '99699_00000'\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_99699_00000 | RUNNING  | 172.17.0.4:28631 |    116 |           22.176 | 46400 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 34076\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_224857-gsihk78x/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_224857-gsihk78x/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2052.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 602\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604530739\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/gsihk78x\u001b[0m\n",
+      "2020-11-04 22:59:07,301 - wandb.wandb_agent - INFO - Cleaning up finished run: gsihk78x\n",
+      "2020-11-04 22:59:07,606 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 22:59:07,606 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta49\n",
+      "2020-11-04 22:59:07,608 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta49\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/pvt5040k\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_225908-pvt5040k\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-04 22:59:12,624 - wandb.wandb_agent - INFO - Running runs: ['pvt5040k']\n",
       "\n",
-      "Result for RandomMasked_jss_env_99699_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-54-21\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 00d9f426bb89434f8ae7ff271eb43732\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 58000\n",
-      "  iterations_since_restore: 145\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 28631\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 26.801780700683594\n",
-      "  time_this_iter_s: 0.15772652626037598\n",
-      "  time_total_s: 26.801780700683594\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701661\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 58000\n",
-      "  training_iteration: 145\n",
-      "  trial_id: '99699_00000'\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.1/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_99699_00000 | RUNNING  | 172.17.0.4:28631 |    145 |          26.8018 | 58000 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 34122\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_225908-pvt5040k/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_225908-pvt5040k/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2072.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604531349\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/pvt5040k\u001b[0m\n",
+      "2020-11-04 23:09:17,980 - wandb.wandb_agent - INFO - Cleaning up finished run: pvt5040k\n",
+      "2020-11-04 23:09:18,328 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 23:09:18,328 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta50\n",
+      "2020-11-04 23:09:18,330 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta50\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/7oeiazwm\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_230919-7oeiazwm\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-04 23:09:23,346 - wandb.wandb_agent - INFO - Running runs: ['7oeiazwm']\n",
       "\n",
-      "2020-10-14 18:54:21,879\tERROR worker.py:1018 -- Possible unhandled error from worker: \u001b[36mray::RolloutWorker.par_iter_next_batch()\u001b[39m (pid=28512, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1158, in par_iter_next_batch\n",
-      "    batch.append(self.par_iter_next())\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1152, in par_iter_next\n",
-      "    return next(self.local_it)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 288, in gen_rollouts\n",
-      "    yield self.sample()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 579, in sample\n",
-      "    batches = [self.input_reader.next()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 93, in next\n",
-      "    batches = [self.get_data()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 209, in get_data\n",
-      "    item = next(self.rollout_provider)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 585, in _env_runner\n",
-      "    active_envs, to_eval, outputs = _process_observations(\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 797, in _process_observations\n",
-      "    prep_obs: EnvObsType = _get_or_raise(preprocessors,\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 233, in transform\n",
-      "    self.check_shape(observation)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 61, in check_shape\n",
-      "    raise ValueError(\n",
-      "ValueError: ('Observation outside expected value range', Dict(action_mask:Box(0.0, 1.0, (51,), float32), real_obs:Box(0.0, 1.0, (350,), float64)), {'real_obs': array([0.00000000e+00, 0.00000000e+00, 5.33333333e-01, 3.67179487e-01,\n",
-      "       1.31313131e-01, 1.84615385e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 5.87692308e-01, 2.42424242e-01,\n",
-      "       1.16923077e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       8.66666667e-01, 8.18461538e-01, 1.71717172e-01, 1.84615385e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.56565657e-01, 6.66666667e-01,\n",
-      "       6.98461538e-01, 1.01010101e-02, 9.23076923e-04, 0.00000000e+00,\n",
-      "       1.00000000e+00, 0.00000000e+00, 6.66666667e-01, 4.84102564e-01,\n",
-      "       4.44444444e-01, 1.74358974e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.17171717e-01, 6.66666667e-01, 2.94358974e-01, 0.00000000e+00,\n",
-      "       1.02564103e-04, 0.00000000e+00, 0.00000000e+00, 4.04040404e-01,\n",
-      "       6.66666667e-01, 5.13846154e-01, 7.77777778e-01, 1.57948718e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 2.00000000e-01,\n",
-      "       1.30256410e-01, 5.35353535e-01, 7.20000000e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 3.72307692e-01,\n",
-      "       4.54545455e-01, 1.09333333e-02, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 6.25641026e-01, 5.45454545e-01,\n",
-      "       8.20512821e-05, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 2.42051282e-01, 1.61616162e-01, 1.25128205e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       3.11794872e-01, 4.04040404e-02, 1.16923077e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.33333333e-01, 4.99487179e-01,\n",
-      "       6.56565657e-01, 8.61538462e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 5.33333333e-01, 3.83589744e-01, 2.22222222e-01,\n",
-      "       5.33333333e-04, 0.00000000e+00, 0.00000000e+00, 2.32323232e-01,\n",
-      "       6.00000000e-01, 4.54358974e-01, 3.13131313e-01, 7.58974359e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       3.66153846e-01, 7.87878788e-01, 5.29230769e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.00000000e-01, 6.55384615e-01,\n",
-      "       0.00000000e+00, 2.66666667e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       8.08080808e-02, 8.00000000e-01, 6.92307692e-01, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 3.06666667e-01, 6.46464646e-01, 3.28205128e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.66666667e-01,\n",
-      "       6.07179487e-01, 3.33333333e-01, 6.15384615e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 4.44102564e-01,\n",
-      "       9.09090909e-02, 1.57948718e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       8.08080808e-02, 6.66666667e-02, 8.00000000e-02, 7.07070707e-01,\n",
-      "       8.82051282e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 5.00512821e-01, 4.14141414e-01, 6.76923077e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       3.95897436e-01, 1.51515152e-01, 8.41025641e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 9.33333333e-01, 6.40000000e-01,\n",
-      "       7.17171717e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.05050505e-02, 6.66666667e-01, 6.82051282e-01, 5.05050505e-02,\n",
-      "       2.25641026e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 5.04615385e-01, 3.03030303e-02, 9.84615385e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.41538462e-01, 9.79797980e-01, 5.68205128e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 3.33333333e-01, 2.86153846e-01,\n",
-      "       2.72727273e-01, 9.23076923e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,\n",
-      "       1.39487179e-03, 0.00000000e+00, 0.00000000e+00, 5.35353535e-01,\n",
-      "       8.66666667e-01, 5.94871795e-01, 5.45454545e-01, 3.63076923e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.68205128e-01, 6.66666667e-01, 3.69230769e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 2.66666667e-01, 2.67692308e-01,\n",
-      "       7.47474747e-01, 5.21025641e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 3.65128205e-01, 1.51515152e-01,\n",
-      "       7.69230769e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.66666667e-01, 4.74871795e-01, 1.21212121e-01, 2.95384615e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.66666667e-01,\n",
-      "       8.50256410e-01, 5.35353535e-01, 4.77948718e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.00000000e-01, 6.10256410e-01,\n",
-      "       5.45454545e-01, 6.35897436e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 6.31794872e-01, 7.07070707e-01,\n",
-      "       7.15897436e-03, 0.00000000e+00, 0.00000000e+00, 5.05050505e-01,\n",
-      "       6.00000000e-01, 6.04102564e-01, 4.04040404e-01, 1.09128205e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 3.03030303e-02, 7.33333333e-01,\n",
-      "       5.03589744e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.11111111e-01, 7.33333333e-01, 5.93846154e-01,\n",
-      "       5.55555556e-01, 2.15384615e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.66666667e-01, 4.54358974e-01, 4.94949495e-01,\n",
-      "       4.26666667e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 3.81538462e-01, 1.71717172e-01, 3.26153846e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       5.88717949e-01, 1.71717172e-01, 6.07179487e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 5.88717949e-01,\n",
-      "       2.92929293e-01, 5.76410256e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.84848485e-01, 4.66666667e-01, 3.88717949e-01, 6.36363636e-01,\n",
-      "       1.29230769e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 5.16923077e-01, 6.06060606e-02, 1.61230769e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.47692308e-01, 6.16161616e-01, 4.94358974e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.00000000e-01, 3.78461538e-01,\n",
-      "       2.52525253e-01, 8.82051282e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 5.33333333e-01, 2.82051282e-01, 6.06060606e-01,\n",
-      "       4.43076923e-03, 0.00000000e+00]), 'action_mask': array([False, False, False, False,  True, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False,  True])})\n"
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 34168\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_230919-7oeiazwm/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_230919-7oeiazwm/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2010.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604531960\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/7oeiazwm\u001b[0m\n",
+      "2020-11-04 23:19:23,596 - wandb.wandb_agent - INFO - Cleaning up finished run: 7oeiazwm\n",
+      "2020-11-04 23:19:23,944 - wandb.wandb_agent - INFO - Agent received command: exit\n",
+      "2020-11-04 23:19:23,944 - wandb.wandb_agent - INFO - Received exit command. Killing runs and quitting.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Terminating and syncing runs. Press ctrl-c to kill.\n"
      ]
     }
    ],
    "source": [
-    "!wandb agent lh9x5rb9"
+    "!wandb agent wnc8ihq1"
    ]
   },
   {
diff --git a/JSS/__pycache__/default_config.cpython-38.pyc b/JSS/__pycache__/default_config.cpython-38.pyc
index 14e0018..8fbfc47 100644
Binary files a/JSS/__pycache__/default_config.cpython-38.pyc and b/JSS/__pycache__/default_config.cpython-38.pyc differ
diff --git a/JSS/default_config.py b/JSS/default_config.py
index 46f4d10..4729210 100644
--- a/JSS/default_config.py
+++ b/JSS/default_config.py
@@ -6,7 +6,7 @@ default_config = {
     'env': 'jss_env',
     'seed': 0,
     'framework': 'torch',
-    'log_level': 'INFO',
+    'log_level': 'WARN',
     'num_gpus': 1,
     'instance_path': '/JSS/JSS/env/instances/ta51',
     'num_envs_per_worker': 2,
diff --git a/JSS/env/__pycache__/JSS.cpython-38.pyc b/JSS/env/__pycache__/JSS.cpython-38.pyc
index b190093..143d813 100644
Binary files a/JSS/env/__pycache__/JSS.cpython-38.pyc and b/JSS/env/__pycache__/JSS.cpython-38.pyc differ
diff --git a/JSS/train.py b/JSS/train.py
index d4ac941..0275259 100644
--- a/JSS/train.py
+++ b/JSS/train.py
@@ -47,10 +47,10 @@ def train_func():
     config.pop('layer_size', None)
     config.pop('layer_nb', None)
 
-    ray.init()
+    ray.init(num_gpus=1)
 
     stop = {
-        "time_total_s": 60 * 60,
+        "time_total_s": 10 * 60,
     }
 
     analysis = tune.run(PPOTrainer, config=config, stop=stop, name="ppo-jss")
diff --git a/JSS/wandb/debug-internal.log b/JSS/wandb/debug-internal.log
index f73d8af..d91cbab 120000
--- a/JSS/wandb/debug-internal.log
+++ b/JSS/wandb/debug-internal.log
@@ -1 +1 @@
-run-20201014_204512-kkype8ue/logs/debug-internal.log
\ No newline at end of file
+run-20201105_103715-hg5eggv5/logs/debug-internal.log
\ No newline at end of file
diff --git a/JSS/wandb/debug.log b/JSS/wandb/debug.log
index db2ed2e..f6cb9ea 120000
--- a/JSS/wandb/debug.log
+++ b/JSS/wandb/debug.log
@@ -1 +1 @@
-run-20201014_204512-kkype8ue/logs/debug.log
\ No newline at end of file
+run-20201105_103715-hg5eggv5/logs/debug.log
\ No newline at end of file
diff --git a/JSS/wandb/latest-run b/JSS/wandb/latest-run
index f19e5b0..18df6aa 120000
--- a/JSS/wandb/latest-run
+++ b/JSS/wandb/latest-run
@@ -1 +1 @@
-run-20201014_204512-kkype8ue
\ No newline at end of file
+run-20201105_103715-hg5eggv5
\ No newline at end of file
diff --git a/JSS/wandb/run-20201014_185459-4qedwvw4/logs/debug-internal.log b/JSS/wandb/run-20201014_185459-4qedwvw4/logs/debug-internal.log
index 62aefa0..a469c27 100644
--- a/JSS/wandb/run-20201014_185459-4qedwvw4/logs/debug-internal.log
+++ b/JSS/wandb/run-20201014_185459-4qedwvw4/logs/debug-internal.log
@@ -3791,3 +3791,60 @@
 2020-10-14 20:48:22,755 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
 2020-10-14 20:48:24,674 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
 2020-10-14 20:48:29,293 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:48:33,903 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:48:37,761 DEBUG   HandlerThread:30187 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:48:37,761 DEBUG   SenderThread:30187 [sender.py:send():88] send: request
+2020-10-14 20:48:37,761 DEBUG   SenderThread:30187 [sender.py:send_request():97] send_request: status
+2020-10-14 20:48:37,765 DEBUG   SenderThread:30187 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:48:37,962 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:48:38,519 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:48:43,143 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:48:47,759 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:48:52,385 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:48:52,968 DEBUG   HandlerThread:30187 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:48:52,968 DEBUG   SenderThread:30187 [sender.py:send():88] send: request
+2020-10-14 20:48:52,968 DEBUG   SenderThread:30187 [sender.py:send_request():97] send_request: status
+2020-10-14 20:48:52,975 DEBUG   SenderThread:30187 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:48:53,184 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:48:57,005 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:01,622 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:06,249 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:08,189 DEBUG   HandlerThread:30187 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:08,190 DEBUG   SenderThread:30187 [sender.py:send():88] send: request
+2020-10-14 20:49:08,190 DEBUG   SenderThread:30187 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:08,195 DEBUG   SenderThread:30187 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:08,392 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:10,874 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:15,492 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:20,107 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:23,398 DEBUG   HandlerThread:30187 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:23,398 DEBUG   SenderThread:30187 [sender.py:send():88] send: request
+2020-10-14 20:49:23,398 DEBUG   SenderThread:30187 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:23,403 DEBUG   SenderThread:30187 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:23,595 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:24,725 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:29,333 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:33,953 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:38,566 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:38,601 DEBUG   HandlerThread:30187 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:38,601 DEBUG   SenderThread:30187 [sender.py:send():88] send: request
+2020-10-14 20:49:38,601 DEBUG   SenderThread:30187 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:38,605 DEBUG   SenderThread:30187 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:38,802 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:43,182 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:47,813 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:52,436 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:53,808 DEBUG   HandlerThread:30187 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:53,809 DEBUG   SenderThread:30187 [sender.py:send():88] send: request
+2020-10-14 20:49:53,809 DEBUG   SenderThread:30187 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:53,813 DEBUG   SenderThread:30187 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:54,014 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:57,041 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:50:01,665 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:50:06,273 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:50:09,020 DEBUG   HandlerThread:30187 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:50:09,020 DEBUG   SenderThread:30187 [sender.py:send():88] send: request
+2020-10-14 20:50:09,020 DEBUG   SenderThread:30187 [sender.py:send_request():97] send_request: status
+2020-10-14 20:50:09,024 DEBUG   SenderThread:30187 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:50:09,226 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:50:10,902 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
diff --git a/JSS/wandb/run-20201014_185459-4qedwvw4/run-4qedwvw4.wandb b/JSS/wandb/run-20201014_185459-4qedwvw4/run-4qedwvw4.wandb
index fe32750..a173876 100644
Binary files a/JSS/wandb/run-20201014_185459-4qedwvw4/run-4qedwvw4.wandb and b/JSS/wandb/run-20201014_185459-4qedwvw4/run-4qedwvw4.wandb differ
diff --git a/JSS/wandb/run-20201014_185623-es6i30gb/logs/debug-internal.log b/JSS/wandb/run-20201014_185623-es6i30gb/logs/debug-internal.log
index 6c28b35..39056d1 100644
--- a/JSS/wandb/run-20201014_185623-es6i30gb/logs/debug-internal.log
+++ b/JSS/wandb/run-20201014_185623-es6i30gb/logs/debug-internal.log
@@ -3766,3 +3766,55 @@
 2020-10-14 20:48:28,206 DEBUG   SenderThread:34843 [sender.py:send_request():97] send_request: status
 2020-10-14 20:48:28,210 DEBUG   SenderThread:34843 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
 2020-10-14 20:48:28,411 DEBUG   SenderThread:34843 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:48:32,759 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:48:37,379 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:48:41,998 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:48:43,417 DEBUG   HandlerThread:34843 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:48:43,417 DEBUG   SenderThread:34843 [sender.py:send():88] send: request
+2020-10-14 20:48:43,418 DEBUG   SenderThread:34843 [sender.py:send_request():97] send_request: status
+2020-10-14 20:48:43,425 DEBUG   SenderThread:34843 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:48:43,622 DEBUG   SenderThread:34843 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:48:46,618 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:48:51,237 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:48:55,878 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:48:58,628 DEBUG   HandlerThread:34843 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:48:58,629 DEBUG   SenderThread:34843 [sender.py:send():88] send: request
+2020-10-14 20:48:58,629 DEBUG   SenderThread:34843 [sender.py:send_request():97] send_request: status
+2020-10-14 20:48:58,634 DEBUG   SenderThread:34843 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:48:58,828 DEBUG   SenderThread:34843 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:00,486 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:05,100 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:09,717 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:13,834 DEBUG   HandlerThread:34843 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:13,834 DEBUG   SenderThread:34843 [sender.py:send():88] send: request
+2020-10-14 20:49:13,835 DEBUG   SenderThread:34843 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:13,839 DEBUG   SenderThread:34843 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:14,032 DEBUG   SenderThread:34843 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:14,334 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:18,948 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:23,561 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:28,192 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:29,038 DEBUG   HandlerThread:34843 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:29,038 DEBUG   SenderThread:34843 [sender.py:send():88] send: request
+2020-10-14 20:49:29,039 DEBUG   SenderThread:34843 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:29,043 DEBUG   SenderThread:34843 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:29,241 DEBUG   SenderThread:34843 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:32,806 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:37,429 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:42,040 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:44,247 DEBUG   HandlerThread:34843 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:44,247 DEBUG   SenderThread:34843 [sender.py:send():88] send: request
+2020-10-14 20:49:44,247 DEBUG   SenderThread:34843 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:44,252 DEBUG   SenderThread:34843 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:44,453 DEBUG   SenderThread:34843 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:46,669 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:51,288 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:55,904 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:59,459 DEBUG   HandlerThread:34843 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:59,459 DEBUG   SenderThread:34843 [sender.py:send():88] send: request
+2020-10-14 20:49:59,460 DEBUG   SenderThread:34843 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:59,464 DEBUG   SenderThread:34843 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:59,667 DEBUG   SenderThread:34843 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:50:00,513 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:50:05,125 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:50:09,744 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
diff --git a/JSS/wandb/run-20201014_185623-es6i30gb/run-es6i30gb.wandb b/JSS/wandb/run-20201014_185623-es6i30gb/run-es6i30gb.wandb
index 6b25ef1..0114685 100644
Binary files a/JSS/wandb/run-20201014_185623-es6i30gb/run-es6i30gb.wandb and b/JSS/wandb/run-20201014_185623-es6i30gb/run-es6i30gb.wandb differ
