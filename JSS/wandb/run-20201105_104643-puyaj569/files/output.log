2020-11-05 10:46:46,894	INFO services.py:1164 -- View the Ray dashboard at [1m[32mhttp://127.0.0.1:8265[39m[22m
== Status ==
Memory usage on this node: 12.7/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 80/80 CPUs, 1/1 GPUs, 0.0/558.01 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 RUNNING)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_3466f_00000 | RUNNING  |       |
+-------------------------+----------+-------+


[2m[36m(pid=53647)[0m 2020-11-05 10:46:49,677	INFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.
[2m[36m(pid=53647)[0m /root/miniconda3/lib/python3.8/site-packages/torch/cuda/__init__.py:125: UserWarning: 
[2m[36m(pid=53647)[0m GeForce RTX 2080 Ti with CUDA capability sm_75 is not compatible with the current PyTorch installation.
[2m[36m(pid=53647)[0m The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 compute_37.
[2m[36m(pid=53647)[0m If you want to use the GeForce RTX 2080 Ti GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/
[2m[36m(pid=53647)[0m 
[2m[36m(pid=53647)[0m   warnings.warn(incompatible_device_warn.format(device_name, capability, " ".join(arch_list), device_name))
[2m[36m(pid=53563)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53563)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53563)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53563)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53563)[0m *** SIGSEGV (@0x0) received by PID 53563 (TID 0x7f77c382d700) from PID 0; stack trace: ***
[2m[36m(pid=53563)[0m     @     0x7f77c3406390 (unknown)
[2m[36m(pid=53563)[0m     @     0x7f48c3229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53563)[0m     @     0x7f48c29547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53563)[0m     @     0x7f48c29578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53646)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53646)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53646)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53646)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53646)[0m *** SIGSEGV (@0x0) received by PID 53646 (TID 0x7f26f540a700) from PID 0; stack trace: ***
[2m[36m(pid=53646)[0m     @     0x7f26f4fe3390 (unknown)
[2m[36m(pid=53646)[0m     @     0x7ef7f4f4ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53646)[0m     @     0x7ef7f467a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53646)[0m     @     0x7ef7f467d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53646)[0m     @     0x7ef7f467dad3 at::TensorIterator::for_each()
[2m[36m(pid=53545)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53545)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53545)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53545)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53545)[0m *** SIGSEGV (@0x0) received by PID 53545 (TID 0x7f8c07a6c700) from PID 0; stack trace: ***
[2m[36m(pid=53545)[0m     @     0x7f8c07645390 (unknown)
[2m[36m(pid=53545)[0m     @     0x7f5d075f2f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53545)[0m     @     0x7f5d06d1d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53622)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53622)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53622)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53622)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53622)[0m *** SIGSEGV (@0x0) received by PID 53622 (TID 0x7f1c0ebe7700) from PID 0; stack trace: ***
[2m[36m(pid=53622)[0m     @     0x7f1c0e7c0390 (unknown)
[2m[36m(pid=53622)[0m     @     0x7eed0e4f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53622)[0m     @     0x7eed0dc247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53622)[0m     @     0x7eed0dc278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53532)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53532)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53532)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53532)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53532)[0m *** SIGSEGV (@0x0) received by PID 53532 (TID 0x7f46d5fb0700) from PID 0; stack trace: ***
[2m[36m(pid=53532)[0m     @     0x7f46d5b89390 (unknown)
[2m[36m(pid=53532)[0m     @     0x7f17d5a0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53532)[0m     @     0x7f17d51357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53613)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53613)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53613)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53613)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53613)[0m *** SIGSEGV (@0x0) received by PID 53613 (TID 0x7f58e309c700) from PID 0; stack trace: ***
[2m[36m(pid=53613)[0m     @     0x7f58e2c75390 (unknown)
[2m[36m(pid=53613)[0m     @     0x7f29e2ad1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53613)[0m     @     0x7f29e21fc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53613)[0m     @     0x7f29e21ff8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53613)[0m     @     0x7f29e21ffad3 at::TensorIterator::for_each()
[2m[36m(pid=53613)[0m     @     0x7f29e21ffd91 at::TensorIterator::for_each()
[2m[36m(pid=53613)[0m     @     0x7f29e2ae2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53656)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53656)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53656)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53656)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53656)[0m *** SIGSEGV (@0x0) received by PID 53656 (TID 0x7f297a578700) from PID 0; stack trace: ***
[2m[36m(pid=53656)[0m     @     0x7f297a151390 (unknown)
[2m[36m(pid=53656)[0m     @     0x7efa7a10df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53656)[0m     @     0x7efa798387db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53656)[0m     @     0x7efa7983b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53656)[0m     @     0x7efa7983bad3 at::TensorIterator::for_each()
[2m[36m(pid=53656)[0m     @     0x7efa7983bd91 at::TensorIterator::for_each()
[2m[36m(pid=53656)[0m     @     0x7efa7a11eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53618)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53618)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53618)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53618)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53618)[0m *** SIGSEGV (@0x0) received by PID 53618 (TID 0x7f12a96b5700) from PID 0; stack trace: ***
[2m[36m(pid=53618)[0m     @     0x7f12a928e390 (unknown)
[2m[36m(pid=53618)[0m     @     0x7ee3a9242f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53618)[0m     @     0x7ee3a896d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53618)[0m     @     0x7ee3a89708f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53618)[0m     @     0x7ee3a8970ad3 at::TensorIterator::for_each()
[2m[36m(pid=53637)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53637)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53637)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53637)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53637)[0m *** SIGSEGV (@0x0) received by PID 53637 (TID 0x7f55ef6c5700) from PID 0; stack trace: ***
[2m[36m(pid=53637)[0m     @     0x7f55ef29e390 (unknown)
[2m[36m(pid=53637)[0m     @     0x7f26ef239f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53637)[0m     @     0x7f26ee9647db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53637)[0m     @     0x7f26ee9678f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53637)[0m     @     0x7f26ee967ad3 at::TensorIterator::for_each()
[2m[36m(pid=53637)[0m     @     0x7f26ee967d91 at::TensorIterator::for_each()
[2m[36m(pid=53605)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53605)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53605)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53605)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53605)[0m *** SIGSEGV (@0x0) received by PID 53605 (TID 0x7f7bea8c6700) from PID 0; stack trace: ***
[2m[36m(pid=53605)[0m     @     0x7f7bea49f390 (unknown)
[2m[36m(pid=53605)[0m     @     0x7f4cea34bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53605)[0m     @     0x7f4ce9a767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53605)[0m     @     0x7f4ce9a798f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53605)[0m     @     0x7f4ce9a79ad3 at::TensorIterator::for_each()
[2m[36m(pid=53605)[0m     @     0x7f4ce9a79d91 at::TensorIterator::for_each()
[2m[36m(pid=53651)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53651)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53651)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53651)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53651)[0m *** SIGSEGV (@0x0) received by PID 53651 (TID 0x7fdf6a58c700) from PID 0; stack trace: ***
[2m[36m(pid=53651)[0m     @     0x7fdf6a165390 (unknown)
[2m[36m(pid=53651)[0m     @     0x7fb06a10df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53651)[0m     @     0x7fb0698387db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53651)[0m     @     0x7fb06983b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53651)[0m     @     0x7fb06983bad3 at::TensorIterator::for_each()
[2m[36m(pid=53603)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53603)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53603)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53603)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53603)[0m *** SIGSEGV (@0x0) received by PID 53603 (TID 0x7f8cca4f0700) from PID 0; stack trace: ***
[2m[36m(pid=53603)[0m     @     0x7f8cca0c9390 (unknown)
[2m[36m(pid=53603)[0m     @     0x7f5dca07af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53603)[0m     @     0x7f5dc97a57db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53603)[0m     @     0x7f5dc97a88f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53603)[0m     @     0x7f5dc97a8ad3 at::TensorIterator::for_each()
[2m[36m(pid=53603)[0m     @     0x7f5dc97a8d91 at::TensorIterator::for_each()
[2m[36m(pid=53603)[0m     @     0x7f5dca08bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53536)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53536)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53536)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53536)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53536)[0m *** SIGSEGV (@0x0) received by PID 53536 (TID 0x7f3224aa9700) from PID 0; stack trace: ***
[2m[36m(pid=53536)[0m     @     0x7f3224682390 (unknown)
[2m[36m(pid=53536)[0m     @     0x7f032460ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53536)[0m     @     0x7f0323d397db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53536)[0m     @     0x7f0323d3c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53536)[0m     @     0x7f0323d3cad3 at::TensorIterator::for_each()
[2m[36m(pid=53584)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53584)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53584)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53584)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53584)[0m *** SIGSEGV (@0x0) received by PID 53584 (TID 0x7fae58ef7700) from PID 0; stack trace: ***
[2m[36m(pid=53584)[0m     @     0x7fae58ad0390 (unknown)
[2m[36m(pid=53584)[0m     @     0x7f7f58825f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53584)[0m     @     0x7f7f57f507db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53584)[0m     @     0x7f7f57f538f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53584)[0m     @     0x7f7f57f53ad3 at::TensorIterator::for_each()
[2m[36m(pid=53531)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53531)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53531)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53531)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53531)[0m *** SIGSEGV (@0x0) received by PID 53531 (TID 0x7f4e370ab700) from PID 0; stack trace: ***
[2m[36m(pid=53531)[0m     @     0x7f4e36c84390 (unknown)
[2m[36m(pid=53531)[0m     @     0x7f1f36c10f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53531)[0m     @     0x7f1f3633b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53531)[0m     @     0x7f1f3633e8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53650)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53650)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53650)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53650)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53650)[0m *** SIGSEGV (@0x0) received by PID 53650 (TID 0x7f33e45f8700) from PID 0; stack trace: ***
[2m[36m(pid=53650)[0m     @     0x7f33e41d1390 (unknown)
[2m[36m(pid=53650)[0m     @     0x7f04e401cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53650)[0m     @     0x7f04e37477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53650)[0m     @     0x7f04e374a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53650)[0m     @     0x7f04e374aad3 at::TensorIterator::for_each()
[2m[36m(pid=53650)[0m     @     0x7f04e374ad91 at::TensorIterator::for_each()
[2m[36m(pid=53642)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53642)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53642)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53642)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53642)[0m *** SIGSEGV (@0x0) received by PID 53642 (TID 0x7fb6a9499700) from PID 0; stack trace: ***
[2m[36m(pid=53642)[0m     @     0x7fb6a9072390 (unknown)
[2m[36m(pid=53642)[0m     @     0x7f87a8fe3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53642)[0m     @     0x7f87a870e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53642)[0m     @     0x7f87a87118f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53642)[0m     @     0x7f87a8711ad3 at::TensorIterator::for_each()
[2m[36m(pid=53654)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53654)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53654)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53654)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53654)[0m *** SIGSEGV (@0x0) received by PID 53654 (TID 0x7f211f285700) from PID 0; stack trace: ***
[2m[36m(pid=53654)[0m     @     0x7f211ee5e390 (unknown)
[2m[36m(pid=53654)[0m     @     0x7ef21ee03f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53654)[0m     @     0x7ef21e52e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53654)[0m     @     0x7ef21e5318f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53654)[0m     @     0x7ef21e531ad3 at::TensorIterator::for_each()
[2m[36m(pid=53654)[0m     @     0x7ef21e531d91 at::TensorIterator::for_each()
[2m[36m(pid=53654)[0m     @     0x7ef21ee14b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53654)[0m     @     0x7ef21ee37c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53654)[0m     @     0x7ef21e2d9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53611)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53611)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53611)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53611)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53611)[0m *** SIGSEGV (@0x0) received by PID 53611 (TID 0x7faff7e8e700) from PID 0; stack trace: ***
[2m[36m(pid=53611)[0m     @     0x7faff7a67390 (unknown)
[2m[36m(pid=53611)[0m     @     0x7f80f78def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53611)[0m     @     0x7f80f70097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53611)[0m     @     0x7f80f700c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53611)[0m     @     0x7f80f700cad3 at::TensorIterator::for_each()
[2m[36m(pid=53611)[0m     @     0x7f80f700cd91 at::TensorIterator::for_each()
[2m[36m(pid=53611)[0m     @     0x7f80f78efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53611)[0m     @     0x7f80f7912c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53636)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53636)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53636)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53636)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53636)[0m *** SIGSEGV (@0x0) received by PID 53636 (TID 0x7fde842cb700) from PID 0; stack trace: ***
[2m[36m(pid=53636)[0m     @     0x7fde83ea4390 (unknown)
[2m[36m(pid=53636)[0m     @     0x7faf83e0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53636)[0m     @     0x7faf835367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53636)[0m     @     0x7faf835398f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53636)[0m     @     0x7faf83539ad3 at::TensorIterator::for_each()
[2m[36m(pid=53636)[0m     @     0x7faf83539d91 at::TensorIterator::for_each()
[2m[36m(pid=53636)[0m     @     0x7faf83e1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53636)[0m     @     0x7faf83e3fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53636)[0m     @     0x7faf832e1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53636)[0m     @     0x7faf832df388 at::native::copy_impl()
[2m[36m(pid=53631)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53631)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53631)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53631)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53631)[0m *** SIGSEGV (@0x0) received by PID 53631 (TID 0x7f1747c99700) from PID 0; stack trace: ***
[2m[36m(pid=53631)[0m     @     0x7f1747872390 (unknown)
[2m[36m(pid=53631)[0m     @     0x7ee84780ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53631)[0m     @     0x7ee846f397db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53631)[0m     @     0x7ee846f3c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53631)[0m     @     0x7ee846f3cad3 at::TensorIterator::for_each()
[2m[36m(pid=53631)[0m     @     0x7ee846f3cd91 at::TensorIterator::for_each()
[2m[36m(pid=53631)[0m     @     0x7ee84781fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53631)[0m     @     0x7ee847842c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53643)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53643)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53643)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53643)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53643)[0m *** SIGSEGV (@0x0) received by PID 53643 (TID 0x7fb21931e700) from PID 0; stack trace: ***
[2m[36m(pid=53643)[0m     @     0x7fb218ef7390 (unknown)
[2m[36m(pid=53643)[0m     @     0x7f8318e77f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53643)[0m     @     0x7f83185a27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53643)[0m     @     0x7f83185a58f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53643)[0m     @     0x7f83185a5ad3 at::TensorIterator::for_each()
[2m[36m(pid=53643)[0m     @     0x7f83185a5d91 at::TensorIterator::for_each()
[2m[36m(pid=53643)[0m     @     0x7f8318e88b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53643)[0m     @     0x7f8318eabc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53639)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53639)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53639)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53639)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53639)[0m *** SIGSEGV (@0x0) received by PID 53639 (TID 0x7f84d749a700) from PID 0; stack trace: ***
[2m[36m(pid=53639)[0m     @     0x7f84d7073390 (unknown)
[2m[36m(pid=53639)[0m     @     0x7f55d7014f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53639)[0m     @     0x7f55d673f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53639)[0m     @     0x7f55d67428f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53639)[0m     @     0x7f55d6742ad3 at::TensorIterator::for_each()
[2m[36m(pid=53639)[0m     @     0x7f55d6742d91 at::TensorIterator::for_each()
[2m[36m(pid=53639)[0m     @     0x7f55d7025b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53639)[0m     @     0x7f55d7048c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53639)[0m     @     0x7f55d64eaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53549)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53549)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53549)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53549)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53549)[0m *** SIGSEGV (@0x0) received by PID 53549 (TID 0x7fc05065f700) from PID 0; stack trace: ***
[2m[36m(pid=53549)[0m     @     0x7fc050238390 (unknown)
[2m[36m(pid=53549)[0m     @     0x7f91500cdf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53549)[0m     @     0x7f914f7f87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53549)[0m     @     0x7f914f7fb8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53633)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53633)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53633)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53633)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53633)[0m *** SIGSEGV (@0x0) received by PID 53633 (TID 0x7f2d0d57b700) from PID 0; stack trace: ***
[2m[36m(pid=53633)[0m     @     0x7f2d0d154390 (unknown)
[2m[36m(pid=53633)[0m     @     0x7efe0d0b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53633)[0m     @     0x7efe0c7e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53633)[0m     @     0x7efe0c7e38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53633)[0m     @     0x7efe0c7e3ad3 at::TensorIterator::for_each()
[2m[36m(pid=53633)[0m     @     0x7efe0c7e3d91 at::TensorIterator::for_each()
[2m[36m(pid=53633)[0m     @     0x7efe0d0c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53529)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53529)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53529)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53529)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53529)[0m *** SIGSEGV (@0x0) received by PID 53529 (TID 0x7fae85a5c700) from PID 0; stack trace: ***
[2m[36m(pid=53529)[0m     @     0x7fae85635390 (unknown)
[2m[36m(pid=53529)[0m     @     0x7f7f85578f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53529)[0m     @     0x7f7f84ca37db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53529)[0m     @     0x7f7f84ca68f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53529)[0m     @     0x7f7f84ca6ad3 at::TensorIterator::for_each()
[2m[36m(pid=53529)[0m     @     0x7f7f84ca6d91 at::TensorIterator::for_each()
[2m[36m(pid=53529)[0m     @     0x7f7f85589b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53569)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53569)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53569)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53569)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53569)[0m *** SIGSEGV (@0x0) received by PID 53569 (TID 0x7f186e3fe700) from PID 0; stack trace: ***
[2m[36m(pid=53569)[0m     @     0x7f186dfd7390 (unknown)
[2m[36m(pid=53569)[0m     @     0x7ee96de24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53569)[0m     @     0x7ee96d54f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53569)[0m     @     0x7ee96d5528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53569)[0m     @     0x7ee96d552ad3 at::TensorIterator::for_each()
[2m[36m(pid=53569)[0m     @     0x7ee96d552d91 at::TensorIterator::for_each()
[2m[36m(pid=53569)[0m     @     0x7ee96de35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53623)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53623)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53623)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53623)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53623)[0m *** SIGSEGV (@0x0) received by PID 53623 (TID 0x7f7a30e78700) from PID 0; stack trace: ***
[2m[36m(pid=53623)[0m     @     0x7f7a30a51390 (unknown)
[2m[36m(pid=53623)[0m     @     0x7f4b30825f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53623)[0m     @     0x7f4b2ff507db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53623)[0m     @     0x7f4b2ff538f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53623)[0m     @     0x7f4b2ff53ad3 at::TensorIterator::for_each()
[2m[36m(pid=53623)[0m     @     0x7f4b2ff53d91 at::TensorIterator::for_each()
[2m[36m(pid=53623)[0m     @     0x7f4b30836b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53623)[0m     @     0x7f4b30859c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53623)[0m     @     0x7f4b2fcfba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53623)[0m     @     0x7f4b2fcf9388 at::native::copy_impl()
[2m[36m(pid=53617)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53617)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53617)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53617)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53617)[0m *** SIGSEGV (@0x0) received by PID 53617 (TID 0x7fdaac317700) from PID 0; stack trace: ***
[2m[36m(pid=53617)[0m     @     0x7fdaabef0390 (unknown)
[2m[36m(pid=53617)[0m     @     0x7fababe89f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53617)[0m     @     0x7fabab5b47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53617)[0m     @     0x7fabab5b78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53617)[0m     @     0x7fabab5b7ad3 at::TensorIterator::for_each()
[2m[36m(pid=53612)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53612)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53612)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53612)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53612)[0m *** SIGSEGV (@0x0) received by PID 53612 (TID 0x7f9568961700) from PID 0; stack trace: ***
[2m[36m(pid=53612)[0m     @     0x7f956853a390 (unknown)
[2m[36m(pid=53612)[0m     @     0x7f66684c7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53612)[0m     @     0x7f6667bf27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53612)[0m     @     0x7f6667bf58f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53612)[0m     @     0x7f6667bf5ad3 at::TensorIterator::for_each()
[2m[36m(pid=53612)[0m     @     0x7f6667bf5d91 at::TensorIterator::for_each()
[2m[36m(pid=53612)[0m     @     0x7f66684d8b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53612)[0m     @     0x7f66684fbc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53645)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53645)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53645)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53553)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53553)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53553)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53620)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53620)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53620)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53620)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53620)[0m *** SIGSEGV (@0x0) received by PID 53620 (TID 0x7fec961de700) from PID 0; stack trace: ***
[2m[36m(pid=53620)[0m     @     0x7fec95db7390 (unknown)
[2m[36m(pid=53620)[0m     @     0x7fbd95d52f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53620)[0m     @     0x7fbd9547d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53620)[0m     @     0x7fbd954808f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53620)[0m     @     0x7fbd95480ad3 at::TensorIterator::for_each()
[2m[36m(pid=53620)[0m     @     0x7fbd95480d91 at::TensorIterator::for_each()
[2m[36m(pid=53620)[0m     @     0x7fbd95d63b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53630)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53630)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53630)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53630)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53630)[0m *** SIGSEGV (@0x0) received by PID 53630 (TID 0x7fc71049e700) from PID 0; stack trace: ***
[2m[36m(pid=53630)[0m     @     0x7fc710077390 (unknown)
[2m[36m(pid=53630)[0m     @     0x7f981001cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53630)[0m     @     0x7f980f7477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53630)[0m     @     0x7f980f74a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53630)[0m     @     0x7f980f74aad3 at::TensorIterator::for_each()
[2m[36m(pid=53630)[0m     @     0x7f980f74ad91 at::TensorIterator::for_each()
[2m[36m(pid=53542)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53542)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53542)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53542)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53542)[0m *** SIGSEGV (@0x0) received by PID 53542 (TID 0x7f669bebc700) from PID 0; stack trace: ***
[2m[36m(pid=53542)[0m     @     0x7f669ba95390 (unknown)
[2m[36m(pid=53542)[0m     @     0x7f379ba23f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53542)[0m     @     0x7f379b14e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53542)[0m     @     0x7f379b1518f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53542)[0m     @     0x7f379b151ad3 at::TensorIterator::for_each()
[2m[36m(pid=53542)[0m     @     0x7f379b151d91 at::TensorIterator::for_each()
[2m[36m(pid=53542)[0m     @     0x7f379ba34b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53542)[0m     @     0x7f379ba57c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53537)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53537)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53537)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53537)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53537)[0m *** SIGSEGV (@0x0) received by PID 53537 (TID 0x7f2cd777d700) from PID 0; stack trace: ***
[2m[36m(pid=53537)[0m     @     0x7f2cd7356390 (unknown)
[2m[36m(pid=53537)[0m     @     0x7efdd7229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53537)[0m     @     0x7efdd69547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53537)[0m     @     0x7efdd69578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53537)[0m     @     0x7efdd6957ad3 at::TensorIterator::for_each()
[2m[36m(pid=53537)[0m     @     0x7efdd6957d91 at::TensorIterator::for_each()
[2m[36m(pid=53537)[0m     @     0x7efdd723ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53538)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53538)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53538)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53538)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53538)[0m *** SIGSEGV (@0x0) received by PID 53538 (TID 0x7f6f35234700) from PID 0; stack trace: ***
[2m[36m(pid=53538)[0m     @     0x7f6f34e0d390 (unknown)
[2m[36m(pid=53538)[0m     @     0x7f4034b85f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53538)[0m     @     0x7f40342b07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53538)[0m     @     0x7f40342b38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53538)[0m     @     0x7f40342b3ad3 at::TensorIterator::for_each()
[2m[36m(pid=53606)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53606)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53606)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53606)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53606)[0m *** SIGSEGV (@0x0) received by PID 53606 (TID 0x7ff8eae06700) from PID 0; stack trace: ***
[2m[36m(pid=53606)[0m     @     0x7ff8ea9df390 (unknown)
[2m[36m(pid=53606)[0m     @     0x7fc9ea95ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53606)[0m     @     0x7fc9ea08a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53606)[0m     @     0x7fc9ea08d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53606)[0m     @     0x7fc9ea08dad3 at::TensorIterator::for_each()
[2m[36m(pid=53606)[0m     @     0x7fc9ea08dd91 at::TensorIterator::for_each()
[2m[36m(pid=53606)[0m     @     0x7fc9ea970b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53606)[0m     @     0x7fc9ea993c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53606)[0m     @     0x7fc9e9e35a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53615)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53615)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53615)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53615)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53615)[0m *** SIGSEGV (@0x0) received by PID 53615 (TID 0x7fd277fdb700) from PID 0; stack trace: ***
[2m[36m(pid=53615)[0m     @     0x7fd277bb4390 (unknown)
[2m[36m(pid=53615)[0m     @     0x7fa377af5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53615)[0m     @     0x7fa3772207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53615)[0m     @     0x7fa3772238f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53599)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53599)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53599)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53599)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53599)[0m *** SIGSEGV (@0x0) received by PID 53599 (TID 0x7fe0c1e0e700) from PID 0; stack trace: ***
[2m[36m(pid=53599)[0m     @     0x7fe0c19e7390 (unknown)
[2m[36m(pid=53599)[0m     @     0x7fb1c17f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53599)[0m     @     0x7fb1c0f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53599)[0m     @     0x7fb1c0f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53599)[0m     @     0x7fb1c0f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=53599)[0m     @     0x7fb1c0f27d91 at::TensorIterator::for_each()
[2m[36m(pid=53599)[0m     @     0x7fb1c180ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53599)[0m     @     0x7fb1c182dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53591)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53591)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53591)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53591)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53591)[0m *** SIGSEGV (@0x0) received by PID 53591 (TID 0x7f0294b4f700) from PID 0; stack trace: ***
[2m[36m(pid=53591)[0m     @     0x7f0294728390 (unknown)
[2m[36m(pid=53591)[0m     @     0x7ed394563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53591)[0m     @     0x7ed393c8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53591)[0m     @     0x7ed393c918f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53591)[0m     @     0x7ed393c91ad3 at::TensorIterator::for_each()
[2m[36m(pid=53591)[0m     @     0x7ed393c91d91 at::TensorIterator::for_each()
[2m[36m(pid=53591)[0m     @     0x7ed394574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53591)[0m     @     0x7ed394597c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53591)[0m     @     0x7ed393a39a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53591)[0m     @     0x7ed393a37388 at::native::copy_impl()
[2m[36m(pid=53541)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53541)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53541)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53558)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53558)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53558)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53535)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53535)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53535)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53563)[0m     @     0x7f48c2957ad3 at::TensorIterator::for_each()
[2m[36m(pid=53563)[0m     @     0x7f48c2957d91 at::TensorIterator::for_each()
[2m[36m(pid=53563)[0m     @     0x7f48c323ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53609)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53609)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53609)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53609)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53609)[0m *** SIGSEGV (@0x0) received by PID 53609 (TID 0x7f1c99a37700) from PID 0; stack trace: ***
[2m[36m(pid=53646)[0m     @     0x7ef7f467dd91 at::TensorIterator::for_each()
[2m[36m(pid=53646)[0m     @     0x7ef7f4f60b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53646)[0m     @     0x7ef7f4f83c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53545)[0m     @     0x7f5d06d208f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53545)[0m     @     0x7f5d06d20ad3 at::TensorIterator::for_each()
[2m[36m(pid=53568)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53568)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53568)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53533)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53533)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53533)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53555)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53555)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53555)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53555)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53555)[0m *** SIGSEGV (@0x0) received by PID 53555 (TID 0x7fc06cb82700) from PID 0; stack trace: ***
[2m[36m(pid=53555)[0m     @     0x7fc06c75b390 (unknown)
[2m[36m(pid=53555)[0m     @     0x7f916c563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53555)[0m     @     0x7f916bc8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53555)[0m     @     0x7f916bc918f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53559)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53559)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53559)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53559)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53559)[0m *** SIGSEGV (@0x0) received by PID 53559 (TID 0x7f074ea3d700) from PID 0; stack trace: ***
[2m[36m(pid=53559)[0m     @     0x7f074e616390 (unknown)
[2m[36m(pid=53559)[0m     @     0x7ed84e5a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53559)[0m     @     0x7ed84dccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53566)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53566)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53566)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53566)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53566)[0m *** SIGSEGV (@0x0) received by PID 53566 (TID 0x7f99d30d9700) from PID 0; stack trace: ***
[2m[36m(pid=53547)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53547)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53547)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53547)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53547)[0m *** SIGSEGV (@0x0) received by PID 53547 (TID 0x7f9b1bbf2700) from PID 0; stack trace: ***
[2m[36m(pid=53547)[0m     @     0x7f9b1b7cb390 (unknown)
[2m[36m(pid=53588)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53588)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53588)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53588)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53588)[0m *** SIGSEGV (@0x0) received by PID 53588 (TID 0x7f7b1b02c700) from PID 0; stack trace: ***
[2m[36m(pid=53588)[0m     @     0x7f7b1ac05390 (unknown)
[2m[36m(pid=53588)[0m     @     0x7f4c1aad1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53561)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53561)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53561)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53561)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53561)[0m *** SIGSEGV (@0x0) received by PID 53561 (TID 0x7fa37fe0b700) from PID 0; stack trace: ***
[2m[36m(pid=53561)[0m     @     0x7fa37f9e4390 (unknown)
[2m[36m(pid=53625)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53625)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53625)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53625)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53625)[0m *** SIGSEGV (@0x0) received by PID 53625 (TID 0x7f7469b71700) from PID 0; stack trace: ***
[2m[36m(pid=53625)[0m     @     0x7f746974a390 (unknown)
[2m[36m(pid=53625)[0m     @     0x7f45696f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53622)[0m     @     0x7eed0dc27ad3 at::TensorIterator::for_each()
[2m[36m(pid=53622)[0m     @     0x7eed0dc27d91 at::TensorIterator::for_each()
[2m[36m(pid=53622)[0m     @     0x7eed0e50ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53622)[0m     @     0x7eed0e52dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53622)[0m     @     0x7eed0d9cfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53622)[0m     @     0x7eed0d9cd388 at::native::copy_impl()
[2m[36m(pid=53532)[0m     @     0x7f17d51388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53532)[0m     @     0x7f17d5138ad3 at::TensorIterator::for_each()
[2m[36m(pid=53532)[0m     @     0x7f17d5138d91 at::TensorIterator::for_each()
[2m[36m(pid=53534)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53534)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53534)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53534)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53534)[0m *** SIGSEGV (@0x0) received by PID 53534 (TID 0x7ff48546c700) from PID 0; stack trace: ***
[2m[36m(pid=53534)[0m     @     0x7ff485045390 (unknown)
[2m[36m(pid=53534)[0m     @     0x7fc584ea4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53534)[0m     @     0x7fc5845cf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53613)[0m     @     0x7f29e2b05c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53613)[0m     @     0x7f29e1fa7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53613)[0m     @     0x7f29e1fa5388 at::native::copy_impl()
[2m[36m(pid=53613)[0m     @     0x7f29e1fa75a4 at::native::copy_()
[2m[36m(pid=53613)[0m     @     0x7f29e26924f5 at::Tensor::copy_()
[2m[36m(pid=53656)[0m     @     0x7efa7a141c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53656)[0m     @     0x7efa795e3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53656)[0m     @     0x7efa795e1388 at::native::copy_impl()
[2m[36m(pid=53656)[0m     @     0x7efa795e35a4 at::native::copy_()
[2m[36m(pid=53618)[0m     @     0x7ee3a8970d91 at::TensorIterator::for_each()
[2m[36m(pid=53618)[0m     @     0x7ee3a9253b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53618)[0m     @     0x7ee3a9276c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53618)[0m     @     0x7ee3a8718a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53618)[0m     @     0x7ee3a8716388 at::native::copy_impl()
[2m[36m(pid=53637)[0m     @     0x7f26ef24ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53637)[0m     @     0x7f26ef26dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53637)[0m     @     0x7f26ee70fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53637)[0m     @     0x7f26ee70d388 at::native::copy_impl()
[2m[36m(pid=53637)[0m     @     0x7f26ee70f5a4 at::native::copy_()
[2m[36m(pid=53605)[0m     @     0x7f4cea35cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53605)[0m     @     0x7f4cea37fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53605)[0m     @     0x7f4ce9821a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53605)[0m     @     0x7f4ce981f388 at::native::copy_impl()
[2m[36m(pid=53651)[0m     @     0x7fb06983bd91 at::TensorIterator::for_each()
[2m[36m(pid=53651)[0m     @     0x7fb06a11eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53651)[0m     @     0x7fb06a141c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53651)[0m     @     0x7fb0695e3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53651)[0m     @     0x7fb0695e1388 at::native::copy_impl()
[2m[36m(pid=53603)[0m     @     0x7f5dca0aec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53603)[0m     @     0x7f5dc9550a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53603)[0m     @     0x7f5dc954e388 at::native::copy_impl()
[2m[36m(pid=53603)[0m     @     0x7f5dc95505a4 at::native::copy_()
[2m[36m(pid=53536)[0m     @     0x7f0323d3cd91 at::TensorIterator::for_each()
[2m[36m(pid=53536)[0m     @     0x7f032461fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53536)[0m     @     0x7f0324642c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53536)[0m     @     0x7f0323ae4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53536)[0m     @     0x7f0323ae2388 at::native::copy_impl()
[2m[36m(pid=53536)[0m     @     0x7f0323ae45a4 at::native::copy_()
[2m[36m(pid=53584)[0m     @     0x7f7f57f53d91 at::TensorIterator::for_each()
[2m[36m(pid=53584)[0m     @     0x7f7f58836b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53584)[0m     @     0x7f7f58859c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53584)[0m     @     0x7f7f57cfba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53584)[0m     @     0x7f7f57cf9388 at::native::copy_impl()
[2m[36m(pid=53531)[0m     @     0x7f1f3633ead3 at::TensorIterator::for_each()
[2m[36m(pid=53531)[0m     @     0x7f1f3633ed91 at::TensorIterator::for_each()
[2m[36m(pid=53531)[0m     @     0x7f1f36c21b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53531)[0m     @     0x7f1f36c44c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53531)[0m     @     0x7f1f360e6a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53531)[0m     @     0x7f1f360e4388 at::native::copy_impl()
[2m[36m(pid=53650)[0m     @     0x7f04e402db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53650)[0m     @     0x7f04e4050c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53650)[0m     @     0x7f04e34f2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53650)[0m     @     0x7f04e34f0388 at::native::copy_impl()
[2m[36m(pid=53650)[0m     @     0x7f04e34f25a4 at::native::copy_()
[2m[36m(pid=53642)[0m     @     0x7f87a8711d91 at::TensorIterator::for_each()
[2m[36m(pid=53642)[0m     @     0x7f87a8ff4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53642)[0m     @     0x7f87a9017c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53642)[0m     @     0x7f87a84b9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53642)[0m     @     0x7f87a84b7388 at::native::copy_impl()
[2m[36m(pid=53642)[0m     @     0x7f87a84b95a4 at::native::copy_()
[2m[36m(pid=53654)[0m     @     0x7ef21e2d7388 at::native::copy_impl()
[2m[36m(pid=53654)[0m     @     0x7ef21e2d95a4 at::native::copy_()
[2m[36m(pid=53611)[0m     @     0x7f80f6db4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53611)[0m     @     0x7f80f6db2388 at::native::copy_impl()
[2m[36m(pid=53611)[0m     @     0x7f80f6db45a4 at::native::copy_()
[2m[36m(pid=53636)[0m     @     0x7faf832e15a4 at::native::copy_()
[2m[36m(pid=53636)[0m     @     0x7faf839cc4f5 at::Tensor::copy_()
[2m[36m(pid=53631)[0m     @     0x7ee846ce4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53631)[0m     @     0x7ee846ce2388 at::native::copy_impl()
[2m[36m(pid=53631)[0m     @     0x7ee846ce45a4 at::native::copy_()
[2m[36m(pid=53643)[0m     @     0x7f831834da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53643)[0m     @     0x7f831834b388 at::native::copy_impl()
[2m[36m(pid=53643)[0m     @     0x7f831834d5a4 at::native::copy_()
[2m[36m(pid=53639)[0m     @     0x7f55d64e8388 at::native::copy_impl()
[2m[36m(pid=53639)[0m     @     0x7f55d64ea5a4 at::native::copy_()
[2m[36m(pid=53549)[0m     @     0x7f914f7fbad3 at::TensorIterator::for_each()
[2m[36m(pid=53549)[0m     @     0x7f914f7fbd91 at::TensorIterator::for_each()
[2m[36m(pid=53549)[0m     @     0x7f91500deb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53549)[0m     @     0x7f9150101c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53633)[0m     @     0x7efe0d0e9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53633)[0m     @     0x7efe0c58ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53633)[0m     @     0x7efe0c589388 at::native::copy_impl()
[2m[36m(pid=53529)[0m     @     0x7f7f855acc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53529)[0m     @     0x7f7f84a4ea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53529)[0m     @     0x7f7f84a4c388 at::native::copy_impl()
[2m[36m(pid=53569)[0m     @     0x7ee96de58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53569)[0m     @     0x7ee96d2faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53569)[0m     @     0x7ee96d2f8388 at::native::copy_impl()
[2m[36m(pid=53623)[0m     @     0x7f4b2fcfb5a4 at::native::copy_()
[2m[36m(pid=53623)[0m     @     0x7f4b303e64f5 at::Tensor::copy_()
[2m[36m(pid=53623)[0m     @     0x7f4b328b98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53617)[0m     @     0x7fabab5b7d91 at::TensorIterator::for_each()
[2m[36m(pid=53617)[0m     @     0x7fababe9ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53617)[0m     @     0x7fababebdc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53612)[0m     @     0x7f666799da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53612)[0m     @     0x7f666799b388 at::native::copy_impl()
[2m[36m(pid=53612)[0m     @     0x7f666799d5a4 at::native::copy_()
[2m[36m(pid=53645)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53645)[0m *** SIGSEGV (@0x0) received by PID 53645 (TID 0x7fde165de700) from PID 0; stack trace: ***
[2m[36m(pid=53645)[0m     @     0x7fde161b7390 (unknown)
[2m[36m(pid=53645)[0m     @     0x7faf15d89f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53645)[0m     @     0x7faf154b47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53640)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53640)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53640)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53640)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53640)[0m *** SIGSEGV (@0x0) received by PID 53640 (TID 0x7fcddb4f1700) from PID 0; stack trace: ***
[2m[36m(pid=53640)[0m     @     0x7fcddb0ca390 (unknown)
[2m[36m(pid=53640)[0m     @     0x7f9edb077f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53641)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53641)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53641)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53551)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53551)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53551)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53551)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53551)[0m *** SIGSEGV (@0x0) received by PID 53551 (TID 0x7fcb6fc1e700) from PID 0; stack trace: ***
[2m[36m(pid=53551)[0m     @     0x7fcb6f7f7390 (unknown)
[2m[36m(pid=53560)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53560)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53560)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53560)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53560)[0m *** SIGSEGV (@0x0) received by PID 53560 (TID 0x7fa1472ab700) from PID 0; stack trace: ***
[2m[36m(pid=53560)[0m     @     0x7fa146e84390 (unknown)
[2m[36m(pid=53560)[0m     @     0x7f7246a13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53560)[0m     @     0x7f724613e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53614)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53614)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53614)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53614)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53614)[0m *** SIGSEGV (@0x0) received by PID 53614 (TID 0x7f9f28bac700) from PID 0; stack trace: ***
[2m[36m(pid=53614)[0m     @     0x7f9f28785390 (unknown)
[2m[36m(pid=53596)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53596)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53596)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53596)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53596)[0m *** SIGSEGV (@0x0) received by PID 53596 (TID 0x7fd01e77c700) from PID 0; stack trace: ***
[2m[36m(pid=53596)[0m     @     0x7fd01e355390 (unknown)
[2m[36m(pid=53528)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53528)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53528)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53528)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53528)[0m *** SIGSEGV (@0x0) received by PID 53528 (TID 0x7f6b7a7bb700) from PID 0; stack trace: ***
[2m[36m(pid=53528)[0m     @     0x7f6b7a394390 (unknown)
[2m[36m(pid=53528)[0m     @     0x7f3c7a34bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53528)[0m     @     0x7f3c79a767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53553)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53553)[0m *** SIGSEGV (@0x0) received by PID 53553 (TID 0x7f9df784f700) from PID 0; stack trace: ***
[2m[36m(pid=53553)[0m     @     0x7f9df7428390 (unknown)
[2m[36m(pid=53553)[0m     @     0x7f6ef7326f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53553)[0m     @     0x7f6ef6a517db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53620)[0m     @     0x7fbd95d86c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53620)[0m     @     0x7fbd95228a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53620)[0m     @     0x7fbd95226388 at::native::copy_impl()
[2m[36m(pid=53620)[0m     @     0x7fbd952285a4 at::native::copy_()
[2m[36m(pid=53630)[0m     @     0x7f981002db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53630)[0m     @     0x7f9810050c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53630)[0m     @     0x7f980f4f2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53630)[0m     @     0x7f980f4f0388 at::native::copy_impl()
[2m[36m(pid=53542)[0m     @     0x7f379aef9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53542)[0m     @     0x7f379aef7388 at::native::copy_impl()
[2m[36m(pid=53542)[0m     @     0x7f379aef95a4 at::native::copy_()
[2m[36m(pid=53537)[0m     @     0x7efdd725dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53537)[0m     @     0x7efdd66ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53537)[0m     @     0x7efdd66fd388 at::native::copy_impl()
[2m[36m(pid=53537)[0m     @     0x7efdd66ff5a4 at::native::copy_()
[2m[36m(pid=53538)[0m     @     0x7f40342b3d91 at::TensorIterator::for_each()
[2m[36m(pid=53538)[0m     @     0x7f4034b96b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53538)[0m     @     0x7f4034bb9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53606)[0m     @     0x7fc9e9e33388 at::native::copy_impl()
[2m[36m(pid=53606)[0m     @     0x7fc9e9e355a4 at::native::copy_()
[2m[36m(pid=53606)[0m     @     0x7fc9ea5204f5 at::Tensor::copy_()
[2m[36m(pid=53606)[0m     @     0x7fc9ec9f38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53615)[0m     @     0x7fa377223ad3 at::TensorIterator::for_each()
[2m[36m(pid=53615)[0m     @     0x7fa377223d91 at::TensorIterator::for_each()
[2m[36m(pid=53615)[0m     @     0x7fa377b06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53615)[0m     @     0x7fa377b29c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53599)[0m     @     0x7fb1c0ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53599)[0m     @     0x7fb1c0ccd388 at::native::copy_impl()
[2m[36m(pid=53599)[0m     @     0x7fb1c0ccf5a4 at::native::copy_()
[2m[36m(pid=53591)[0m     @     0x7ed393a395a4 at::native::copy_()
[2m[36m(pid=53591)[0m     @     0x7ed3941244f5 at::Tensor::copy_()
[2m[36m(pid=53591)[0m     @     0x7ed3965f78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53543)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53543)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53543)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53543)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53543)[0m *** SIGSEGV (@0x0) received by PID 53543 (TID 0x7f9cb695f700) from PID 0; stack trace: ***
[2m[36m(pid=53543)[0m     @     0x7f9cb6538390 (unknown)
[2m[36m(pid=53543)[0m     @     0x7f6db6365f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53543)[0m     @     0x7f6db5a907db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53543)[0m     @     0x7f6db5a938f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53541)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53541)[0m *** SIGSEGV (@0x0) received by PID 53541 (TID 0x7f5ec2f59700) from PID 0; stack trace: ***
[2m[36m(pid=53541)[0m     @     0x7f5ec2b32390 (unknown)
[2m[36m(pid=53541)[0m     @     0x7f2fc2a21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53541)[0m     @     0x7f2fc214c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53541)[0m     @     0x7f2fc214f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53546)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53546)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53546)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53546)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53546)[0m *** SIGSEGV (@0x0) received by PID 53546 (TID 0x7fe5b4dfb700) from PID 0; stack trace: ***
[2m[36m(pid=53546)[0m     @     0x7fe5b49d4390 (unknown)
[2m[36m(pid=53546)[0m     @     0x7fb6b4774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53546)[0m     @     0x7fb6b3e9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53546)[0m     @     0x7fb6b3ea28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53610)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53610)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53610)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53558)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53558)[0m *** SIGSEGV (@0x0) received by PID 53558 (TID 0x7f809cda1700) from PID 0; stack trace: ***
[2m[36m(pid=53558)[0m     @     0x7f809c97a390 (unknown)
[2m[36m(pid=53558)[0m     @     0x7f519c825f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53558)[0m     @     0x7f519bf507db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53558)[0m     @     0x7f519bf538f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53608)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53608)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53608)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53600)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53600)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53600)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53600)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53600)[0m *** SIGSEGV (@0x0) received by PID 53600 (TID 0x7ff7903c0700) from PID 0; stack trace: ***
[2m[36m(pid=53600)[0m     @     0x7ff78ff99390 (unknown)
[2m[36m(pid=53600)[0m     @     0x7fc88fe0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53600)[0m     @     0x7fc88f5367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53600)[0m     @     0x7fc88f5398f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53535)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53535)[0m *** SIGSEGV (@0x0) received by PID 53535 (TID 0x7f941012b700) from PID 0; stack trace: ***
[2m[36m(pid=53535)[0m     @     0x7f940fd04390 (unknown)
[2m[36m(pid=53535)[0m     @     0x7f650fbf7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53535)[0m     @     0x7f650f3227db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53535)[0m     @     0x7f650f3258f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53593)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53593)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53593)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53644)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53644)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53644)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53597)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53597)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53597)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53597)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53597)[0m *** SIGSEGV (@0x0) received by PID 53597 (TID 0x7fe9e8138700) from PID 0; stack trace: ***
[2m[36m(pid=53601)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53601)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53601)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53601)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53601)[0m *** SIGSEGV (@0x0) received by PID 53601 (TID 0x7f7444119700) from PID 0; stack trace: ***
[2m[36m(pid=53601)[0m     @     0x7f7443cf2390 (unknown)
[2m[36m(pid=53601)[0m     @     0x7f4543c7bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53601)[0m     @     0x7f45433a67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53601)[0m     @     0x7f45433a98f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53607)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53607)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53607)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53607)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53607)[0m *** SIGSEGV (@0x0) received by PID 53607 (TID 0x7fbf7ba4e700) from PID 0; stack trace: ***
[2m[36m(pid=53607)[0m     @     0x7fbf7b627390 (unknown)
[2m[36m(pid=53607)[0m     @     0x7f907b5dcf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53607)[0m     @     0x7f907ad077db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53607)[0m     @     0x7f907ad0a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53563)[0m     @     0x7f48c325dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53563)[0m     @     0x7f48c26ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53563)[0m     @     0x7f48c26fd388 at::native::copy_impl()
[2m[36m(pid=53563)[0m     @     0x7f48c26ff5a4 at::native::copy_()
[2m[36m(pid=53563)[0m     @     0x7f48c2dea4f5 at::Tensor::copy_()
[2m[36m(pid=53609)[0m     @     0x7f1c99610390 (unknown)
[2m[36m(pid=53609)[0m     @     0x7eed995a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53609)[0m     @     0x7eed98ccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53609)[0m     @     0x7eed98cd28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53609)[0m     @     0x7eed98cd2ad3 at::TensorIterator::for_each()
[2m[36m(pid=53646)[0m     @     0x7ef7f4425a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53646)[0m     @     0x7ef7f4423388 at::native::copy_impl()
[2m[36m(pid=53646)[0m     @     0x7ef7f44255a4 at::native::copy_()
[2m[36m(pid=53646)[0m     @     0x7ef7f4b104f5 at::Tensor::copy_()
[2m[36m(pid=53646)[0m     @     0x7ef7f6fe38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53545)[0m     @     0x7f5d06d20d91 at::TensorIterator::for_each()
[2m[36m(pid=53545)[0m     @     0x7f5d07603b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53545)[0m     @     0x7f5d07626c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53545)[0m     @     0x7f5d06ac8a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53545)[0m     @     0x7f5d06ac6388 at::native::copy_impl()
[2m[36m(pid=53616)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53616)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53616)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53616)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53616)[0m *** SIGSEGV (@0x0) received by PID 53616 (TID 0x7f9e95e81700) from PID 0; stack trace: ***
[2m[36m(pid=53616)[0m     @     0x7f9e95a5a390 (unknown)
[2m[36m(pid=53616)[0m     @     0x7f6f957f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53616)[0m     @     0x7f6f94f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53616)[0m     @     0x7f6f94f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53568)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53568)[0m *** SIGSEGV (@0x0) received by PID 53568 (TID 0x7f12b5317700) from PID 0; stack trace: ***
[2m[36m(pid=53568)[0m     @     0x7f12b4ef0390 (unknown)
[2m[36m(pid=53568)[0m     @     0x7ee3b4e77f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53568)[0m     @     0x7ee3b45a27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53568)[0m     @     0x7ee3b45a58f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53568)[0m     @     0x7ee3b45a5ad3 at::TensorIterator::for_each()
[2m[36m(pid=53533)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53533)[0m *** SIGSEGV (@0x0) received by PID 53533 (TID 0x7f4fe8e74700) from PID 0; stack trace: ***
[2m[36m(pid=53533)[0m     @     0x7f4fe8a4d390 (unknown)
[2m[36m(pid=53533)[0m     @     0x7f20e895df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53533)[0m     @     0x7f20e80887db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53533)[0m     @     0x7f20e808b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53533)[0m     @     0x7f20e808bad3 at::TensorIterator::for_each()
[2m[36m(pid=53555)[0m     @     0x7f916bc91ad3 at::TensorIterator::for_each()
[2m[36m(pid=53555)[0m     @     0x7f916bc91d91 at::TensorIterator::for_each()
[2m[36m(pid=53555)[0m     @     0x7f916c574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53559)[0m     @     0x7ed84dcd28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53559)[0m     @     0x7ed84dcd2ad3 at::TensorIterator::for_each()
[2m[36m(pid=53566)[0m     @     0x7f99d2cb2390 (unknown)
[2m[36m(pid=53566)[0m     @     0x7f6ad2a21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53566)[0m     @     0x7f6ad214c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53566)[0m     @     0x7f6ad214f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53547)[0m     @     0x7f6c1b61ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53547)[0m     @     0x7f6c1ad4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53547)[0m     @     0x7f6c1ad4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53547)[0m     @     0x7f6c1ad4dad3 at::TensorIterator::for_each()
[2m[36m(pid=53588)[0m     @     0x7f4c1a1fc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53588)[0m     @     0x7f4c1a1ff8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53588)[0m     @     0x7f4c1a1ffad3 at::TensorIterator::for_each()
[2m[36m(pid=53561)[0m     @     0x7f747f8def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53561)[0m     @     0x7f747f0097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53561)[0m     @     0x7f747f00c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53561)[0m     @     0x7f747f00cad3 at::TensorIterator::for_each()
[2m[36m(pid=53530)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53530)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53530)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53530)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53530)[0m *** SIGSEGV (@0x0) received by PID 53530 (TID 0x7f8c09317700) from PID 0; stack trace: ***
[2m[36m(pid=53625)[0m     @     0x7f4568e1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53625)[0m     @     0x7f4568e228f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53625)[0m     @     0x7f4568e22ad3 at::TensorIterator::for_each()
[2m[36m(pid=53602)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53602)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53602)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53602)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53602)[0m *** SIGSEGV (@0x0) received by PID 53602 (TID 0x7f3820b1a700) from PID 0; stack trace: ***
[2m[36m(pid=53602)[0m     @     0x7f38206f3390 (unknown)
[2m[36m(pid=53595)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53595)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53622)[0m     @     0x7eed0d9cf5a4 at::native::copy_()
[2m[36m(pid=53622)[0m     @     0x7eed0e0ba4f5 at::Tensor::copy_()
[2m[36m(pid=53622)[0m     @     0x7eed1058d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53622)[0m     @     0x7eed0e0ba4f5 at::Tensor::copy_()
[2m[36m(pid=53622)[0m     @     0x7eed1416579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53622)[0m     @     0x55f6a470afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53622)[0m     @     0x55f6a4665b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53622)[0m     @     0x55f6a46f0baf _PyEval_EvalCodeWithName
[2m[36m(pid=53622)[0m     @     0x55f6a46f1a20 method_vectorcall
[2m[36m(pid=53622)[0m     @     0x55f6a4665bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53622)[0m     @     0x55f6a46f0baf _PyEval_EvalCodeWithName
[2m[36m(pid=53622)[0m     @     0x55f6a46f1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53622)[0m     @     0x55f6a4666689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53622)[0m     @     0x55f6a46f0baf _PyEval_EvalCodeWithName
[2m[36m(pid=53622)[0m     @     0x55f6a46f1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53622)[0m     @     0x55f6a4666689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53622)[0m     @     0x55f6a46f0baf _PyEval_EvalCodeWithName
[2m[36m(pid=53622)[0m     @     0x55f6a46f1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53622)[0m     @     0x55f6a4666689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53622)[0m     @     0x55f6a46f0baf _PyEval_EvalCodeWithName
[2m[36m(pid=53622)[0m     @     0x55f6a46f1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53622)[0m     @     0x55f6a4666689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53532)[0m     @     0x7f17d5a1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53532)[0m     @     0x7f17d5a3ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53532)[0m     @     0x7f17d4ee0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53532)[0m     @     0x7f17d4ede388 at::native::copy_impl()
[2m[36m(pid=53532)[0m     @     0x7f17d4ee05a4 at::native::copy_()
[2m[36m(pid=53532)[0m     @     0x7f17d55cb4f5 at::Tensor::copy_()
[2m[36m(pid=53534)[0m     @     0x7fc5845d28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53534)[0m     @     0x7fc5845d2ad3 at::TensorIterator::for_each()
[2m[36m(pid=53534)[0m     @     0x7fc5845d2d91 at::TensorIterator::for_each()
[2m[36m(pid=53534)[0m     @     0x7fc584eb5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53534)[0m     @     0x7fc584ed8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53613)[0m     @     0x7f29e4b658de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53613)[0m     @     0x7f29e26924f5 at::Tensor::copy_()
[2m[36m(pid=53613)[0m     @     0x7f29e873d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53613)[0m     @     0x557f4acd8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53613)[0m     @     0x557f4ac33b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53613)[0m     @     0x557f4acbebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53613)[0m     @     0x557f4acbfa20 method_vectorcall
[2m[36m(pid=53613)[0m     @     0x557f4ac33bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53613)[0m     @     0x557f4acbebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53613)[0m     @     0x557f4acbf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53613)[0m     @     0x557f4ac34689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53613)[0m     @     0x557f4acbebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53613)[0m     @     0x557f4acbf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53613)[0m     @     0x557f4ac34689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53613)[0m     @     0x557f4acbebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53613)[0m     @     0x557f4acbf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53613)[0m     @     0x557f4ac34689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53613)[0m     @     0x557f4acbebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53613)[0m     @     0x557f4acbf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53613)[0m     @     0x557f4ac34689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53656)[0m     @     0x7efa79cce4f5 at::Tensor::copy_()
[2m[36m(pid=53656)[0m     @     0x7efa7c1a18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53656)[0m     @     0x7efa79cce4f5 at::Tensor::copy_()
[2m[36m(pid=53656)[0m     @     0x7efa7fd7979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53656)[0m     @     0x55cd4cd9afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53656)[0m     @     0x55cd4ccf5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53656)[0m     @     0x55cd4cd80baf _PyEval_EvalCodeWithName
[2m[36m(pid=53656)[0m     @     0x55cd4cd81a20 method_vectorcall
[2m[36m(pid=53656)[0m     @     0x55cd4ccf5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53656)[0m     @     0x55cd4cd80baf _PyEval_EvalCodeWithName
[2m[36m(pid=53656)[0m     @     0x55cd4cd81643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53656)[0m     @     0x55cd4ccf6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53656)[0m     @     0x55cd4cd80baf _PyEval_EvalCodeWithName
[2m[36m(pid=53656)[0m     @     0x55cd4cd81643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53656)[0m     @     0x55cd4ccf6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53656)[0m     @     0x55cd4cd80baf _PyEval_EvalCodeWithName
[2m[36m(pid=53656)[0m     @     0x55cd4cd81643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53656)[0m     @     0x55cd4ccf6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53656)[0m     @     0x55cd4cd80baf _PyEval_EvalCodeWithName
[2m[36m(pid=53656)[0m     @     0x55cd4cd81643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53656)[0m     @     0x55cd4ccf6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53618)[0m     @     0x7ee3a87185a4 at::native::copy_()
[2m[36m(pid=53618)[0m     @     0x7ee3a8e034f5 at::Tensor::copy_()
[2m[36m(pid=53618)[0m     @     0x7ee3ab2d68de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53618)[0m     @     0x7ee3a8e034f5 at::Tensor::copy_()
[2m[36m(pid=53618)[0m     @     0x7ee3aeeae79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53618)[0m     @     0x55931c85afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53618)[0m     @     0x55931c7b5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53618)[0m     @     0x55931c840baf _PyEval_EvalCodeWithName
[2m[36m(pid=53618)[0m     @     0x55931c841a20 method_vectorcall
[2m[36m(pid=53618)[0m     @     0x55931c7b5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53618)[0m     @     0x55931c840baf _PyEval_EvalCodeWithName
[2m[36m(pid=53618)[0m     @     0x55931c841643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53618)[0m     @     0x55931c7b6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53618)[0m     @     0x55931c840baf _PyEval_EvalCodeWithName
[2m[36m(pid=53618)[0m     @     0x55931c841643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53618)[0m     @     0x55931c7b6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53618)[0m     @     0x55931c840baf _PyEval_EvalCodeWithName
[2m[36m(pid=53618)[0m     @     0x55931c841643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53618)[0m     @     0x55931c7b6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53618)[0m     @     0x55931c840baf _PyEval_EvalCodeWithName
[2m[36m(pid=53637)[0m     @     0x7f26eedfa4f5 at::Tensor::copy_()
[2m[36m(pid=53637)[0m     @     0x7f26f12cd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53637)[0m     @     0x7f26eedfa4f5 at::Tensor::copy_()
[2m[36m(pid=53637)[0m     @     0x7f26f4ea579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53637)[0m     @     0x5584ef5f4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53637)[0m     @     0x5584ef54fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53637)[0m     @     0x5584ef5dabaf _PyEval_EvalCodeWithName
[2m[36m(pid=53637)[0m     @     0x5584ef5dba20 method_vectorcall
[2m[36m(pid=53637)[0m     @     0x5584ef54fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53637)[0m     @     0x5584ef5dabaf _PyEval_EvalCodeWithName
[2m[36m(pid=53637)[0m     @     0x5584ef5db643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53637)[0m     @     0x5584ef550689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53637)[0m     @     0x5584ef5dabaf _PyEval_EvalCodeWithName
[2m[36m(pid=53637)[0m     @     0x5584ef5db643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53637)[0m     @     0x5584ef550689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53637)[0m     @     0x5584ef5dabaf _PyEval_EvalCodeWithName
[2m[36m(pid=53637)[0m     @     0x5584ef5db643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53637)[0m     @     0x5584ef550689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53637)[0m     @     0x5584ef5dabaf _PyEval_EvalCodeWithName
[2m[36m(pid=53637)[0m     @     0x5584ef5db643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53637)[0m     @     0x5584ef550689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53605)[0m     @     0x7f4ce98215a4 at::native::copy_()
[2m[36m(pid=53605)[0m     @     0x7f4ce9f0c4f5 at::Tensor::copy_()
[2m[36m(pid=53605)[0m     @     0x7f4cec3df8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53605)[0m     @     0x7f4ce9f0c4f5 at::Tensor::copy_()
[2m[36m(pid=53605)[0m     @     0x7f4ceffb779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53605)[0m     @     0x556d364a1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53605)[0m     @     0x556d363fcb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53605)[0m     @     0x556d36487baf _PyEval_EvalCodeWithName
[2m[36m(pid=53605)[0m     @     0x556d36488a20 method_vectorcall
[2m[36m(pid=53605)[0m     @     0x556d363fcbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53605)[0m     @     0x556d36487baf _PyEval_EvalCodeWithName
[2m[36m(pid=53605)[0m     @     0x556d36488643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53605)[0m     @     0x556d363fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53605)[0m     @     0x556d36487baf _PyEval_EvalCodeWithName
[2m[36m(pid=53605)[0m     @     0x556d36488643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53605)[0m     @     0x556d363fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53605)[0m     @     0x556d36487baf _PyEval_EvalCodeWithName
[2m[36m(pid=53605)[0m     @     0x556d36488643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53605)[0m     @     0x556d363fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53651)[0m     @     0x7fb0695e35a4 at::native::copy_()
[2m[36m(pid=53651)[0m     @     0x7fb069cce4f5 at::Tensor::copy_()
[2m[36m(pid=53651)[0m     @     0x7fb06c1a18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53651)[0m     @     0x7fb069cce4f5 at::Tensor::copy_()
[2m[36m(pid=53651)[0m     @     0x7fb06fd7979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53651)[0m     @     0x562505335fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53651)[0m     @     0x562505290b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53651)[0m     @     0x56250531bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53651)[0m     @     0x56250531ca20 method_vectorcall
[2m[36m(pid=53651)[0m     @     0x562505290bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53651)[0m     @     0x56250531bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53651)[0m     @     0x56250531c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53651)[0m     @     0x562505291689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53651)[0m     @     0x56250531bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53651)[0m     @     0x56250531c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53651)[0m     @     0x562505291689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53651)[0m     @     0x56250531bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53651)[0m     @     0x56250531c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53651)[0m     @     0x562505291689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53651)[0m     @     0x56250531bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53651)[0m     @     0x56250531c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53651)[0m     @     0x562505291689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53603)[0m     @     0x7f5dc9c3b4f5 at::Tensor::copy_()
[2m[36m(pid=53603)[0m     @     0x7f5dcc10e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53603)[0m     @     0x7f5dc9c3b4f5 at::Tensor::copy_()
[2m[36m(pid=53603)[0m     @     0x7f5dcfce679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53603)[0m     @     0x56320be5bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53603)[0m     @     0x56320bdb6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53603)[0m     @     0x56320be41baf _PyEval_EvalCodeWithName
[2m[36m(pid=53603)[0m     @     0x56320be42a20 method_vectorcall
[2m[36m(pid=53603)[0m     @     0x56320bdb6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53603)[0m     @     0x56320be41baf _PyEval_EvalCodeWithName
[2m[36m(pid=53603)[0m     @     0x56320be42643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53603)[0m     @     0x56320bdb7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53603)[0m     @     0x56320be41baf _PyEval_EvalCodeWithName
[2m[36m(pid=53603)[0m     @     0x56320be42643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53603)[0m     @     0x56320bdb7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53603)[0m     @     0x56320be41baf _PyEval_EvalCodeWithName
[2m[36m(pid=53603)[0m     @     0x56320be42643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53603)[0m     @     0x56320bdb7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53603)[0m     @     0x56320be41baf _PyEval_EvalCodeWithName
[2m[36m(pid=53603)[0m     @     0x56320be42643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53603)[0m     @     0x56320bdb7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53536)[0m     @     0x7f03241cf4f5 at::Tensor::copy_()
[2m[36m(pid=53536)[0m     @     0x7f03266a28de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53536)[0m     @     0x7f03241cf4f5 at::Tensor::copy_()
[2m[36m(pid=53536)[0m     @     0x7f032a27a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53536)[0m     @     0x564cac8c7fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53536)[0m     @     0x564cac822b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53536)[0m     @     0x564cac8adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53536)[0m     @     0x564cac8aea20 method_vectorcall
[2m[36m(pid=53536)[0m     @     0x564cac822bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53536)[0m     @     0x564cac8adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53536)[0m     @     0x564cac8ae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53536)[0m     @     0x564cac823689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53536)[0m     @     0x564cac8adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53536)[0m     @     0x564cac8ae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53536)[0m     @     0x564cac823689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53536)[0m     @     0x564cac8adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53536)[0m     @     0x564cac8ae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53536)[0m     @     0x564cac823689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53536)[0m     @     0x564cac8adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53536)[0m     @     0x564cac8ae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53536)[0m     @     0x564cac823689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53584)[0m     @     0x7f7f57cfb5a4 at::native::copy_()
[2m[36m(pid=53584)[0m     @     0x7f7f583e64f5 at::Tensor::copy_()
[2m[36m(pid=53584)[0m     @     0x7f7f5a8b98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53584)[0m     @     0x7f7f583e64f5 at::Tensor::copy_()
[2m[36m(pid=53584)[0m     @     0x7f7f5e49179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53584)[0m     @     0x55bb6d0c2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53584)[0m     @     0x55bb6d01db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53584)[0m     @     0x55bb6d0a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=53584)[0m     @     0x55bb6d0a9a20 method_vectorcall
[2m[36m(pid=53584)[0m     @     0x55bb6d01dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53584)[0m     @     0x55bb6d0a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=53584)[0m     @     0x55bb6d0a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53584)[0m     @     0x55bb6d01e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53584)[0m     @     0x55bb6d0a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=53584)[0m     @     0x55bb6d0a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53584)[0m     @     0x55bb6d01e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53584)[0m     @     0x55bb6d0a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=53584)[0m     @     0x55bb6d0a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53584)[0m     @     0x55bb6d01e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53584)[0m     @     0x55bb6d0a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=53584)[0m     @     0x55bb6d0a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53584)[0m     @     0x55bb6d01e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53531)[0m     @     0x7f1f360e65a4 at::native::copy_()
[2m[36m(pid=53531)[0m     @     0x7f1f367d14f5 at::Tensor::copy_()
[2m[36m(pid=53531)[0m     @     0x7f1f38ca48de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53531)[0m     @     0x7f1f367d14f5 at::Tensor::copy_()
[2m[36m(pid=53531)[0m     @     0x7f1f3c87c79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53531)[0m     @     0x55c0bf344fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53531)[0m     @     0x55c0bf29fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53531)[0m     @     0x55c0bf32abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53531)[0m     @     0x55c0bf32ba20 method_vectorcall
[2m[36m(pid=53531)[0m     @     0x55c0bf29fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53531)[0m     @     0x55c0bf32abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53531)[0m     @     0x55c0bf32b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53531)[0m     @     0x55c0bf2a0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53531)[0m     @     0x55c0bf32abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53531)[0m     @     0x55c0bf32b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53531)[0m     @     0x55c0bf2a0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53531)[0m     @     0x55c0bf32abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53531)[0m     @     0x55c0bf32b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53531)[0m     @     0x55c0bf2a0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53531)[0m     @     0x55c0bf32abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53531)[0m     @     0x55c0bf32b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53531)[0m     @     0x55c0bf2a0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53650)[0m     @     0x7f04e3bdd4f5 at::Tensor::copy_()
[2m[36m(pid=53650)[0m     @     0x7f04e60b08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53650)[0m     @     0x7f04e3bdd4f5 at::Tensor::copy_()
[2m[36m(pid=53650)[0m     @     0x7f04e9c8879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53650)[0m     @     0x5611f7b84fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53650)[0m     @     0x5611f7adfb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53650)[0m     @     0x5611f7b6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53650)[0m     @     0x5611f7b6ba20 method_vectorcall
[2m[36m(pid=53650)[0m     @     0x5611f7adfbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53650)[0m     @     0x5611f7b6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53650)[0m     @     0x5611f7b6b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53650)[0m     @     0x5611f7ae0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53650)[0m     @     0x5611f7b6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53650)[0m     @     0x5611f7b6b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53650)[0m     @     0x5611f7ae0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53650)[0m     @     0x5611f7b6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53650)[0m     @     0x5611f7b6b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53650)[0m     @     0x5611f7ae0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53650)[0m     @     0x5611f7b6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53650)[0m     @     0x5611f7b6b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53650)[0m     @     0x5611f7ae0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53642)[0m     @     0x7f87a8ba44f5 at::Tensor::copy_()
[2m[36m(pid=53642)[0m     @     0x7f87ab0778de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53642)[0m     @     0x7f87a8ba44f5 at::Tensor::copy_()
[2m[36m(pid=53642)[0m     @     0x7f87aec4f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53642)[0m     @     0x5585f8200fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53642)[0m     @     0x5585f815bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53642)[0m     @     0x5585f81e6baf _PyEval_EvalCodeWithName
[2m[36m(pid=53642)[0m     @     0x5585f81e7a20 method_vectorcall
[2m[36m(pid=53642)[0m     @     0x5585f815bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53642)[0m     @     0x5585f81e6baf _PyEval_EvalCodeWithName
[2m[36m(pid=53642)[0m     @     0x5585f81e7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53642)[0m     @     0x5585f815c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53642)[0m     @     0x5585f81e6baf _PyEval_EvalCodeWithName
[2m[36m(pid=53642)[0m     @     0x5585f81e7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53642)[0m     @     0x5585f815c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53642)[0m     @     0x5585f81e6baf _PyEval_EvalCodeWithName
[2m[36m(pid=53642)[0m     @     0x5585f81e7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53642)[0m     @     0x5585f815c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53642)[0m     @     0x5585f81e6baf _PyEval_EvalCodeWithName
[2m[36m(pid=53642)[0m     @     0x5585f81e7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53642)[0m     @     0x5585f815c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53654)[0m     @     0x7ef21e9c44f5 at::Tensor::copy_()
[2m[36m(pid=53654)[0m     @     0x7ef220e978de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53654)[0m     @     0x7ef21e9c44f5 at::Tensor::copy_()
[2m[36m(pid=53654)[0m     @     0x7ef224a6f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53654)[0m     @     0x55ebf025cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53654)[0m     @     0x55ebf01b7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53654)[0m     @     0x55ebf0242baf _PyEval_EvalCodeWithName
[2m[36m(pid=53654)[0m     @     0x55ebf0243a20 method_vectorcall
[2m[36m(pid=53654)[0m     @     0x55ebf01b7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53654)[0m     @     0x55ebf0242baf _PyEval_EvalCodeWithName
[2m[36m(pid=53654)[0m     @     0x55ebf0243643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53654)[0m     @     0x55ebf01b8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53654)[0m     @     0x55ebf0242baf _PyEval_EvalCodeWithName
[2m[36m(pid=53654)[0m     @     0x55ebf0243643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53654)[0m     @     0x55ebf01b8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53654)[0m     @     0x55ebf0242baf _PyEval_EvalCodeWithName
[2m[36m(pid=53654)[0m     @     0x55ebf0243643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53654)[0m     @     0x55ebf01b8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53654)[0m     @     0x55ebf0242baf _PyEval_EvalCodeWithName
[2m[36m(pid=53654)[0m     @     0x55ebf0243643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53654)[0m     @     0x55ebf01b8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53611)[0m     @     0x7f80f749f4f5 at::Tensor::copy_()
[2m[36m(pid=53611)[0m     @     0x7f80f99728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53611)[0m     @     0x7f80f749f4f5 at::Tensor::copy_()
[2m[36m(pid=53611)[0m     @     0x7f80fd54a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53611)[0m     @     0x56202de76fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53611)[0m     @     0x56202ddd1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53611)[0m     @     0x56202de5cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53611)[0m     @     0x56202de5da20 method_vectorcall
[2m[36m(pid=53611)[0m     @     0x56202ddd1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53611)[0m     @     0x56202de5cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53611)[0m     @     0x56202de5d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53611)[0m     @     0x56202ddd2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53611)[0m     @     0x56202de5cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53611)[0m     @     0x56202de5d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53611)[0m     @     0x56202ddd2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53611)[0m     @     0x56202de5cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53611)[0m     @     0x56202de5d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53611)[0m     @     0x56202ddd2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53611)[0m     @     0x56202de5cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53611)[0m     @     0x56202de5d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53611)[0m     @     0x56202ddd2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53636)[0m     @     0x7faf85e9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53636)[0m     @     0x7faf839cc4f5 at::Tensor::copy_()
[2m[36m(pid=53636)[0m     @     0x7faf89a7779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53636)[0m     @     0x55b72aafdfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53636)[0m     @     0x55b72aa58b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53636)[0m     @     0x55b72aae3baf _PyEval_EvalCodeWithName
[2m[36m(pid=53636)[0m     @     0x55b72aae4a20 method_vectorcall
[2m[36m(pid=53636)[0m     @     0x55b72aa58bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53636)[0m     @     0x55b72aae3baf _PyEval_EvalCodeWithName
[2m[36m(pid=53636)[0m     @     0x55b72aae4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53636)[0m     @     0x55b72aa59689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53636)[0m     @     0x55b72aae3baf _PyEval_EvalCodeWithName
[2m[36m(pid=53636)[0m     @     0x55b72aae4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53636)[0m     @     0x55b72aa59689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53636)[0m     @     0x55b72aae3baf _PyEval_EvalCodeWithName
[2m[36m(pid=53636)[0m     @     0x55b72aae4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53636)[0m     @     0x55b72aa59689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53636)[0m     @     0x55b72aae3baf _PyEval_EvalCodeWithName
[2m[36m(pid=53636)[0m     @     0x55b72aae4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53636)[0m     @     0x55b72aa59689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53631)[0m     @     0x7ee8473cf4f5 at::Tensor::copy_()
[2m[36m(pid=53631)[0m     @     0x7ee8498a28de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53631)[0m     @     0x7ee8473cf4f5 at::Tensor::copy_()
[2m[36m(pid=53631)[0m     @     0x7ee84d47a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53631)[0m     @     0x5625a822ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53631)[0m     @     0x5625a818ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53631)[0m     @     0x5625a8215baf _PyEval_EvalCodeWithName
[2m[36m(pid=53631)[0m     @     0x5625a8216a20 method_vectorcall
[2m[36m(pid=53631)[0m     @     0x5625a818abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53631)[0m     @     0x5625a8215baf _PyEval_EvalCodeWithName
[2m[36m(pid=53631)[0m     @     0x5625a8216643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53631)[0m     @     0x5625a818b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53631)[0m     @     0x5625a8215baf _PyEval_EvalCodeWithName
[2m[36m(pid=53631)[0m     @     0x5625a8216643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53631)[0m     @     0x5625a818b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53631)[0m     @     0x5625a8215baf _PyEval_EvalCodeWithName
[2m[36m(pid=53631)[0m     @     0x5625a8216643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53631)[0m     @     0x5625a818b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53631)[0m     @     0x5625a8215baf _PyEval_EvalCodeWithName
[2m[36m(pid=53631)[0m     @     0x5625a8216643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53631)[0m     @     0x5625a818b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53643)[0m     @     0x7f8318a384f5 at::Tensor::copy_()
[2m[36m(pid=53643)[0m     @     0x7f831af0b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53643)[0m     @     0x7f8318a384f5 at::Tensor::copy_()
[2m[36m(pid=53643)[0m     @     0x7f831eae379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53643)[0m     @     0x563e3587bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53643)[0m     @     0x563e357d6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53643)[0m     @     0x563e35861baf _PyEval_EvalCodeWithName
[2m[36m(pid=53643)[0m     @     0x563e35862a20 method_vectorcall
[2m[36m(pid=53643)[0m     @     0x563e357d6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53643)[0m     @     0x563e35861baf _PyEval_EvalCodeWithName
[2m[36m(pid=53643)[0m     @     0x563e35862643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53643)[0m     @     0x563e357d7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53643)[0m     @     0x563e35861baf _PyEval_EvalCodeWithName
[2m[36m(pid=53643)[0m     @     0x563e35862643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53643)[0m     @     0x563e357d7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53643)[0m     @     0x563e35861baf _PyEval_EvalCodeWithName
[2m[36m(pid=53643)[0m     @     0x563e35862643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53643)[0m     @     0x563e357d7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53643)[0m     @     0x563e35861baf _PyEval_EvalCodeWithName
[2m[36m(pid=53643)[0m     @     0x563e35862643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53643)[0m     @     0x563e357d7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53639)[0m     @     0x7f55d6bd54f5 at::Tensor::copy_()
[2m[36m(pid=53639)[0m     @     0x7f55d90a88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53639)[0m     @     0x7f55d6bd54f5 at::Tensor::copy_()
[2m[36m(pid=53639)[0m     @     0x7f55dcc8079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53639)[0m     @     0x55c3eadc4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53639)[0m     @     0x55c3ead1fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53639)[0m     @     0x55c3eadaabaf _PyEval_EvalCodeWithName
[2m[36m(pid=53639)[0m     @     0x55c3eadaba20 method_vectorcall
[2m[36m(pid=53639)[0m     @     0x55c3ead1fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53639)[0m     @     0x55c3eadaabaf _PyEval_EvalCodeWithName
[2m[36m(pid=53639)[0m     @     0x55c3eadab643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53639)[0m     @     0x55c3ead20689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53639)[0m     @     0x55c3eadaabaf _PyEval_EvalCodeWithName
[2m[36m(pid=53639)[0m     @     0x55c3eadab643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53639)[0m     @     0x55c3ead20689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53639)[0m     @     0x55c3eadaabaf _PyEval_EvalCodeWithName
[2m[36m(pid=53639)[0m     @     0x55c3eadab643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53639)[0m     @     0x55c3ead20689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53639)[0m     @     0x55c3eadaabaf _PyEval_EvalCodeWithName
[2m[36m(pid=53639)[0m     @     0x55c3eadab643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53639)[0m     @     0x55c3ead20689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53549)[0m     @     0x7f914f5a3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53549)[0m     @     0x7f914f5a1388 at::native::copy_impl()
[2m[36m(pid=53549)[0m     @     0x7f914f5a35a4 at::native::copy_()
[2m[36m(pid=53549)[0m     @     0x7f914fc8e4f5 at::Tensor::copy_()
[2m[36m(pid=53549)[0m     @     0x7f91521618de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53633)[0m     @     0x7efe0c58b5a4 at::native::copy_()
[2m[36m(pid=53633)[0m     @     0x7efe0cc764f5 at::Tensor::copy_()
[2m[36m(pid=53633)[0m     @     0x7efe0f1498de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53633)[0m     @     0x7efe0cc764f5 at::Tensor::copy_()
[2m[36m(pid=53633)[0m     @     0x7efe12d2179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53633)[0m     @     0x55d312edbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53633)[0m     @     0x55d312e36b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53633)[0m     @     0x55d312ec1baf _PyEval_EvalCodeWithName
[2m[36m(pid=53633)[0m     @     0x55d312ec2a20 method_vectorcall
[2m[36m(pid=53633)[0m     @     0x55d312e36bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53633)[0m     @     0x55d312ec1baf _PyEval_EvalCodeWithName
[2m[36m(pid=53633)[0m     @     0x55d312ec2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53633)[0m     @     0x55d312e37689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53633)[0m     @     0x55d312ec1baf _PyEval_EvalCodeWithName
[2m[36m(pid=53633)[0m     @     0x55d312ec2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53633)[0m     @     0x55d312e37689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53633)[0m     @     0x55d312ec1baf _PyEval_EvalCodeWithName
[2m[36m(pid=53633)[0m     @     0x55d312ec2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53633)[0m     @     0x55d312e37689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53633)[0m     @     0x55d312ec1baf _PyEval_EvalCodeWithName
[2m[36m(pid=53633)[0m     @     0x55d312ec2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53633)[0m     @     0x55d312e37689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53529)[0m     @     0x7f7f84a4e5a4 at::native::copy_()
[2m[36m(pid=53529)[0m     @     0x7f7f851394f5 at::Tensor::copy_()
[2m[36m(pid=53529)[0m     @     0x7f7f8760c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53529)[0m     @     0x7f7f851394f5 at::Tensor::copy_()
[2m[36m(pid=53529)[0m     @     0x7f7f8b1e479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53529)[0m     @     0x55a53bb98fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53529)[0m     @     0x55a53baf3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53529)[0m     @     0x55a53bb7ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53529)[0m     @     0x55a53bb7fa20 method_vectorcall
[2m[36m(pid=53529)[0m     @     0x55a53baf3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53529)[0m     @     0x55a53bb7ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53529)[0m     @     0x55a53bb7f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53529)[0m     @     0x55a53baf4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53529)[0m     @     0x55a53bb7ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53529)[0m     @     0x55a53bb7f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53529)[0m     @     0x55a53baf4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53529)[0m     @     0x55a53bb7ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53529)[0m     @     0x55a53bb7f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53529)[0m     @     0x55a53baf4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53529)[0m     @     0x55a53bb7ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53529)[0m     @     0x55a53bb7f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53529)[0m     @     0x55a53baf4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53569)[0m     @     0x7ee96d2fa5a4 at::native::copy_()
[2m[36m(pid=53569)[0m     @     0x7ee96d9e54f5 at::Tensor::copy_()
[2m[36m(pid=53569)[0m     @     0x7ee96feb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53569)[0m     @     0x7ee96d9e54f5 at::Tensor::copy_()
[2m[36m(pid=53569)[0m     @     0x7ee973a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53569)[0m     @     0x55884fe84fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53569)[0m     @     0x55884fddfb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53569)[0m     @     0x55884fe6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53569)[0m     @     0x55884fe6ba20 method_vectorcall
[2m[36m(pid=53569)[0m     @     0x55884fddfbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53569)[0m     @     0x55884fe6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53569)[0m     @     0x55884fe6b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53569)[0m     @     0x55884fde0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53569)[0m     @     0x55884fe6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53569)[0m     @     0x55884fe6b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53569)[0m     @     0x55884fde0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53569)[0m     @     0x55884fe6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53569)[0m     @     0x55884fe6b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53569)[0m     @     0x55884fde0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53569)[0m     @     0x55884fe6abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53569)[0m     @     0x55884fe6b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53569)[0m     @     0x55884fde0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53623)[0m     @     0x7f4b303e64f5 at::Tensor::copy_()
[2m[36m(pid=53623)[0m     @     0x7f4b3649179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53623)[0m     @     0x559b3b34dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53623)[0m     @     0x559b3b2a8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53623)[0m     @     0x559b3b333baf _PyEval_EvalCodeWithName
[2m[36m(pid=53623)[0m     @     0x559b3b334a20 method_vectorcall
[2m[36m(pid=53623)[0m     @     0x559b3b2a8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53623)[0m     @     0x559b3b333baf _PyEval_EvalCodeWithName
[2m[36m(pid=53623)[0m     @     0x559b3b334643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53623)[0m     @     0x559b3b2a9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53623)[0m     @     0x559b3b333baf _PyEval_EvalCodeWithName
[2m[36m(pid=53623)[0m     @     0x559b3b334643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53623)[0m     @     0x559b3b2a9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53623)[0m     @     0x559b3b333baf _PyEval_EvalCodeWithName
[2m[36m(pid=53623)[0m     @     0x559b3b334643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53623)[0m     @     0x559b3b2a9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53623)[0m     @     0x559b3b333baf _PyEval_EvalCodeWithName
[2m[36m(pid=53623)[0m     @     0x559b3b334643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53623)[0m     @     0x559b3b2a9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53617)[0m     @     0x7fabab35fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53617)[0m     @     0x7fabab35d388 at::native::copy_impl()
[2m[36m(pid=53617)[0m     @     0x7fabab35f5a4 at::native::copy_()
[2m[36m(pid=53617)[0m     @     0x7fababa4a4f5 at::Tensor::copy_()
[2m[36m(pid=53617)[0m     @     0x7fabadf1d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53612)[0m     @     0x7f66680884f5 at::Tensor::copy_()
[2m[36m(pid=53612)[0m     @     0x7f666a55b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53612)[0m     @     0x7f66680884f5 at::Tensor::copy_()
[2m[36m(pid=53612)[0m     @     0x7f666e13379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53612)[0m     @     0x557086645fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53612)[0m     @     0x5570865a0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53612)[0m     @     0x55708662bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53612)[0m     @     0x55708662ca20 method_vectorcall
[2m[36m(pid=53612)[0m     @     0x5570865a0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53612)[0m     @     0x55708662bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53612)[0m     @     0x55708662c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53612)[0m     @     0x5570865a1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53612)[0m     @     0x55708662bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53612)[0m     @     0x55708662c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53612)[0m     @     0x5570865a1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53612)[0m     @     0x55708662bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53612)[0m     @     0x55708662c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53612)[0m     @     0x5570865a1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53612)[0m     @     0x55708662bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53612)[0m     @     0x55708662c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53612)[0m     @     0x5570865a1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53645)[0m     @     0x7faf154b78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53645)[0m     @     0x7faf154b7ad3 at::TensorIterator::for_each()
[2m[36m(pid=53645)[0m     @     0x7faf154b7d91 at::TensorIterator::for_each()
[2m[36m(pid=53645)[0m     @     0x7faf15d9ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53645)[0m     @     0x7faf15dbdc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53640)[0m     @     0x7f9eda7a27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53640)[0m     @     0x7f9eda7a58f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53640)[0m     @     0x7f9eda7a5ad3 at::TensorIterator::for_each()
[2m[36m(pid=53640)[0m     @     0x7f9eda7a5d91 at::TensorIterator::for_each()
[2m[36m(pid=53640)[0m     @     0x7f9edb088b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53640)[0m     @     0x7f9edb0abc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53544)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53544)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53544)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53544)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53544)[0m *** SIGSEGV (@0x0) received by PID 53544 (TID 0x7fca5cd1d700) from PID 0; stack trace: ***
[2m[36m(pid=53641)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53641)[0m *** SIGSEGV (@0x0) received by PID 53641 (TID 0x7f6b17d85700) from PID 0; stack trace: ***
[2m[36m(pid=53641)[0m     @     0x7f6b1795e390 (unknown)
[2m[36m(pid=53641)[0m     @     0x7f3c178def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53641)[0m     @     0x7f3c170097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53641)[0m     @     0x7f3c1700c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53551)[0m     @     0x7f9c6f78ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53551)[0m     @     0x7f9c6eeb97db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53551)[0m     @     0x7f9c6eebc8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53551)[0m     @     0x7f9c6eebcad3 at::TensorIterator::for_each()
[2m[36m(pid=53551)[0m     @     0x7f9c6eebcd91 at::TensorIterator::for_each()
[2m[36m(pid=53551)[0m     @     0x7f9c6f79fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53604)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53604)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53604)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53604)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53604)[0m *** SIGSEGV (@0x0) received by PID 53604 (TID 0x7fc03800f700) from PID 0; stack trace: ***
[2m[36m(pid=53604)[0m     @     0x7fc037be8390 (unknown)
[2m[36m(pid=53604)[0m     @     0x7f9137af5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53604)[0m     @     0x7f91372207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53560)[0m     @     0x7f72461418f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53560)[0m     @     0x7f7246141ad3 at::TensorIterator::for_each()
[2m[36m(pid=53560)[0m     @     0x7f7246141d91 at::TensorIterator::for_each()
[2m[36m(pid=53560)[0m     @     0x7f7246a24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53560)[0m     @     0x7f7246a47c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53626)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=53626)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=53626)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53626)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53626)[0m *** SIGSEGV (@0x0) received by PID 53626 (TID 0x7f4e2ea35700) from PID 0; stack trace: ***
[2m[36m(pid=53626)[0m     @     0x7f4e2e60e390 (unknown)
[2m[36m(pid=53626)[0m     @     0x7f1f2e365f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53626)[0m     @     0x7f1f2da907db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53626)[0m     @     0x7f1f2da938f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53614)[0m     @     0x7f7028563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53614)[0m     @     0x7f7027c8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53614)[0m     @     0x7f7027c918f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53614)[0m     @     0x7f7027c91ad3 at::TensorIterator::for_each()
[2m[36m(pid=53614)[0m     @     0x7f7027c91d91 at::TensorIterator::for_each()
[2m[36m(pid=53596)[0m     @     0x7fa11e2def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53596)[0m     @     0x7fa11da097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53596)[0m     @     0x7fa11da0c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53596)[0m     @     0x7fa11da0cad3 at::TensorIterator::for_each()
[2m[36m(pid=53596)[0m     @     0x7fa11da0cd91 at::TensorIterator::for_each()
[2m[36m(pid=53596)[0m     @     0x7fa11e2efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53528)[0m     @     0x7f3c79a798f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53528)[0m     @     0x7f3c79a79ad3 at::TensorIterator::for_each()
[2m[36m(pid=53528)[0m     @     0x7f3c79a79d91 at::TensorIterator::for_each()
[2m[36m(pid=53528)[0m     @     0x7f3c7a35cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53528)[0m     @     0x7f3c7a37fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53553)[0m     @     0x7f6ef6a548f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53553)[0m     @     0x7f6ef6a54ad3 at::TensorIterator::for_each()
[2m[36m(pid=53553)[0m     @     0x7f6ef6a54d91 at::TensorIterator::for_each()
[2m[36m(pid=53553)[0m     @     0x7f6ef7337b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53553)[0m     @     0x7f6ef735ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53620)[0m     @     0x7fbd959134f5 at::Tensor::copy_()
[2m[36m(pid=53620)[0m     @     0x7fbd97de68de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53620)[0m     @     0x7fbd959134f5 at::Tensor::copy_()
[2m[36m(pid=53620)[0m     @     0x7fbd9b9be79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53620)[0m     @     0x563662f89fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53620)[0m     @     0x563662ee4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53620)[0m     @     0x563662f6fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53620)[0m     @     0x563662f70a20 method_vectorcall
[2m[36m(pid=53620)[0m     @     0x563662ee4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53620)[0m     @     0x563662f6fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53620)[0m     @     0x563662f70643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53620)[0m     @     0x563662ee5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53620)[0m     @     0x563662f6fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53620)[0m     @     0x563662f70643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53620)[0m     @     0x563662ee5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53620)[0m     @     0x563662f6fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53620)[0m     @     0x563662f70643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53620)[0m     @     0x563662ee5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53620)[0m     @     0x563662f6fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53620)[0m     @     0x563662f70643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53620)[0m     @     0x563662ee5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53630)[0m     @     0x7f980f4f25a4 at::native::copy_()
[2m[36m(pid=53630)[0m     @     0x7f980fbdd4f5 at::Tensor::copy_()
[2m[36m(pid=53630)[0m     @     0x7f98120b08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53630)[0m     @     0x7f980fbdd4f5 at::Tensor::copy_()
[2m[36m(pid=53630)[0m     @     0x7f9815c8879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53630)[0m     @     0x563d767fefd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53630)[0m     @     0x563d76759b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53630)[0m     @     0x563d767e4baf _PyEval_EvalCodeWithName
[2m[36m(pid=53630)[0m     @     0x563d767e5a20 method_vectorcall
[2m[36m(pid=53630)[0m     @     0x563d76759bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53630)[0m     @     0x563d767e4baf _PyEval_EvalCodeWithName
[2m[36m(pid=53630)[0m     @     0x563d767e5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53630)[0m     @     0x563d7675a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53630)[0m     @     0x563d767e4baf _PyEval_EvalCodeWithName
[2m[36m(pid=53630)[0m     @     0x563d767e5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53630)[0m     @     0x563d7675a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53630)[0m     @     0x563d767e4baf _PyEval_EvalCodeWithName
[2m[36m(pid=53630)[0m     @     0x563d767e5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53630)[0m     @     0x563d7675a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53630)[0m     @     0x563d767e4baf _PyEval_EvalCodeWithName
[2m[36m(pid=53542)[0m     @     0x7f379b5e44f5 at::Tensor::copy_()
[2m[36m(pid=53542)[0m     @     0x7f379dab78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53542)[0m     @     0x7f379b5e44f5 at::Tensor::copy_()
[2m[36m(pid=53542)[0m     @     0x7f37a168f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53542)[0m     @     0x55ef4a746fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53542)[0m     @     0x55ef4a6a1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53542)[0m     @     0x55ef4a72cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53542)[0m     @     0x55ef4a72da20 method_vectorcall
[2m[36m(pid=53542)[0m     @     0x55ef4a6a1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53542)[0m     @     0x55ef4a72cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53542)[0m     @     0x55ef4a72d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53542)[0m     @     0x55ef4a6a2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53542)[0m     @     0x55ef4a72cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53542)[0m     @     0x55ef4a72d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53542)[0m     @     0x55ef4a6a2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53542)[0m     @     0x55ef4a72cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53542)[0m     @     0x55ef4a72d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53542)[0m     @     0x55ef4a6a2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53542)[0m     @     0x55ef4a72cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53542)[0m     @     0x55ef4a72d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53542)[0m     @     0x55ef4a6a2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53537)[0m     @     0x7efdd6dea4f5 at::Tensor::copy_()
[2m[36m(pid=53537)[0m     @     0x7efdd92bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53537)[0m     @     0x7efdd6dea4f5 at::Tensor::copy_()
[2m[36m(pid=53537)[0m     @     0x7efddce9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53537)[0m     @     0x562cb0a6ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53537)[0m     @     0x562cb09cab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53537)[0m     @     0x562cb0a55baf _PyEval_EvalCodeWithName
[2m[36m(pid=53537)[0m     @     0x562cb0a56a20 method_vectorcall
[2m[36m(pid=53537)[0m     @     0x562cb09cabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53537)[0m     @     0x562cb0a55baf _PyEval_EvalCodeWithName
[2m[36m(pid=53537)[0m     @     0x562cb0a56643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53537)[0m     @     0x562cb09cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53537)[0m     @     0x562cb0a55baf _PyEval_EvalCodeWithName
[2m[36m(pid=53537)[0m     @     0x562cb0a56643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53537)[0m     @     0x562cb09cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53537)[0m     @     0x562cb0a55baf _PyEval_EvalCodeWithName
[2m[36m(pid=53537)[0m     @     0x562cb0a56643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53537)[0m     @     0x562cb09cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53537)[0m     @     0x562cb0a55baf _PyEval_EvalCodeWithName
[2m[36m(pid=53537)[0m     @     0x562cb0a56643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53537)[0m     @     0x562cb09cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53538)[0m     @     0x7f403405ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53538)[0m     @     0x7f4034059388 at::native::copy_impl()
[2m[36m(pid=53538)[0m     @     0x7f403405b5a4 at::native::copy_()
[2m[36m(pid=53538)[0m     @     0x7f40347464f5 at::Tensor::copy_()
[2m[36m(pid=53538)[0m     @     0x7f4036c198de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53606)[0m     @     0x7fc9ea5204f5 at::Tensor::copy_()
[2m[36m(pid=53606)[0m     @     0x7fc9f05cb79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53606)[0m     @     0x55df3a0effd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53606)[0m     @     0x55df3a04ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53606)[0m     @     0x55df3a0d5baf _PyEval_EvalCodeWithName
[2m[36m(pid=53606)[0m     @     0x55df3a0d6a20 method_vectorcall
[2m[36m(pid=53606)[0m     @     0x55df3a04abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53606)[0m     @     0x55df3a0d5baf _PyEval_EvalCodeWithName
[2m[36m(pid=53606)[0m     @     0x55df3a0d6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53606)[0m     @     0x55df3a04b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53606)[0m     @     0x55df3a0d5baf _PyEval_EvalCodeWithName
[2m[36m(pid=53606)[0m     @     0x55df3a0d6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53606)[0m     @     0x55df3a04b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53606)[0m     @     0x55df3a0d5baf _PyEval_EvalCodeWithName
[2m[36m(pid=53606)[0m     @     0x55df3a0d6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53606)[0m     @     0x55df3a04b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53606)[0m     @     0x55df3a0d5baf _PyEval_EvalCodeWithName
[2m[36m(pid=53606)[0m     @     0x55df3a0d6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53606)[0m     @     0x55df3a04b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53615)[0m     @     0x7fa376fcba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53615)[0m     @     0x7fa376fc9388 at::native::copy_impl()
[2m[36m(pid=53615)[0m     @     0x7fa376fcb5a4 at::native::copy_()
[2m[36m(pid=53615)[0m     @     0x7fa3776b64f5 at::Tensor::copy_()
[2m[36m(pid=53615)[0m     @     0x7fa379b898de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53599)[0m     @     0x7fb1c13ba4f5 at::Tensor::copy_()
[2m[36m(pid=53599)[0m     @     0x7fb1c388d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53599)[0m     @     0x7fb1c13ba4f5 at::Tensor::copy_()
[2m[36m(pid=53599)[0m     @     0x7fb1c746579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53599)[0m     @     0x56551a147fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53599)[0m     @     0x56551a0a2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53599)[0m     @     0x56551a12dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53599)[0m     @     0x56551a12ea20 method_vectorcall
[2m[36m(pid=53599)[0m     @     0x56551a0a2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53599)[0m     @     0x56551a12dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53599)[0m     @     0x56551a12e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53599)[0m     @     0x56551a0a3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53599)[0m     @     0x56551a12dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53599)[0m     @     0x56551a12e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53599)[0m     @     0x56551a0a3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53599)[0m     @     0x56551a12dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53599)[0m     @     0x56551a12e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53599)[0m     @     0x56551a0a3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53599)[0m     @     0x56551a12dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53599)[0m     @     0x56551a12e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53599)[0m     @     0x56551a0a3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53591)[0m     @     0x7ed3941244f5 at::Tensor::copy_()
[2m[36m(pid=53591)[0m     @     0x7ed39a1cf79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53591)[0m     @     0x563be66e8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53591)[0m     @     0x563be6643b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53591)[0m     @     0x563be66cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53591)[0m     @     0x563be66cfa20 method_vectorcall
[2m[36m(pid=53591)[0m     @     0x563be6643bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53591)[0m     @     0x563be66cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53591)[0m     @     0x563be66cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53591)[0m     @     0x563be6644689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53591)[0m     @     0x563be66cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53591)[0m     @     0x563be66cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53591)[0m     @     0x563be6644689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53591)[0m     @     0x563be66cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53591)[0m     @     0x563be66cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53591)[0m     @     0x563be6644689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53591)[0m     @     0x563be66cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53591)[0m     @     0x563be66cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53591)[0m     @     0x563be6644689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53543)[0m     @     0x7f6db5a93ad3 at::TensorIterator::for_each()
[2m[36m(pid=53543)[0m     @     0x7f6db5a93d91 at::TensorIterator::for_each()
[2m[36m(pid=53543)[0m     @     0x7f6db6376b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53543)[0m     @     0x7f6db6399c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53541)[0m     @     0x7f2fc214fad3 at::TensorIterator::for_each()
[2m[36m(pid=53541)[0m     @     0x7f2fc214fd91 at::TensorIterator::for_each()
[2m[36m(pid=53541)[0m     @     0x7f2fc2a32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53541)[0m     @     0x7f2fc2a55c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53546)[0m     @     0x7fb6b3ea2ad3 at::TensorIterator::for_each()
[2m[36m(pid=53546)[0m     @     0x7fb6b3ea2d91 at::TensorIterator::for_each()
[2m[36m(pid=53546)[0m     @     0x7fb6b4785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53546)[0m     @     0x7fb6b47a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53610)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53610)[0m *** SIGSEGV (@0x0) received by PID 53610 (TID 0x7fc8a3e17700) from PID 0; stack trace: ***
[2m[36m(pid=53558)[0m     @     0x7f519bf53ad3 at::TensorIterator::for_each()
[2m[36m(pid=53558)[0m     @     0x7f519bf53d91 at::TensorIterator::for_each()
[2m[36m(pid=53558)[0m     @     0x7f519c836b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53558)[0m     @     0x7f519c859c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53608)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53608)[0m *** SIGSEGV (@0x0) received by PID 53608 (TID 0x7fd27c4bb700) from PID 0; stack trace: ***
[2m[36m(pid=53608)[0m     @     0x7fd27c094390 (unknown)
[2m[36m(pid=53608)[0m     @     0x7fa37bd2cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53608)[0m     @     0x7fa37b4577db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53608)[0m     @     0x7fa37b45a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53600)[0m     @     0x7fc88f539ad3 at::TensorIterator::for_each()
[2m[36m(pid=53600)[0m     @     0x7fc88f539d91 at::TensorIterator::for_each()
[2m[36m(pid=53600)[0m     @     0x7fc88fe1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53600)[0m     @     0x7fc88fe3fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53535)[0m     @     0x7f650f325ad3 at::TensorIterator::for_each()
[2m[36m(pid=53535)[0m     @     0x7f650f325d91 at::TensorIterator::for_each()
[2m[36m(pid=53535)[0m     @     0x7f650fc08b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53535)[0m     @     0x7f650fc2bc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53593)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53593)[0m *** SIGSEGV (@0x0) received by PID 53593 (TID 0x7fd3968af700) from PID 0; stack trace: ***
[2m[36m(pid=53644)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53644)[0m *** SIGSEGV (@0x0) received by PID 53644 (TID 0x7f59954ec700) from PID 0; stack trace: ***
[2m[36m(pid=53644)[0m     @     0x7f59950c5390 (unknown)
[2m[36m(pid=53644)[0m     @     0x7f2a95075f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53644)[0m     @     0x7f2a947a07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53597)[0m     @     0x7fe9e7d11390 (unknown)
[2m[36m(pid=53597)[0m     @     0x7fbae7bf7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53597)[0m     @     0x7fbae73227db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53601)[0m     @     0x7f45433a9ad3 at::TensorIterator::for_each()
[2m[36m(pid=53601)[0m     @     0x7f45433a9d91 at::TensorIterator::for_each()
[2m[36m(pid=53601)[0m     @     0x7f4543c8cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53601)[0m     @     0x7f4543cafc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53601)[0m     @     0x7f4543151a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53601)[0m     @     0x7f454314f388 at::native::copy_impl()
[2m[36m(pid=53607)[0m     @     0x7f907ad0aad3 at::TensorIterator::for_each()
[2m[36m(pid=53607)[0m     @     0x7f907ad0ad91 at::TensorIterator::for_each()
[2m[36m(pid=53607)[0m     @     0x7f907b5edb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53607)[0m     @     0x7f907b610c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53607)[0m     @     0x7f907aab2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53607)[0m     @     0x7f907aab0388 at::native::copy_impl()
[2m[36m(pid=53563)[0m     @     0x7f48c52bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53563)[0m     @     0x7f48c2dea4f5 at::Tensor::copy_()
[2m[36m(pid=53563)[0m     @     0x7f48c8e9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53563)[0m     @     0x556abbe34fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53563)[0m     @     0x556abbd8fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53563)[0m     @     0x556abbe1abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53563)[0m     @     0x556abbe1ba20 method_vectorcall
[2m[36m(pid=53563)[0m     @     0x556abbd8fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53563)[0m     @     0x556abbe1abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53563)[0m     @     0x556abbe1b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53563)[0m     @     0x556abbd90689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53563)[0m     @     0x556abbe1abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53563)[0m     @     0x556abbe1b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53563)[0m     @     0x556abbd90689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53563)[0m     @     0x556abbe1abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53563)[0m     @     0x556abbe1b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53563)[0m     @     0x556abbd90689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53563)[0m     @     0x556abbe1abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53563)[0m     @     0x556abbe1b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53563)[0m     @     0x556abbd90689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53609)[0m     @     0x7eed98cd2d91 at::TensorIterator::for_each()
[2m[36m(pid=53609)[0m     @     0x7eed995b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53609)[0m     @     0x7eed995d8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53609)[0m     @     0x7eed98a7aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53609)[0m     @     0x7eed98a78388 at::native::copy_impl()
[2m[36m(pid=53609)[0m     @     0x7eed98a7a5a4 at::native::copy_()
[2m[36m(pid=53646)[0m     @     0x7ef7f4b104f5 at::Tensor::copy_()
[2m[36m(pid=53646)[0m     @     0x7ef7fabbb79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53646)[0m     @     0x56212e350fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53646)[0m     @     0x56212e2abb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53646)[0m     @     0x56212e336baf _PyEval_EvalCodeWithName
[2m[36m(pid=53646)[0m     @     0x56212e337a20 method_vectorcall
[2m[36m(pid=53646)[0m     @     0x56212e2abbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53646)[0m     @     0x56212e336baf _PyEval_EvalCodeWithName
[2m[36m(pid=53646)[0m     @     0x56212e337643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53646)[0m     @     0x56212e2ac689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53646)[0m     @     0x56212e336baf _PyEval_EvalCodeWithName
[2m[36m(pid=53646)[0m     @     0x56212e337643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53646)[0m     @     0x56212e2ac689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53646)[0m     @     0x56212e336baf _PyEval_EvalCodeWithName
[2m[36m(pid=53646)[0m     @     0x56212e337643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53646)[0m     @     0x56212e2ac689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53646)[0m     @     0x56212e336baf _PyEval_EvalCodeWithName
[2m[36m(pid=53646)[0m     @     0x56212e337643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53646)[0m     @     0x56212e2ac689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53545)[0m     @     0x7f5d06ac85a4 at::native::copy_()
[2m[36m(pid=53545)[0m     @     0x7f5d071b34f5 at::Tensor::copy_()
[2m[36m(pid=53545)[0m     @     0x7f5d096868de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53545)[0m     @     0x7f5d071b34f5 at::Tensor::copy_()
[2m[36m(pid=53545)[0m     @     0x7f5d0d25e79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53545)[0m     @     0x55c96f70efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53545)[0m     @     0x55c96f669b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53545)[0m     @     0x55c96f6f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=53545)[0m     @     0x55c96f6f5a20 method_vectorcall
[2m[36m(pid=53545)[0m     @     0x55c96f669bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53545)[0m     @     0x55c96f6f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=53545)[0m     @     0x55c96f6f5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53545)[0m     @     0x55c96f66a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53545)[0m     @     0x55c96f6f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=53545)[0m     @     0x55c96f6f5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53545)[0m     @     0x55c96f66a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53545)[0m     @     0x55c96f6f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=53545)[0m     @     0x55c96f6f5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53616)[0m     @     0x7f6f94f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=53616)[0m     @     0x7f6f94f27d91 at::TensorIterator::for_each()
[2m[36m(pid=53616)[0m     @     0x7f6f9580ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53616)[0m     @     0x7f6f9582dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53616)[0m     @     0x7f6f94ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53616)[0m     @     0x7f6f94ccd388 at::native::copy_impl()
[2m[36m(pid=53568)[0m     @     0x7ee3b45a5d91 at::TensorIterator::for_each()
[2m[36m(pid=53568)[0m     @     0x7ee3b4e88b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53568)[0m     @     0x7ee3b4eabc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53568)[0m     @     0x7ee3b434da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53568)[0m     @     0x7ee3b434b388 at::native::copy_impl()
[2m[36m(pid=53568)[0m     @     0x7ee3b434d5a4 at::native::copy_()
[2m[36m(pid=53533)[0m     @     0x7f20e808bd91 at::TensorIterator::for_each()
[2m[36m(pid=53533)[0m     @     0x7f20e896eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53533)[0m     @     0x7f20e8991c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53533)[0m     @     0x7f20e7e33a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53533)[0m     @     0x7f20e7e31388 at::native::copy_impl()
[2m[36m(pid=53555)[0m     @     0x7f916c597c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53555)[0m     @     0x7f916ba39a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53555)[0m     @     0x7f916ba37388 at::native::copy_impl()
[2m[36m(pid=53555)[0m     @     0x7f916ba395a4 at::native::copy_()
[2m[36m(pid=53555)[0m     @     0x7f916c1244f5 at::Tensor::copy_()
[2m[36m(pid=53559)[0m     @     0x7ed84dcd2d91 at::TensorIterator::for_each()
[2m[36m(pid=53559)[0m     @     0x7ed84e5b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53559)[0m     @     0x7ed84e5d8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53559)[0m     @     0x7ed84da7aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53559)[0m     @     0x7ed84da78388 at::native::copy_impl()
[2m[36m(pid=53559)[0m     @     0x7ed84da7a5a4 at::native::copy_()
[2m[36m(pid=53566)[0m     @     0x7f6ad214fad3 at::TensorIterator::for_each()
[2m[36m(pid=53566)[0m     @     0x7f6ad214fd91 at::TensorIterator::for_each()
[2m[36m(pid=53566)[0m     @     0x7f6ad2a32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53566)[0m     @     0x7f6ad2a55c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53566)[0m     @     0x7f6ad1ef7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53566)[0m     @     0x7f6ad1ef5388 at::native::copy_impl()
[2m[36m(pid=53547)[0m     @     0x7f6c1ad4dd91 at::TensorIterator::for_each()
[2m[36m(pid=53547)[0m     @     0x7f6c1b630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53547)[0m     @     0x7f6c1b653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53547)[0m     @     0x7f6c1aaf5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53547)[0m     @     0x7f6c1aaf3388 at::native::copy_impl()
[2m[36m(pid=53547)[0m     @     0x7f6c1aaf55a4 at::native::copy_()
[2m[36m(pid=53588)[0m     @     0x7f4c1a1ffd91 at::TensorIterator::for_each()
[2m[36m(pid=53588)[0m     @     0x7f4c1aae2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53588)[0m     @     0x7f4c1ab05c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53588)[0m     @     0x7f4c19fa7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53588)[0m     @     0x7f4c19fa5388 at::native::copy_impl()
[2m[36m(pid=53588)[0m     @     0x7f4c19fa75a4 at::native::copy_()
[2m[36m(pid=53561)[0m     @     0x7f747f00cd91 at::TensorIterator::for_each()
[2m[36m(pid=53561)[0m     @     0x7f747f8efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53561)[0m     @     0x7f747f912c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53561)[0m     @     0x7f747edb4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53561)[0m     @     0x7f747edb2388 at::native::copy_impl()
[2m[36m(pid=53530)[0m     @     0x7f8c08ef0390 (unknown)
[2m[36m(pid=53530)[0m     @     0x7f5d08d54f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53530)[0m     @     0x7f5d0847f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53625)[0m     @     0x7f4568e22d91 at::TensorIterator::for_each()
[2m[36m(pid=53625)[0m     @     0x7f4569705b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53625)[0m     @     0x7f4569728c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53625)[0m     @     0x7f4568bcaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53625)[0m     @     0x7f4568bc8388 at::native::copy_impl()
[2m[36m(pid=53625)[0m     @     0x7f4568bca5a4 at::native::copy_()
[2m[36m(pid=53602)[0m     @     0x7f0920563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53602)[0m     @     0x7f091fc8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53602)[0m     @     0x7f091fc918f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53602)[0m     @     0x7f091fc91ad3 at::TensorIterator::for_each()
[2m[36m(pid=53602)[0m     @     0x7f091fc91d91 at::TensorIterator::for_each()
[2m[36m(pid=53602)[0m     @     0x7f0920574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53602)[0m     @     0x7f0920597c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53595)[0m *** Aborted at 1604573215 (unix time) try "date -d @1604573215" if you are using GNU date ***
[2m[36m(pid=53595)[0m PC: @                0x0 (unknown)
[2m[36m(pid=53595)[0m *** SIGSEGV (@0x0) received by PID 53595 (TID 0x7f4525b2e700) from PID 0; stack trace: ***
[2m[36m(pid=53595)[0m     @     0x7f4525707390 (unknown)
[2m[36m(pid=53595)[0m     @     0x7f16256b4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53595)[0m     @     0x7f1624ddf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53595)[0m     @     0x7f1624de28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53532)[0m     @     0x7f17d7a9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53532)[0m     @     0x7f17d55cb4f5 at::Tensor::copy_()
[2m[36m(pid=53532)[0m     @     0x7f17db67679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53532)[0m     @     0x559df3b36fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53532)[0m     @     0x559df3a91b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53532)[0m     @     0x559df3b1cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53532)[0m     @     0x559df3b1da20 method_vectorcall
[2m[36m(pid=53532)[0m     @     0x559df3a91bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53532)[0m     @     0x559df3b1cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53532)[0m     @     0x559df3b1d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53532)[0m     @     0x559df3a92689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53532)[0m     @     0x559df3b1cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53532)[0m     @     0x559df3b1d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53532)[0m     @     0x559df3a92689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53532)[0m     @     0x559df3b1cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53532)[0m     @     0x559df3b1d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53532)[0m     @     0x559df3a92689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53532)[0m     @     0x559df3b1cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53532)[0m     @     0x559df3b1d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53532)[0m     @     0x559df3a92689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53534)[0m     @     0x7fc58437aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53534)[0m     @     0x7fc584378388 at::native::copy_impl()
[2m[36m(pid=53534)[0m     @     0x7fc58437a5a4 at::native::copy_()
[2m[36m(pid=53618)[0m     @     0x55931c841643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53618)[0m     @     0x55931c7b6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53605)[0m     @     0x556d36487baf _PyEval_EvalCodeWithName
[2m[36m(pid=53605)[0m     @     0x556d36488643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53605)[0m     @     0x556d363fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53549)[0m     @     0x7f914fc8e4f5 at::Tensor::copy_()
[2m[36m(pid=53549)[0m     @     0x7f9155d3979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53549)[0m     @     0x562b21c4ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53549)[0m     @     0x562b21baab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53549)[0m     @     0x562b21c35baf _PyEval_EvalCodeWithName
[2m[36m(pid=53549)[0m     @     0x562b21c36a20 method_vectorcall
[2m[36m(pid=53549)[0m     @     0x562b21baabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53549)[0m     @     0x562b21c35baf _PyEval_EvalCodeWithName
[2m[36m(pid=53549)[0m     @     0x562b21c36643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53549)[0m     @     0x562b21bab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53549)[0m     @     0x562b21c35baf _PyEval_EvalCodeWithName
[2m[36m(pid=53549)[0m     @     0x562b21c36643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53549)[0m     @     0x562b21bab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53549)[0m     @     0x562b21c35baf _PyEval_EvalCodeWithName
[2m[36m(pid=53549)[0m     @     0x562b21c36643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53549)[0m     @     0x562b21bab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53549)[0m     @     0x562b21c35baf _PyEval_EvalCodeWithName
[2m[36m(pid=53549)[0m     @     0x562b21c36643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53549)[0m     @     0x562b21bab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53617)[0m     @     0x7fababa4a4f5 at::Tensor::copy_()
[2m[36m(pid=53617)[0m     @     0x7fabb1af579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53617)[0m     @     0x55f70dc9bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53617)[0m     @     0x55f70dbf6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53617)[0m     @     0x55f70dc81baf _PyEval_EvalCodeWithName
[2m[36m(pid=53617)[0m     @     0x55f70dc82a20 method_vectorcall
[2m[36m(pid=53617)[0m     @     0x55f70dbf6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53617)[0m     @     0x55f70dc81baf _PyEval_EvalCodeWithName
[2m[36m(pid=53617)[0m     @     0x55f70dc82643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53617)[0m     @     0x55f70dbf7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53617)[0m     @     0x55f70dc81baf _PyEval_EvalCodeWithName
[2m[36m(pid=53617)[0m     @     0x55f70dc82643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53617)[0m     @     0x55f70dbf7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53617)[0m     @     0x55f70dc81baf _PyEval_EvalCodeWithName
[2m[36m(pid=53617)[0m     @     0x55f70dc82643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53617)[0m     @     0x55f70dbf7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53617)[0m     @     0x55f70dc81baf _PyEval_EvalCodeWithName
[2m[36m(pid=53617)[0m     @     0x55f70dc82643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53617)[0m     @     0x55f70dbf7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53645)[0m     @     0x7faf1525fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53645)[0m     @     0x7faf1525d388 at::native::copy_impl()
[2m[36m(pid=53645)[0m     @     0x7faf1525f5a4 at::native::copy_()
[2m[36m(pid=53640)[0m     @     0x7f9eda54da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53640)[0m     @     0x7f9eda54b388 at::native::copy_impl()
[2m[36m(pid=53640)[0m     @     0x7f9eda54d5a4 at::native::copy_()
[2m[36m(pid=53544)[0m     @     0x7fca5c8f6390 (unknown)
[2m[36m(pid=53544)[0m     @     0x7f9b5c774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53641)[0m     @     0x7f3c1700cad3 at::TensorIterator::for_each()
[2m[36m(pid=53641)[0m     @     0x7f3c1700cd91 at::TensorIterator::for_each()
[2m[36m(pid=53551)[0m     @     0x7f9c6f7c2c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53551)[0m     @     0x7f9c6ec64a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53551)[0m     @     0x7f9c6ec62388 at::native::copy_impl()
[2m[36m(pid=53560)[0m     @     0x7f7245ee9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53560)[0m     @     0x7f7245ee7388 at::native::copy_impl()
[2m[36m(pid=53560)[0m     @     0x7f7245ee95a4 at::native::copy_()
[2m[36m(pid=53626)[0m     @     0x7f1f2da93ad3 at::TensorIterator::for_each()
[2m[36m(pid=53626)[0m     @     0x7f1f2da93d91 at::TensorIterator::for_each()
[2m[36m(pid=53626)[0m     @     0x7f1f2e376b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53626)[0m     @     0x7f1f2e399c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53614)[0m     @     0x7f7028574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53614)[0m     @     0x7f7028597c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53614)[0m     @     0x7f7027a39a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53614)[0m     @     0x7f7027a37388 at::native::copy_impl()
[2m[36m(pid=53614)[0m     @     0x7f7027a395a4 at::native::copy_()
[2m[36m(pid=53596)[0m     @     0x7fa11e312c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53596)[0m     @     0x7fa11d7b4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53596)[0m     @     0x7fa11d7b2388 at::native::copy_impl()
[2m[36m(pid=53596)[0m     @     0x7fa11d7b45a4 at::native::copy_()
[2m[36m(pid=53528)[0m     @     0x7f3c79821a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53528)[0m     @     0x7f3c7981f388 at::native::copy_impl()
[2m[36m(pid=53528)[0m     @     0x7f3c798215a4 at::native::copy_()
[2m[36m(pid=53553)[0m     @     0x7f6ef67fca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53553)[0m     @     0x7f6ef67fa388 at::native::copy_impl()
[2m[36m(pid=53553)[0m     @     0x7f6ef67fc5a4 at::native::copy_()
[2m[36m(pid=53553)[0m     @     0x7f6ef6ee74f5 at::Tensor::copy_()
[2m[36m(pid=53553)[0m     @     0x7f6ef93ba8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53630)[0m     @     0x563d767e5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53630)[0m     @     0x563d7675a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53538)[0m     @     0x7f40347464f5 at::Tensor::copy_()
[2m[36m(pid=53538)[0m     @     0x7f403a7f179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53538)[0m     @     0x5571aa525fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53538)[0m     @     0x5571aa480b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53538)[0m     @     0x5571aa50bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53538)[0m     @     0x5571aa50ca20 method_vectorcall
[2m[36m(pid=53538)[0m     @     0x5571aa480bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53538)[0m     @     0x5571aa50bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53538)[0m     @     0x5571aa50c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53538)[0m     @     0x5571aa481689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53538)[0m     @     0x5571aa50bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53538)[0m     @     0x5571aa50c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53538)[0m     @     0x5571aa481689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53538)[0m     @     0x5571aa50bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53538)[0m     @     0x5571aa50c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53538)[0m     @     0x5571aa481689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53538)[0m     @     0x5571aa50bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53538)[0m     @     0x5571aa50c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53538)[0m     @     0x5571aa481689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53615)[0m     @     0x7fa3776b64f5 at::Tensor::copy_()
[2m[36m(pid=53615)[0m     @     0x7fa37d76179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53615)[0m     @     0x559a3edddfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53615)[0m     @     0x559a3ed38b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53615)[0m     @     0x559a3edc3baf _PyEval_EvalCodeWithName
[2m[36m(pid=53615)[0m     @     0x559a3edc4a20 method_vectorcall
[2m[36m(pid=53615)[0m     @     0x559a3ed38bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53615)[0m     @     0x559a3edc3baf _PyEval_EvalCodeWithName
[2m[36m(pid=53615)[0m     @     0x559a3edc4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53615)[0m     @     0x559a3ed39689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53615)[0m     @     0x559a3edc3baf _PyEval_EvalCodeWithName
[2m[36m(pid=53615)[0m     @     0x559a3edc4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53615)[0m     @     0x559a3ed39689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53615)[0m     @     0x559a3edc3baf _PyEval_EvalCodeWithName
[2m[36m(pid=53615)[0m     @     0x559a3edc4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53615)[0m     @     0x559a3ed39689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53615)[0m     @     0x559a3edc3baf _PyEval_EvalCodeWithName
[2m[36m(pid=53615)[0m     @     0x559a3edc4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53615)[0m     @     0x559a3ed39689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53543)[0m     @     0x7f6db583ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53543)[0m     @     0x7f6db5839388 at::native::copy_impl()
[2m[36m(pid=53543)[0m     @     0x7f6db583b5a4 at::native::copy_()
[2m[36m(pid=53543)[0m     @     0x7f6db5f264f5 at::Tensor::copy_()
[2m[36m(pid=53543)[0m     @     0x7f6db83f98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53541)[0m     @     0x7f2fc1ef7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53541)[0m     @     0x7f2fc1ef5388 at::native::copy_impl()
[2m[36m(pid=53541)[0m     @     0x7f2fc1ef75a4 at::native::copy_()
[2m[36m(pid=53541)[0m     @     0x7f2fc25e24f5 at::Tensor::copy_()
[2m[36m(pid=53541)[0m     @     0x7f2fc4ab58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53546)[0m     @     0x7fb6b3c4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53546)[0m     @     0x7fb6b3c48388 at::native::copy_impl()
[2m[36m(pid=53546)[0m     @     0x7fb6b3c4a5a4 at::native::copy_()
[2m[36m(pid=53610)[0m     @     0x7fc8a39f0390 (unknown)
[2m[36m(pid=53558)[0m     @     0x7f519bcfba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53558)[0m     @     0x7f519bcf9388 at::native::copy_impl()
[2m[36m(pid=53558)[0m     @     0x7f519bcfb5a4 at::native::copy_()
[2m[36m(pid=53558)[0m     @     0x7f519c3e64f5 at::Tensor::copy_()
[2m[36m(pid=53608)[0m     @     0x7fa37b45aad3 at::TensorIterator::for_each()
[2m[36m(pid=53608)[0m     @     0x7fa37b45ad91 at::TensorIterator::for_each()
[2m[36m(pid=53608)[0m     @     0x7fa37bd3db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53608)[0m     @     0x7fa37bd60c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53600)[0m     @     0x7fc88f2e1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53600)[0m     @     0x7fc88f2df388 at::native::copy_impl()
[2m[36m(pid=53600)[0m     @     0x7fc88f2e15a4 at::native::copy_()
[2m[36m(pid=53535)[0m     @     0x7f650f0cda93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53535)[0m     @     0x7f650f0cb388 at::native::copy_impl()
[2m[36m(pid=53535)[0m     @     0x7f650f0cd5a4 at::native::copy_()
[2m[36m(pid=53535)[0m     @     0x7f650f7b84f5 at::Tensor::copy_()
[2m[36m(pid=53593)[0m     @     0x7fd396488390 (unknown)
[2m[36m(pid=53593)[0m     @     0x7fa49634bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53593)[0m     @     0x7fa495a767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53644)[0m     @     0x7f2a947a38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53644)[0m     @     0x7f2a947a3ad3 at::TensorIterator::for_each()
[2m[36m(pid=53597)[0m     @     0x7fbae73258f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53597)[0m     @     0x7fbae7325ad3 at::TensorIterator::for_each()
[2m[36m(pid=53601)[0m     @     0x7f45431515a4 at::native::copy_()
[2m[36m(pid=53601)[0m     @     0x7f454383c4f5 at::Tensor::copy_()
[2m[36m(pid=53607)[0m     @     0x7f907aab25a4 at::native::copy_()
[2m[36m(pid=53609)[0m     @     0x7eed991654f5 at::Tensor::copy_()
[2m[36m(pid=53609)[0m     @     0x7eed9b6388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53545)[0m     @     0x55c96f66a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53545)[0m     @     0x55c96f6f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=53545)[0m     @     0x55c96f6f5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53545)[0m     @     0x55c96f66a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53616)[0m     @     0x7f6f94ccf5a4 at::native::copy_()
[2m[36m(pid=53616)[0m     @     0x7f6f953ba4f5 at::Tensor::copy_()
[2m[36m(pid=53568)[0m     @     0x7ee3b4a384f5 at::Tensor::copy_()
[2m[36m(pid=53568)[0m     @     0x7ee3b6f0b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53533)[0m     @     0x7f20e7e335a4 at::native::copy_()
[2m[36m(pid=53533)[0m     @     0x7f20e851e4f5 at::Tensor::copy_()
[2m[36m(pid=53533)[0m     @     0x7f20ea9f18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53555)[0m     @     0x7f916e5f78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53555)[0m     @     0x7f916c1244f5 at::Tensor::copy_()
[2m[36m(pid=53559)[0m     @     0x7ed84e1654f5 at::Tensor::copy_()
[2m[36m(pid=53559)[0m     @     0x7ed8506388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53566)[0m     @     0x7f6ad1ef75a4 at::native::copy_()
[2m[36m(pid=53566)[0m     @     0x7f6ad25e24f5 at::Tensor::copy_()
[2m[36m(pid=53566)[0m     @     0x7f6ad4ab58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53547)[0m     @     0x7f6c1b1e04f5 at::Tensor::copy_()
[2m[36m(pid=53547)[0m     @     0x7f6c1d6b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53547)[0m     @     0x7f6c1b1e04f5 at::Tensor::copy_()
[2m[36m(pid=53547)[0m     @     0x7f6c2128b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53547)[0m     @     0x55e92264afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53588)[0m     @     0x7f4c1a6924f5 at::Tensor::copy_()
[2m[36m(pid=53588)[0m     @     0x7f4c1cb658de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53588)[0m     @     0x7f4c1a6924f5 at::Tensor::copy_()
[2m[36m(pid=53588)[0m     @     0x7f4c2073d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53588)[0m     @     0x558e04656fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53588)[0m     @     0x558e045b1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53588)[0m     @     0x558e0463cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53588)[0m     @     0x558e0463da20 method_vectorcall
[2m[36m(pid=53588)[0m     @     0x558e045b1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53588)[0m     @     0x558e0463cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53561)[0m     @     0x7f747edb45a4 at::native::copy_()
[2m[36m(pid=53561)[0m     @     0x7f747f49f4f5 at::Tensor::copy_()
[2m[36m(pid=53561)[0m     @     0x7f74819728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53561)[0m     @     0x7f747f49f4f5 at::Tensor::copy_()
[2m[36m(pid=53530)[0m     @     0x7f5d084828f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53625)[0m     @     0x7f45692b54f5 at::Tensor::copy_()
[2m[36m(pid=53625)[0m     @     0x7f456b7888de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53625)[0m     @     0x7f45692b54f5 at::Tensor::copy_()
[2m[36m(pid=53625)[0m     @     0x7f456f36079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53625)[0m     @     0x562a9abc2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53625)[0m     @     0x562a9ab1db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53625)[0m     @     0x562a9aba8baf _PyEval_EvalCodeWithName
[2m[36m(pid=53625)[0m     @     0x562a9aba9a20 method_vectorcall
[2m[36m(pid=53625)[0m     @     0x562a9ab1dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53625)[0m     @     0x562a9aba8baf _PyEval_EvalCodeWithName
[2m[36m(pid=53625)[0m     @     0x562a9aba9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53625)[0m     @     0x562a9ab1e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53625)[0m     @     0x562a9aba8baf _PyEval_EvalCodeWithName
[2m[36m(pid=53625)[0m     @     0x562a9aba9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53625)[0m     @     0x562a9ab1e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53602)[0m     @     0x7f091fa39a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53602)[0m     @     0x7f091fa37388 at::native::copy_impl()
[2m[36m(pid=53602)[0m     @     0x7f091fa395a4 at::native::copy_()
[2m[36m(pid=53595)[0m     @     0x7f1624de2ad3 at::TensorIterator::for_each()
[2m[36m(pid=53595)[0m     @     0x7f1624de2d91 at::TensorIterator::for_each()
[2m[36m(pid=53595)[0m     @     0x7f16256c5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53595)[0m     @     0x7f16256e8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53534)[0m     @     0x7fc584a654f5 at::Tensor::copy_()
[2m[36m(pid=53534)[0m     @     0x7fc586f388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53534)[0m     @     0x7fc584a654f5 at::Tensor::copy_()
[2m[36m(pid=53534)[0m     @     0x7fc58ab1079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53534)[0m     @     0x56358a85bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53534)[0m     @     0x56358a7b6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53534)[0m     @     0x56358a841baf _PyEval_EvalCodeWithName
[2m[36m(pid=53534)[0m     @     0x56358a842a20 method_vectorcall
[2m[36m(pid=53534)[0m     @     0x56358a7b6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53534)[0m     @     0x56358a841baf _PyEval_EvalCodeWithName
[2m[36m(pid=53534)[0m     @     0x56358a842643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53534)[0m     @     0x56358a7b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53534)[0m     @     0x56358a841baf _PyEval_EvalCodeWithName
[2m[36m(pid=53534)[0m     @     0x56358a842643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53534)[0m     @     0x56358a7b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53534)[0m     @     0x56358a841baf _PyEval_EvalCodeWithName
[2m[36m(pid=53645)[0m     @     0x7faf1594a4f5 at::Tensor::copy_()
[2m[36m(pid=53645)[0m     @     0x7faf17e1d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53645)[0m     @     0x7faf1594a4f5 at::Tensor::copy_()
[2m[36m(pid=53645)[0m     @     0x7faf1b9f579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53645)[0m     @     0x5635ac755fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53645)[0m     @     0x5635ac6b0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53645)[0m     @     0x5635ac73bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53645)[0m     @     0x5635ac73ca20 method_vectorcall
[2m[36m(pid=53645)[0m     @     0x5635ac6b0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53645)[0m     @     0x5635ac73bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53645)[0m     @     0x5635ac73c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53645)[0m     @     0x5635ac6b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53645)[0m     @     0x5635ac73bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53645)[0m     @     0x5635ac73c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53645)[0m     @     0x5635ac6b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53645)[0m     @     0x5635ac73bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53645)[0m     @     0x5635ac73c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53645)[0m     @     0x5635ac6b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53645)[0m     @     0x5635ac73bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53645)[0m     @     0x5635ac73c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53645)[0m     @     0x5635ac6b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53640)[0m     @     0x7f9edac384f5 at::Tensor::copy_()
[2m[36m(pid=53640)[0m     @     0x7f9edd10b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53640)[0m     @     0x7f9edac384f5 at::Tensor::copy_()
[2m[36m(pid=53640)[0m     @     0x7f9ee0ce379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53640)[0m     @     0x55d49c4a8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53640)[0m     @     0x55d49c403b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53640)[0m     @     0x55d49c48ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53640)[0m     @     0x55d49c48fa20 method_vectorcall
[2m[36m(pid=53640)[0m     @     0x55d49c403bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53640)[0m     @     0x55d49c48ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53640)[0m     @     0x55d49c48f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53640)[0m     @     0x55d49c404689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53640)[0m     @     0x55d49c48ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53640)[0m     @     0x55d49c48f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53640)[0m     @     0x55d49c404689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53640)[0m     @     0x55d49c48ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53640)[0m     @     0x55d49c48f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53640)[0m     @     0x55d49c404689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53640)[0m     @     0x55d49c48ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53640)[0m     @     0x55d49c48f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53640)[0m     @     0x55d49c404689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53544)[0m     @     0x7f9b5be9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53641)[0m     @     0x7f3c178efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53641)[0m     @     0x7f3c17912c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53641)[0m     @     0x7f3c16db4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53641)[0m     @     0x7f3c16db2388 at::native::copy_impl()
[2m[36m(pid=53641)[0m     @     0x7f3c16db45a4 at::native::copy_()
[2m[36m(pid=53551)[0m     @     0x7f9c6ec645a4 at::native::copy_()
[2m[36m(pid=53551)[0m     @     0x7f9c6f34f4f5 at::Tensor::copy_()
[2m[36m(pid=53551)[0m     @     0x7f9c718228de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53560)[0m     @     0x7f72465d44f5 at::Tensor::copy_()
[2m[36m(pid=53560)[0m     @     0x7f7248aa78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53560)[0m     @     0x7f72465d44f5 at::Tensor::copy_()
[2m[36m(pid=53626)[0m     @     0x7f1f2d83ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53626)[0m     @     0x7f1f2d839388 at::native::copy_impl()
[2m[36m(pid=53614)[0m     @     0x7f70281244f5 at::Tensor::copy_()
[2m[36m(pid=53614)[0m     @     0x7f702a5f78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53596)[0m     @     0x7fa11de9f4f5 at::Tensor::copy_()
[2m[36m(pid=53596)[0m     @     0x7fa1203728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53528)[0m     @     0x7f3c79f0c4f5 at::Tensor::copy_()
[2m[36m(pid=53528)[0m     @     0x7f3c7c3df8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53528)[0m     @     0x7f3c79f0c4f5 at::Tensor::copy_()
[2m[36m(pid=53553)[0m     @     0x7f6ef6ee74f5 at::Tensor::copy_()
[2m[36m(pid=53553)[0m     @     0x7f6efcf9279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53553)[0m     @     0x56372ffcbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53553)[0m     @     0x56372ff26b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53553)[0m     @     0x56372ffb1baf _PyEval_EvalCodeWithName
[2m[36m(pid=53553)[0m     @     0x56372ffb2a20 method_vectorcall
[2m[36m(pid=53553)[0m     @     0x56372ff26bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53553)[0m     @     0x56372ffb1baf _PyEval_EvalCodeWithName
[2m[36m(pid=53553)[0m     @     0x56372ffb2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53553)[0m     @     0x56372ff27689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53553)[0m     @     0x56372ffb1baf _PyEval_EvalCodeWithName
[2m[36m(pid=53553)[0m     @     0x56372ffb2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53553)[0m     @     0x56372ff27689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53553)[0m     @     0x56372ffb1baf _PyEval_EvalCodeWithName
[2m[36m(pid=53553)[0m     @     0x56372ffb2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53553)[0m     @     0x56372ff27689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53553)[0m     @     0x56372ffb1baf _PyEval_EvalCodeWithName
[2m[36m(pid=53553)[0m     @     0x56372ffb2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53553)[0m     @     0x56372ff27689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53543)[0m     @     0x7f6db5f264f5 at::Tensor::copy_()
[2m[36m(pid=53543)[0m     @     0x7f6dbbfd179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53543)[0m     @     0x559d8242efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53543)[0m     @     0x559d82389b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53543)[0m     @     0x559d82414baf _PyEval_EvalCodeWithName
[2m[36m(pid=53543)[0m     @     0x559d82415a20 method_vectorcall
[2m[36m(pid=53543)[0m     @     0x559d82389bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53543)[0m     @     0x559d82414baf _PyEval_EvalCodeWithName
[2m[36m(pid=53543)[0m     @     0x559d82415643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53543)[0m     @     0x559d8238a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53543)[0m     @     0x559d82414baf _PyEval_EvalCodeWithName
[2m[36m(pid=53543)[0m     @     0x559d82415643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53543)[0m     @     0x559d8238a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53543)[0m     @     0x559d82414baf _PyEval_EvalCodeWithName
[2m[36m(pid=53543)[0m     @     0x559d82415643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53543)[0m     @     0x559d8238a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53543)[0m     @     0x559d82414baf _PyEval_EvalCodeWithName
[2m[36m(pid=53543)[0m     @     0x559d82415643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53543)[0m     @     0x559d8238a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53541)[0m     @     0x7f2fc25e24f5 at::Tensor::copy_()
[2m[36m(pid=53541)[0m     @     0x7f2fc868d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53541)[0m     @     0x55f51a708fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53541)[0m     @     0x55f51a663b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53541)[0m     @     0x55f51a6eebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53541)[0m     @     0x55f51a6efa20 method_vectorcall
[2m[36m(pid=53541)[0m     @     0x55f51a663bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53541)[0m     @     0x55f51a6eebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53541)[0m     @     0x55f51a6ef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53541)[0m     @     0x55f51a664689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53541)[0m     @     0x55f51a6eebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53541)[0m     @     0x55f51a6ef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53541)[0m     @     0x55f51a664689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53541)[0m     @     0x55f51a6eebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53541)[0m     @     0x55f51a6ef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53541)[0m     @     0x55f51a664689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53541)[0m     @     0x55f51a6eebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53541)[0m     @     0x55f51a6ef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53541)[0m     @     0x55f51a664689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53546)[0m     @     0x7fb6b43354f5 at::Tensor::copy_()
[2m[36m(pid=53546)[0m     @     0x7fb6b68088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53546)[0m     @     0x7fb6b43354f5 at::Tensor::copy_()
[2m[36m(pid=53546)[0m     @     0x7fb6ba3e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53546)[0m     @     0x55da5b762fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53546)[0m     @     0x55da5b6bdb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53546)[0m     @     0x55da5b748baf _PyEval_EvalCodeWithName
[2m[36m(pid=53546)[0m     @     0x55da5b749a20 method_vectorcall
[2m[36m(pid=53546)[0m     @     0x55da5b6bdbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53546)[0m     @     0x55da5b748baf _PyEval_EvalCodeWithName
[2m[36m(pid=53546)[0m     @     0x55da5b749643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53546)[0m     @     0x55da5b6be689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53546)[0m     @     0x55da5b748baf _PyEval_EvalCodeWithName
[2m[36m(pid=53546)[0m     @     0x55da5b749643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53546)[0m     @     0x55da5b6be689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53546)[0m     @     0x55da5b748baf _PyEval_EvalCodeWithName
[2m[36m(pid=53546)[0m     @     0x55da5b749643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53546)[0m     @     0x55da5b6be689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53546)[0m     @     0x55da5b748baf _PyEval_EvalCodeWithName
[2m[36m(pid=53546)[0m     @     0x55da5b749643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53546)[0m     @     0x55da5b6be689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53610)[0m     @     0x7f99a38def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=53610)[0m     @     0x7f99a30097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=53610)[0m     @     0x7f99a300c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53610)[0m     @     0x7f99a300cad3 at::TensorIterator::for_each()
[2m[36m(pid=53558)[0m     @     0x7f519e8b98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53558)[0m     @     0x7f519c3e64f5 at::Tensor::copy_()
[2m[36m(pid=53558)[0m     @     0x7f51a249179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53558)[0m     @     0x55fd75f35fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53558)[0m     @     0x55fd75e90b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53558)[0m     @     0x55fd75f1bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53558)[0m     @     0x55fd75f1ca20 method_vectorcall
[2m[36m(pid=53558)[0m     @     0x55fd75e90bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53558)[0m     @     0x55fd75f1bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53558)[0m     @     0x55fd75f1c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53558)[0m     @     0x55fd75e91689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53558)[0m     @     0x55fd75f1bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53558)[0m     @     0x55fd75f1c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53558)[0m     @     0x55fd75e91689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53558)[0m     @     0x55fd75f1bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53558)[0m     @     0x55fd75f1c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53558)[0m     @     0x55fd75e91689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53558)[0m     @     0x55fd75f1bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53558)[0m     @     0x55fd75f1c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53558)[0m     @     0x55fd75e91689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53608)[0m     @     0x7fa37b202a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53608)[0m     @     0x7fa37b200388 at::native::copy_impl()
[2m[36m(pid=53608)[0m     @     0x7fa37b2025a4 at::native::copy_()
[2m[36m(pid=53608)[0m     @     0x7fa37b8ed4f5 at::Tensor::copy_()
[2m[36m(pid=53600)[0m     @     0x7fc88f9cc4f5 at::Tensor::copy_()
[2m[36m(pid=53600)[0m     @     0x7fc891e9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53535)[0m     @     0x7f6511c8b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53535)[0m     @     0x7f650f7b84f5 at::Tensor::copy_()
[2m[36m(pid=53535)[0m     @     0x7f651586379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53535)[0m     @     0x5617a2addfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53535)[0m     @     0x5617a2a38b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53535)[0m     @     0x5617a2ac3baf _PyEval_EvalCodeWithName
[2m[36m(pid=53535)[0m     @     0x5617a2ac4a20 method_vectorcall
[2m[36m(pid=53535)[0m     @     0x5617a2a38bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53535)[0m     @     0x5617a2ac3baf _PyEval_EvalCodeWithName
[2m[36m(pid=53535)[0m     @     0x5617a2ac4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53535)[0m     @     0x5617a2a39689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53535)[0m     @     0x5617a2ac3baf _PyEval_EvalCodeWithName
[2m[36m(pid=53535)[0m     @     0x5617a2ac4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53535)[0m     @     0x5617a2a39689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53535)[0m     @     0x5617a2ac3baf _PyEval_EvalCodeWithName
[2m[36m(pid=53535)[0m     @     0x5617a2ac4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53535)[0m     @     0x5617a2a39689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53535)[0m     @     0x5617a2ac3baf _PyEval_EvalCodeWithName
[2m[36m(pid=53535)[0m     @     0x5617a2ac4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53535)[0m     @     0x5617a2a39689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53593)[0m     @     0x7fa495a798f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53644)[0m     @     0x7f2a947a3d91 at::TensorIterator::for_each()
[2m[36m(pid=53644)[0m     @     0x7f2a95086b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53644)[0m     @     0x7f2a950a9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53644)[0m     @     0x7f2a9454ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53644)[0m     @     0x7f2a94549388 at::native::copy_impl()
[2m[36m(pid=53597)[0m     @     0x7fbae7325d91 at::TensorIterator::for_each()
[2m[36m(pid=53597)[0m     @     0x7fbae7c08b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53597)[0m     @     0x7fbae7c2bc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53597)[0m     @     0x7fbae70cda93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53597)[0m     @     0x7fbae70cb388 at::native::copy_impl()
[2m[36m(pid=53601)[0m     @     0x7f4545d0f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53601)[0m     @     0x7f454383c4f5 at::Tensor::copy_()
[2m[36m(pid=53601)[0m     @     0x7f45498e779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53601)[0m     @     0x56099a103fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53601)[0m     @     0x56099a05eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53601)[0m     @     0x56099a0e9baf _PyEval_EvalCodeWithName
[2m[36m(pid=53601)[0m     @     0x56099a0eaa20 method_vectorcall
[2m[36m(pid=53601)[0m     @     0x56099a05ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53601)[0m     @     0x56099a0e9baf _PyEval_EvalCodeWithName
[2m[36m(pid=53601)[0m     @     0x56099a0ea643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53601)[0m     @     0x56099a05f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53601)[0m     @     0x56099a0e9baf _PyEval_EvalCodeWithName
[2m[36m(pid=53601)[0m     @     0x56099a0ea643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53601)[0m     @     0x56099a05f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53601)[0m     @     0x56099a0e9baf _PyEval_EvalCodeWithName
[2m[36m(pid=53601)[0m     @     0x56099a0ea643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53601)[0m     @     0x56099a05f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53601)[0m     @     0x56099a0e9baf _PyEval_EvalCodeWithName
[2m[36m(pid=53601)[0m     @     0x56099a0ea643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53601)[0m     @     0x56099a05f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53607)[0m     @     0x7f907b19d4f5 at::Tensor::copy_()
[2m[36m(pid=53607)[0m     @     0x7f907d6708de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53607)[0m     @     0x7f907b19d4f5 at::Tensor::copy_()
[2m[36m(pid=53607)[0m     @     0x7f908124879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53607)[0m     @     0x55fb6f3b1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53607)[0m     @     0x55fb6f30cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53607)[0m     @     0x55fb6f397baf _PyEval_EvalCodeWithName
[2m[36m(pid=53607)[0m     @     0x55fb6f398a20 method_vectorcall
[2m[36m(pid=53607)[0m     @     0x55fb6f30cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53607)[0m     @     0x55fb6f397baf _PyEval_EvalCodeWithName
[2m[36m(pid=53607)[0m     @     0x55fb6f398643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53607)[0m     @     0x55fb6f30d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53607)[0m     @     0x55fb6f397baf _PyEval_EvalCodeWithName
[2m[36m(pid=53607)[0m     @     0x55fb6f398643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53607)[0m     @     0x55fb6f30d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53607)[0m     @     0x55fb6f397baf _PyEval_EvalCodeWithName
[2m[36m(pid=53607)[0m     @     0x55fb6f398643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53607)[0m     @     0x55fb6f30d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53607)[0m     @     0x55fb6f397baf _PyEval_EvalCodeWithName
[2m[36m(pid=53607)[0m     @     0x55fb6f398643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53607)[0m     @     0x55fb6f30d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53609)[0m     @     0x7eed991654f5 at::Tensor::copy_()
[2m[36m(pid=53609)[0m     @     0x7eed9f21079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53609)[0m     @     0x561728934fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53609)[0m     @     0x56172888fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53609)[0m     @     0x56172891abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53609)[0m     @     0x56172891ba20 method_vectorcall
[2m[36m(pid=53609)[0m     @     0x56172888fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53609)[0m     @     0x56172891abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53609)[0m     @     0x56172891b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53609)[0m     @     0x561728890689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53609)[0m     @     0x56172891abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53609)[0m     @     0x56172891b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53609)[0m     @     0x561728890689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53609)[0m     @     0x56172891abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53609)[0m     @     0x56172891b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53609)[0m     @     0x561728890689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53609)[0m     @     0x56172891abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53609)[0m     @     0x56172891b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53609)[0m     @     0x561728890689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53616)[0m     @     0x7f6f9788d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53616)[0m     @     0x7f6f953ba4f5 at::Tensor::copy_()
[2m[36m(pid=53616)[0m     @     0x7f6f9b46579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53616)[0m     @     0x55afe6deffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53616)[0m     @     0x55afe6d4ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53616)[0m     @     0x55afe6dd5baf _PyEval_EvalCodeWithName
[2m[36m(pid=53616)[0m     @     0x55afe6dd6a20 method_vectorcall
[2m[36m(pid=53616)[0m     @     0x55afe6d4abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53616)[0m     @     0x55afe6dd5baf _PyEval_EvalCodeWithName
[2m[36m(pid=53616)[0m     @     0x55afe6dd6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53616)[0m     @     0x55afe6d4b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53616)[0m     @     0x55afe6dd5baf _PyEval_EvalCodeWithName
[2m[36m(pid=53616)[0m     @     0x55afe6dd6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53616)[0m     @     0x55afe6d4b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53616)[0m     @     0x55afe6dd5baf _PyEval_EvalCodeWithName
[2m[36m(pid=53616)[0m     @     0x55afe6dd6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53616)[0m     @     0x55afe6d4b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53616)[0m     @     0x55afe6dd5baf _PyEval_EvalCodeWithName
[2m[36m(pid=53616)[0m     @     0x55afe6dd6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53616)[0m     @     0x55afe6d4b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53568)[0m     @     0x7ee3b4a384f5 at::Tensor::copy_()
[2m[36m(pid=53568)[0m     @     0x7ee3baae379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53568)[0m     @     0x561f0581cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53568)[0m     @     0x561f05777b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53568)[0m     @     0x561f05802baf _PyEval_EvalCodeWithName
[2m[36m(pid=53568)[0m     @     0x561f05803a20 method_vectorcall
[2m[36m(pid=53568)[0m     @     0x561f05777bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53568)[0m     @     0x561f05802baf _PyEval_EvalCodeWithName
[2m[36m(pid=53568)[0m     @     0x561f05803643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53568)[0m     @     0x561f05778689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53568)[0m     @     0x561f05802baf _PyEval_EvalCodeWithName
[2m[36m(pid=53568)[0m     @     0x561f05803643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53568)[0m     @     0x561f05778689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53568)[0m     @     0x561f05802baf _PyEval_EvalCodeWithName
[2m[36m(pid=53568)[0m     @     0x561f05803643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53568)[0m     @     0x561f05778689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53568)[0m     @     0x561f05802baf _PyEval_EvalCodeWithName
[2m[36m(pid=53568)[0m     @     0x561f05803643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53568)[0m     @     0x561f05778689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53533)[0m     @     0x7f20e851e4f5 at::Tensor::copy_()
[2m[36m(pid=53533)[0m     @     0x7f20ee5c979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53533)[0m     @     0x5564216acfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53533)[0m     @     0x556421607b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53533)[0m     @     0x556421692baf _PyEval_EvalCodeWithName
[2m[36m(pid=53533)[0m     @     0x556421693a20 method_vectorcall
[2m[36m(pid=53533)[0m     @     0x556421607bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53533)[0m     @     0x556421692baf _PyEval_EvalCodeWithName
[2m[36m(pid=53533)[0m     @     0x556421693643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53533)[0m     @     0x556421608689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53533)[0m     @     0x556421692baf _PyEval_EvalCodeWithName
[2m[36m(pid=53533)[0m     @     0x556421693643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53533)[0m     @     0x556421608689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53533)[0m     @     0x556421692baf _PyEval_EvalCodeWithName
[2m[36m(pid=53533)[0m     @     0x556421693643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53533)[0m     @     0x556421608689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53533)[0m     @     0x556421692baf _PyEval_EvalCodeWithName
[2m[36m(pid=53533)[0m     @     0x556421693643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53533)[0m     @     0x556421608689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53555)[0m     @     0x7f91721cf79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53555)[0m     @     0x561331a6bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53555)[0m     @     0x5613319c6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53555)[0m     @     0x561331a51baf _PyEval_EvalCodeWithName
[2m[36m(pid=53555)[0m     @     0x561331a52a20 method_vectorcall
[2m[36m(pid=53555)[0m     @     0x5613319c6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53555)[0m     @     0x561331a51baf _PyEval_EvalCodeWithName
[2m[36m(pid=53555)[0m     @     0x561331a52643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53555)[0m     @     0x5613319c7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53555)[0m     @     0x561331a51baf _PyEval_EvalCodeWithName
[2m[36m(pid=53555)[0m     @     0x561331a52643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53555)[0m     @     0x5613319c7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53555)[0m     @     0x561331a51baf _PyEval_EvalCodeWithName
[2m[36m(pid=53555)[0m     @     0x561331a52643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53555)[0m     @     0x5613319c7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53555)[0m     @     0x561331a51baf _PyEval_EvalCodeWithName
[2m[36m(pid=53555)[0m     @     0x561331a52643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53555)[0m     @     0x5613319c7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53559)[0m     @     0x7ed84e1654f5 at::Tensor::copy_()
[2m[36m(pid=53559)[0m     @     0x7ed85421079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53559)[0m     @     0x560ddf3d5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53559)[0m     @     0x560ddf330b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53559)[0m     @     0x560ddf3bbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53559)[0m     @     0x560ddf3bca20 method_vectorcall
[2m[36m(pid=53559)[0m     @     0x560ddf330bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53559)[0m     @     0x560ddf3bbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53559)[0m     @     0x560ddf3bc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53559)[0m     @     0x560ddf331689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53559)[0m     @     0x560ddf3bbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53559)[0m     @     0x560ddf3bc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53559)[0m     @     0x560ddf331689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53559)[0m     @     0x560ddf3bbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53559)[0m     @     0x560ddf3bc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53559)[0m     @     0x560ddf331689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53559)[0m     @     0x560ddf3bbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53559)[0m     @     0x560ddf3bc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53559)[0m     @     0x560ddf331689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53566)[0m     @     0x7f6ad25e24f5 at::Tensor::copy_()
[2m[36m(pid=53566)[0m     @     0x7f6ad868d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53566)[0m     @     0x559dd5f85fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53566)[0m     @     0x559dd5ee0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53566)[0m     @     0x559dd5f6bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53566)[0m     @     0x559dd5f6ca20 method_vectorcall
[2m[36m(pid=53566)[0m     @     0x559dd5ee0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53566)[0m     @     0x559dd5f6bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53566)[0m     @     0x559dd5f6c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53566)[0m     @     0x559dd5ee1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53566)[0m     @     0x559dd5f6bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53566)[0m     @     0x559dd5f6c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53566)[0m     @     0x559dd5ee1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53566)[0m     @     0x559dd5f6bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53566)[0m     @     0x559dd5f6c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53566)[0m     @     0x559dd5ee1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53566)[0m     @     0x559dd5f6bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53566)[0m     @     0x559dd5f6c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53566)[0m     @     0x559dd5ee1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53547)[0m     @     0x55e9225a5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53547)[0m     @     0x55e922630baf _PyEval_EvalCodeWithName
[2m[36m(pid=53547)[0m     @     0x55e922631a20 method_vectorcall
[2m[36m(pid=53547)[0m     @     0x55e9225a5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53547)[0m     @     0x55e922630baf _PyEval_EvalCodeWithName
[2m[36m(pid=53547)[0m     @     0x55e922631643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53547)[0m     @     0x55e9225a6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53547)[0m     @     0x55e922630baf _PyEval_EvalCodeWithName
[2m[36m(pid=53547)[0m     @     0x55e922631643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53547)[0m     @     0x55e9225a6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53547)[0m     @     0x55e922630baf _PyEval_EvalCodeWithName
[2m[36m(pid=53547)[0m     @     0x55e922631643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53547)[0m     @     0x55e9225a6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53547)[0m     @     0x55e922630baf _PyEval_EvalCodeWithName
[2m[36m(pid=53547)[0m     @     0x55e922631643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53547)[0m     @     0x55e9225a6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53588)[0m     @     0x558e0463d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53588)[0m     @     0x558e045b2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53588)[0m     @     0x558e0463cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53588)[0m     @     0x558e0463d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53588)[0m     @     0x558e045b2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53588)[0m     @     0x558e0463cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53588)[0m     @     0x558e0463d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53588)[0m     @     0x558e045b2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53588)[0m     @     0x558e0463cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53588)[0m     @     0x558e0463d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53588)[0m     @     0x558e045b2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53561)[0m     @     0x7f748554a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53561)[0m     @     0x55a84fb00fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53561)[0m     @     0x55a84fa5bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53561)[0m     @     0x55a84fae6baf _PyEval_EvalCodeWithName
[2m[36m(pid=53561)[0m     @     0x55a84fae7a20 method_vectorcall
[2m[36m(pid=53561)[0m     @     0x55a84fa5bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53561)[0m     @     0x55a84fae6baf _PyEval_EvalCodeWithName
[2m[36m(pid=53561)[0m     @     0x55a84fae7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53561)[0m     @     0x55a84fa5c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53561)[0m     @     0x55a84fae6baf _PyEval_EvalCodeWithName
[2m[36m(pid=53561)[0m     @     0x55a84fae7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53561)[0m     @     0x55a84fa5c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53561)[0m     @     0x55a84fae6baf _PyEval_EvalCodeWithName
[2m[36m(pid=53561)[0m     @     0x55a84fae7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53561)[0m     @     0x55a84fa5c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53561)[0m     @     0x55a84fae6baf _PyEval_EvalCodeWithName
[2m[36m(pid=53561)[0m     @     0x55a84fae7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53561)[0m     @     0x55a84fa5c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53530)[0m     @     0x7f5d08482ad3 at::TensorIterator::for_each()
[2m[36m(pid=53625)[0m     @     0x562a9aba8baf _PyEval_EvalCodeWithName
[2m[36m(pid=53625)[0m     @     0x562a9aba9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53625)[0m     @     0x562a9ab1e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53625)[0m     @     0x562a9aba8baf _PyEval_EvalCodeWithName
[2m[36m(pid=53625)[0m     @     0x562a9aba9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53625)[0m     @     0x562a9ab1e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53602)[0m     @     0x7f09201244f5 at::Tensor::copy_()
[2m[36m(pid=53602)[0m     @     0x7f09225f78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53602)[0m     @     0x7f09201244f5 at::Tensor::copy_()
[2m[36m(pid=53595)[0m     @     0x7f1624b8aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53595)[0m     @     0x7f1624b88388 at::native::copy_impl()
[2m[36m(pid=53534)[0m     @     0x56358a842643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53534)[0m     @     0x56358a7b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53534)[0m     @     0x56358a841baf _PyEval_EvalCodeWithName
[2m[36m(pid=53534)[0m     @     0x56358a842643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53534)[0m     @     0x56358a7b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53544)[0m     @     0x7f9b5bea28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53641)[0m     @     0x7f3c1749f4f5 at::Tensor::copy_()
[2m[36m(pid=53641)[0m     @     0x7f3c199728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53641)[0m     @     0x7f3c1749f4f5 at::Tensor::copy_()
[2m[36m(pid=53641)[0m     @     0x7f3c1d54a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53551)[0m     @     0x7f9c6f34f4f5 at::Tensor::copy_()
[2m[36m(pid=53551)[0m     @     0x7f9c753fa79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53551)[0m     @     0x56299c844fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53551)[0m     @     0x56299c79fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53551)[0m     @     0x56299c82abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53551)[0m     @     0x56299c82ba20 method_vectorcall
[2m[36m(pid=53551)[0m     @     0x56299c79fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53551)[0m     @     0x56299c82abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53551)[0m     @     0x56299c82b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53551)[0m     @     0x56299c7a0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53551)[0m     @     0x56299c82abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53551)[0m     @     0x56299c82b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53551)[0m     @     0x56299c7a0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53551)[0m     @     0x56299c82abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53551)[0m     @     0x56299c82b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53551)[0m     @     0x56299c7a0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53551)[0m     @     0x56299c82abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53551)[0m     @     0x56299c82b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53551)[0m     @     0x56299c7a0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53560)[0m     @     0x7f724c47779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53560)[0m     @     0x55b9d49b8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53560)[0m     @     0x55b9d4913b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53560)[0m     @     0x55b9d499ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53560)[0m     @     0x55b9d499fa20 method_vectorcall
[2m[36m(pid=53560)[0m     @     0x55b9d4913bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53560)[0m     @     0x55b9d499ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53560)[0m     @     0x55b9d499f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53560)[0m     @     0x55b9d4914689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53560)[0m     @     0x55b9d499ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53560)[0m     @     0x55b9d499f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53560)[0m     @     0x55b9d4914689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53560)[0m     @     0x55b9d499ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53560)[0m     @     0x55b9d499f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53560)[0m     @     0x55b9d4914689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53560)[0m     @     0x55b9d499ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53560)[0m     @     0x55b9d499f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53560)[0m     @     0x55b9d4914689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53626)[0m     @     0x7f1f2d83b5a4 at::native::copy_()
[2m[36m(pid=53614)[0m     @     0x7f70281244f5 at::Tensor::copy_()
[2m[36m(pid=53614)[0m     @     0x7f702e1cf79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53614)[0m     @     0x55c46d81ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53614)[0m     @     0x55c46d77ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53614)[0m     @     0x55c46d805baf _PyEval_EvalCodeWithName
[2m[36m(pid=53614)[0m     @     0x55c46d806a20 method_vectorcall
[2m[36m(pid=53614)[0m     @     0x55c46d77abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53614)[0m     @     0x55c46d805baf _PyEval_EvalCodeWithName
[2m[36m(pid=53614)[0m     @     0x55c46d806643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53614)[0m     @     0x55c46d77b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53614)[0m     @     0x55c46d805baf _PyEval_EvalCodeWithName
[2m[36m(pid=53614)[0m     @     0x55c46d806643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53614)[0m     @     0x55c46d77b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53614)[0m     @     0x55c46d805baf _PyEval_EvalCodeWithName
[2m[36m(pid=53614)[0m     @     0x55c46d806643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53614)[0m     @     0x55c46d77b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53614)[0m     @     0x55c46d805baf _PyEval_EvalCodeWithName
[2m[36m(pid=53614)[0m     @     0x55c46d806643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53614)[0m     @     0x55c46d77b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53596)[0m     @     0x7fa11de9f4f5 at::Tensor::copy_()
[2m[36m(pid=53596)[0m     @     0x7fa123f4a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53596)[0m     @     0x55819b6fbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53596)[0m     @     0x55819b656b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53596)[0m     @     0x55819b6e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=53596)[0m     @     0x55819b6e2a20 method_vectorcall
[2m[36m(pid=53596)[0m     @     0x55819b656bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53596)[0m     @     0x55819b6e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=53596)[0m     @     0x55819b6e2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53596)[0m     @     0x55819b657689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53596)[0m     @     0x55819b6e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=53596)[0m     @     0x55819b6e2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53596)[0m     @     0x55819b657689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53596)[0m     @     0x55819b6e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=53596)[0m     @     0x55819b6e2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53596)[0m     @     0x55819b657689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53596)[0m     @     0x55819b6e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=53596)[0m     @     0x55819b6e2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53596)[0m     @     0x55819b657689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53528)[0m     @     0x7f3c7ffb779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53528)[0m     @     0x555bba459fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53528)[0m     @     0x555bba3b4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53528)[0m     @     0x555bba43fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53528)[0m     @     0x555bba440a20 method_vectorcall
[2m[36m(pid=53528)[0m     @     0x555bba3b4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53528)[0m     @     0x555bba43fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53528)[0m     @     0x555bba440643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53528)[0m     @     0x555bba3b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53528)[0m     @     0x555bba43fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53528)[0m     @     0x555bba440643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53528)[0m     @     0x555bba3b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53528)[0m     @     0x555bba43fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53528)[0m     @     0x555bba440643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53528)[0m     @     0x555bba3b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53528)[0m     @     0x555bba43fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53528)[0m     @     0x555bba440643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53528)[0m     @     0x555bba3b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53610)[0m     @     0x7f99a300cd91 at::TensorIterator::for_each()
[2m[36m(pid=53610)[0m     @     0x7f99a38efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53610)[0m     @     0x7f99a3912c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53608)[0m     @     0x7fa37ddc08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53608)[0m     @     0x7fa37b8ed4f5 at::Tensor::copy_()
[2m[36m(pid=53644)[0m     @     0x7f2a9454b5a4 at::native::copy_()
[2m[36m(pid=53644)[0m     @     0x7f2a94c364f5 at::Tensor::copy_()
[2m[36m(pid=53597)[0m     @     0x7fbae70cd5a4 at::native::copy_()
[2m[36m(pid=53530)[0m     @     0x7f5d08482d91 at::TensorIterator::for_each()
[2m[36m(pid=53530)[0m     @     0x7f5d08d65b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53530)[0m     @     0x7f5d08d88c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53602)[0m     @     0x7f09261cf79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53602)[0m     @     0x5609c509afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53602)[0m     @     0x5609c4ff5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53602)[0m     @     0x5609c5080baf _PyEval_EvalCodeWithName
[2m[36m(pid=53602)[0m     @     0x5609c5081a20 method_vectorcall
[2m[36m(pid=53602)[0m     @     0x5609c4ff5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53602)[0m     @     0x5609c5080baf _PyEval_EvalCodeWithName
[2m[36m(pid=53602)[0m     @     0x5609c5081643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53602)[0m     @     0x5609c4ff6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53602)[0m     @     0x5609c5080baf _PyEval_EvalCodeWithName
[2m[36m(pid=53602)[0m     @     0x5609c5081643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53602)[0m     @     0x5609c4ff6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53602)[0m     @     0x5609c5080baf _PyEval_EvalCodeWithName
[2m[36m(pid=53602)[0m     @     0x5609c5081643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53602)[0m     @     0x5609c4ff6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53602)[0m     @     0x5609c5080baf _PyEval_EvalCodeWithName
[2m[36m(pid=53602)[0m     @     0x5609c5081643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53602)[0m     @     0x5609c4ff6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53595)[0m     @     0x7f1624b8a5a4 at::native::copy_()
[2m[36m(pid=53595)[0m     @     0x7f16252754f5 at::Tensor::copy_()
[2m[36m(pid=53641)[0m     @     0x559891a58fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53641)[0m     @     0x5598919b3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53641)[0m     @     0x559891a3ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53641)[0m     @     0x559891a3fa20 method_vectorcall
[2m[36m(pid=53641)[0m     @     0x5598919b3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53641)[0m     @     0x559891a3ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53641)[0m     @     0x559891a3f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53641)[0m     @     0x5598919b4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53641)[0m     @     0x559891a3ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53641)[0m     @     0x559891a3f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53641)[0m     @     0x5598919b4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53641)[0m     @     0x559891a3ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53641)[0m     @     0x559891a3f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53641)[0m     @     0x5598919b4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53641)[0m     @     0x559891a3ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=53641)[0m     @     0x559891a3f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53641)[0m     @     0x5598919b4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53626)[0m     @     0x7f1f2df264f5 at::Tensor::copy_()
[2m[36m(pid=53610)[0m     @     0x7f99a2db4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53610)[0m     @     0x7f99a2db2388 at::native::copy_impl()
[2m[36m(pid=53610)[0m     @     0x7f99a2db45a4 at::native::copy_()
[2m[36m(pid=53608)[0m     @     0x7fa38199879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53608)[0m     @     0x561c94046fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53608)[0m     @     0x561c93fa1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53608)[0m     @     0x561c9402cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53608)[0m     @     0x561c9402da20 method_vectorcall
[2m[36m(pid=53608)[0m     @     0x561c93fa1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53608)[0m     @     0x561c9402cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53608)[0m     @     0x561c9402d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53608)[0m     @     0x561c93fa2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53608)[0m     @     0x561c9402cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53608)[0m     @     0x561c9402d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53608)[0m     @     0x561c93fa2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53608)[0m     @     0x561c9402cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53608)[0m     @     0x561c9402d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53608)[0m     @     0x561c93fa2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53608)[0m     @     0x561c9402cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=53608)[0m     @     0x561c9402d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53608)[0m     @     0x561c93fa2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53600)[0m     @     0x7fc88f9cc4f5 at::Tensor::copy_()
[2m[36m(pid=53600)[0m     @     0x7fc895a7779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53600)[0m     @     0x55e0df0b1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53600)[0m     @     0x55e0df00cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53600)[0m     @     0x55e0df097baf _PyEval_EvalCodeWithName
[2m[36m(pid=53600)[0m     @     0x55e0df098a20 method_vectorcall
[2m[36m(pid=53600)[0m     @     0x55e0df00cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53600)[0m     @     0x55e0df097baf _PyEval_EvalCodeWithName
[2m[36m(pid=53600)[0m     @     0x55e0df098643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53600)[0m     @     0x55e0df00d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53600)[0m     @     0x55e0df097baf _PyEval_EvalCodeWithName
[2m[36m(pid=53600)[0m     @     0x55e0df098643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53600)[0m     @     0x55e0df00d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53600)[0m     @     0x55e0df097baf _PyEval_EvalCodeWithName
[2m[36m(pid=53600)[0m     @     0x55e0df098643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53593)[0m     @     0x7fa495a79ad3 at::TensorIterator::for_each()
[2m[36m(pid=53644)[0m     @     0x7f2a971098de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53644)[0m     @     0x7f2a94c364f5 at::Tensor::copy_()
[2m[36m(pid=53644)[0m     @     0x7f2a9ace179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53644)[0m     @     0x55a745e34fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53644)[0m     @     0x55a745d8fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53644)[0m     @     0x55a745e1abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53644)[0m     @     0x55a745e1ba20 method_vectorcall
[2m[36m(pid=53644)[0m     @     0x55a745d8fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53644)[0m     @     0x55a745e1abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53644)[0m     @     0x55a745e1b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53644)[0m     @     0x55a745d90689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53644)[0m     @     0x55a745e1abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53644)[0m     @     0x55a745e1b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53644)[0m     @     0x55a745d90689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53644)[0m     @     0x55a745e1abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53644)[0m     @     0x55a745e1b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53644)[0m     @     0x55a745d90689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53644)[0m     @     0x55a745e1abaf _PyEval_EvalCodeWithName
[2m[36m(pid=53644)[0m     @     0x55a745e1b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53644)[0m     @     0x55a745d90689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53597)[0m     @     0x7fbae77b84f5 at::Tensor::copy_()
[2m[36m(pid=53597)[0m     @     0x7fbae9c8b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53597)[0m     @     0x7fbae77b84f5 at::Tensor::copy_()
[2m[36m(pid=53597)[0m     @     0x7fbaed86379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53597)[0m     @     0x5563a161cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53597)[0m     @     0x5563a1577b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53597)[0m     @     0x5563a1602baf _PyEval_EvalCodeWithName
[2m[36m(pid=53597)[0m     @     0x5563a1603a20 method_vectorcall
[2m[36m(pid=53597)[0m     @     0x5563a1577bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53597)[0m     @     0x5563a1602baf _PyEval_EvalCodeWithName
[2m[36m(pid=53597)[0m     @     0x5563a1603643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53597)[0m     @     0x5563a1578689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53597)[0m     @     0x5563a1602baf _PyEval_EvalCodeWithName
[2m[36m(pid=53597)[0m     @     0x5563a1603643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53597)[0m     @     0x5563a1578689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53597)[0m     @     0x5563a1602baf _PyEval_EvalCodeWithName
[2m[36m(pid=53597)[0m     @     0x5563a1603643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53597)[0m     @     0x5563a1578689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53530)[0m     @     0x7f5d0822aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53530)[0m     @     0x7f5d08228388 at::native::copy_impl()
[2m[36m(pid=53595)[0m     @     0x7f16277488de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53544)[0m     @     0x7f9b5bea2ad3 at::TensorIterator::for_each()
[2m[36m(pid=53544)[0m     @     0x7f9b5bea2d91 at::TensorIterator::for_each()
[2m[36m(pid=53604)[0m     @     0x7f91372238f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=53626)[0m     @     0x7f1f303f98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53626)[0m     @     0x7f1f2df264f5 at::Tensor::copy_()
[2m[36m(pid=53626)[0m     @     0x7f1f33fd179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53626)[0m     @     0x5628a2b3efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53626)[0m     @     0x5628a2a99b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53626)[0m     @     0x5628a2b24baf _PyEval_EvalCodeWithName
[2m[36m(pid=53626)[0m     @     0x5628a2b25a20 method_vectorcall
[2m[36m(pid=53626)[0m     @     0x5628a2a99bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53626)[0m     @     0x5628a2b24baf _PyEval_EvalCodeWithName
[2m[36m(pid=53626)[0m     @     0x5628a2b25643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53626)[0m     @     0x5628a2a9a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53626)[0m     @     0x5628a2b24baf _PyEval_EvalCodeWithName
[2m[36m(pid=53626)[0m     @     0x5628a2b25643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53610)[0m     @     0x7f99a349f4f5 at::Tensor::copy_()
[2m[36m(pid=53610)[0m     @     0x7f99a59728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53600)[0m     @     0x55e0df00d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53600)[0m     @     0x55e0df097baf _PyEval_EvalCodeWithName
[2m[36m(pid=53600)[0m     @     0x55e0df098643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53600)[0m     @     0x55e0df00d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53593)[0m     @     0x7fa495a79d91 at::TensorIterator::for_each()
[2m[36m(pid=53597)[0m     @     0x5563a1602baf _PyEval_EvalCodeWithName
[2m[36m(pid=53597)[0m     @     0x5563a1603643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53597)[0m     @     0x5563a1578689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53530)[0m     @     0x7f5d0822a5a4 at::native::copy_()
[2m[36m(pid=53530)[0m     @     0x7f5d089154f5 at::Tensor::copy_()
[2m[36m(pid=53530)[0m     @     0x7f5d0ade88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=53595)[0m     @     0x7f16252754f5 at::Tensor::copy_()
[2m[36m(pid=53544)[0m     @     0x7f9b5c785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53544)[0m     @     0x7f9b5c7a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53604)[0m     @     0x7f9137223ad3 at::TensorIterator::for_each()
[2m[36m(pid=53626)[0m     @     0x5628a2a9a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53626)[0m     @     0x5628a2b24baf _PyEval_EvalCodeWithName
[2m[36m(pid=53626)[0m     @     0x5628a2b25643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53626)[0m     @     0x5628a2a9a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53626)[0m     @     0x5628a2b24baf _PyEval_EvalCodeWithName
[2m[36m(pid=53626)[0m     @     0x5628a2b25643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53626)[0m     @     0x5628a2a9a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53610)[0m     @     0x7f99a349f4f5 at::Tensor::copy_()
[2m[36m(pid=53610)[0m     @     0x7f99a954a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53610)[0m     @     0x559369d6dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53610)[0m     @     0x559369cc8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53610)[0m     @     0x559369d53baf _PyEval_EvalCodeWithName
[2m[36m(pid=53610)[0m     @     0x559369d54a20 method_vectorcall
[2m[36m(pid=53610)[0m     @     0x559369cc8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53610)[0m     @     0x559369d53baf _PyEval_EvalCodeWithName
[2m[36m(pid=53610)[0m     @     0x559369d54643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53610)[0m     @     0x559369cc9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53610)[0m     @     0x559369d53baf _PyEval_EvalCodeWithName
[2m[36m(pid=53610)[0m     @     0x559369d54643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53610)[0m     @     0x559369cc9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53610)[0m     @     0x559369d53baf _PyEval_EvalCodeWithName
[2m[36m(pid=53610)[0m     @     0x559369d54643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53610)[0m     @     0x559369cc9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53610)[0m     @     0x559369d53baf _PyEval_EvalCodeWithName
[2m[36m(pid=53610)[0m     @     0x559369d54643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53610)[0m     @     0x559369cc9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53593)[0m     @     0x7fa49635cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53593)[0m     @     0x7fa49637fc1d at::native::(anonymous namespace)::copy_kernel()
2020-11-05 10:46:55,335	ERROR trial_runner.py:567 -- Trial PPO_jss_env_3466f_00000: Error processing event.
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py", line 515, in _process_trial
    result = self.trial_executor.fetch_result(trial)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py", line 488, in fetch_result
    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/worker.py", line 1428, in get
    raise value.as_instanceof_cause()
ray.exceptions.RayTaskError: [36mray::PPO.train()[39m (pid=53647, ip=172.17.0.4)
  File "python/ray/_raylet.pyx", line 484, in ray._raylet.execute_task
  File "python/ray/_raylet.pyx", line 438, in ray._raylet.execute_task.function_executor
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 516, in train
    raise e
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 505, in train
    result = Trainable.train(self)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py", line 336, in train
    result = self.step()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py", line 134, in step
    res = next(self.train_exec_impl)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 756, in __next__
    return next(self.built_iterator)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 876, in apply_flatten
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 828, in add_wait_hooks
    item = next(it)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 466, in base_iterator
    actor_set.init_actors()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 1238, in init_actors
    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
2020-11-05 10:46:55,338	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff821ddf4301000000.
2020-11-05 10:46:55,349	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff091d563401000000.
[2m[36m(pid=53530)[0m     @     0x7f5d089154f5 at::Tensor::copy_()
[2m[36m(pid=53530)[0m     @     0x7f5d0e9c079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53530)[0m     @     0x555752ee1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53530)[0m     @     0x555752e3cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53530)[0m     @     0x555752ec7baf _PyEval_EvalCodeWithName
[2m[36m(pid=53530)[0m     @     0x555752ec8a20 method_vectorcall
[2m[36m(pid=53530)[0m     @     0x555752e3cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53530)[0m     @     0x555752ec7baf _PyEval_EvalCodeWithName
[2m[36m(pid=53530)[0m     @     0x555752ec8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53530)[0m     @     0x555752e3d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53530)[0m     @     0x555752ec7baf _PyEval_EvalCodeWithName
[2m[36m(pid=53530)[0m     @     0x555752ec8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53530)[0m     @     0x555752e3d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53530)[0m     @     0x555752ec7baf _PyEval_EvalCodeWithName
[2m[36m(pid=53530)[0m     @     0x555752ec8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53530)[0m     @     0x555752e3d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53530)[0m     @     0x555752ec7baf _PyEval_EvalCodeWithName
[2m[36m(pid=53530)[0m     @     0x555752ec8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53530)[0m     @     0x555752e3d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53595)[0m     @     0x7f162b32079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=53595)[0m     @     0x5590bb1e1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=53595)[0m     @     0x5590bb13cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53595)[0m     @     0x5590bb1c7baf _PyEval_EvalCodeWithName
[2m[36m(pid=53595)[0m     @     0x5590bb1c8a20 method_vectorcall
[2m[36m(pid=53595)[0m     @     0x5590bb13cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53595)[0m     @     0x5590bb1c7baf _PyEval_EvalCodeWithName
[2m[36m(pid=53595)[0m     @     0x5590bb1c8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53595)[0m     @     0x5590bb13d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53595)[0m     @     0x5590bb1c7baf _PyEval_EvalCodeWithName
[2m[36m(pid=53595)[0m     @     0x5590bb1c8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53595)[0m     @     0x5590bb13d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53595)[0m     @     0x5590bb1c7baf _PyEval_EvalCodeWithName
[2m[36m(pid=53595)[0m     @     0x5590bb1c8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53595)[0m     @     0x5590bb13d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53595)[0m     @     0x5590bb1c7baf _PyEval_EvalCodeWithName
[2m[36m(pid=53595)[0m     @     0x5590bb1c8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=53595)[0m     @     0x5590bb13d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=53647)[0m E1105 10:46:55.327898 53647 54861 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=8e79ac7e91b36714821ddf4301000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=821ddf4301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}
[2m[36m(pid=53647)[0m E1105 10:46:55.328078 53647 54861 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=428a4b4025d91890821ddf4301000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=821ddf4301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}
[2m[36m(pid=53647)[0m E1105 10:46:55.342236 53647 54861 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=38e2d2d27b716bfb821ddf4301000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=821ddf4301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}
[2m[36m(pid=53647)[0m E1105 10:46:55.347884 53647 54861 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=1f6f5417a7b065f9091d563401000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=091d563401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}
[2m[36m(pid=53647)[0m E1105 10:46:55.348026 53647 54861 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=e76b5820fbdeb0f2091d563401000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=091d563401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}
[2m[36m(pid=53647)[0m E1105 10:46:55.348095 53647 54861 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=7249131d8582b825091d563401000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=091d563401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}
[2m[36m(pid=53544)[0m     @     0x7f9b5bc4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53544)[0m     @     0x7f9b5bc48388 at::native::copy_impl()
[2m[36m(pid=53544)[0m     @     0x7f9b5bc4a5a4 at::native::copy_()
[2m[36m(pid=53544)[0m     @     0x7f9b5c3354f5 at::Tensor::copy_()
[2m[33m(pid=raylet)[0m E1105 10:46:55.326617 53487 53487 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer
[2m[33m(pid=raylet)[0m E1105 10:46:55.348008 53487 53487 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Connection reset by peer
[2m[36m(pid=53604)[0m     @     0x7f9137223d91 at::TensorIterator::for_each()
[2m[36m(pid=53604)[0m     @     0x7f9137b06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=53604)[0m     @     0x7f9137b29c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=53604)[0m     @     0x7f9136fcba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53604)[0m     @     0x7f9136fc9388 at::native::copy_impl()
[2m[36m(pid=53593)[0m     @     0x7fa495821a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=53593)[0m     @     0x7fa49581f388 at::native::copy_impl()
[2m[36m(pid=53593)[0m     @     0x7fa4958215a4 at::native::copy_()
[2m[36m(pid=53593)[0m     @     0x7fa495f0c4f5 at::Tensor::copy_()
[2m[36m(pid=53647)[0m E1105 10:46:55.363129 53647 54861 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=7dd3b2683d323ffd31c3fed901000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=31c3fed901000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}
[2m[36m(pid=53647)[0m E1105 10:46:55.363296 53647 54861 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=0a51bbe8b791810831c3fed901000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=31c3fed901000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}
[2m[36m(pid=53647)[0m E1105 10:46:55.363366 53647 54861 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=d7b1ed864d13e17f31c3fed901000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=31c3fed901000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}
== Status ==
Memory usage on this node: 24.5/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/558.01 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_3466f_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_3466f_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_3466f_00000_0_2020-11-05_10-46-48/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

2020-11-05 10:46:55,375	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff31c3fed901000000.
2020-11-05 10:46:55,375	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff4e242e9f01000000.
== Status ==
Memory usage on this node: 24.2/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/558.01 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_3466f_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_3466f_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_3466f_00000_0_2020-11-05_10-46-48/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

Traceback (most recent call last):
  File "train.py", line 74, in <module>
    train_func()
  File "train.py", line 56, in train_func
    analysis = tune.run(PPOTrainer, config=config, stop=stop, name="ppo-jss")
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py", line 427, in run
    raise TuneError("Trials did not complete", incomplete_trials)
ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_3466f_00000])
