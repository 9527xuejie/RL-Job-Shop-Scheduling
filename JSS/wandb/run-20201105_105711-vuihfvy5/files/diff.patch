diff --git a/JSS/.ipynb_checkpoints/PPO-checkpoint.ipynb b/JSS/.ipynb_checkpoints/PPO-checkpoint.ipynb
index 4ec3a0c..9879da6 100644
--- a/JSS/.ipynb_checkpoints/PPO-checkpoint.ipynb
+++ b/JSS/.ipynb_checkpoints/PPO-checkpoint.ipynb
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 14,
    "metadata": {},
    "outputs": [
     {
@@ -64,9 +64,9 @@
     "        },\n",
     "        'parameters': {\n",
     "            'instance_path': {\n",
-    "                'values': ['/JSS/JSS/env/instances/ta51', '/JSS/JSS/env/instances/ta52', '/JSS/JSS/env/instances/ta53', '/JSS/JSS/env/instances/ta54',\n",
-    "                           '/JSS/JSS/env/instances/ta55', '/JSS/JSS/env/instances/ta56', '/JSS/JSS/env/instances/ta57', '/JSS/JSS/env/instances/ta58',\n",
-    "                           '/JSS/JSS/env/instances/ta59', '/JSS/JSS/env/instances/ta60']\n",
+    "                'values': ['/JSS/JSS/env/instances/ta40', '/JSS/JSS/env/instances/ta41', '/JSS/JSS/env/instances/ta42', '/JSS/JSS/env/instances/ta43', '/JSS/JSS/env/instances/ta44',\n",
+    "                           '/JSS/JSS/env/instances/ta45', '/JSS/JSS/env/instances/ta46', '/JSS/JSS/env/instances/ta47', '/JSS/JSS/env/instances/ta48',\n",
+    "                           '/JSS/JSS/env/instances/ta49', '/JSS/JSS/env/instances/ta50']\n",
     "            }\n",
     "        }\n",
     "    }"
@@ -74,25 +74,25 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 15,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Create sweep with ID: 1x8v92mc\n",
-      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/1x8v92mc\n"
+      "Create sweep with ID: 9xhkl8my\n",
+      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/9xhkl8my\n"
      ]
     }
    ],
    "source": [
-    "sweep_id = wandb.sweep(sweep_config, project=\"RLLIB_SWEEP_2\")"
+    "sweep_id = wandb.sweep(sweep_config, project=\"RLLIB_SWEEP_3\")"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 16,
    "metadata": {},
    "outputs": [
     {
@@ -100,67 +100,13616 @@
      "output_type": "stream",
      "text": [
       "\u001b[34m\u001b[1mwandb\u001b[0m: Starting wandb agent üïµÔ∏è\n",
-      "2020-10-13 11:45:51,946 - wandb.wandb_agent - INFO - Running runs: []\n",
-      "2020-10-13 11:45:52,259 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-13 11:45:52,260 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta51\n",
-      "2020-10-13 11:45:52,261 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python RandomGreedy.py --instance_path=/JSS/JSS/env/instances/ta51\n",
+      "2020-11-01 11:53:51,776 - wandb.wandb_agent - INFO - Running runs: []\n",
+      "2020-11-01 11:53:52,086 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-01 11:53:52,086 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/la/la11.txt\n",
+      "2020-11-01 11:53:52,088 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/la/la11.txt\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mrandom\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/1x8v92mc\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/3qwfavbb\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201013_114553-3qwfavbb\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mmisty-sweep-1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/9xhkl8my\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/kqo0l7if\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201101_115353-kqo0l7if\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "2020-10-13 11:45:57,278 - wandb.wandb_agent - INFO - Running runs: ['3qwfavbb']\n",
+      "2020-11-01 11:53:57,102 - wandb.wandb_agent - INFO - Running runs: ['kqo0l7if']\n",
+      "2020-11-01 11:53:57,683\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 39394\n",
+      "\n",
+      "\u001b[2m\u001b[36m(pid=20230)\u001b[0m 2020-11-01 11:54:00,466\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=20215)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20215)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20191)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20191)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20206)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20206)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20222)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20222)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20202)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20202)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20171)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20171)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20193)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20193)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20199)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20199)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20235)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20235)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20233)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20233)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20232)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20232)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20198)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20198)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20211)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20211)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20205)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20205)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20226)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20226)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20187)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20187)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20207)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20207)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20216)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20216)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20237)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20237)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20166)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20166)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20236)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20236)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20247)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20247)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20151)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20151)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20175)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20175)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20138)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20138)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20174)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20174)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20178)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20178)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20116)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20116)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20128)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20128)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20181)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20181)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20123)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20123)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20142)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20142)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20169)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20169)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20196)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20196)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20209)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20209)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20188)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20188)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20112)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20112)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20120)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20120)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20210)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20210)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20131)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20131)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20127)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20127)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20134)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20134)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20170)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20170)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20125)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20125)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20129)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20129)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20212)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20212)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20203)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20203)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20180)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20180)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20194)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20194)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20150)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20150)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20219)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20219)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20197)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20197)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20176)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20176)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20192)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20192)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20130)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20130)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20149)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20149)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20195)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20195)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20124)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20124)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20132)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20132)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20240)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20240)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20200)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20200)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20117)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20117)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20173)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20173)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20183)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20183)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20184)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20184)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20145)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20145)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20141)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20141)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20148)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20148)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20122)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20122)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20118)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20118)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20115)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20115)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20214)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20214)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20147)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20147)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20135)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20135)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20114)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20114)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20119)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20119)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20241)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20241)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20113)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20113)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=20225)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=20225)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1434.4832653061223\n",
+      "    time_step_min: 1245\n",
+      "  date: 2020-11-01_11-54-27\n",
+      "  done: false\n",
+      "  episode_len_mean: 116.93913043478261\n",
+      "  episode_reward_max: 45.68367346938774\n",
+      "  episode_reward_mean: 35.80144389771718\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1265\n",
+      "  episodes_total: 1265\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1484567523002625\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006624576014777024\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007466505475652714\n",
+      "        total_loss: 52.51902961730957\n",
+      "        vf_explained_var: 0.7593300342559814\n",
+      "        vf_loss: 52.52574666341146\n",
+      "    num_steps_sampled: 161792\n",
+      "    num_steps_trained: 161792\n",
+      "  iterations_since_restore: 1\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 31.92222222222222\n",
+      "    gpu_util_percent0: 0.3044444444444444\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.4370370370370376\n",
+      "    vram_util_percent0: 0.0819728386963546\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.17175637313856013\n",
+      "    mean_env_wait_ms: 0.6787065283307273\n",
+      "    mean_inference_ms: 5.169812775871786\n",
+      "    mean_raw_obs_processing_ms: 0.45531381926816505\n",
+      "  time_since_restore: 22.264521837234497\n",
+      "  time_this_iter_s: 22.264521837234497\n",
+      "  time_total_s: 22.264521837234497\n",
+      "  timers:\n",
+      "    learn_throughput: 11076.145\n",
+      "    learn_time_ms: 14607.249\n",
+      "    sample_throughput: 21315.374\n",
+      "    sample_time_ms: 7590.39\n",
+      "    update_time_ms: 20.181\n",
+      "  timestamp: 1604231667\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 161792\n",
+      "  training_iteration: 1\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.3/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      1 |          22.2645 | 161792 |  35.8014 |              45.6837 |              15.7347 |            116.939 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1426.9196226415095\n",
+      "    time_step_min: 1245\n",
+      "  date: 2020-11-01_11-54-49\n",
+      "  done: false\n",
+      "  episode_len_mean: 115.78401486988848\n",
+      "  episode_reward_max: 45.68367346938774\n",
+      "  episode_reward_mean: 36.37903042257795\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1425\n",
+      "  episodes_total: 2690\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.130055993795395\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00956034411986669\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011216347149456851\n",
+      "        total_loss: 10.385109821955362\n",
+      "        vf_explained_var: 0.894355058670044\n",
+      "        vf_loss: 10.394978761672974\n",
+      "    num_steps_sampled: 323584\n",
+      "    num_steps_trained: 323584\n",
+      "  iterations_since_restore: 2\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 28.388\n",
+      "    gpu_util_percent0: 0.3824\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5120000000000005\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16652532875458848\n",
+      "    mean_env_wait_ms: 0.6684123457284149\n",
+      "    mean_inference_ms: 4.952915318761355\n",
+      "    mean_raw_obs_processing_ms: 0.44064388796599707\n",
+      "  time_since_restore: 43.21846151351929\n",
+      "  time_this_iter_s: 20.95393967628479\n",
+      "  time_total_s: 43.21846151351929\n",
+      "  timers:\n",
+      "    learn_throughput: 11096.611\n",
+      "    learn_time_ms: 14580.307\n",
+      "    sample_throughput: 23271.686\n",
+      "    sample_time_ms: 6952.311\n",
+      "    update_time_ms: 21.999\n",
+      "  timestamp: 1604231689\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 323584\n",
+      "  training_iteration: 2\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      2 |          43.2185 | 323584 |   36.379 |              45.6837 |              15.7347 |            115.784 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1408.408178256611\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-55-09\n",
+      "  done: false\n",
+      "  episode_len_mean: 114.67119301648884\n",
+      "  episode_reward_max: 46.85714285714286\n",
+      "  episode_reward_mean: 37.28042419683683\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1434\n",
+      "  episodes_total: 4124\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1140848398208618\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009810077414537469\n",
+      "        model: {}\n",
+      "        policy_loss: -0.015473847355072698\n",
+      "        total_loss: 7.254512945810954\n",
+      "        vf_explained_var: 0.9246422648429871\n",
+      "        vf_loss: 7.2685816287994385\n",
+      "    num_steps_sampled: 485376\n",
+      "    num_steps_trained: 485376\n",
+      "  iterations_since_restore: 3\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.775000000000002\n",
+      "    gpu_util_percent0: 0.34500000000000003\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.516666666666667\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16318379996682947\n",
+      "    mean_env_wait_ms: 0.662199655734115\n",
+      "    mean_inference_ms: 4.788160816000921\n",
+      "    mean_raw_obs_processing_ms: 0.43056477316095654\n",
+      "  time_since_restore: 63.56497097015381\n",
+      "  time_this_iter_s: 20.34650945663452\n",
+      "  time_total_s: 63.56497097015381\n",
+      "  timers:\n",
+      "    learn_throughput: 11127.786\n",
+      "    learn_time_ms: 14539.46\n",
+      "    sample_throughput: 24626.159\n",
+      "    sample_time_ms: 6569.924\n",
+      "    update_time_ms: 21.5\n",
+      "  timestamp: 1604231709\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 485376\n",
+      "  training_iteration: 3\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      3 |           63.565 | 485376 |  37.2804 |              46.8571 |              15.7347 |            114.671 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1389.7721856660146\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-55-30\n",
+      "  done: false\n",
+      "  episode_len_mean: 113.25304608864559\n",
+      "  episode_reward_max: 46.857142857142875\n",
+      "  episode_reward_mean: 38.234928122758895\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1539\n",
+      "  episodes_total: 5663\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0880944629510243\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009488985563317934\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01440603454830125\n",
+      "        total_loss: 5.48736047744751\n",
+      "        vf_explained_var: 0.9440011978149414\n",
+      "        vf_loss: 5.500412583351135\n",
+      "    num_steps_sampled: 647168\n",
+      "    num_steps_trained: 647168\n",
+      "  iterations_since_restore: 4\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.516666666666666\n",
+      "    gpu_util_percent0: 0.34874999999999995\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5125000000000006\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16068983053902333\n",
+      "    mean_env_wait_ms: 0.6583389151369388\n",
+      "    mean_inference_ms: 4.664128900411232\n",
+      "    mean_raw_obs_processing_ms: 0.42299876801925573\n",
+      "  time_since_restore: 84.06657981872559\n",
+      "  time_this_iter_s: 20.501608848571777\n",
+      "  time_total_s: 84.06657981872559\n",
+      "  timers:\n",
+      "    learn_throughput: 11095.44\n",
+      "    learn_time_ms: 14581.846\n",
+      "    sample_throughput: 25479.527\n",
+      "    sample_time_ms: 6349.882\n",
+      "    update_time_ms: 24.143\n",
+      "  timestamp: 1604231730\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 647168\n",
+      "  training_iteration: 4\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      4 |          84.0666 | 647168 |  38.2349 |              46.8571 |              15.7347 |            113.253 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1374.424760022586\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-55-50\n",
+      "  done: false\n",
+      "  episode_len_mean: 112.05460415496911\n",
+      "  episode_reward_max: 46.857142857142875\n",
+      "  episode_reward_mean: 39.03776398262842\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1461\n",
+      "  episodes_total: 7124\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0627730786800385\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009283728742351135\n",
+      "        model: {}\n",
+      "        policy_loss: -0.015454331073366726\n",
+      "        total_loss: 4.347856322924296\n",
+      "        vf_explained_var: 0.9541513323783875\n",
+      "        vf_loss: 4.3619853258132935\n",
+      "    num_steps_sampled: 808960\n",
+      "    num_steps_trained: 808960\n",
+      "  iterations_since_restore: 5\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.604166666666668\n",
+      "    gpu_util_percent0: 0.3541666666666667\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5124999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15895058912495744\n",
+      "    mean_env_wait_ms: 0.6558977259961688\n",
+      "    mean_inference_ms: 4.577574740810779\n",
+      "    mean_raw_obs_processing_ms: 0.4175203436251983\n",
+      "  time_since_restore: 104.25312542915344\n",
+      "  time_this_iter_s: 20.186545610427856\n",
+      "  time_total_s: 104.25312542915344\n",
+      "  timers:\n",
+      "    learn_throughput: 11116.23\n",
+      "    learn_time_ms: 14554.575\n",
+      "    sample_throughput: 26067.237\n",
+      "    sample_time_ms: 6206.718\n",
+      "    update_time_ms: 26.186\n",
+      "  timestamp: 1604231750\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 808960\n",
+      "  training_iteration: 5\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      5 |          104.253 | 808960 |  39.0378 |              46.8571 |              15.7347 |            112.055 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1360.2383485601943\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-56-11\n",
+      "  done: false\n",
+      "  episode_len_mean: 110.9338091400944\n",
+      "  episode_reward_max: 46.85714285714288\n",
+      "  episode_reward_mean: 39.78162771958098\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1563\n",
+      "  episodes_total: 8687\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0209535757700603\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009677846527968844\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013495485666984072\n",
+      "        total_loss: 3.3039915561676025\n",
+      "        vf_explained_var: 0.9663781523704529\n",
+      "        vf_loss: 3.3160619735717773\n",
+      "    num_steps_sampled: 970752\n",
+      "    num_steps_trained: 970752\n",
+      "  iterations_since_restore: 6\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.1\n",
+      "    gpu_util_percent0: 0.3948\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.52\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15752045783718058\n",
+      "    mean_env_wait_ms: 0.6540636684528683\n",
+      "    mean_inference_ms: 4.50681489407211\n",
+      "    mean_raw_obs_processing_ms: 0.4129356375354034\n",
+      "  time_since_restore: 124.68163776397705\n",
+      "  time_this_iter_s: 20.42851233482361\n",
+      "  time_total_s: 124.68163776397705\n",
+      "  timers:\n",
+      "    learn_throughput: 11114.998\n",
+      "    learn_time_ms: 14556.188\n",
+      "    sample_throughput: 26385.183\n",
+      "    sample_time_ms: 6131.926\n",
+      "    update_time_ms: 25.903\n",
+      "  timestamp: 1604231771\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 970752\n",
+      "  training_iteration: 6\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      6 |          124.682 | 970752 |  39.7816 |              46.8571 |              15.7347 |            110.934 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1346.8549304058029\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-56-31\n",
+      "  done: false\n",
+      "  episode_len_mean: 109.96026166764304\n",
+      "  episode_reward_max: 46.85714285714288\n",
+      "  episode_reward_mean: 40.448761402627824\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1555\n",
+      "  episodes_total: 10242\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9796850432952245\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008622131776064634\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012602110786247067\n",
+      "        total_loss: 2.7198241551717124\n",
+      "        vf_explained_var: 0.9723749160766602\n",
+      "        vf_loss: 2.731191635131836\n",
+      "    num_steps_sampled: 1132544\n",
+      "    num_steps_trained: 1132544\n",
+      "  iterations_since_restore: 7\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.520833333333332\n",
+      "    gpu_util_percent0: 0.36541666666666667\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5208333333333335\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15640676678928592\n",
+      "    mean_env_wait_ms: 0.6528313389539068\n",
+      "    mean_inference_ms: 4.45161866768078\n",
+      "    mean_raw_obs_processing_ms: 0.40931756815016995\n",
+      "  time_since_restore: 145.21865725517273\n",
+      "  time_this_iter_s: 20.53701949119568\n",
+      "  time_total_s: 145.21865725517273\n",
+      "  timers:\n",
+      "    learn_throughput: 11103.013\n",
+      "    learn_time_ms: 14571.9\n",
+      "    sample_throughput: 26614.769\n",
+      "    sample_time_ms: 6079.031\n",
+      "    update_time_ms: 25.131\n",
+      "  timestamp: 1604231791\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1132544\n",
+      "  training_iteration: 7\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      7 |          145.219 | 1132544 |  40.4488 |              46.8571 |              15.7347 |             109.96 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1335.6309301139263\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-56-52\n",
+      "  done: false\n",
+      "  episode_len_mean: 109.09913573970513\n",
+      "  episode_reward_max: 46.8571428571429\n",
+      "  episode_reward_mean: 41.02892366911177\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1560\n",
+      "  episodes_total: 11802\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.937453493475914\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007955724994341532\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01194375741033582\n",
+      "        total_loss: 2.2597323656082153\n",
+      "        vf_explained_var: 0.9770286083221436\n",
+      "        vf_loss: 2.2705536683400473\n",
+      "    num_steps_sampled: 1294336\n",
+      "    num_steps_trained: 1294336\n",
+      "  iterations_since_restore: 8\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.436000000000003\n",
+      "    gpu_util_percent0: 0.3632\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1554915965562696\n",
+      "    mean_env_wait_ms: 0.6518904790353526\n",
+      "    mean_inference_ms: 4.406507393012131\n",
+      "    mean_raw_obs_processing_ms: 0.40631830746764874\n",
+      "  time_since_restore: 166.04925441741943\n",
+      "  time_this_iter_s: 20.830597162246704\n",
+      "  time_total_s: 166.04925441741943\n",
+      "  timers:\n",
+      "    learn_throughput: 11082.871\n",
+      "    learn_time_ms: 14598.383\n",
+      "    sample_throughput: 26705.585\n",
+      "    sample_time_ms: 6058.358\n",
+      "    update_time_ms: 26.617\n",
+      "  timestamp: 1604231812\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1294336\n",
+      "  training_iteration: 8\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      8 |          166.049 | 1294336 |  41.0289 |              46.8571 |              15.7347 |            109.099 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1325.960990247562\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-57-13\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.36514584891549\n",
+      "  episode_reward_max: 46.8571428571429\n",
+      "  episode_reward_mean: 41.523987605513405\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1568\n",
+      "  episodes_total: 13370\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8931734959284464\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007821322418749332\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011547995522657098\n",
+      "        total_loss: 1.8110616604487102\n",
+      "        vf_explained_var: 0.9818581938743591\n",
+      "        vf_loss: 1.8214919765790303\n",
+      "    num_steps_sampled: 1456128\n",
+      "    num_steps_trained: 1456128\n",
+      "  iterations_since_restore: 9\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.3625\n",
+      "    gpu_util_percent0: 0.34625\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15472443847934\n",
+      "    mean_env_wait_ms: 0.6512116120864969\n",
+      "    mean_inference_ms: 4.368900491259558\n",
+      "    mean_raw_obs_processing_ms: 0.40380683055783845\n",
+      "  time_since_restore: 186.4968512058258\n",
+      "  time_this_iter_s: 20.447596788406372\n",
+      "  time_total_s: 186.4968512058258\n",
+      "  timers:\n",
+      "    learn_throughput: 11083.852\n",
+      "    learn_time_ms: 14597.092\n",
+      "    sample_throughput: 26872.567\n",
+      "    sample_time_ms: 6020.713\n",
+      "    update_time_ms: 27.945\n",
+      "  timestamp: 1604231833\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1456128\n",
+      "  training_iteration: 9\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |      9 |          186.497 | 1456128 |   41.524 |              46.8571 |              15.7347 |            108.365 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1317.3690564013145\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-57-34\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.72182462711524\n",
+      "  episode_reward_max: 46.8571428571429\n",
+      "  episode_reward_mean: 41.96634652790953\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1581\n",
+      "  episodes_total: 14951\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8531899998585383\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007403539726510644\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011224584576363364\n",
+      "        total_loss: 1.351464072863261\n",
+      "        vf_explained_var: 0.9865902066230774\n",
+      "        vf_loss: 1.3616345326105754\n",
+      "    num_steps_sampled: 1617920\n",
+      "    num_steps_trained: 1617920\n",
+      "  iterations_since_restore: 10\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.612\n",
+      "    gpu_util_percent0: 0.37999999999999995\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.572\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15406610086889994\n",
+      "    mean_env_wait_ms: 0.6506878167628722\n",
+      "    mean_inference_ms: 4.336866675743429\n",
+      "    mean_raw_obs_processing_ms: 0.4016399376622533\n",
+      "  time_since_restore: 207.11356925964355\n",
+      "  time_this_iter_s: 20.61671805381775\n",
+      "  time_total_s: 207.11356925964355\n",
+      "  timers:\n",
+      "    learn_throughput: 11075.434\n",
+      "    learn_time_ms: 14608.186\n",
+      "    sample_throughput: 27020.124\n",
+      "    sample_time_ms: 5987.833\n",
+      "    update_time_ms: 29.042\n",
+      "  timestamp: 1604231854\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1617920\n",
+      "  training_iteration: 10\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     10 |          207.114 | 1617920 |  41.9663 |              46.8571 |              15.7347 |            107.722 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1309.7214852504694\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-57-55\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.15910326907971\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 42.36176364315742\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1598\n",
+      "  episodes_total: 16549\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8141860415538152\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006707225965025525\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011368195065491212\n",
+      "        total_loss: 1.1314103106657665\n",
+      "        vf_explained_var: 0.9888380169868469\n",
+      "        vf_loss: 1.1418441633383434\n",
+      "    num_steps_sampled: 1779712\n",
+      "    num_steps_trained: 1779712\n",
+      "  iterations_since_restore: 11\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.291666666666668\n",
+      "    gpu_util_percent0: 0.38208333333333333\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15349391695430212\n",
+      "    mean_env_wait_ms: 0.6503003794675789\n",
+      "    mean_inference_ms: 4.309108284972775\n",
+      "    mean_raw_obs_processing_ms: 0.3997656568156822\n",
+      "  time_since_restore: 227.4893569946289\n",
+      "  time_this_iter_s: 20.37578773498535\n",
+      "  time_total_s: 227.4893569946289\n",
+      "  timers:\n",
+      "    learn_throughput: 11080.893\n",
+      "    learn_time_ms: 14600.989\n",
+      "    sample_throughput: 27896.222\n",
+      "    sample_time_ms: 5799.782\n",
+      "    update_time_ms: 29.058\n",
+      "  timestamp: 1604231875\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1779712\n",
+      "  training_iteration: 11\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     11 |          227.489 | 1779712 |  42.3618 |              46.8571 |              15.7347 |            107.159 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1303.0352388842862\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-58-16\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.65836318545054\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 42.7044331097002\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1596\n",
+      "  episodes_total: 18145\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7753126074870428\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006863077365172406\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012638252902737198\n",
+      "        total_loss: 0.8784026602904002\n",
+      "        vf_explained_var: 0.9913859963417053\n",
+      "        vf_loss: 0.8900559494892756\n",
+      "    num_steps_sampled: 1941504\n",
+      "    num_steps_trained: 1941504\n",
+      "  iterations_since_restore: 12\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.460000000000004\n",
+      "    gpu_util_percent0: 0.35159999999999997\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15300041083206697\n",
+      "    mean_env_wait_ms: 0.6500163020439707\n",
+      "    mean_inference_ms: 4.28507024712119\n",
+      "    mean_raw_obs_processing_ms: 0.39814727184542376\n",
+      "  time_since_restore: 248.12101984024048\n",
+      "  time_this_iter_s: 20.631662845611572\n",
+      "  time_total_s: 248.12101984024048\n",
+      "  timers:\n",
+      "    learn_throughput: 11075.423\n",
+      "    learn_time_ms: 14608.2\n",
+      "    sample_throughput: 28116.695\n",
+      "    sample_time_ms: 5754.304\n",
+      "    update_time_ms: 29.472\n",
+      "  timestamp: 1604231896\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1941504\n",
+      "  training_iteration: 12\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     12 |          248.121 | 1941504 |  42.7044 |              46.8571 |              15.7347 |            106.658 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1297.1705583756345\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-58-37\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.2274062816616\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 43.00436542398114\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1595\n",
+      "  episodes_total: 19740\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7383754253387451\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006651315527657668\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010724902463455996\n",
+      "        total_loss: 0.7107721914847692\n",
+      "        vf_explained_var: 0.9930524230003357\n",
+      "        vf_loss: 0.720536028345426\n",
+      "    num_steps_sampled: 2103296\n",
+      "    num_steps_trained: 2103296\n",
+      "  iterations_since_restore: 13\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.279166666666665\n",
+      "    gpu_util_percent0: 0.3491666666666666\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15256633452651727\n",
+      "    mean_env_wait_ms: 0.649802245161823\n",
+      "    mean_inference_ms: 4.264010160654567\n",
+      "    mean_raw_obs_processing_ms: 0.39671502855945817\n",
+      "  time_since_restore: 268.6334173679352\n",
+      "  time_this_iter_s: 20.512397527694702\n",
+      "  time_total_s: 268.6334173679352\n",
+      "  timers:\n",
+      "    learn_throughput: 11061.736\n",
+      "    learn_time_ms: 14626.276\n",
+      "    sample_throughput: 28152.503\n",
+      "    sample_time_ms: 5746.985\n",
+      "    update_time_ms: 29.255\n",
+      "  timestamp: 1604231917\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2103296\n",
+      "  training_iteration: 13\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     13 |          268.633 | 2103296 |  43.0044 |              46.8571 |              15.7347 |            106.227 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1292.0809922014469\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-58-58\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.85140204445278\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 43.26472333282933\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1586\n",
+      "  episodes_total: 21326\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7001272787650427\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0061410532022515936\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010832997679244727\n",
+      "        total_loss: 0.6119682043790817\n",
+      "        vf_explained_var: 0.9940410256385803\n",
+      "        vf_loss: 0.621923049290975\n",
+      "    num_steps_sampled: 2265088\n",
+      "    num_steps_trained: 2265088\n",
+      "  iterations_since_restore: 14\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.02\n",
+      "    gpu_util_percent0: 0.368\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15218124195639093\n",
+      "    mean_env_wait_ms: 0.6496403257727554\n",
+      "    mean_inference_ms: 4.245421485662705\n",
+      "    mean_raw_obs_processing_ms: 0.3954453584998017\n",
+      "  time_since_restore: 289.35663652420044\n",
+      "  time_this_iter_s: 20.72321915626526\n",
+      "  time_total_s: 289.35663652420044\n",
+      "  timers:\n",
+      "    learn_throughput: 11062.187\n",
+      "    learn_time_ms: 14625.679\n",
+      "    sample_throughput: 28102.045\n",
+      "    sample_time_ms: 5757.304\n",
+      "    update_time_ms: 34.762\n",
+      "  timestamp: 1604231938\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2265088\n",
+      "  training_iteration: 14\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     14 |          289.357 | 2265088 |  43.2647 |              46.8571 |              15.7347 |            105.851 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1287.5182239314745\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-59-18\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.5031847133758\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 43.497414924437614\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1596\n",
+      "  episodes_total: 22922\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6637579500675201\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005367214015374581\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009309418620735718\n",
+      "        total_loss: 0.47650496910015744\n",
+      "        vf_explained_var: 0.9953997731208801\n",
+      "        vf_loss: 0.4850728213787079\n",
+      "    num_steps_sampled: 2426880\n",
+      "    num_steps_trained: 2426880\n",
+      "  iterations_since_restore: 15\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.845833333333335\n",
+      "    gpu_util_percent0: 0.40166666666666667\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15183678083046764\n",
+      "    mean_env_wait_ms: 0.6495392872625815\n",
+      "    mean_inference_ms: 4.2286469238398325\n",
+      "    mean_raw_obs_processing_ms: 0.39431499646823304\n",
+      "  time_since_restore: 309.672310590744\n",
+      "  time_this_iter_s: 20.31567406654358\n",
+      "  time_total_s: 309.672310590744\n",
+      "  timers:\n",
+      "    learn_throughput: 11054.878\n",
+      "    learn_time_ms: 14635.35\n",
+      "    sample_throughput: 28119.821\n",
+      "    sample_time_ms: 5753.664\n",
+      "    update_time_ms: 33.135\n",
+      "  timestamp: 1604231958\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2426880\n",
+      "  training_iteration: 15\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     15 |          309.672 | 2426880 |  43.4974 |              46.8571 |              15.7347 |            105.503 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1283.4805964052287\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_11-59-39\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.19265905383361\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 43.70432092086426\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1598\n",
+      "  episodes_total: 24520\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6296272675196329\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0055771675348902745\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009812832868192345\n",
+      "        total_loss: 0.3527320822079976\n",
+      "        vf_explained_var: 0.9965917468070984\n",
+      "        vf_loss: 0.3617442895968755\n",
+      "    num_steps_sampled: 2588672\n",
+      "    num_steps_trained: 2588672\n",
+      "  iterations_since_restore: 16\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.162500000000005\n",
+      "    gpu_util_percent0: 0.42416666666666664\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1515236024097143\n",
+      "    mean_env_wait_ms: 0.6494728987544927\n",
+      "    mean_inference_ms: 4.213501380549204\n",
+      "    mean_raw_obs_processing_ms: 0.3932868129355243\n",
+      "  time_since_restore: 330.0610761642456\n",
+      "  time_this_iter_s: 20.388765573501587\n",
+      "  time_total_s: 330.0610761642456\n",
+      "  timers:\n",
+      "    learn_throughput: 11058.672\n",
+      "    learn_time_ms: 14630.328\n",
+      "    sample_throughput: 28143.68\n",
+      "    sample_time_ms: 5748.786\n",
+      "    update_time_ms: 32.726\n",
+      "  timestamp: 1604231979\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2588672\n",
+      "  training_iteration: 16\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     16 |          330.061 | 2588672 |  43.7043 |              46.8571 |              15.7347 |            105.193 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1279.8473329245862\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-00-00\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.910927456382\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 43.890595815920484\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1616\n",
+      "  episodes_total: 26136\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5843918571869532\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005636528095540901\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009946482673209781\n",
+      "        total_loss: 0.2803831646839778\n",
+      "        vf_explained_var: 0.9972963333129883\n",
+      "        vf_loss: 0.28949454923470813\n",
+      "    num_steps_sampled: 2750464\n",
+      "    num_steps_trained: 2750464\n",
+      "  iterations_since_restore: 17\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 24.984\n",
+      "    gpu_util_percent0: 0.36920000000000003\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15123654271663214\n",
+      "    mean_env_wait_ms: 0.6494373187304042\n",
+      "    mean_inference_ms: 4.199623866436883\n",
+      "    mean_raw_obs_processing_ms: 0.3923463354120984\n",
+      "  time_since_restore: 350.56322145462036\n",
+      "  time_this_iter_s: 20.502145290374756\n",
+      "  time_total_s: 350.56322145462036\n",
+      "  timers:\n",
+      "    learn_throughput: 11060.535\n",
+      "    learn_time_ms: 14627.863\n",
+      "    sample_throughput: 28221.412\n",
+      "    sample_time_ms: 5732.952\n",
+      "    update_time_ms: 40.383\n",
+      "  timestamp: 1604232000\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2750464\n",
+      "  training_iteration: 17\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     17 |          350.563 | 2750464 |  43.8906 |              46.8571 |              15.7347 |            104.911 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1276.563322872705\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-00-21\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.65475633036776\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.05809376302477\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1627\n",
+      "  episodes_total: 27763\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5512450536092123\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0052360318368300796\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00858212105807373\n",
+      "        total_loss: 0.2300113836924235\n",
+      "        vf_explained_var: 0.997800350189209\n",
+      "        vf_loss: 0.2378219154973825\n",
+      "    num_steps_sampled: 2912256\n",
+      "    num_steps_trained: 2912256\n",
+      "  iterations_since_restore: 18\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.133333333333336\n",
+      "    gpu_util_percent0: 0.3545833333333333\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15097539441634178\n",
+      "    mean_env_wait_ms: 0.649425583111441\n",
+      "    mean_inference_ms: 4.186930579711764\n",
+      "    mean_raw_obs_processing_ms: 0.3914892612304368\n",
+      "  time_since_restore: 371.091876745224\n",
+      "  time_this_iter_s: 20.528655290603638\n",
+      "  time_total_s: 371.091876745224\n",
+      "  timers:\n",
+      "    learn_throughput: 11066.918\n",
+      "    learn_time_ms: 14619.428\n",
+      "    sample_throughput: 28359.109\n",
+      "    sample_time_ms: 5705.116\n",
+      "    update_time_ms: 40.411\n",
+      "  timestamp: 1604232021\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2912256\n",
+      "  training_iteration: 18\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     18 |          371.092 | 2912256 |  44.0581 |              46.8571 |              15.7347 |            104.655 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1273.6519278628166\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-00-43\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.42508426105607\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.20715088200534\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1610\n",
+      "  episodes_total: 29373\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.525387316942215\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004920089112905164\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008422184953815304\n",
+      "        total_loss: 0.1757721391816934\n",
+      "        vf_explained_var: 0.9983048439025879\n",
+      "        vf_loss: 0.1834729996820291\n",
+      "    num_steps_sampled: 3074048\n",
+      "    num_steps_trained: 3074048\n",
+      "  iterations_since_restore: 19\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.212000000000003\n",
+      "    gpu_util_percent0: 0.336\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15073736984322064\n",
+      "    mean_env_wait_ms: 0.649427266881627\n",
+      "    mean_inference_ms: 4.175450336968136\n",
+      "    mean_raw_obs_processing_ms: 0.3907110068982923\n",
+      "  time_since_restore: 391.7044517993927\n",
+      "  time_this_iter_s: 20.6125750541687\n",
+      "  time_total_s: 391.7044517993927\n",
+      "  timers:\n",
+      "    learn_throughput: 11052.788\n",
+      "    learn_time_ms: 14638.117\n",
+      "    sample_throughput: 28425.972\n",
+      "    sample_time_ms: 5691.696\n",
+      "    update_time_ms: 45.734\n",
+      "  timestamp: 1604232043\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3074048\n",
+      "  training_iteration: 19\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     19 |          391.704 | 3074048 |  44.2072 |              46.8571 |              15.7347 |            104.425 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1271.0431296475913\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-01-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.21682273167582\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.34093230446844\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1597\n",
+      "  episodes_total: 30970\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.49314410984516144\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005798064754344523\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009414856787770987\n",
+      "        total_loss: 0.13895704535146555\n",
+      "        vf_explained_var: 0.9986486434936523\n",
+      "        vf_loss: 0.1480386642118295\n",
+      "    num_steps_sampled: 3235840\n",
+      "    num_steps_trained: 3235840\n",
+      "  iterations_since_restore: 20\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.116666666666664\n",
+      "    gpu_util_percent0: 0.35833333333333334\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15052181952677304\n",
+      "    mean_env_wait_ms: 0.649438443211961\n",
+      "    mean_inference_ms: 4.164995515225137\n",
+      "    mean_raw_obs_processing_ms: 0.3900008446460127\n",
+      "  time_since_restore: 412.16121435165405\n",
+      "  time_this_iter_s: 20.456762552261353\n",
+      "  time_total_s: 412.16121435165405\n",
+      "  timers:\n",
+      "    learn_throughput: 11057.384\n",
+      "    learn_time_ms: 14632.032\n",
+      "    sample_throughput: 28470.363\n",
+      "    sample_time_ms: 5682.822\n",
+      "    update_time_ms: 44.871\n",
+      "  timestamp: 1604232064\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3235840\n",
+      "  training_iteration: 20\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     20 |          412.161 | 3235840 |  44.3409 |              46.8571 |              15.7347 |            104.217 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1268.6647814593964\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-01-24\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.02566464051084\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.4626028897468\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1604\n",
+      "  episodes_total: 32574\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.46102594832579297\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005838079610839486\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00808940147787022\n",
+      "        total_loss: 0.11789208464324474\n",
+      "        vf_explained_var: 0.9988470077514648\n",
+      "        vf_loss: 0.12562819197773933\n",
+      "    num_steps_sampled: 3397632\n",
+      "    num_steps_trained: 3397632\n",
+      "  iterations_since_restore: 21\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 24.463999999999995\n",
+      "    gpu_util_percent0: 0.3728\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15032141681707573\n",
+      "    mean_env_wait_ms: 0.6494592765291238\n",
+      "    mean_inference_ms: 4.155300920389142\n",
+      "    mean_raw_obs_processing_ms: 0.3893410843403339\n",
+      "  time_since_restore: 432.50473642349243\n",
+      "  time_this_iter_s: 20.34352207183838\n",
+      "  time_total_s: 432.50473642349243\n",
+      "  timers:\n",
+      "    learn_throughput: 11057.81\n",
+      "    learn_time_ms: 14631.468\n",
+      "    sample_throughput: 28523.95\n",
+      "    sample_time_ms: 5672.146\n",
+      "    update_time_ms: 46.215\n",
+      "  timestamp: 1604232084\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3397632\n",
+      "  training_iteration: 21\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     21 |          432.505 | 3397632 |  44.4626 |              46.8571 |              15.7347 |            104.026 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1266.4863559173157\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-01-46\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.8470199450196\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.57447720270771\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1620\n",
+      "  episodes_total: 34194\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.43294235815604526\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005431869920964043\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009014388362023359\n",
+      "        total_loss: 0.08529840596020222\n",
+      "        vf_explained_var: 0.9991478323936462\n",
+      "        vf_loss: 0.09398608033855756\n",
+      "    num_steps_sampled: 3559424\n",
+      "    num_steps_trained: 3559424\n",
+      "  iterations_since_restore: 22\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 24.592\n",
+      "    gpu_util_percent0: 0.35\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.572\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1501333983360748\n",
+      "    mean_env_wait_ms: 0.6494934869624449\n",
+      "    mean_inference_ms: 4.146224608744544\n",
+      "    mean_raw_obs_processing_ms: 0.3887246826845676\n",
+      "  time_since_restore: 453.3322539329529\n",
+      "  time_this_iter_s: 20.82751750946045\n",
+      "  time_total_s: 453.3322539329529\n",
+      "  timers:\n",
+      "    learn_throughput: 11039.758\n",
+      "    learn_time_ms: 14655.394\n",
+      "    sample_throughput: 28584.579\n",
+      "    sample_time_ms: 5660.115\n",
+      "    update_time_ms: 47.568\n",
+      "  timestamp: 1604232106\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3559424\n",
+      "  training_iteration: 22\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     22 |          453.332 | 3559424 |  44.5745 |              46.8571 |              15.7347 |            103.847 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1264.481222756231\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-02-07\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.68064083956682\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.67719666296796\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1634\n",
+      "  episodes_total: 35828\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4028966749707858\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0056398319235692424\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010392234045866644\n",
+      "        total_loss: 0.08119491549829642\n",
+      "        vf_explained_var: 0.9991843700408936\n",
+      "        vf_loss: 0.0912246151516835\n",
+      "    num_steps_sampled: 3721216\n",
+      "    num_steps_trained: 3721216\n",
+      "  iterations_since_restore: 23\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.024999999999995\n",
+      "    gpu_util_percent0: 0.36624999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14995601669875397\n",
+      "    mean_env_wait_ms: 0.6495352227224097\n",
+      "    mean_inference_ms: 4.137711997351269\n",
+      "    mean_raw_obs_processing_ms: 0.38814230126504\n",
+      "  time_since_restore: 473.85256695747375\n",
+      "  time_this_iter_s: 20.520313024520874\n",
+      "  time_total_s: 473.85256695747375\n",
+      "  timers:\n",
+      "    learn_throughput: 11045.845\n",
+      "    learn_time_ms: 14647.318\n",
+      "    sample_throughput: 28580.616\n",
+      "    sample_time_ms: 5660.9\n",
+      "    update_time_ms: 49.009\n",
+      "  timestamp: 1604232127\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3721216\n",
+      "  training_iteration: 23\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     23 |          473.853 | 3721216 |  44.6772 |              46.8571 |              15.7347 |            103.681 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1262.6683067707777\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-02-28\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.53063895715354\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.77006117651676\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1608\n",
+      "  episodes_total: 37436\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3745071937640508\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005321652473260959\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007234078652497071\n",
+      "        total_loss: 0.05749547202140093\n",
+      "        vf_explained_var: 0.9994208812713623\n",
+      "        vf_loss: 0.06438463802138965\n",
+      "    num_steps_sampled: 3883008\n",
+      "    num_steps_trained: 3883008\n",
+      "  iterations_since_restore: 24\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 24.864\n",
+      "    gpu_util_percent0: 0.39199999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14979390065628823\n",
+      "    mean_env_wait_ms: 0.649588420666768\n",
+      "    mean_inference_ms: 4.1299192587977664\n",
+      "    mean_raw_obs_processing_ms: 0.38760946260698614\n",
+      "  time_since_restore: 494.24922704696655\n",
+      "  time_this_iter_s: 20.396660089492798\n",
+      "  time_total_s: 494.24922704696655\n",
+      "  timers:\n",
+      "    learn_throughput: 11054.341\n",
+      "    learn_time_ms: 14636.061\n",
+      "    sample_throughput: 28685.318\n",
+      "    sample_time_ms: 5640.237\n",
+      "    update_time_ms: 42.265\n",
+      "  timestamp: 1604232148\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3883008\n",
+      "  training_iteration: 24\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "2020-11-01 12:02:29,652\tWARNING util.py:136 -- The `process_trial` operation took 0.5228226184844971 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     24 |          494.249 | 3883008 |  44.7701 |              46.8571 |              15.7347 |            103.531 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1261.0109236371095\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-02-50\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.39151595880936\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.854644767892296\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1602\n",
+      "  episodes_total: 39038\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3481475959221522\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004828551318496466\n",
+      "        model: {}\n",
+      "        policy_loss: -0.0070124387663478656\n",
+      "        total_loss: 0.06740419659763575\n",
+      "        vf_explained_var: 0.9993410706520081\n",
+      "        vf_loss: 0.07410785431663196\n",
+      "    num_steps_sampled: 4044800\n",
+      "    num_steps_trained: 4044800\n",
+      "  iterations_since_restore: 25\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 24.944000000000003\n",
+      "    gpu_util_percent0: 0.3452\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14964195104865902\n",
+      "    mean_env_wait_ms: 0.6496402901027807\n",
+      "    mean_inference_ms: 4.122656867380491\n",
+      "    mean_raw_obs_processing_ms: 0.3871109943323948\n",
+      "  time_since_restore: 514.7466752529144\n",
+      "  time_this_iter_s: 20.497448205947876\n",
+      "  time_total_s: 514.7466752529144\n",
+      "  timers:\n",
+      "    learn_throughput: 11049.552\n",
+      "    learn_time_ms: 14642.403\n",
+      "    sample_throughput: 28661.043\n",
+      "    sample_time_ms: 5645.014\n",
+      "    update_time_ms: 44.89\n",
+      "  timestamp: 1604232170\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4044800\n",
+      "  training_iteration: 25\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "2020-11-01 12:02:51,023\tWARNING util.py:136 -- The `process_trial` operation took 0.5479519367218018 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     25 |          514.747 | 4044800 |  44.8546 |              46.8571 |              15.7347 |            103.392 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1259.4838947990543\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-03-11\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.26077543790592\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 44.933213572774115\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1610\n",
+      "  episodes_total: 40648\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.32285959521929425\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005153231516790886\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006437089536727096\n",
+      "        total_loss: 0.04760071821510792\n",
+      "        vf_explained_var: 0.9995192885398865\n",
+      "        vf_loss: 0.05394157860428095\n",
+      "    num_steps_sampled: 4206592\n",
+      "    num_steps_trained: 4206592\n",
+      "  iterations_since_restore: 26\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.183333333333334\n",
+      "    gpu_util_percent0: 0.30583333333333335\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14949842842548025\n",
+      "    mean_env_wait_ms: 0.6496982049535759\n",
+      "    mean_inference_ms: 4.115822249881849\n",
+      "    mean_raw_obs_processing_ms: 0.3866408622949027\n",
+      "  time_since_restore: 535.2055022716522\n",
+      "  time_this_iter_s: 20.458827018737793\n",
+      "  time_total_s: 535.2055022716522\n",
+      "  timers:\n",
+      "    learn_throughput: 11044.133\n",
+      "    learn_time_ms: 14649.588\n",
+      "    sample_throughput: 28693.76\n",
+      "    sample_time_ms: 5638.578\n",
+      "    update_time_ms: 44.672\n",
+      "  timestamp: 1604232191\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4206592\n",
+      "  training_iteration: 26\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "2020-11-01 12:03:12,271\tWARNING util.py:136 -- The `process_trial` operation took 0.5345759391784668 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     26 |          535.206 | 4206592 |  44.9332 |              46.8571 |              15.7347 |            103.261 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1258.0401912516568\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-03-32\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.137958758986\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 45.007320067641125\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1640\n",
+      "  episodes_total: 42288\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.2982073624928792\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004597992869094014\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007848733845700432\n",
+      "        total_loss: 0.03614849457517266\n",
+      "        vf_explained_var: 0.9996141791343689\n",
+      "        vf_loss: 0.043916432497402035\n",
+      "    num_steps_sampled: 4368384\n",
+      "    num_steps_trained: 4368384\n",
+      "  iterations_since_restore: 27\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 24.736\n",
+      "    gpu_util_percent0: 0.4024000000000001\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14936013846680316\n",
+      "    mean_env_wait_ms: 0.6497567301190108\n",
+      "    mean_inference_ms: 4.109265721932972\n",
+      "    mean_raw_obs_processing_ms: 0.38618524014647837\n",
+      "  time_since_restore: 555.6780240535736\n",
+      "  time_this_iter_s: 20.472521781921387\n",
+      "  time_total_s: 555.6780240535736\n",
+      "  timers:\n",
+      "    learn_throughput: 11047.092\n",
+      "    learn_time_ms: 14645.664\n",
+      "    sample_throughput: 28676.643\n",
+      "    sample_time_ms: 5641.943\n",
+      "    update_time_ms: 36.998\n",
+      "  timestamp: 1604232212\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4368384\n",
+      "  training_iteration: 27\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "2020-11-01 12:03:33,510\tWARNING util.py:136 -- The `process_trial` operation took 0.567908525466919 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     27 |          555.678 | 4368384 |  45.0073 |              46.8571 |              15.7347 |            103.138 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1256.7130644903914\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-03-53\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.02484797412713\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 45.07519232440738\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1619\n",
+      "  episodes_total: 43907\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.27154965202013653\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004386523951931546\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006109707096281151\n",
+      "        total_loss: 0.029498847822348278\n",
+      "        vf_explained_var: 0.9996840357780457\n",
+      "        vf_loss: 0.03563466699173053\n",
+      "    num_steps_sampled: 4530176\n",
+      "    num_steps_trained: 4530176\n",
+      "  iterations_since_restore: 28\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.215999999999998\n",
+      "    gpu_util_percent0: 0.35719999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14923164336873793\n",
+      "    mean_env_wait_ms: 0.6498215067723312\n",
+      "    mean_inference_ms: 4.103192802934885\n",
+      "    mean_raw_obs_processing_ms: 0.3857616555198185\n",
+      "  time_since_restore: 576.108469247818\n",
+      "  time_this_iter_s: 20.430445194244385\n",
+      "  time_total_s: 576.108469247818\n",
+      "  timers:\n",
+      "    learn_throughput: 11053.539\n",
+      "    learn_time_ms: 14637.122\n",
+      "    sample_throughput: 28704.812\n",
+      "    sample_time_ms: 5636.407\n",
+      "    update_time_ms: 34.761\n",
+      "  timestamp: 1604232233\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4530176\n",
+      "  training_iteration: 28\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "2020-11-01 12:03:54,833\tWARNING util.py:136 -- The `process_trial` operation took 0.5623390674591064 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     28 |          576.108 | 4530176 |  45.0752 |              46.8571 |              15.7347 |            103.025 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1255.498240520806\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-04-15\n",
+      "  done: false\n",
+      "  episode_len_mean: 102.92078315900501\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 45.13765263071036\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1601\n",
+      "  episodes_total: 45508\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.012500000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.25443976496656734\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004423999693244696\n",
+      "        model: {}\n",
+      "        policy_loss: -0.005417319412420814\n",
+      "        total_loss: 0.024296301572273176\n",
+      "        vf_explained_var: 0.9997418522834778\n",
+      "        vf_loss: 0.02978554057578246\n",
+      "    num_steps_sampled: 4691968\n",
+      "    num_steps_trained: 4691968\n",
+      "  iterations_since_restore: 29\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.112\n",
+      "    gpu_util_percent0: 0.33520000000000005\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1491126560484596\n",
+      "    mean_env_wait_ms: 0.6498944683718904\n",
+      "    mean_inference_ms: 4.097513752031446\n",
+      "    mean_raw_obs_processing_ms: 0.38536978766235913\n",
+      "  time_since_restore: 596.6098058223724\n",
+      "  time_this_iter_s: 20.501336574554443\n",
+      "  time_total_s: 596.6098058223724\n",
+      "  timers:\n",
+      "    learn_throughput: 11066.443\n",
+      "    learn_time_ms: 14620.054\n",
+      "    sample_throughput: 28671.129\n",
+      "    sample_time_ms: 5643.029\n",
+      "    update_time_ms: 27.975\n",
+      "  timestamp: 1604232255\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4691968\n",
+      "  training_iteration: 29\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "2020-11-01 12:04:16,277\tWARNING util.py:136 -- The `process_trial` operation took 0.5899343490600586 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | RUNNING  | 172.17.0.4:20230 |     29 |           596.61 | 4691968 |  45.1377 |              46.8571 |              15.7347 |            102.921 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_ed52d_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1737\n",
+      "    time_step_mean: 1254.3588893845729\n",
+      "    time_step_min: 1222\n",
+      "  date: 2020-11-01_12-04-36\n",
+      "  done: true\n",
+      "  episode_len_mean: 102.82308492348184\n",
+      "  episode_reward_max: 46.857142857142904\n",
+      "  episode_reward_mean: 45.196090857543105\n",
+      "  episode_reward_min: 15.734693877551013\n",
+      "  episodes_this_iter: 1605\n",
+      "  episodes_total: 47113\n",
+      "  experiment_id: 620cee76ed6f483492f5b5ea167d8862\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.006250000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.23119975750645003\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004294859090199073\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006582304151379503\n",
+      "        total_loss: 0.016346099126773577\n",
+      "        vf_explained_var: 0.9998031258583069\n",
+      "        vf_loss: 0.02301716012880206\n",
+      "    num_steps_sampled: 4853760\n",
+      "    num_steps_trained: 4853760\n",
+      "  iterations_since_restore: 30\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.433333333333334\n",
+      "    gpu_util_percent0: 0.3558333333333333\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 20230\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1489996674476156\n",
+      "    mean_env_wait_ms: 0.6499679628512286\n",
+      "    mean_inference_ms: 4.0921381946019215\n",
+      "    mean_raw_obs_processing_ms: 0.38499719572571234\n",
+      "  time_since_restore: 616.9446895122528\n",
+      "  time_this_iter_s: 20.33488368988037\n",
+      "  time_total_s: 616.9446895122528\n",
+      "  timers:\n",
+      "    learn_throughput: 11076.785\n",
+      "    learn_time_ms: 14606.404\n",
+      "    sample_throughput: 28687.763\n",
+      "    sample_time_ms: 5639.757\n",
+      "    update_time_ms: 27.238\n",
+      "  timestamp: 1604232276\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4853760\n",
+      "  training_iteration: 30\n",
+      "  trial_id: ed52d_00000\n",
+      "  \n",
+      "2020-11-01 12:04:37,528\tWARNING util.py:136 -- The `process_trial` operation took 0.6967248916625977 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | TERMINATED |       |     30 |          616.945 | 4853760 |  45.1961 |              46.8571 |              15.7347 |            102.823 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.2/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.59 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_ed52d_00000 | TERMINATED |       |     30 |          616.945 | 4853760 |  45.1961 |              46.8571 |              15.7347 |            102.823 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 20006\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201101_115353-kqo0l7if/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201101_115353-kqo0l7if/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min 1222\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step 7\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime 645\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp 1604232278\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max 1737\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean 1254.35889\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max 46.85714\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min 15.73469\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean 45.19609\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total 47113\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration 30\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step ‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mmisty-sweep-1\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/kqo0l7if\u001b[0m\n",
+      "2020-11-01 12:04:48,722 - wandb.wandb_agent - INFO - Cleaning up finished run: kqo0l7if\n",
+      "2020-11-01 12:04:49,030 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-01 12:04:49,030 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/la/la12.txt\n",
+      "2020-11-01 12:04:49,033 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/la/la12.txt\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "2020-11-01 12:04:54,049 - wandb.wandb_agent - INFO - Running runs: ['tkx2xsoj']\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mdecent-sweep-2\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/9xhkl8my\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/tkx2xsoj\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201101_120450-tkx2xsoj\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
+      "\n",
+      "2020-11-01 12:04:54,756\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "\n",
+      "\n",
+      "\u001b[2m\u001b[36m(pid=52265)\u001b[0m 2020-11-01 12:04:57,569\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=52167)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52167)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52239)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52239)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52176)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52176)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52249)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52249)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52260)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52260)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52258)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52258)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52169)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52169)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52253)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52253)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52221)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52221)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52215)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52215)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52275)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52275)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52158)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52158)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52224)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52224)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52256)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52256)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52219)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52219)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52231)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52231)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52262)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52262)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52209)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52209)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52236)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52236)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52151)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52151)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52269)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52269)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52220)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52220)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52161)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52161)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52156)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52156)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52229)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52229)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52153)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52153)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52279)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52279)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52267)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52267)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52243)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52243)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52172)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52172)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52235)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52235)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52154)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52154)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52233)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52233)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52164)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52164)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52250)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52250)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52202)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52202)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52166)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52166)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52242)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52242)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52150)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52150)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52225)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52225)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52148)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52148)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52162)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52162)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52163)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52163)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52149)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52149)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52177)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52177)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52261)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52261)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52155)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52155)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52157)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52157)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52270)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52270)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52234)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52234)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52173)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52173)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52181)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52181)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52230)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52230)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52168)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52168)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52218)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52218)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52223)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52223)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52171)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52171)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52180)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52180)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52228)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52228)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52251)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52251)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52226)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52226)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52216)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52216)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52184)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52184)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52237)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52237)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52227)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52227)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52206)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52206)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52259)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52259)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52152)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52152)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52273)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52273)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52212)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52212)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52204)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52204)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52247)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52247)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52165)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52165)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52222)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52222)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52257)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52257)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52147)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52147)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52277)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52277)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52255)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52255)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=52160)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=52160)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1270.6712550607288\n",
+      "    time_step_min: 1054\n",
+      "  date: 2020-11-01_12-05-25\n",
+      "  done: false\n",
+      "  episode_len_mean: 116.74350904799371\n",
+      "  episode_reward_max: 41.65306122448979\n",
+      "  episode_reward_mean: 30.6028275983879\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1271\n",
+      "  episodes_total: 1271\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1384523808956146\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006007326611628135\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006815222654646884\n",
+      "        total_loss: 36.897240002950035\n",
+      "        vf_explained_var: 0.7482123374938965\n",
+      "        vf_loss: 36.903422355651855\n",
+      "    num_steps_sampled: 161792\n",
+      "    num_steps_trained: 161792\n",
+      "  iterations_since_restore: 1\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 32.62222222222222\n",
+      "    gpu_util_percent0: 0.40222222222222226\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.4333333333333336\n",
+      "    vram_util_percent0: 0.08172381958869332\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16969461340934525\n",
+      "    mean_env_wait_ms: 0.6709388448442125\n",
+      "    mean_inference_ms: 5.213710332296094\n",
+      "    mean_raw_obs_processing_ms: 0.4500044725167772\n",
+      "  time_since_restore: 22.275667190551758\n",
+      "  time_this_iter_s: 22.275667190551758\n",
+      "  time_total_s: 22.275667190551758\n",
+      "  timers:\n",
+      "    learn_throughput: 11194.703\n",
+      "    learn_time_ms: 14452.55\n",
+      "    sample_throughput: 20900.055\n",
+      "    sample_time_ms: 7741.224\n",
+      "    update_time_ms: 42.347\n",
+      "  timestamp: 1604232325\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 161792\n",
+      "  training_iteration: 1\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.3/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      1 |          22.2757 | 161792 |  30.6028 |              41.6531 |              10.2755 |            116.744 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1252.1281568036186\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-05-46\n",
+      "  done: false\n",
+      "  episode_len_mean: 116.04722945332837\n",
+      "  episode_reward_max: 42.41836734693876\n",
+      "  episode_reward_mean: 31.48901419995294\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1418\n",
+      "  episodes_total: 2689\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1159119109312694\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.010711442679166794\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012819082303982062\n",
+      "        total_loss: 9.95718256632487\n",
+      "        vf_explained_var: 0.8801858425140381\n",
+      "        vf_loss: 9.968417485555014\n",
+      "    num_steps_sampled: 323584\n",
+      "    num_steps_trained: 323584\n",
+      "  iterations_since_restore: 2\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 29.4\n",
+      "    gpu_util_percent0: 0.3830769230769231\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5076923076923077\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1663996838490878\n",
+      "    mean_env_wait_ms: 0.6661199624654368\n",
+      "    mean_inference_ms: 5.065247663215141\n",
+      "    mean_raw_obs_processing_ms: 0.443431096131331\n",
+      "  time_since_restore: 43.45249390602112\n",
+      "  time_this_iter_s: 21.17682671546936\n",
+      "  time_total_s: 43.45249390602112\n",
+      "  timers:\n",
+      "    learn_throughput: 11200.574\n",
+      "    learn_time_ms: 14444.974\n",
+      "    sample_throughput: 22507.211\n",
+      "    sample_time_ms: 7188.452\n",
+      "    update_time_ms: 40.119\n",
+      "  timestamp: 1604232346\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 323584\n",
+      "  training_iteration: 2\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      2 |          43.4525 | 323584 |   31.489 |              42.4184 |              10.2755 |            116.047 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1229.5523227383862\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-06-06\n",
+      "  done: false\n",
+      "  episode_len_mean: 114.94789142026175\n",
+      "  episode_reward_max: 42.41836734693877\n",
+      "  episode_reward_mean: 32.67046455033783\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1437\n",
+      "  episodes_total: 4126\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0916709005832672\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.011045165204753479\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012844632374860035\n",
+      "        total_loss: 6.921001553535461\n",
+      "        vf_explained_var: 0.9159042239189148\n",
+      "        vf_loss: 6.9321829080581665\n",
+      "    num_steps_sampled: 485376\n",
+      "    num_steps_trained: 485376\n",
+      "  iterations_since_restore: 3\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 28.06\n",
+      "    gpu_util_percent0: 0.4312\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.516\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16376589972908362\n",
+      "    mean_env_wait_ms: 0.6617033666285996\n",
+      "    mean_inference_ms: 4.920294910569432\n",
+      "    mean_raw_obs_processing_ms: 0.43664206722952675\n",
+      "  time_since_restore: 63.84919023513794\n",
+      "  time_this_iter_s: 20.39669632911682\n",
+      "  time_total_s: 63.84919023513794\n",
+      "  timers:\n",
+      "    learn_throughput: 11232.084\n",
+      "    learn_time_ms: 14404.451\n",
+      "    sample_throughput: 23846.064\n",
+      "    sample_time_ms: 6784.851\n",
+      "    update_time_ms: 37.748\n",
+      "  timestamp: 1604232366\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 485376\n",
+      "  training_iteration: 3\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      3 |          63.8492 | 485376 |  32.6705 |              42.4184 |              10.2755 |            114.948 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1208.264137437366\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-06-27\n",
+      "  done: false\n",
+      "  episode_len_mean: 113.67087482219061\n",
+      "  episode_reward_max: 42.41836734693879\n",
+      "  episode_reward_mean: 33.766906406944\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1498\n",
+      "  episodes_total: 5624\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.064699391523997\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.010414493580659231\n",
+      "        model: {}\n",
+      "        policy_loss: -0.015563213809703788\n",
+      "        total_loss: 5.088392059008281\n",
+      "        vf_explained_var: 0.9388461709022522\n",
+      "        vf_loss: 5.102404753367106\n",
+      "    num_steps_sampled: 647168\n",
+      "    num_steps_trained: 647168\n",
+      "  iterations_since_restore: 4\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.656000000000002\n",
+      "    gpu_util_percent0: 0.4268\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5120000000000005\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16163926361569136\n",
+      "    mean_env_wait_ms: 0.6582592695889212\n",
+      "    mean_inference_ms: 4.803322913432019\n",
+      "    mean_raw_obs_processing_ms: 0.43060689585891204\n",
+      "  time_since_restore: 84.06805443763733\n",
+      "  time_this_iter_s: 20.21886420249939\n",
+      "  time_total_s: 84.06805443763733\n",
+      "  timers:\n",
+      "    learn_throughput: 11266.122\n",
+      "    learn_time_ms: 14360.931\n",
+      "    sample_throughput: 24659.344\n",
+      "    sample_time_ms: 6561.083\n",
+      "    update_time_ms: 34.947\n",
+      "  timestamp: 1604232387\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 647168\n",
+      "  training_iteration: 4\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      4 |          84.0681 | 647168 |  33.7669 |              42.4184 |              10.2755 |            113.671 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1189.914229193161\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-06-47\n",
+      "  done: false\n",
+      "  episode_len_mean: 112.46028398706594\n",
+      "  episode_reward_max: 42.4183673469388\n",
+      "  episode_reward_mean: 34.71768564026201\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1489\n",
+      "  episodes_total: 7113\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0440024832884471\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009285129917164644\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013422702313012755\n",
+      "        total_loss: 3.5668797492980957\n",
+      "        vf_explained_var: 0.956657886505127\n",
+      "        vf_loss: 3.5789673924446106\n",
+      "    num_steps_sampled: 808960\n",
+      "    num_steps_trained: 808960\n",
+      "  iterations_since_restore: 5\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.128\n",
+      "    gpu_util_percent0: 0.3836\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.508\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15996949149852113\n",
+      "    mean_env_wait_ms: 0.6557683164407656\n",
+      "    mean_inference_ms: 4.714004318455946\n",
+      "    mean_raw_obs_processing_ms: 0.42569876525023526\n",
+      "  time_since_restore: 104.25618076324463\n",
+      "  time_this_iter_s: 20.1881263256073\n",
+      "  time_total_s: 104.25618076324463\n",
+      "  timers:\n",
+      "    learn_throughput: 11286.122\n",
+      "    learn_time_ms: 14335.482\n",
+      "    sample_throughput: 25221.502\n",
+      "    sample_time_ms: 6414.844\n",
+      "    update_time_ms: 36.706\n",
+      "  timestamp: 1604232407\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 808960\n",
+      "  training_iteration: 5\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      5 |          104.256 | 808960 |  34.7177 |              42.4184 |              10.2755 |             112.46 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1173.5402272200324\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-07-08\n",
+      "  done: false\n",
+      "  episode_len_mean: 111.30085430616485\n",
+      "  episode_reward_max: 42.4183673469388\n",
+      "  episode_reward_mean: 35.54994369024451\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1549\n",
+      "  episodes_total: 8662\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.00481882194678\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00909763171027104\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013866825815057382\n",
+      "        total_loss: 2.7730772693951926\n",
+      "        vf_explained_var: 0.9670748114585876\n",
+      "        vf_loss: 2.785626987616221\n",
+      "    num_steps_sampled: 970752\n",
+      "    num_steps_trained: 970752\n",
+      "  iterations_since_restore: 6\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.65416666666667\n",
+      "    gpu_util_percent0: 0.4445833333333334\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5083333333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1585845452097359\n",
+      "    mean_env_wait_ms: 0.6539711743603752\n",
+      "    mean_inference_ms: 4.639796008274598\n",
+      "    mean_raw_obs_processing_ms: 0.4215553460221708\n",
+      "  time_since_restore: 124.31111264228821\n",
+      "  time_this_iter_s: 20.05493187904358\n",
+      "  time_total_s: 124.31111264228821\n",
+      "  timers:\n",
+      "    learn_throughput: 11300.348\n",
+      "    learn_time_ms: 14317.435\n",
+      "    sample_throughput: 25694.821\n",
+      "    sample_time_ms: 6296.677\n",
+      "    update_time_ms: 36.949\n",
+      "  timestamp: 1604232428\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 970752\n",
+      "  training_iteration: 6\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      6 |          124.311 | 970752 |  35.5499 |              42.4184 |              10.2755 |            111.301 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1160.6071287908626\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-07-28\n",
+      "  done: false\n",
+      "  episode_len_mean: 110.30445447409733\n",
+      "  episode_reward_max: 42.41836734693881\n",
+      "  episode_reward_mean: 36.22964990548809\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1530\n",
+      "  episodes_total: 10192\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9723203877607981\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008056929800659418\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013902826050374037\n",
+      "        total_loss: 2.177985966205597\n",
+      "        vf_explained_var: 0.9740824103355408\n",
+      "        vf_loss: 2.1907635927200317\n",
+      "    num_steps_sampled: 1132544\n",
+      "    num_steps_trained: 1132544\n",
+      "  iterations_since_restore: 7\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.691999999999997\n",
+      "    gpu_util_percent0: 0.4035999999999999\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.516\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15747431107692764\n",
+      "    mean_env_wait_ms: 0.652680726552872\n",
+      "    mean_inference_ms: 4.58049716107533\n",
+      "    mean_raw_obs_processing_ms: 0.4181133612914104\n",
+      "  time_since_restore: 144.8035752773285\n",
+      "  time_this_iter_s: 20.492462635040283\n",
+      "  time_total_s: 144.8035752773285\n",
+      "  timers:\n",
+      "    learn_throughput: 11282.551\n",
+      "    learn_time_ms: 14340.019\n",
+      "    sample_throughput: 25937.899\n",
+      "    sample_time_ms: 6237.668\n",
+      "    update_time_ms: 37.177\n",
+      "  timestamp: 1604232448\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1132544\n",
+      "  training_iteration: 7\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      7 |          144.804 | 1132544 |  36.2296 |              42.4184 |              10.2755 |            110.304 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1148.888252883383\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-07-49\n",
+      "  done: false\n",
+      "  episode_len_mean: 109.45600885784856\n",
+      "  episode_reward_max: 42.41836734693881\n",
+      "  episode_reward_mean: 36.816230060715206\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1549\n",
+      "  episodes_total: 11741\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9466134955485662\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007931554379562536\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013606403217030069\n",
+      "        total_loss: 1.6076118151346843\n",
+      "        vf_explained_var: 0.9807720184326172\n",
+      "        vf_loss: 1.6201052069664001\n",
+      "    num_steps_sampled: 1294336\n",
+      "    num_steps_trained: 1294336\n",
+      "  iterations_since_restore: 8\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.764000000000006\n",
+      "    gpu_util_percent0: 0.38\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15654498685345614\n",
+      "    mean_env_wait_ms: 0.6516967139634099\n",
+      "    mean_inference_ms: 4.530832158888852\n",
+      "    mean_raw_obs_processing_ms: 0.4150856418377815\n",
+      "  time_since_restore: 165.37314867973328\n",
+      "  time_this_iter_s: 20.569573402404785\n",
+      "  time_total_s: 165.37314867973328\n",
+      "  timers:\n",
+      "    learn_throughput: 11279.608\n",
+      "    learn_time_ms: 14343.761\n",
+      "    sample_throughput: 26039.205\n",
+      "    sample_time_ms: 6213.4\n",
+      "    update_time_ms: 37.773\n",
+      "  timestamp: 1604232469\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1294336\n",
+      "  training_iteration: 8\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      8 |          165.373 | 1294336 |  36.8162 |              42.4184 |              10.2755 |            109.456 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1139.0165774998115\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-08-10\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.7133839332682\n",
+      "  episode_reward_max: 42.41836734693881\n",
+      "  episode_reward_mean: 37.319474329147006\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1566\n",
+      "  episodes_total: 13307\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9164896359046301\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007841601696175834\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011578070591591919\n",
+      "        total_loss: 1.2525162895520527\n",
+      "        vf_explained_var: 0.985228955745697\n",
+      "        vf_loss: 1.262984275817871\n",
+      "    num_steps_sampled: 1456128\n",
+      "    num_steps_trained: 1456128\n",
+      "  iterations_since_restore: 9\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.692000000000004\n",
+      "    gpu_util_percent0: 0.4428\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15575594110735325\n",
+      "    mean_env_wait_ms: 0.6509075806283173\n",
+      "    mean_inference_ms: 4.488645311807507\n",
+      "    mean_raw_obs_processing_ms: 0.41243497179424105\n",
+      "  time_since_restore: 185.73600935935974\n",
+      "  time_this_iter_s: 20.362860679626465\n",
+      "  time_total_s: 185.73600935935974\n",
+      "  timers:\n",
+      "    learn_throughput: 11283.252\n",
+      "    learn_time_ms: 14339.128\n",
+      "    sample_throughput: 26176.544\n",
+      "    sample_time_ms: 6180.801\n",
+      "    update_time_ms: 37.693\n",
+      "  timestamp: 1604232490\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1456128\n",
+      "  training_iteration: 9\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |      9 |          185.736 | 1456128 |  37.3195 |              42.4184 |              10.2755 |            108.713 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1130.5417816982022\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-08-30\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.05662658695506\n",
+      "  episode_reward_max: 42.41836734693881\n",
+      "  episode_reward_mean: 37.75363452292987\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1580\n",
+      "  episodes_total: 14887\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.879222497344017\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007466738965983192\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010042240721910881\n",
+      "        total_loss: 1.0435242255528767\n",
+      "        vf_explained_var: 0.9878211617469788\n",
+      "        vf_loss: 1.0525127152601879\n",
+      "    num_steps_sampled: 1617920\n",
+      "    num_steps_trained: 1617920\n",
+      "  iterations_since_restore: 10\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.332000000000004\n",
+      "    gpu_util_percent0: 0.3956\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15508348116310283\n",
+      "    mean_env_wait_ms: 0.6503758051109494\n",
+      "    mean_inference_ms: 4.452355943495541\n",
+      "    mean_raw_obs_processing_ms: 0.41015056238268827\n",
+      "  time_since_restore: 206.0984218120575\n",
+      "  time_this_iter_s: 20.362412452697754\n",
+      "  time_total_s: 206.0984218120575\n",
+      "  timers:\n",
+      "    learn_throughput: 11288.763\n",
+      "    learn_time_ms: 14332.129\n",
+      "    sample_throughput: 26298.441\n",
+      "    sample_time_ms: 6152.152\n",
+      "    update_time_ms: 42.189\n",
+      "  timestamp: 1604232510\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1617920\n",
+      "  training_iteration: 10\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     10 |          206.098 | 1617920 |  37.7536 |              42.4184 |              10.2755 |            108.057 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1123.1655117918795\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-08-51\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.44680980106745\n",
+      "  episode_reward_max: 42.41836734693881\n",
+      "  episode_reward_mean: 38.12998569151096\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1601\n",
+      "  episodes_total: 16488\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.852480560541153\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006807499914430082\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010430590346610794\n",
+      "        total_loss: 0.7860654095808665\n",
+      "        vf_explained_var: 0.9908618927001953\n",
+      "        vf_loss: 0.7955607374509176\n",
+      "    num_steps_sampled: 1779712\n",
+      "    num_steps_trained: 1779712\n",
+      "  iterations_since_restore: 11\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.468000000000004\n",
+      "    gpu_util_percent0: 0.3796\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15448994642998015\n",
+      "    mean_env_wait_ms: 0.6499845600676837\n",
+      "    mean_inference_ms: 4.420542043950926\n",
+      "    mean_raw_obs_processing_ms: 0.408110786931221\n",
+      "  time_since_restore: 226.6547131538391\n",
+      "  time_this_iter_s: 20.556291341781616\n",
+      "  time_total_s: 226.6547131538391\n",
+      "  timers:\n",
+      "    learn_throughput: 11290.905\n",
+      "    learn_time_ms: 14329.409\n",
+      "    sample_throughput: 27104.621\n",
+      "    sample_time_ms: 5969.167\n",
+      "    update_time_ms: 41.488\n",
+      "  timestamp: 1604232531\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1779712\n",
+      "  training_iteration: 11\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     11 |          226.655 | 1779712 |    38.13 |              42.4184 |              10.2755 |            107.447 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1116.8649711879432\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-09-12\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.92020570670206\n",
+      "  episode_reward_max: 42.41836734693881\n",
+      "  episode_reward_mean: 38.44685289510628\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1596\n",
+      "  episodes_total: 18084\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8233269800742468\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00662518401319782\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011712064248664925\n",
+      "        total_loss: 0.6785962084929148\n",
+      "        vf_explained_var: 0.9921655654907227\n",
+      "        vf_loss: 0.6893948912620544\n",
+      "    num_steps_sampled: 1941504\n",
+      "    num_steps_trained: 1941504\n",
+      "  iterations_since_restore: 12\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.354166666666668\n",
+      "    gpu_util_percent0: 0.39875\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15396759428958923\n",
+      "    mean_env_wait_ms: 0.6497269679106826\n",
+      "    mean_inference_ms: 4.392758580495196\n",
+      "    mean_raw_obs_processing_ms: 0.4063257369659057\n",
+      "  time_since_restore: 247.07435011863708\n",
+      "  time_this_iter_s: 20.419636964797974\n",
+      "  time_total_s: 247.07435011863708\n",
+      "  timers:\n",
+      "    learn_throughput: 11289.741\n",
+      "    learn_time_ms: 14330.887\n",
+      "    sample_throughput: 27482.894\n",
+      "    sample_time_ms: 5887.007\n",
+      "    update_time_ms: 40.889\n",
+      "  timestamp: 1604232552\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1941504\n",
+      "  training_iteration: 12\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     12 |          247.074 | 1941504 |  38.4469 |              42.4184 |              10.2755 |             106.92 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1111.391848572737\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-09-33\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.44390268677942\n",
+      "  episode_reward_max: 42.418367346938815\n",
+      "  episode_reward_mean: 38.727613885718846\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1605\n",
+      "  episodes_total: 19689\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7883199751377106\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006895307102240622\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01035230930817003\n",
+      "        total_loss: 0.501528188586235\n",
+      "        vf_explained_var: 0.9942240118980408\n",
+      "        vf_loss: 0.5108955974380175\n",
+      "    num_steps_sampled: 2103296\n",
+      "    num_steps_trained: 2103296\n",
+      "  iterations_since_restore: 13\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.084\n",
+      "    gpu_util_percent0: 0.40480000000000005\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15350402726485754\n",
+      "    mean_env_wait_ms: 0.6495522826808918\n",
+      "    mean_inference_ms: 4.367981018992163\n",
+      "    mean_raw_obs_processing_ms: 0.40472308429202836\n",
+      "  time_since_restore: 267.40077471733093\n",
+      "  time_this_iter_s: 20.326424598693848\n",
+      "  time_total_s: 267.40077471733093\n",
+      "  timers:\n",
+      "    learn_throughput: 11287.514\n",
+      "    learn_time_ms: 14333.714\n",
+      "    sample_throughput: 27563.917\n",
+      "    sample_time_ms: 5869.703\n",
+      "    update_time_ms: 41.691\n",
+      "  timestamp: 1604232573\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2103296\n",
+      "  training_iteration: 13\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     13 |          267.401 | 2103296 |  38.7276 |              42.4184 |              10.2755 |            106.444 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1106.5129543424084\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-09-53\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.01774397972116\n",
+      "  episode_reward_max: 42.418367346938815\n",
+      "  episode_reward_mean: 38.97570046184929\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1614\n",
+      "  episodes_total: 21303\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7583291182915369\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006845557557729383\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010322557670103075\n",
+      "        total_loss: 0.39304836342732113\n",
+      "        vf_explained_var: 0.9954751133918762\n",
+      "        vf_loss: 0.40238098055124283\n",
+      "    num_steps_sampled: 2265088\n",
+      "    num_steps_trained: 2265088\n",
+      "  iterations_since_restore: 14\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.124000000000002\n",
+      "    gpu_util_percent0: 0.4536\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15309019602292354\n",
+      "    mean_env_wait_ms: 0.6494461564466915\n",
+      "    mean_inference_ms: 4.34582608361679\n",
+      "    mean_raw_obs_processing_ms: 0.40327786899763196\n",
+      "  time_since_restore: 287.4316370487213\n",
+      "  time_this_iter_s: 20.03086233139038\n",
+      "  time_total_s: 287.4316370487213\n",
+      "  timers:\n",
+      "    learn_throughput: 11292.259\n",
+      "    learn_time_ms: 14327.692\n",
+      "    sample_throughput: 27660.58\n",
+      "    sample_time_ms: 5849.19\n",
+      "    update_time_ms: 42.894\n",
+      "  timestamp: 1604232593\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2265088\n",
+      "  training_iteration: 14\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     14 |          287.432 | 2265088 |  38.9757 |              42.4184 |              10.2755 |            106.018 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1102.2523617914626\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-10-14\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.64558951965066\n",
+      "  episode_reward_max: 42.418367346938815\n",
+      "  episode_reward_mean: 39.19350548079495\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1597\n",
+      "  episodes_total: 22900\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7275536010662714\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006344522737587492\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01266244207120811\n",
+      "        total_loss: 0.31657364467779797\n",
+      "        vf_explained_var: 0.9963433742523193\n",
+      "        vf_loss: 0.32833095143238705\n",
+      "    num_steps_sampled: 2426880\n",
+      "    num_steps_trained: 2426880\n",
+      "  iterations_since_restore: 15\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.668000000000003\n",
+      "    gpu_util_percent0: 0.4212\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15272256161153888\n",
+      "    mean_env_wait_ms: 0.6493956761565493\n",
+      "    mean_inference_ms: 4.3261627778248455\n",
+      "    mean_raw_obs_processing_ms: 0.40199333508455115\n",
+      "  time_since_restore: 308.00055265426636\n",
+      "  time_this_iter_s: 20.568915605545044\n",
+      "  time_total_s: 308.00055265426636\n",
+      "  timers:\n",
+      "    learn_throughput: 11279.674\n",
+      "    learn_time_ms: 14343.677\n",
+      "    sample_throughput: 27657.34\n",
+      "    sample_time_ms: 5849.876\n",
+      "    update_time_ms: 42.541\n",
+      "  timestamp: 1604232614\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2426880\n",
+      "  training_iteration: 15\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     15 |          308.001 | 2426880 |  39.1935 |              42.4184 |              10.2755 |            105.646 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1098.492356115108\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-10-35\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.31371428571428\n",
+      "  episode_reward_max: 42.418367346938815\n",
+      "  episode_reward_mean: 39.386209912536444\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1600\n",
+      "  episodes_total: 24500\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6992116371790568\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00605107715819031\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010152409401295396\n",
+      "        total_loss: 0.2749015986919403\n",
+      "        vf_explained_var: 0.9968383312225342\n",
+      "        vf_loss: 0.28419339408477146\n",
+      "    num_steps_sampled: 2588672\n",
+      "    num_steps_trained: 2588672\n",
+      "  iterations_since_restore: 16\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.163999999999998\n",
+      "    gpu_util_percent0: 0.4179999999999999\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1523902557025731\n",
+      "    mean_env_wait_ms: 0.6493845108910767\n",
+      "    mean_inference_ms: 4.308344642074162\n",
+      "    mean_raw_obs_processing_ms: 0.4008263717279235\n",
+      "  time_since_restore: 328.0859045982361\n",
+      "  time_this_iter_s: 20.085351943969727\n",
+      "  time_total_s: 328.0859045982361\n",
+      "  timers:\n",
+      "    learn_throughput: 11277.087\n",
+      "    learn_time_ms: 14346.967\n",
+      "    sample_throughput: 27688.425\n",
+      "    sample_time_ms: 5843.308\n",
+      "    update_time_ms: 42.686\n",
+      "  timestamp: 1604232635\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2588672\n",
+      "  training_iteration: 16\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     16 |          328.086 | 2588672 |  39.3862 |              42.4184 |              10.2755 |            105.314 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1095.0764746490756\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-10-55\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.01325162772883\n",
+      "  episode_reward_max: 42.418367346938815\n",
+      "  episode_reward_mean: 39.561036900397845\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1610\n",
+      "  episodes_total: 26110\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6637826611598333\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006695269180151324\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012259619931379953\n",
+      "        total_loss: 0.2071586512029171\n",
+      "        vf_explained_var: 0.9976064562797546\n",
+      "        vf_loss: 0.21841111406683922\n",
+      "    num_steps_sampled: 2750464\n",
+      "    num_steps_trained: 2750464\n",
+      "  iterations_since_restore: 17\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.967999999999996\n",
+      "    gpu_util_percent0: 0.3992\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15208441102089912\n",
+      "    mean_env_wait_ms: 0.649415271515101\n",
+      "    mean_inference_ms: 4.292010650770931\n",
+      "    mean_raw_obs_processing_ms: 0.3997617754479261\n",
+      "  time_since_restore: 348.3640911579132\n",
+      "  time_this_iter_s: 20.278186559677124\n",
+      "  time_total_s: 348.3640911579132\n",
+      "  timers:\n",
+      "    learn_throughput: 11280.385\n",
+      "    learn_time_ms: 14342.773\n",
+      "    sample_throughput: 27802.66\n",
+      "    sample_time_ms: 5819.299\n",
+      "    update_time_ms: 42.587\n",
+      "  timestamp: 1604232655\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2750464\n",
+      "  training_iteration: 17\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     17 |          348.364 | 2750464 |   39.561 |              42.4184 |              10.2755 |            105.013 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1091.992488262911\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-11-16\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.74269638606363\n",
+      "  episode_reward_max: 42.41836734693882\n",
+      "  episode_reward_mean: 39.71753728541839\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1616\n",
+      "  episodes_total: 27726\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6395211120446523\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005430514691397548\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008808797846237818\n",
+      "        total_loss: 0.18516152476270994\n",
+      "        vf_explained_var: 0.9978885650634766\n",
+      "        vf_loss: 0.19320398072401682\n",
+      "    num_steps_sampled: 2912256\n",
+      "    num_steps_trained: 2912256\n",
+      "  iterations_since_restore: 18\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.428\n",
+      "    gpu_util_percent0: 0.4108\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15180253257231568\n",
+      "    mean_env_wait_ms: 0.6494706645035929\n",
+      "    mean_inference_ms: 4.277042903419588\n",
+      "    mean_raw_obs_processing_ms: 0.3987841767593947\n",
+      "  time_since_restore: 368.70942068099976\n",
+      "  time_this_iter_s: 20.345329523086548\n",
+      "  time_total_s: 368.70942068099976\n",
+      "  timers:\n",
+      "    learn_throughput: 11277.054\n",
+      "    learn_time_ms: 14347.01\n",
+      "    sample_throughput: 27960.312\n",
+      "    sample_time_ms: 5786.488\n",
+      "    update_time_ms: 42.249\n",
+      "  timestamp: 1604232676\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2912256\n",
+      "  training_iteration: 18\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     18 |          368.709 | 2912256 |  39.7175 |              42.4184 |              10.2755 |            104.743 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1089.2314356857796\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-11-37\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.499846693694\n",
+      "  episode_reward_max: 42.41836734693882\n",
+      "  episode_reward_mean: 39.85814856041556\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1627\n",
+      "  episodes_total: 29353\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6059375007947286\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006107187946327031\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009194978279992938\n",
+      "        total_loss: 0.15118268628915152\n",
+      "        vf_explained_var: 0.9982755184173584\n",
+      "        vf_loss: 0.15945919354756674\n",
+      "    num_steps_sampled: 3074048\n",
+      "    num_steps_trained: 3074048\n",
+      "  iterations_since_restore: 19\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.02\n",
+      "    gpu_util_percent0: 0.35119999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15154050336998873\n",
+      "    mean_env_wait_ms: 0.6495464583308167\n",
+      "    mean_inference_ms: 4.263205291197448\n",
+      "    mean_raw_obs_processing_ms: 0.39787967312168704\n",
+      "  time_since_restore: 389.13511419296265\n",
+      "  time_this_iter_s: 20.42569351196289\n",
+      "  time_total_s: 389.13511419296265\n",
+      "  timers:\n",
+      "    learn_throughput: 11265.913\n",
+      "    learn_time_ms: 14361.197\n",
+      "    sample_throughput: 28034.364\n",
+      "    sample_time_ms: 5771.203\n",
+      "    update_time_ms: 43.0\n",
+      "  timestamp: 1604232697\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3074048\n",
+      "  training_iteration: 19\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     19 |          389.135 | 3074048 |  39.8581 |              42.4184 |              10.2755 |              104.5 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1086.7530964007374\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-11-58\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.28143673891276\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 39.98449496404396\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1606\n",
+      "  episodes_total: 30959\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5802051573991776\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006146465195342898\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010908293537795544\n",
+      "        total_loss: 0.12315286882221699\n",
+      "        vf_explained_var: 0.9985630512237549\n",
+      "        vf_loss: 0.13312197600801787\n",
+      "    num_steps_sampled: 3235840\n",
+      "    num_steps_trained: 3235840\n",
+      "  iterations_since_restore: 20\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.708000000000002\n",
+      "    gpu_util_percent0: 0.35119999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15130250937481887\n",
+      "    mean_env_wait_ms: 0.649629966463628\n",
+      "    mean_inference_ms: 4.25060756388231\n",
+      "    mean_raw_obs_processing_ms: 0.39705657157981417\n",
+      "  time_since_restore: 409.49588918685913\n",
+      "  time_this_iter_s: 20.360774993896484\n",
+      "  time_total_s: 409.49588918685913\n",
+      "  timers:\n",
+      "    learn_throughput: 11247.919\n",
+      "    learn_time_ms: 14384.172\n",
+      "    sample_throughput: 28152.747\n",
+      "    sample_time_ms: 5746.935\n",
+      "    update_time_ms: 38.327\n",
+      "  timestamp: 1604232718\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3235840\n",
+      "  training_iteration: 20\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     20 |          409.496 | 3235840 |  39.9845 |              42.4184 |              10.2755 |            104.281 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1084.4941429669484\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-12-19\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.08316697890113\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.09885276551578\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1602\n",
+      "  episodes_total: 32561\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5567689687013626\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0057975016146277385\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010689061540081942\n",
+      "        total_loss: 0.10724692543347676\n",
+      "        vf_explained_var: 0.9987431168556213\n",
+      "        vf_loss: 0.11705487407743931\n",
+      "    num_steps_sampled: 3397632\n",
+      "    num_steps_trained: 3397632\n",
+      "  iterations_since_restore: 21\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.752000000000002\n",
+      "    gpu_util_percent0: 0.2972\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15108181784508506\n",
+      "    mean_env_wait_ms: 0.6497188533760437\n",
+      "    mean_inference_ms: 4.2389675381303915\n",
+      "    mean_raw_obs_processing_ms: 0.3962976370894028\n",
+      "  time_since_restore: 429.649621963501\n",
+      "  time_this_iter_s: 20.153732776641846\n",
+      "  time_total_s: 429.649621963501\n",
+      "  timers:\n",
+      "    learn_throughput: 11259.927\n",
+      "    learn_time_ms: 14368.833\n",
+      "    sample_throughput: 28275.485\n",
+      "    sample_time_ms: 5721.988\n",
+      "    update_time_ms: 38.431\n",
+      "  timestamp: 1604232739\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3397632\n",
+      "  training_iteration: 21\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     21 |           429.65 | 3397632 |  40.0989 |              42.4184 |              10.2755 |            104.083 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1082.431136496778\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-12-40\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.90098314606742\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.20364481818009\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1615\n",
+      "  episodes_total: 34176\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5254394511381785\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005307760516492029\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007776977017783793\n",
+      "        total_loss: 0.0964116957038641\n",
+      "        vf_explained_var: 0.9988983273506165\n",
+      "        vf_loss: 0.10338984616100788\n",
+      "    num_steps_sampled: 3559424\n",
+      "    num_steps_trained: 3559424\n",
+      "  iterations_since_restore: 22\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.846153846153847\n",
+      "    gpu_util_percent0: 0.39384615384615385\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.565384615384615\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15087377501627616\n",
+      "    mean_env_wait_ms: 0.6498094517683312\n",
+      "    mean_inference_ms: 4.22804968427196\n",
+      "    mean_raw_obs_processing_ms: 0.3955819072644963\n",
+      "  time_since_restore: 449.9894530773163\n",
+      "  time_this_iter_s: 20.339831113815308\n",
+      "  time_total_s: 449.9894530773163\n",
+      "  timers:\n",
+      "    learn_throughput: 11271.985\n",
+      "    learn_time_ms: 14353.461\n",
+      "    sample_throughput: 28273.456\n",
+      "    sample_time_ms: 5722.399\n",
+      "    update_time_ms: 39.023\n",
+      "  timestamp: 1604232760\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3559424\n",
+      "  training_iteration: 22\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     22 |          449.989 | 3559424 |  40.2036 |              42.4184 |              10.2755 |            103.901 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1080.5109731890743\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-13-01\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.7305683563748\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.301032520255696\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1629\n",
+      "  episodes_total: 35805\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5021042550603548\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0054971032465497656\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00953363478280759\n",
+      "        total_loss: 0.06499722289542358\n",
+      "        vf_explained_var: 0.9992148876190186\n",
+      "        vf_loss: 0.07368248887360096\n",
+      "    num_steps_sampled: 3721216\n",
+      "    num_steps_trained: 3721216\n",
+      "  iterations_since_restore: 23\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.044\n",
+      "    gpu_util_percent0: 0.4084\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15067991150821478\n",
+      "    mean_env_wait_ms: 0.649905891759336\n",
+      "    mean_inference_ms: 4.2178278275443795\n",
+      "    mean_raw_obs_processing_ms: 0.39491348951426497\n",
+      "  time_since_restore: 470.5632412433624\n",
+      "  time_this_iter_s: 20.573788166046143\n",
+      "  time_total_s: 470.5632412433624\n",
+      "  timers:\n",
+      "    learn_throughput: 11273.798\n",
+      "    learn_time_ms: 14351.154\n",
+      "    sample_throughput: 28167.439\n",
+      "    sample_time_ms: 5743.937\n",
+      "    update_time_ms: 38.419\n",
+      "  timestamp: 1604232781\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3721216\n",
+      "  training_iteration: 23\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     23 |          470.563 | 3721216 |   40.301 |              42.4184 |              10.2755 |            103.731 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1078.7812073715463\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-13-22\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.57635678593378\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.38915989130335\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1618\n",
+      "  episodes_total: 37423\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.47640378028154373\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005069411902998884\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007647299599436034\n",
+      "        total_loss: 0.07074602444966634\n",
+      "        vf_explained_var: 0.9991908073425293\n",
+      "        vf_loss: 0.07761764402190845\n",
+      "    num_steps_sampled: 3883008\n",
+      "    num_steps_trained: 3883008\n",
+      "  iterations_since_restore: 24\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.191999999999997\n",
+      "    gpu_util_percent0: 0.3423999999999999\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1505016968490393\n",
+      "    mean_env_wait_ms: 0.6500103427408599\n",
+      "    mean_inference_ms: 4.208361564693216\n",
+      "    mean_raw_obs_processing_ms: 0.39429321916174187\n",
+      "  time_since_restore: 490.8706216812134\n",
+      "  time_this_iter_s: 20.307380437850952\n",
+      "  time_total_s: 490.8706216812134\n",
+      "  timers:\n",
+      "    learn_throughput: 11268.008\n",
+      "    learn_time_ms: 14358.528\n",
+      "    sample_throughput: 28090.142\n",
+      "    sample_time_ms: 5759.743\n",
+      "    update_time_ms: 37.55\n",
+      "  timestamp: 1604232802\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3883008\n",
+      "  training_iteration: 24\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "2020-11-01 12:13:23,494\tWARNING util.py:136 -- The `process_trial` operation took 0.5319008827209473 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     24 |          490.871 | 3883008 |  40.3892 |              42.4184 |              10.2755 |            103.576 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1077.1880225698897\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-13-43\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.43532516783682\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.4702521709755\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1603\n",
+      "  episodes_total: 39026\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4569598063826561\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005172949323120217\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008714882539303895\n",
+      "        total_loss: 0.04905764168749253\n",
+      "        vf_explained_var: 0.999389111995697\n",
+      "        vf_loss: 0.056966414054234825\n",
+      "    num_steps_sampled: 4044800\n",
+      "    num_steps_trained: 4044800\n",
+      "  iterations_since_restore: 25\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.62\n",
+      "    gpu_util_percent0: 0.41119999999999995\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15033752613342766\n",
+      "    mean_env_wait_ms: 0.6501147929596541\n",
+      "    mean_inference_ms: 4.199582565004314\n",
+      "    mean_raw_obs_processing_ms: 0.3937192610273736\n",
+      "  time_since_restore: 511.1436126232147\n",
+      "  time_this_iter_s: 20.272990942001343\n",
+      "  time_total_s: 511.1436126232147\n",
+      "  timers:\n",
+      "    learn_throughput: 11277.804\n",
+      "    learn_time_ms: 14346.056\n",
+      "    sample_throughput: 28126.832\n",
+      "    sample_time_ms: 5752.23\n",
+      "    update_time_ms: 37.351\n",
+      "  timestamp: 1604232823\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4044800\n",
+      "  training_iteration: 25\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "2020-11-01 12:13:44,581\tWARNING util.py:136 -- The `process_trial` operation took 0.5550427436828613 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     25 |          511.144 | 4044800 |  40.4703 |              42.4184 |              10.2755 |            103.435 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1075.718860070445\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-14-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.30375292235757\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.545045112914124\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1609\n",
+      "  episodes_total: 40635\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4321967264016469\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0049026469544818\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00738874361559283\n",
+      "        total_loss: 0.0522269361341993\n",
+      "        vf_explained_var: 0.9993705749511719\n",
+      "        vf_loss: 0.058851247653365135\n",
+      "    num_steps_sampled: 4206592\n",
+      "    num_steps_trained: 4206592\n",
+      "  iterations_since_restore: 26\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.028000000000002\n",
+      "    gpu_util_percent0: 0.35119999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15018377726680818\n",
+      "    mean_env_wait_ms: 0.650226839982744\n",
+      "    mean_inference_ms: 4.191307577339299\n",
+      "    mean_raw_obs_processing_ms: 0.39318264874410647\n",
+      "  time_since_restore: 531.2994961738586\n",
+      "  time_this_iter_s: 20.15588355064392\n",
+      "  time_total_s: 531.2994961738586\n",
+      "  timers:\n",
+      "    learn_throughput: 11281.716\n",
+      "    learn_time_ms: 14341.08\n",
+      "    sample_throughput: 28095.697\n",
+      "    sample_time_ms: 5758.604\n",
+      "    update_time_ms: 36.136\n",
+      "  timestamp: 1604232844\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4206592\n",
+      "  training_iteration: 26\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "2020-11-01 12:14:05,496\tWARNING util.py:136 -- The `process_trial` operation took 0.5645184516906738 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     26 |          531.299 | 4206592 |   40.545 |              42.4184 |              10.2755 |            103.304 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1074.3374860851236\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-14-26\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.18162671273399\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.61544301559989\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1622\n",
+      "  episodes_total: 42257\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.41156937927007675\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005988262050474684\n",
+      "        model: {}\n",
+      "        policy_loss: -0.0108474350903028\n",
+      "        total_loss: 0.03666358132613823\n",
+      "        vf_explained_var: 0.9995186924934387\n",
+      "        vf_loss: 0.04711797585090002\n",
+      "    num_steps_sampled: 4368384\n",
+      "    num_steps_trained: 4368384\n",
+      "  iterations_since_restore: 27\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.450000000000003\n",
+      "    gpu_util_percent0: 0.37384615384615383\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.565384615384615\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15003777931603987\n",
+      "    mean_env_wait_ms: 0.6503388710349208\n",
+      "    mean_inference_ms: 4.1834680864066325\n",
+      "    mean_raw_obs_processing_ms: 0.39267008619808885\n",
+      "  time_since_restore: 551.8160552978516\n",
+      "  time_this_iter_s: 20.51655912399292\n",
+      "  time_total_s: 551.8160552978516\n",
+      "  timers:\n",
+      "    learn_throughput: 11287.466\n",
+      "    learn_time_ms: 14333.775\n",
+      "    sample_throughput: 28001.168\n",
+      "    sample_time_ms: 5778.045\n",
+      "    update_time_ms: 35.1\n",
+      "  timestamp: 1604232866\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4368384\n",
+      "  training_iteration: 27\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "2020-11-01 12:14:26,878\tWARNING util.py:136 -- The `process_trial` operation took 0.603750467300415 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     27 |          551.816 | 4368384 |  40.6154 |              42.4184 |              10.2755 |            103.182 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1073.064150513113\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-14-47\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.0678804174452\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.68016949294415\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1629\n",
+      "  episodes_total: 43886\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.38193487375974655\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0054754362208768725\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007502093746249254\n",
+      "        total_loss: 0.052860286086797714\n",
+      "        vf_explained_var: 0.999366819858551\n",
+      "        vf_loss: 0.06000580328206221\n",
+      "    num_steps_sampled: 4530176\n",
+      "    num_steps_trained: 4530176\n",
+      "  iterations_since_restore: 28\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.916000000000004\n",
+      "    gpu_util_percent0: 0.35960000000000003\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1498996451948512\n",
+      "    mean_env_wait_ms: 0.6504529892483883\n",
+      "    mean_inference_ms: 4.176045627745146\n",
+      "    mean_raw_obs_processing_ms: 0.3921857888681881\n",
+      "  time_since_restore: 572.0441946983337\n",
+      "  time_this_iter_s: 20.228139400482178\n",
+      "  time_total_s: 572.0441946983337\n",
+      "  timers:\n",
+      "    learn_throughput: 11297.604\n",
+      "    learn_time_ms: 14320.912\n",
+      "    sample_throughput: 28005.61\n",
+      "    sample_time_ms: 5777.128\n",
+      "    update_time_ms: 32.987\n",
+      "  timestamp: 1604232887\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4530176\n",
+      "  training_iteration: 28\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "2020-11-01 12:14:47,924\tWARNING util.py:136 -- The `process_trial` operation took 0.6126041412353516 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     28 |          572.044 | 4530176 |  40.6802 |              42.4184 |              10.2755 |            103.068 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1071.8849808631385\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-15-08\n",
+      "  done: false\n",
+      "  episode_len_mean: 102.9628774891204\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.74035570973741\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1612\n",
+      "  episodes_total: 45498\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3544607609510422\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005010240633661549\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006979774484837738\n",
+      "        total_loss: 0.030745272990316153\n",
+      "        vf_explained_var: 0.999602735042572\n",
+      "        vf_loss: 0.037401253978411354\n",
+      "    num_steps_sampled: 4691968\n",
+      "    num_steps_trained: 4691968\n",
+      "  iterations_since_restore: 29\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.657692307692308\n",
+      "    gpu_util_percent0: 0.32384615384615384\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.565384615384615\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1497713859875804\n",
+      "    mean_env_wait_ms: 0.650569464769825\n",
+      "    mean_inference_ms: 4.169137947749732\n",
+      "    mean_raw_obs_processing_ms: 0.39173452138746384\n",
+      "  time_since_restore: 592.6739168167114\n",
+      "  time_this_iter_s: 20.629722118377686\n",
+      "  time_total_s: 592.6739168167114\n",
+      "  timers:\n",
+      "    learn_throughput: 11299.681\n",
+      "    learn_time_ms: 14318.28\n",
+      "    sample_throughput: 27922.916\n",
+      "    sample_time_ms: 5794.237\n",
+      "    update_time_ms: 30.389\n",
+      "  timestamp: 1604232908\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4691968\n",
+      "  training_iteration: 29\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "2020-11-01 12:15:09,523\tWARNING util.py:136 -- The `process_trial` operation took 0.6120882034301758 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | RUNNING  | 172.17.0.4:52265 |     29 |          592.674 | 4691968 |  40.7404 |              42.4184 |              10.2755 |            102.963 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_74f1e_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1669\n",
+      "    time_step_mean: 1070.7854881546798\n",
+      "    time_step_min: 1039\n",
+      "  date: 2020-11-01_12-15-29\n",
+      "  done: true\n",
+      "  episode_len_mean: 102.86573533470627\n",
+      "  episode_reward_max: 42.41836734693883\n",
+      "  episode_reward_mean: 40.79621711744931\n",
+      "  episode_reward_min: 10.27551020408163\n",
+      "  episodes_this_iter: 1603\n",
+      "  episodes_total: 47101\n",
+      "  experiment_id: 230a00995083408db67ee3cc3bc356c5\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3281017740567525\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005293768752987186\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007335715092873822\n",
+      "        total_loss: 0.022672869653130572\n",
+      "        vf_explained_var: 0.9996854662895203\n",
+      "        vf_loss: 0.029643258700768154\n",
+      "    num_steps_sampled: 4853760\n",
+      "    num_steps_trained: 4853760\n",
+      "  iterations_since_restore: 30\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.851999999999997\n",
+      "    gpu_util_percent0: 0.41879999999999995\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 52265\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1496498957417332\n",
+      "    mean_env_wait_ms: 0.6506846363524779\n",
+      "    mean_inference_ms: 4.162635555621303\n",
+      "    mean_raw_obs_processing_ms: 0.39130720698712607\n",
+      "  time_since_restore: 613.0474860668182\n",
+      "  time_this_iter_s: 20.37356925010681\n",
+      "  time_total_s: 613.0474860668182\n",
+      "  timers:\n",
+      "    learn_throughput: 11310.582\n",
+      "    learn_time_ms: 14304.481\n",
+      "    sample_throughput: 27887.371\n",
+      "    sample_time_ms: 5801.623\n",
+      "    update_time_ms: 30.76\n",
+      "  timestamp: 1604232929\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4853760\n",
+      "  training_iteration: 30\n",
+      "  trial_id: 74f1e_00000\n",
+      "  \n",
+      "2020-11-01 12:15:30,803\tWARNING util.py:136 -- The `process_trial` operation took 0.6821863651275635 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.3/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | TERMINATED |       |     30 |          613.047 | 4853760 |  40.7962 |              42.4184 |              10.2755 |            102.866 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.1/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_74f1e_00000 | TERMINATED |       |     30 |          613.047 | 4853760 |  40.7962 |              42.4184 |              10.2755 |            102.866 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 52047\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201101_120450-tkx2xsoj/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201101_120450-tkx2xsoj/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min 1039\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step 7\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime 641\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp 1604232931\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max 1669\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean 1070.78549\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max 42.41837\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min 10.27551\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean 40.79622\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total 47101\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration 30\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step ‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mdecent-sweep-2\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/tkx2xsoj\u001b[0m\n",
+      "2020-11-01 12:15:40,799 - wandb.wandb_agent - INFO - Cleaning up finished run: tkx2xsoj\n",
+      "2020-11-01 12:15:41,119 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-01 12:15:41,119 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/la/la13.txt\n",
+      "2020-11-01 12:15:41,121 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/la/la13.txt\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "2020-11-01 12:15:46,139 - wandb.wandb_agent - INFO - Running runs: ['dcx4y6ut']\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mdaily-sweep-3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/9xhkl8my\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/dcx4y6ut\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201101_121542-dcx4y6ut\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
+      "\n",
+      "2020-11-01 12:15:46,749\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "\n",
+      "\n",
+      "\u001b[2m\u001b[36m(pid=2614)\u001b[0m 2020-11-01 12:15:49,495\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=2570)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2570)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2590)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2590)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2557)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2557)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2589)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2589)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2599)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2599)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2591)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2591)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2583)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2583)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2625)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2625)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2573)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2573)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2595)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2595)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2597)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2597)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2587)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2587)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2582)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2582)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2621)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2621)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2600)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2600)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2615)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2615)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2594)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2594)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2527)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2527)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2554)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2554)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2526)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2526)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2560)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2560)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2561)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2561)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2562)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2562)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2511)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2511)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2556)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2556)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2501)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2501)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2553)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2553)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2520)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2520)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2571)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2571)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2612)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2612)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2508)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2508)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2493)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2493)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2565)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2565)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2605)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2605)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2566)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2566)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2506)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2506)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2518)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2518)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2502)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2502)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2503)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2503)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2507)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2507)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2576)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2576)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2567)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2567)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2610)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2610)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2487)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2487)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2603)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2603)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2488)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2488)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2492)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2492)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2497)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2497)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2552)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2552)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2504)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2504)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2563)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2563)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2500)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2500)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2558)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2558)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2555)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2555)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2496)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2496)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2579)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2579)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2564)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2564)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2523)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2523)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2598)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2598)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2524)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2524)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2572)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2572)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2551)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2551)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2505)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2505)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2592)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2592)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2514)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2514)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2498)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2498)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2580)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2580)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2495)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2495)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2568)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2568)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2490)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2490)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2602)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2602)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2569)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2569)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2489)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2489)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2491)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2491)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2559)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2559)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2517)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2517)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2509)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2509)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2596)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2596)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=2577)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=2577)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1589\n",
+      "    time_step_mean: 1337.9852140077821\n",
+      "    time_step_min: 1155\n",
+      "  date: 2020-11-01_12-16-16\n",
+      "  done: false\n",
+      "  episode_len_mean: 114.43149129447389\n",
+      "  episode_reward_max: 47.39175257731958\n",
+      "  episode_reward_mean: 38.01323583352193\n",
+      "  episode_reward_min: 22.08247422680411\n",
+      "  episodes_this_iter: 1321\n",
+      "  episodes_total: 1321\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1485573450724285\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005282467735620837\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007238074458048989\n",
+      "        total_loss: 63.078263918558754\n",
+      "        vf_explained_var: 0.7385819554328918\n",
+      "        vf_loss: 63.0850191116333\n",
+      "    num_steps_sampled: 161792\n",
+      "    num_steps_trained: 161792\n",
+      "  iterations_since_restore: 1\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 30.44814814814815\n",
+      "    gpu_util_percent0: 0.3718518518518519\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.4370370370370376\n",
+      "    vram_util_percent0: 0.08366130971903357\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16663877415658362\n",
+      "    mean_env_wait_ms: 0.6660098682308551\n",
+      "    mean_inference_ms: 4.715280418736184\n",
+      "    mean_raw_obs_processing_ms: 0.42943359101439976\n",
+      "  time_since_restore: 21.794464588165283\n",
+      "  time_this_iter_s: 21.794464588165283\n",
+      "  time_total_s: 21.794464588165283\n",
+      "  timers:\n",
+      "    learn_throughput: 11044.835\n",
+      "    learn_time_ms: 14648.658\n",
+      "    sample_throughput: 22922.781\n",
+      "    sample_time_ms: 7058.131\n",
+      "    update_time_ms: 38.538\n",
+      "  timestamp: 1604232976\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 161792\n",
+      "  training_iteration: 1\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.3/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      1 |          21.7945 | 161792 |  38.0132 |              47.3918 |              22.0825 |            114.431 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1326.7179115300942\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-16-37\n",
+      "  done: false\n",
+      "  episode_len_mean: 113.38081603435934\n",
+      "  episode_reward_max: 47.64948453608249\n",
+      "  episode_reward_mean: 38.63342287228155\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1473\n",
+      "  episodes_total: 2794\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1314232647418976\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009286719684799513\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01014851212191085\n",
+      "        total_loss: 10.35303783416748\n",
+      "        vf_explained_var: 0.901028573513031\n",
+      "        vf_loss: 10.361894766489664\n",
+      "    num_steps_sampled: 323584\n",
+      "    num_steps_trained: 323584\n",
+      "  iterations_since_restore: 2\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 30.084615384615383\n",
+      "    gpu_util_percent0: 0.4496153846153846\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5076923076923077\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16450090814338433\n",
+      "    mean_env_wait_ms: 0.6642577249066655\n",
+      "    mean_inference_ms: 4.744188369781305\n",
+      "    mean_raw_obs_processing_ms: 0.42877125861262844\n",
+      "  time_since_restore: 43.1419882774353\n",
+      "  time_this_iter_s: 21.34752368927002\n",
+      "  time_total_s: 43.1419882774353\n",
+      "  timers:\n",
+      "    learn_throughput: 11211.024\n",
+      "    learn_time_ms: 14431.51\n",
+      "    sample_throughput: 23059.328\n",
+      "    sample_time_ms: 7016.336\n",
+      "    update_time_ms: 41.882\n",
+      "  timestamp: 1604232997\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 323584\n",
+      "  training_iteration: 2\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      2 |           43.142 | 323584 |  38.6334 |              47.6495 |              21.2577 |            113.381 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1309.3502958579882\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-16-58\n",
+      "  done: false\n",
+      "  episode_len_mean: 112.32527575686458\n",
+      "  episode_reward_max: 47.64948453608249\n",
+      "  episode_reward_mean: 39.48478286641973\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1467\n",
+      "  episodes_total: 4261\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1132993400096893\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.010391402058303356\n",
+      "        model: {}\n",
+      "        policy_loss: -0.014095689790944258\n",
+      "        total_loss: 6.80802857875824\n",
+      "        vf_explained_var: 0.9351071715354919\n",
+      "        vf_loss: 6.820602655410767\n",
+      "    num_steps_sampled: 485376\n",
+      "    num_steps_trained: 485376\n",
+      "  iterations_since_restore: 3\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 28.832000000000004\n",
+      "    gpu_util_percent0: 0.4172\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5120000000000005\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16256613873280876\n",
+      "    mean_env_wait_ms: 0.6625184290389695\n",
+      "    mean_inference_ms: 4.69345067144062\n",
+      "    mean_raw_obs_processing_ms: 0.4260658546666288\n",
+      "  time_since_restore: 63.90490484237671\n",
+      "  time_this_iter_s: 20.762916564941406\n",
+      "  time_total_s: 63.90490484237671\n",
+      "  timers:\n",
+      "    learn_throughput: 11227.805\n",
+      "    learn_time_ms: 14409.94\n",
+      "    sample_throughput: 23883.846\n",
+      "    sample_time_ms: 6774.118\n",
+      "    update_time_ms: 41.076\n",
+      "  timestamp: 1604233018\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 485376\n",
+      "  training_iteration: 3\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      3 |          63.9049 | 485376 |  39.4848 |              47.6495 |              21.2577 |            112.325 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1293.2727912706794\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-17-19\n",
+      "  done: false\n",
+      "  episode_len_mean: 111.25918153200419\n",
+      "  episode_reward_max: 47.649484536082525\n",
+      "  episode_reward_mean: 40.30362789959723\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1457\n",
+      "  episodes_total: 5718\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.084079662958781\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009383795782923698\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013835826587940877\n",
+      "        total_loss: 4.933180093765259\n",
+      "        vf_explained_var: 0.9529300332069397\n",
+      "        vf_loss: 4.94568133354187\n",
+      "    num_steps_sampled: 647168\n",
+      "    num_steps_trained: 647168\n",
+      "  iterations_since_restore: 4\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.936\n",
+      "    gpu_util_percent0: 0.4576\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.508\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16088212665214047\n",
+      "    mean_env_wait_ms: 0.660815453354488\n",
+      "    mean_inference_ms: 4.632879361030093\n",
+      "    mean_raw_obs_processing_ms: 0.42268288067938126\n",
+      "  time_since_restore: 84.33310127258301\n",
+      "  time_this_iter_s: 20.4281964302063\n",
+      "  time_total_s: 84.33310127258301\n",
+      "  timers:\n",
+      "    learn_throughput: 11238.354\n",
+      "    learn_time_ms: 14396.415\n",
+      "    sample_throughput: 24616.712\n",
+      "    sample_time_ms: 6572.446\n",
+      "    update_time_ms: 38.648\n",
+      "  timestamp: 1604233039\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 647168\n",
+      "  training_iteration: 4\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      4 |          84.3331 | 647168 |  40.3036 |              47.6495 |              21.2577 |            111.259 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1278.2911882694702\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-17-39\n",
+      "  done: false\n",
+      "  episode_len_mean: 110.2100481761872\n",
+      "  episode_reward_max: 47.649484536082525\n",
+      "  episode_reward_mean: 41.07122129117859\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1547\n",
+      "  episodes_total: 7265\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0668250819047291\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008654051227495074\n",
+      "        model: {}\n",
+      "        policy_loss: -0.015438533756726732\n",
+      "        total_loss: 3.750304361184438\n",
+      "        vf_explained_var: 0.9650198817253113\n",
+      "        vf_loss: 3.764545480410258\n",
+      "    num_steps_sampled: 808960\n",
+      "    num_steps_trained: 808960\n",
+      "  iterations_since_restore: 5\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.02\n",
+      "    gpu_util_percent0: 0.3504\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5120000000000005\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1594046299420155\n",
+      "    mean_env_wait_ms: 0.6591918943938871\n",
+      "    mean_inference_ms: 4.572498944569763\n",
+      "    mean_raw_obs_processing_ms: 0.4190994577823986\n",
+      "  time_since_restore: 104.45204615592957\n",
+      "  time_this_iter_s: 20.118944883346558\n",
+      "  time_total_s: 104.45204615592957\n",
+      "  timers:\n",
+      "    learn_throughput: 11259.021\n",
+      "    learn_time_ms: 14369.989\n",
+      "    sample_throughput: 25254.408\n",
+      "    sample_time_ms: 6406.486\n",
+      "    update_time_ms: 37.632\n",
+      "  timestamp: 1604233059\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 808960\n",
+      "  training_iteration: 5\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      5 |          104.452 | 808960 |  41.0712 |              47.6495 |              21.2577 |             110.21 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1266.0983158852982\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-18-00\n",
+      "  done: false\n",
+      "  episode_len_mean: 109.32014959202176\n",
+      "  episode_reward_max: 47.649484536082525\n",
+      "  episode_reward_mean: 41.69816035928256\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1559\n",
+      "  episodes_total: 8824\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.034409632285436\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008218800959487757\n",
+      "        model: {}\n",
+      "        policy_loss: -0.015976834343746305\n",
+      "        total_loss: 3.275542378425598\n",
+      "        vf_explained_var: 0.9698309898376465\n",
+      "        vf_loss: 3.2903926372528076\n",
+      "    num_steps_sampled: 970752\n",
+      "    num_steps_trained: 970752\n",
+      "  iterations_since_restore: 6\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.4375\n",
+      "    gpu_util_percent0: 0.43624999999999997\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5208333333333335\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15817094139921792\n",
+      "    mean_env_wait_ms: 0.6579144407066476\n",
+      "    mean_inference_ms: 4.520312188626085\n",
+      "    mean_raw_obs_processing_ms: 0.41585575516420453\n",
+      "  time_since_restore: 124.74504113197327\n",
+      "  time_this_iter_s: 20.2929949760437\n",
+      "  time_total_s: 124.74504113197327\n",
+      "  timers:\n",
+      "    learn_throughput: 11268.321\n",
+      "    learn_time_ms: 14358.128\n",
+      "    sample_throughput: 25609.299\n",
+      "    sample_time_ms: 6317.705\n",
+      "    update_time_ms: 37.615\n",
+      "  timestamp: 1604233080\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 970752\n",
+      "  training_iteration: 6\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      6 |          124.745 | 970752 |  41.6982 |              47.6495 |              21.2577 |             109.32 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1255.5475730032877\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-18-20\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.51175563692426\n",
+      "  episode_reward_max: 47.649484536082525\n",
+      "  episode_reward_mean: 42.23890644960692\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1554\n",
+      "  episodes_total: 10378\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9993852277596792\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008948890104268989\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011871834401972592\n",
+      "        total_loss: 2.572846511999766\n",
+      "        vf_explained_var: 0.9761440753936768\n",
+      "        vf_loss: 2.5834282437960305\n",
+      "    num_steps_sampled: 1132544\n",
+      "    num_steps_trained: 1132544\n",
+      "  iterations_since_restore: 7\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.36\n",
+      "    gpu_util_percent0: 0.3956\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5120000000000005\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15713379589800733\n",
+      "    mean_env_wait_ms: 0.6568649191044983\n",
+      "    mean_inference_ms: 4.475812919755018\n",
+      "    mean_raw_obs_processing_ms: 0.4129610571474045\n",
+      "  time_since_restore: 144.9028398990631\n",
+      "  time_this_iter_s: 20.157798767089844\n",
+      "  time_total_s: 144.9028398990631\n",
+      "  timers:\n",
+      "    learn_throughput: 11276.333\n",
+      "    learn_time_ms: 14347.927\n",
+      "    sample_throughput: 25944.994\n",
+      "    sample_time_ms: 6235.962\n",
+      "    update_time_ms: 37.126\n",
+      "  timestamp: 1604233100\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1132544\n",
+      "  training_iteration: 7\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      7 |          144.903 | 1132544 |  42.2389 |              47.6495 |              21.2577 |            108.512 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1246.681210592686\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-18-41\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.82323359316068\n",
+      "  episode_reward_max: 47.649484536082525\n",
+      "  episode_reward_mean: 42.700832190594205\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1553\n",
+      "  episodes_total: 11931\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9713874608278275\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00811462321629127\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013652926543727517\n",
+      "        total_loss: 2.0792956252892814\n",
+      "        vf_explained_var: 0.9808939099311829\n",
+      "        vf_loss: 2.0918113390604653\n",
+      "    num_steps_sampled: 1294336\n",
+      "    num_steps_trained: 1294336\n",
+      "  iterations_since_restore: 8\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.708000000000002\n",
+      "    gpu_util_percent0: 0.412\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.52\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15626045608420333\n",
+      "    mean_env_wait_ms: 0.6560445478078366\n",
+      "    mean_inference_ms: 4.437668893602004\n",
+      "    mean_raw_obs_processing_ms: 0.41044660220855933\n",
+      "  time_since_restore: 165.08657550811768\n",
+      "  time_this_iter_s: 20.183735609054565\n",
+      "  time_total_s: 165.08657550811768\n",
+      "  timers:\n",
+      "    learn_throughput: 11297.099\n",
+      "    learn_time_ms: 14321.553\n",
+      "    sample_throughput: 26119.381\n",
+      "    sample_time_ms: 6194.327\n",
+      "    update_time_ms: 35.89\n",
+      "  timestamp: 1604233121\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1294336\n",
+      "  training_iteration: 8\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      8 |          165.087 | 1294336 |  42.7008 |              47.6495 |              21.2577 |            107.823 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1238.4053151213718\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-19-01\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.21781298585918\n",
+      "  episode_reward_max: 47.649484536082525\n",
+      "  episode_reward_mean: 43.115104119360794\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1576\n",
+      "  episodes_total: 13507\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9416759212811788\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0077835753715286655\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013627580524674462\n",
+      "        total_loss: 1.650565932194392\n",
+      "        vf_explained_var: 0.9848251938819885\n",
+      "        vf_loss: 1.663107653458913\n",
+      "    num_steps_sampled: 1456128\n",
+      "    num_steps_trained: 1456128\n",
+      "  iterations_since_restore: 9\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.308000000000003\n",
+      "    gpu_util_percent0: 0.392\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15550241078926047\n",
+      "    mean_env_wait_ms: 0.6554019389170324\n",
+      "    mean_inference_ms: 4.404255773765493\n",
+      "    mean_raw_obs_processing_ms: 0.40821271351444455\n",
+      "  time_since_restore: 185.5122389793396\n",
+      "  time_this_iter_s: 20.425663471221924\n",
+      "  time_total_s: 185.5122389793396\n",
+      "  timers:\n",
+      "    learn_throughput: 11288.215\n",
+      "    learn_time_ms: 14332.825\n",
+      "    sample_throughput: 26270.178\n",
+      "    sample_time_ms: 6158.771\n",
+      "    update_time_ms: 34.616\n",
+      "  timestamp: 1604233141\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1456128\n",
+      "  training_iteration: 9\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |      9 |          185.512 | 1456128 |  43.1151 |              47.6495 |              21.2577 |            107.218 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1231.2265303412562\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-19-22\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.66975758378594\n",
+      "  episode_reward_max: 47.64948453608253\n",
+      "  episode_reward_mean: 43.48257774293858\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1591\n",
+      "  episodes_total: 15098\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9080682247877121\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007657797929520409\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010565590860399729\n",
+      "        total_loss: 1.296636829773585\n",
+      "        vf_explained_var: 0.988224446773529\n",
+      "        vf_loss: 1.3061249554157257\n",
+      "    num_steps_sampled: 1617920\n",
+      "    num_steps_trained: 1617920\n",
+      "  iterations_since_restore: 10\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.03333333333333\n",
+      "    gpu_util_percent0: 0.4579166666666667\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15484288964237733\n",
+      "    mean_env_wait_ms: 0.6549145589836158\n",
+      "    mean_inference_ms: 4.3750244337617135\n",
+      "    mean_raw_obs_processing_ms: 0.4062248434702486\n",
+      "  time_since_restore: 205.5452425479889\n",
+      "  time_this_iter_s: 20.033003568649292\n",
+      "  time_total_s: 205.5452425479889\n",
+      "  timers:\n",
+      "    learn_throughput: 11294.037\n",
+      "    learn_time_ms: 14325.435\n",
+      "    sample_throughput: 26494.427\n",
+      "    sample_time_ms: 6106.643\n",
+      "    update_time_ms: 33.514\n",
+      "  timestamp: 1604233162\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1617920\n",
+      "  training_iteration: 10\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     10 |          205.545 | 1617920 |  43.4826 |              47.6495 |              21.2577 |             106.67 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1224.8779111644658\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-19-42\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.19435793004313\n",
+      "  episode_reward_max: 47.64948453608253\n",
+      "  episode_reward_mean: 43.804279931238554\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1598\n",
+      "  episodes_total: 16696\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8727221091588339\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007556108757853508\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012766734405886382\n",
+      "        total_loss: 1.0635682841142018\n",
+      "        vf_explained_var: 0.9903334975242615\n",
+      "        vf_loss: 1.0752601623535156\n",
+      "    num_steps_sampled: 1779712\n",
+      "    num_steps_trained: 1779712\n",
+      "  iterations_since_restore: 11\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.6375\n",
+      "    gpu_util_percent0: 0.4445833333333334\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1542607271772269\n",
+      "    mean_env_wait_ms: 0.6545202251025621\n",
+      "    mean_inference_ms: 4.349215320409436\n",
+      "    mean_raw_obs_processing_ms: 0.4044561449167446\n",
+      "  time_since_restore: 225.5202054977417\n",
+      "  time_this_iter_s: 19.974962949752808\n",
+      "  time_total_s: 225.5202054977417\n",
+      "  timers:\n",
+      "    learn_throughput: 11330.871\n",
+      "    learn_time_ms: 14278.867\n",
+      "    sample_throughput: 27121.909\n",
+      "    sample_time_ms: 5965.362\n",
+      "    update_time_ms: 33.265\n",
+      "  timestamp: 1604233182\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1779712\n",
+      "  training_iteration: 11\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     11 |           225.52 | 1779712 |  43.8043 |              47.6495 |              21.2577 |            106.194 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1219.3561336254106\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-20-02\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.77831219938784\n",
+      "  episode_reward_max: 47.64948453608253\n",
+      "  episode_reward_mean: 44.08295937594382\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1600\n",
+      "  episodes_total: 18296\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8348831733067831\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007376410067081451\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009320069143238166\n",
+      "        total_loss: 0.8637631287177404\n",
+      "        vf_explained_var: 0.99216228723526\n",
+      "        vf_loss: 0.8720253507296244\n",
+      "    num_steps_sampled: 1941504\n",
+      "    num_steps_trained: 1941504\n",
+      "  iterations_since_restore: 12\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.623999999999995\n",
+      "    gpu_util_percent0: 0.364\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15375450185882147\n",
+      "    mean_env_wait_ms: 0.6542416074847509\n",
+      "    mean_inference_ms: 4.326388244632185\n",
+      "    mean_raw_obs_processing_ms: 0.4028915881034749\n",
+      "  time_since_restore: 245.75802636146545\n",
+      "  time_this_iter_s: 20.237820863723755\n",
+      "  time_total_s: 245.75802636146545\n",
+      "  timers:\n",
+      "    learn_throughput: 11325.614\n",
+      "    learn_time_ms: 14285.495\n",
+      "    sample_throughput: 27660.054\n",
+      "    sample_time_ms: 5849.302\n",
+      "    update_time_ms: 30.809\n",
+      "  timestamp: 1604233202\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1941504\n",
+      "  training_iteration: 12\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     12 |          245.758 | 1941504 |   44.083 |              47.6495 |              21.2577 |            105.778 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1214.5580739397603\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-20-23\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.4173956762192\n",
+      "  episode_reward_max: 47.64948453608254\n",
+      "  episode_reward_mean: 44.32935526840925\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1594\n",
+      "  episodes_total: 19890\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7998430083195368\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006828729490128656\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011044965135321641\n",
+      "        total_loss: 0.67805515229702\n",
+      "        vf_explained_var: 0.9938119053840637\n",
+      "        vf_loss: 0.6881343126296997\n",
+      "    num_steps_sampled: 2103296\n",
+      "    num_steps_trained: 2103296\n",
+      "  iterations_since_restore: 13\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.831999999999997\n",
+      "    gpu_util_percent0: 0.43200000000000005\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.153302992513867\n",
+      "    mean_env_wait_ms: 0.6540089232561519\n",
+      "    mean_inference_ms: 4.306101213317678\n",
+      "    mean_raw_obs_processing_ms: 0.40148742506884494\n",
+      "  time_since_restore: 266.1050407886505\n",
+      "  time_this_iter_s: 20.34701442718506\n",
+      "  time_total_s: 266.1050407886505\n",
+      "  timers:\n",
+      "    learn_throughput: 11312.078\n",
+      "    learn_time_ms: 14302.589\n",
+      "    sample_throughput: 27960.684\n",
+      "    sample_time_ms: 5786.411\n",
+      "    update_time_ms: 28.901\n",
+      "  timestamp: 1604233223\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2103296\n",
+      "  training_iteration: 13\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     13 |          266.105 | 2103296 |  44.3294 |              47.6495 |              21.2577 |            105.417 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1210.317556539986\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-20-43\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.1013919277501\n",
+      "  episode_reward_max: 47.64948453608254\n",
+      "  episode_reward_mean: 44.54546357677872\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1591\n",
+      "  episodes_total: 21481\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7677376766999563\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00645853765308857\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009221890567763088\n",
+      "        total_loss: 0.5704321513573328\n",
+      "        vf_explained_var: 0.9948087334632874\n",
+      "        vf_loss: 0.5787462194760641\n",
+      "    num_steps_sampled: 2265088\n",
+      "    num_steps_trained: 2265088\n",
+      "  iterations_since_restore: 14\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.299999999999997\n",
+      "    gpu_util_percent0: 0.3692\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15289862610010913\n",
+      "    mean_env_wait_ms: 0.6538353499990455\n",
+      "    mean_inference_ms: 4.287840220794161\n",
+      "    mean_raw_obs_processing_ms: 0.40022401934261076\n",
+      "  time_since_restore: 286.03195905685425\n",
+      "  time_this_iter_s: 19.926918268203735\n",
+      "  time_total_s: 286.03195905685425\n",
+      "  timers:\n",
+      "    learn_throughput: 11326.239\n",
+      "    learn_time_ms: 14284.707\n",
+      "    sample_throughput: 28153.263\n",
+      "    sample_time_ms: 5746.83\n",
+      "    update_time_ms: 28.453\n",
+      "  timestamp: 1604233243\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2265088\n",
+      "  training_iteration: 14\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     14 |          286.032 | 2265088 |  44.5455 |              47.6495 |              21.2577 |            105.101 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1206.554523354749\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-21-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.81341019417475\n",
+      "  episode_reward_max: 47.64948453608254\n",
+      "  episode_reward_mean: 44.73924255043826\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1591\n",
+      "  episodes_total: 23072\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.733478844165802\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00630180553222696\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01086452438418443\n",
+      "        total_loss: 0.44883622725804645\n",
+      "        vf_explained_var: 0.9958701133728027\n",
+      "        vf_loss: 0.4588071381052335\n",
+      "    num_steps_sampled: 2426880\n",
+      "    num_steps_trained: 2426880\n",
+      "  iterations_since_restore: 15\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.691666666666666\n",
+      "    gpu_util_percent0: 0.42\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1525331053770261\n",
+      "    mean_env_wait_ms: 0.6537007767835614\n",
+      "    mean_inference_ms: 4.271271460769205\n",
+      "    mean_raw_obs_processing_ms: 0.39907289277823804\n",
+      "  time_since_restore: 306.18409848213196\n",
+      "  time_this_iter_s: 20.15213942527771\n",
+      "  time_total_s: 306.18409848213196\n",
+      "  timers:\n",
+      "    learn_throughput: 11336.437\n",
+      "    learn_time_ms: 14271.856\n",
+      "    sample_throughput: 28161.1\n",
+      "    sample_time_ms: 5745.23\n",
+      "    update_time_ms: 27.237\n",
+      "  timestamp: 1604233264\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2426880\n",
+      "  training_iteration: 15\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     15 |          306.184 | 2426880 |  44.7392 |              47.6495 |              21.2577 |            104.813 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1203.1918253034055\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-21-25\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.54650832894256\n",
+      "  episode_reward_max: 47.64948453608254\n",
+      "  episode_reward_mean: 44.91062311529655\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1601\n",
+      "  episodes_total: 24673\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7046740502119064\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00598089622023205\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010109954212869829\n",
+      "        total_loss: 0.3878796820839246\n",
+      "        vf_explained_var: 0.9964661002159119\n",
+      "        vf_loss: 0.39714578290780383\n",
+      "    num_steps_sampled: 2588672\n",
+      "    num_steps_trained: 2588672\n",
+      "  iterations_since_restore: 16\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.084\n",
+      "    gpu_util_percent0: 0.4572\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15220062387999952\n",
+      "    mean_env_wait_ms: 0.653596423305203\n",
+      "    mean_inference_ms: 4.256089606710892\n",
+      "    mean_raw_obs_processing_ms: 0.3980153671992771\n",
+      "  time_since_restore: 326.27552032470703\n",
+      "  time_this_iter_s: 20.091421842575073\n",
+      "  time_total_s: 326.27552032470703\n",
+      "  timers:\n",
+      "    learn_throughput: 11333.689\n",
+      "    learn_time_ms: 14275.316\n",
+      "    sample_throughput: 28301.321\n",
+      "    sample_time_ms: 5716.765\n",
+      "    update_time_ms: 25.405\n",
+      "  timestamp: 1604233285\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2588672\n",
+      "  training_iteration: 16\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     16 |          326.276 | 2588672 |  44.9106 |              47.6495 |              21.2577 |            104.547 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1200.1823688521467\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-21-45\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.30184515883583\n",
+      "  episode_reward_max: 47.64948453608254\n",
+      "  episode_reward_mean: 45.06611508661011\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1612\n",
+      "  episodes_total: 26285\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6727208147446314\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0061663844001789885\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00950972737094465\n",
+      "        total_loss: 0.2949073016643524\n",
+      "        vf_explained_var: 0.9973233342170715\n",
+      "        vf_loss: 0.3035201082626979\n",
+      "    num_steps_sampled: 2750464\n",
+      "    num_steps_trained: 2750464\n",
+      "  iterations_since_restore: 17\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.068\n",
+      "    gpu_util_percent0: 0.38800000000000007\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15189563586672175\n",
+      "    mean_env_wait_ms: 0.653528700746639\n",
+      "    mean_inference_ms: 4.242058406187237\n",
+      "    mean_raw_obs_processing_ms: 0.3970431055250104\n",
+      "  time_since_restore: 346.44066858291626\n",
+      "  time_this_iter_s: 20.16514825820923\n",
+      "  time_total_s: 346.44066858291626\n",
+      "  timers:\n",
+      "    learn_throughput: 11331.786\n",
+      "    learn_time_ms: 14277.714\n",
+      "    sample_throughput: 28373.21\n",
+      "    sample_time_ms: 5702.28\n",
+      "    update_time_ms: 26.064\n",
+      "  timestamp: 1604233305\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2750464\n",
+      "  training_iteration: 17\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     17 |          346.441 | 2750464 |  45.0661 |              47.6495 |              21.2577 |            104.302 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1197.4265528618562\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-22-06\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.07865329512894\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.20858749593833\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1635\n",
+      "  episodes_total: 27920\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6462279756863912\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005753972722838323\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01063174061710015\n",
+      "        total_loss: 0.2318790778517723\n",
+      "        vf_explained_var: 0.997880220413208\n",
+      "        vf_loss: 0.2416831391553084\n",
+      "    num_steps_sampled: 2912256\n",
+      "    num_steps_trained: 2912256\n",
+      "  iterations_since_restore: 18\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.45416666666667\n",
+      "    gpu_util_percent0: 0.44875\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5749999999999997\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1516142332871325\n",
+      "    mean_env_wait_ms: 0.6534803822249593\n",
+      "    mean_inference_ms: 4.229062941307127\n",
+      "    mean_raw_obs_processing_ms: 0.3961363429731068\n",
+      "  time_since_restore: 366.4673285484314\n",
+      "  time_this_iter_s: 20.026659965515137\n",
+      "  time_total_s: 366.4673285484314\n",
+      "  timers:\n",
+      "    learn_throughput: 11321.995\n",
+      "    learn_time_ms: 14290.061\n",
+      "    sample_throughput: 28529.416\n",
+      "    sample_time_ms: 5671.059\n",
+      "    update_time_ms: 25.131\n",
+      "  timestamp: 1604233326\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2912256\n",
+      "  training_iteration: 18\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     18 |          366.467 | 2912256 |  45.2086 |              47.6495 |              21.2577 |            104.079 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1194.9799281209737\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-22-27\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.87829326109042\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.33514231552049\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1610\n",
+      "  episodes_total: 29530\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6139073818922043\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005659738904796541\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009704548533287985\n",
+      "        total_loss: 0.19860607013106346\n",
+      "        vf_explained_var: 0.9981780648231506\n",
+      "        vf_loss: 0.20748562117417654\n",
+      "    num_steps_sampled: 3074048\n",
+      "    num_steps_trained: 3074048\n",
+      "  iterations_since_restore: 19\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.747999999999998\n",
+      "    gpu_util_percent0: 0.39640000000000003\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15135749897686426\n",
+      "    mean_env_wait_ms: 0.6534384087466466\n",
+      "    mean_inference_ms: 4.217280786349381\n",
+      "    mean_raw_obs_processing_ms: 0.3953083892816526\n",
+      "  time_since_restore: 386.6138005256653\n",
+      "  time_this_iter_s: 20.146471977233887\n",
+      "  time_total_s: 386.6138005256653\n",
+      "  timers:\n",
+      "    learn_throughput: 11328.703\n",
+      "    learn_time_ms: 14281.599\n",
+      "    sample_throughput: 28668.019\n",
+      "    sample_time_ms: 5643.641\n",
+      "    update_time_ms: 26.007\n",
+      "  timestamp: 1604233347\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3074048\n",
+      "  training_iteration: 19\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     19 |          386.614 | 3074048 |  45.3351 |              47.6495 |              21.2577 |            103.878 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1192.755491943006\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-22-47\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.69467022199376\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.44938246008456\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1597\n",
+      "  episodes_total: 31127\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5885171492894491\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00575300360408922\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008459999109618366\n",
+      "        total_loss: 0.1491255114475886\n",
+      "        vf_explained_var: 0.9986266493797302\n",
+      "        vf_loss: 0.15672916546463966\n",
+      "    num_steps_sampled: 3235840\n",
+      "    num_steps_trained: 3235840\n",
+      "  iterations_since_restore: 20\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.32\n",
+      "    gpu_util_percent0: 0.33520000000000005\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15111988887105687\n",
+      "    mean_env_wait_ms: 0.6534000992030266\n",
+      "    mean_inference_ms: 4.206433415272165\n",
+      "    mean_raw_obs_processing_ms: 0.39454176059647716\n",
+      "  time_since_restore: 406.58024430274963\n",
+      "  time_this_iter_s: 19.96644377708435\n",
+      "  time_total_s: 406.58024430274963\n",
+      "  timers:\n",
+      "    learn_throughput: 11334.136\n",
+      "    learn_time_ms: 14274.754\n",
+      "    sample_throughput: 28704.988\n",
+      "    sample_time_ms: 5636.372\n",
+      "    update_time_ms: 26.077\n",
+      "  timestamp: 1604233367\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3235840\n",
+      "  training_iteration: 20\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     20 |           406.58 | 3235840 |  45.4494 |              47.6495 |              21.2577 |            103.695 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1190.7317714705164\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-23-08\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.52679335207137\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.553595837989505\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1605\n",
+      "  episodes_total: 32732\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5605561385552088\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0051246628087634844\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00707746635695609\n",
+      "        total_loss: 0.12786801221470037\n",
+      "        vf_explained_var: 0.9988241195678711\n",
+      "        vf_loss: 0.13420082504550615\n",
+      "    num_steps_sampled: 3397632\n",
+      "    num_steps_trained: 3397632\n",
+      "  iterations_since_restore: 21\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.108\n",
+      "    gpu_util_percent0: 0.36239999999999994\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1508982454274576\n",
+      "    mean_env_wait_ms: 0.6533685645927871\n",
+      "    mean_inference_ms: 4.196348243483211\n",
+      "    mean_raw_obs_processing_ms: 0.393820825357919\n",
+      "  time_since_restore: 426.77583384513855\n",
+      "  time_this_iter_s: 20.195589542388916\n",
+      "  time_total_s: 426.77583384513855\n",
+      "  timers:\n",
+      "    learn_throughput: 11330.776\n",
+      "    learn_time_ms: 14278.986\n",
+      "    sample_throughput: 28644.617\n",
+      "    sample_time_ms: 5648.251\n",
+      "    update_time_ms: 25.717\n",
+      "  timestamp: 1604233388\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3397632\n",
+      "  training_iteration: 21\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     21 |          426.776 | 3397632 |  45.5536 |              47.6495 |              21.2577 |            103.527 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1188.871339064549\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-23-29\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.37087712148119\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.649092584828495\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1619\n",
+      "  episodes_total: 34351\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5297549913326899\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005221013678237796\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007347211508507219\n",
+      "        total_loss: 0.11089812219142914\n",
+      "        vf_explained_var: 0.9989762306213379\n",
+      "        vf_loss: 0.11746600580712159\n",
+      "    num_steps_sampled: 3559424\n",
+      "    num_steps_trained: 3559424\n",
+      "  iterations_since_restore: 22\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.358333333333334\n",
+      "    gpu_util_percent0: 0.4533333333333333\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15069056354724808\n",
+      "    mean_env_wait_ms: 0.6533427688463339\n",
+      "    mean_inference_ms: 4.1868632869880145\n",
+      "    mean_raw_obs_processing_ms: 0.3931430489205958\n",
+      "  time_since_restore: 447.03629064559937\n",
+      "  time_this_iter_s: 20.260456800460815\n",
+      "  time_total_s: 447.03629064559937\n",
+      "  timers:\n",
+      "    learn_throughput: 11328.702\n",
+      "    learn_time_ms: 14281.601\n",
+      "    sample_throughput: 28676.086\n",
+      "    sample_time_ms: 5642.053\n",
+      "    update_time_ms: 25.502\n",
+      "  timestamp: 1604233409\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3559424\n",
+      "  training_iteration: 22\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     22 |          447.036 | 3559424 |  45.6491 |              47.6495 |              21.2577 |            103.371 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1187.1485870048955\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-23-50\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.22507502500834\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.737731878552886\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1637\n",
+      "  episodes_total: 35988\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5043502772847811\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0051153005721668405\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007804131872641544\n",
+      "        total_loss: 0.08389338354269664\n",
+      "        vf_explained_var: 0.9992172718048096\n",
+      "        vf_loss: 0.09092663104335467\n",
+      "    num_steps_sampled: 3721216\n",
+      "    num_steps_trained: 3721216\n",
+      "  iterations_since_restore: 23\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.10769230769231\n",
+      "    gpu_util_percent0: 0.4111538461538462\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5692307692307685\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1504958593946037\n",
+      "    mean_env_wait_ms: 0.6533264567796601\n",
+      "    mean_inference_ms: 4.177979473432433\n",
+      "    mean_raw_obs_processing_ms: 0.39250620871910297\n",
+      "  time_since_restore: 467.43437933921814\n",
+      "  time_this_iter_s: 20.398088693618774\n",
+      "  time_total_s: 467.43437933921814\n",
+      "  timers:\n",
+      "    learn_throughput: 11352.718\n",
+      "    learn_time_ms: 14251.389\n",
+      "    sample_throughput: 28591.581\n",
+      "    sample_time_ms: 5658.729\n",
+      "    update_time_ms: 26.115\n",
+      "  timestamp: 1604233430\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3721216\n",
+      "  training_iteration: 23\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     23 |          467.434 | 3721216 |  45.7377 |              47.6495 |              21.2577 |            103.225 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1185.5975664953805\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-24-11\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.0935496741588\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.817267047191805\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1607\n",
+      "  episodes_total: 37595\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.477857805788517\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005301223369315267\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007187186017593679\n",
+      "        total_loss: 0.0712860906496644\n",
+      "        vf_explained_var: 0.9993272423744202\n",
+      "        vf_loss: 0.07765195891261101\n",
+      "    num_steps_sampled: 3883008\n",
+      "    num_steps_trained: 3883008\n",
+      "  iterations_since_restore: 24\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.808000000000003\n",
+      "    gpu_util_percent0: 0.41159999999999997\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1503165502098337\n",
+      "    mean_env_wait_ms: 0.6533168664023659\n",
+      "    mean_inference_ms: 4.1697739229427855\n",
+      "    mean_raw_obs_processing_ms: 0.39192023267055776\n",
+      "  time_since_restore: 487.5962927341461\n",
+      "  time_this_iter_s: 20.16191339492798\n",
+      "  time_total_s: 487.5962927341461\n",
+      "  timers:\n",
+      "    learn_throughput: 11345.276\n",
+      "    learn_time_ms: 14260.737\n",
+      "    sample_throughput: 28572.718\n",
+      "    sample_time_ms: 5662.465\n",
+      "    update_time_ms: 25.82\n",
+      "  timestamp: 1604233451\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3883008\n",
+      "  training_iteration: 24\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     24 |          487.596 | 3883008 |  45.8173 |              47.6495 |              21.2577 |            103.094 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1184.1811960574025\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-24-32\n",
+      "  done: false\n",
+      "  episode_len_mean: 102.9715546711567\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.8903373462669\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1603\n",
+      "  episodes_total: 39198\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4582882300019264\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004777276888489723\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006818818922814292\n",
+      "        total_loss: 0.06491830727706353\n",
+      "        vf_explained_var: 0.9993811249732971\n",
+      "        vf_loss: 0.07101081249614556\n",
+      "    num_steps_sampled: 4044800\n",
+      "    num_steps_trained: 4044800\n",
+      "  iterations_since_restore: 25\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.5\n",
+      "    gpu_util_percent0: 0.4164\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15014800244823473\n",
+      "    mean_env_wait_ms: 0.6533117275008512\n",
+      "    mean_inference_ms: 4.162086682670796\n",
+      "    mean_raw_obs_processing_ms: 0.3913710326970964\n",
+      "  time_since_restore: 507.939138174057\n",
+      "  time_this_iter_s: 20.34284543991089\n",
+      "  time_total_s: 507.939138174057\n",
+      "  timers:\n",
+      "    learn_throughput: 11324.044\n",
+      "    learn_time_ms: 14287.476\n",
+      "    sample_throughput: 28578.2\n",
+      "    sample_time_ms: 5661.378\n",
+      "    update_time_ms: 26.054\n",
+      "  timestamp: 1604233472\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4044800\n",
+      "  training_iteration: 25\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "2020-11-01 12:24:33,109\tWARNING util.py:136 -- The `process_trial` operation took 0.5145235061645508 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     25 |          507.939 | 4044800 |  45.8903 |              47.6495 |              21.2577 |            102.972 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1182.8508853681267\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-24-53\n",
+      "  done: false\n",
+      "  episode_len_mean: 102.8577064444989\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 45.95893087655392\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1612\n",
+      "  episodes_total: 40810\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4304437041282654\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005302870219262938\n",
+      "        model: {}\n",
+      "        policy_loss: -0.005320634130233278\n",
+      "        total_loss: 0.04602197107548515\n",
+      "        vf_explained_var: 0.9995622038841248\n",
+      "        vf_loss: 0.05102753918617964\n",
+      "    num_steps_sampled: 4206592\n",
+      "    num_steps_trained: 4206592\n",
+      "  iterations_since_restore: 26\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.031999999999996\n",
+      "    gpu_util_percent0: 0.4016\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14998848423358552\n",
+      "    mean_env_wait_ms: 0.6533120076712385\n",
+      "    mean_inference_ms: 4.154808738528033\n",
+      "    mean_raw_obs_processing_ms: 0.39085074710802764\n",
+      "  time_since_restore: 528.287171125412\n",
+      "  time_this_iter_s: 20.34803295135498\n",
+      "  time_total_s: 528.287171125412\n",
+      "  timers:\n",
+      "    learn_throughput: 11314.942\n",
+      "    learn_time_ms: 14298.969\n",
+      "    sample_throughput: 28539.444\n",
+      "    sample_time_ms: 5669.066\n",
+      "    update_time_ms: 26.44\n",
+      "  timestamp: 1604233493\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4206592\n",
+      "  training_iteration: 26\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "2020-11-01 12:24:54,161\tWARNING util.py:136 -- The `process_trial` operation took 0.5190365314483643 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     26 |          528.287 | 4206592 |  45.9589 |              47.6495 |              21.2577 |            102.858 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1181.6014053620693\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-25-14\n",
+      "  done: false\n",
+      "  episode_len_mean: 102.75047708799623\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 46.02298669108478\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1635\n",
+      "  episodes_total: 42445\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.40619519104560214\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004850935540162027\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00712713325143947\n",
+      "        total_loss: 0.04109010814378659\n",
+      "        vf_explained_var: 0.9995940327644348\n",
+      "        vf_loss: 0.047935244316856064\n",
+      "    num_steps_sampled: 4368384\n",
+      "    num_steps_trained: 4368384\n",
+      "  iterations_since_restore: 27\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.9\n",
+      "    gpu_util_percent0: 0.4608\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14983678273441456\n",
+      "    mean_env_wait_ms: 0.6533202946066505\n",
+      "    mean_inference_ms: 4.147883359756837\n",
+      "    mean_raw_obs_processing_ms: 0.3903567513935103\n",
+      "  time_since_restore: 548.3913764953613\n",
+      "  time_this_iter_s: 20.10420536994934\n",
+      "  time_total_s: 548.3913764953613\n",
+      "  timers:\n",
+      "    learn_throughput: 11320.7\n",
+      "    learn_time_ms: 14291.696\n",
+      "    sample_throughput: 28538.222\n",
+      "    sample_time_ms: 5669.309\n",
+      "    update_time_ms: 25.152\n",
+      "  timestamp: 1604233514\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4368384\n",
+      "  training_iteration: 27\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "2020-11-01 12:25:14,990\tWARNING util.py:136 -- The `process_trial` operation took 0.5334711074829102 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     27 |          548.391 | 4368384 |   46.023 |              47.6495 |              21.2577 |             102.75 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1180.4515455020326\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-25-35\n",
+      "  done: false\n",
+      "  episode_len_mean: 102.6508271495677\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 46.08214646909499\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1622\n",
+      "  episodes_total: 44067\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.380776509642601\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005104163157132764\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008030562166823074\n",
+      "        total_loss: 0.03263539479424556\n",
+      "        vf_explained_var: 0.9996626377105713\n",
+      "        vf_loss: 0.0406011367837588\n",
+      "    num_steps_sampled: 4530176\n",
+      "    num_steps_trained: 4530176\n",
+      "  iterations_since_restore: 28\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.724\n",
+      "    gpu_util_percent0: 0.3708000000000001\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14969387594042302\n",
+      "    mean_env_wait_ms: 0.6533341674809083\n",
+      "    mean_inference_ms: 4.141387554786562\n",
+      "    mean_raw_obs_processing_ms: 0.3898925942202909\n",
+      "  time_since_restore: 568.5405015945435\n",
+      "  time_this_iter_s: 20.14912509918213\n",
+      "  time_total_s: 568.5405015945435\n",
+      "  timers:\n",
+      "    learn_throughput: 11317.578\n",
+      "    learn_time_ms: 14295.638\n",
+      "    sample_throughput: 28540.327\n",
+      "    sample_time_ms: 5668.891\n",
+      "    update_time_ms: 27.131\n",
+      "  timestamp: 1604233535\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4530176\n",
+      "  training_iteration: 28\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "2020-11-01 12:25:35,895\tWARNING util.py:136 -- The `process_trial` operation took 0.5552034378051758 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     28 |          568.541 | 4530176 |  46.0821 |              47.6495 |              21.2577 |            102.651 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1179.389183503528\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-25-56\n",
+      "  done: false\n",
+      "  episode_len_mean: 102.55971097000219\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 46.136667351393584\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1603\n",
+      "  episodes_total: 45670\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3589545438687007\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005236083525232971\n",
+      "        model: {}\n",
+      "        policy_loss: -0.005505533023097087\n",
+      "        total_loss: 0.02439635860112806\n",
+      "        vf_explained_var: 0.9997479915618896\n",
+      "        vf_loss: 0.029819565049062174\n",
+      "    num_steps_sampled: 4691968\n",
+      "    num_steps_trained: 4691968\n",
+      "  iterations_since_restore: 29\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.04\n",
+      "    gpu_util_percent0: 0.3832\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14955992403902243\n",
+      "    mean_env_wait_ms: 0.65334881821503\n",
+      "    mean_inference_ms: 4.135306265563136\n",
+      "    mean_raw_obs_processing_ms: 0.3894575857046042\n",
+      "  time_since_restore: 588.7653107643127\n",
+      "  time_this_iter_s: 20.224809169769287\n",
+      "  time_total_s: 588.7653107643127\n",
+      "  timers:\n",
+      "    learn_throughput: 11315.541\n",
+      "    learn_time_ms: 14298.212\n",
+      "    sample_throughput: 28543.882\n",
+      "    sample_time_ms: 5668.185\n",
+      "    update_time_ms: 27.394\n",
+      "  timestamp: 1604233556\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4691968\n",
+      "  training_iteration: 29\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "2020-11-01 12:25:56,904\tWARNING util.py:136 -- The `process_trial` operation took 0.5792350769042969 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc             |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | RUNNING  | 172.17.0.4:2614 |     29 |          588.765 | 4691968 |  46.1367 |              47.6495 |              21.2577 |             102.56 |\n",
+      "+-------------------------+----------+-----------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_f98d0_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1662\n",
+      "    time_step_mean: 1178.4016808145811\n",
+      "    time_step_min: 1150\n",
+      "  date: 2020-11-01_12-26-17\n",
+      "  done: true\n",
+      "  episode_len_mean: 102.47428873611845\n",
+      "  episode_reward_max: 47.64948453608255\n",
+      "  episode_reward_mean: 46.187587432602626\n",
+      "  episode_reward_min: 21.25773195876288\n",
+      "  episodes_this_iter: 1605\n",
+      "  episodes_total: 47275\n",
+      "  experiment_id: 4f772b2988194f3c8d0ee5aa58be90b8\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.34163280328114826\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005014610709622502\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006093008596508298\n",
+      "        total_loss: 0.02250015801594903\n",
+      "        vf_explained_var: 0.9997627139091492\n",
+      "        vf_loss: 0.028513251959035795\n",
+      "    num_steps_sampled: 4853760\n",
+      "    num_steps_trained: 4853760\n",
+      "  iterations_since_restore: 30\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.592000000000002\n",
+      "    gpu_util_percent0: 0.4032\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 2614\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14943275367352743\n",
+      "    mean_env_wait_ms: 0.6533656820836667\n",
+      "    mean_inference_ms: 4.129545135974801\n",
+      "    mean_raw_obs_processing_ms: 0.38904409500028486\n",
+      "  time_since_restore: 608.9674067497253\n",
+      "  time_this_iter_s: 20.202095985412598\n",
+      "  time_total_s: 608.9674067497253\n",
+      "  timers:\n",
+      "    learn_throughput: 11308.582\n",
+      "    learn_time_ms: 14307.01\n",
+      "    sample_throughput: 28493.852\n",
+      "    sample_time_ms: 5678.137\n",
+      "    update_time_ms: 27.445\n",
+      "  timestamp: 1604233577\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4853760\n",
+      "  training_iteration: 30\n",
+      "  trial_id: f98d0_00000\n",
+      "  \n",
+      "2020-11-01 12:26:18,072\tWARNING util.py:136 -- The `process_trial` operation took 0.6780698299407959 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | TERMINATED |       |     30 |          608.967 | 4853760 |  46.1876 |              47.6495 |              21.2577 |            102.474 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.2/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_f98d0_00000 | TERMINATED |       |     30 |          608.967 | 4853760 |  46.1876 |              47.6495 |              21.2577 |            102.474 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 2387\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201013_114553-3qwfavbb/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201013_114553-3qwfavbb/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201101_121542-dcx4y6ut/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201101_121542-dcx4y6ut/logs/debug-internal.log\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 4473\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 261.82891\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 280.71717\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     time_step_min 3203\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 607\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602590160\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min 1150\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step 7\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime 636\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp 1604233578\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max 1662\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean 1178.40168\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max 47.64948\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min 21.25773\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean 46.18759\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total 47275\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration 30\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     time_step_min ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step ‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration ‚ñÅ\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mrandom\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/3qwfavbb\u001b[0m\n",
-      "2020-10-13 11:56:07,517 - wandb.wandb_agent - INFO - Cleaning up finished run: 3qwfavbb\n",
-      "2020-10-13 11:56:07,847 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-13 11:56:07,847 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta52\n",
-      "2020-10-13 11:56:07,849 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python RandomGreedy.py --instance_path=/JSS/JSS/env/instances/ta52\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mdaily-sweep-3\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/dcx4y6ut\u001b[0m\n",
+      "2020-11-01 12:26:27,483 - wandb.wandb_agent - INFO - Cleaning up finished run: dcx4y6ut\n",
+      "2020-11-01 12:26:27,816 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-01 12:26:27,816 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/la/la14.txt\n",
+      "2020-11-01 12:26:27,818 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/la/la14.txt\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "2020-11-01 12:26:32,836 - wandb.wandb_agent - INFO - Running runs: ['fdb3wrbz']\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mrandom\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/1x8v92mc\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/av30c7rd\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201013_115608-av30c7rd\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mpretty-sweep-4\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/9xhkl8my\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/fdb3wrbz\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201101_122629-fdb3wrbz\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "2020-10-13 11:56:12,862 - wandb.wandb_agent - INFO - Running runs: ['av30c7rd']\n"
+      "2020-11-01 12:26:33,451\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "\n",
+      "\n",
+      "\u001b[2m\u001b[36m(pid=34519)\u001b[0m 2020-11-01 12:26:36,168\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=34570)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34570)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34576)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34576)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34560)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34560)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34533)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34533)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34524)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34524)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34568)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34568)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34565)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34565)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34446)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34446)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34580)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34580)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34537)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34537)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34514)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34514)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34563)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34563)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34513)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34513)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34574)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34574)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34541)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34541)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34468)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34468)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34562)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34562)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34507)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34507)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34529)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34529)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34531)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34531)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34470)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34470)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34455)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34455)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34456)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34456)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34534)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34534)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34569)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34569)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34471)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34471)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34520)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34520)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34528)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34528)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34530)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34530)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34557)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34557)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34464)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34464)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34526)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34526)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34457)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34457)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34451)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34451)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34559)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34559)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34460)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34460)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34539)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34539)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34555)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34555)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34512)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34512)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34544)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34544)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34572)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34572)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34466)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34466)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34448)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34448)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34467)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34467)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34478)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34478)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34469)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34469)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34449)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34449)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34453)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34453)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34445)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34445)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34462)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34462)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34564)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34564)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34461)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34461)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34452)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34452)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34550)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34550)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34552)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34552)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34454)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34454)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34525)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34525)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34518)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34518)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34472)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34472)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34473)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34473)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34527)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34527)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34447)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34447)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34521)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34521)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34545)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34545)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34474)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34474)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34465)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34465)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34546)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34546)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34444)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34444)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34450)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34450)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34506)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34506)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34509)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34509)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34517)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34517)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34458)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34458)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34504)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34504)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34522)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34522)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34511)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34511)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34532)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34532)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34510)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34510)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=34523)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=34523)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1454.2822384428223\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-27-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 116.8627760252366\n",
+      "  episode_reward_max: 43.628865979381466\n",
+      "  episode_reward_mean: 35.1516797294221\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1268\n",
+      "  episodes_total: 1268\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1449244519074757\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007437704674278696\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00946940048985804\n",
+      "        total_loss: 55.00797367095947\n",
+      "        vf_explained_var: 0.7487528324127197\n",
+      "        vf_loss: 55.01652844746908\n",
+      "    num_steps_sampled: 161792\n",
+      "    num_steps_trained: 161792\n",
+      "  iterations_since_restore: 1\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 33.32592592592592\n",
+      "    gpu_util_percent0: 0.37481481481481477\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.4333333333333336\n",
+      "    vram_util_percent0: 0.08172381958869332\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.17352791633057102\n",
+      "    mean_env_wait_ms: 0.6811877523118316\n",
+      "    mean_inference_ms: 5.513942130136428\n",
+      "    mean_raw_obs_processing_ms: 0.46789447756981023\n",
+      "  time_since_restore: 22.46462392807007\n",
+      "  time_this_iter_s: 22.46462392807007\n",
+      "  time_total_s: 22.46462392807007\n",
+      "  timers:\n",
+      "    learn_throughput: 11371.952\n",
+      "    learn_time_ms: 14227.284\n",
+      "    sample_throughput: 19879.837\n",
+      "    sample_time_ms: 8138.497\n",
+      "    update_time_ms: 45.686\n",
+      "  timestamp: 1604233624\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 161792\n",
+      "  training_iteration: 1\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.3/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      1 |          22.4646 | 161792 |  35.1517 |              43.6289 |              15.1237 |            116.863 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1429.8942416258938\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-27-24\n",
+      "  done: false\n",
+      "  episode_len_mean: 115.70282317979198\n",
+      "  episode_reward_max: 43.62886597938149\n",
+      "  episode_reward_mean: 36.47211286591811\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1424\n",
+      "  episodes_total: 2692\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1268550356229146\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008950442192144692\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011557365185581148\n",
+      "        total_loss: 11.271961530049643\n",
+      "        vf_explained_var: 0.8903374671936035\n",
+      "        vf_loss: 11.282292207082113\n",
+      "    num_steps_sampled: 323584\n",
+      "    num_steps_trained: 323584\n",
+      "  iterations_since_restore: 2\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 28.204166666666666\n",
+      "    gpu_util_percent0: 0.3720833333333333\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5041666666666664\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16745964588212917\n",
+      "    mean_env_wait_ms: 0.6700706773938075\n",
+      "    mean_inference_ms: 5.2198211020760175\n",
+      "    mean_raw_obs_processing_ms: 0.44909095470061955\n",
+      "  time_since_restore: 43.08302044868469\n",
+      "  time_this_iter_s: 20.618396520614624\n",
+      "  time_total_s: 43.08302044868469\n",
+      "  timers:\n",
+      "    learn_throughput: 11459.566\n",
+      "    learn_time_ms: 14118.51\n",
+      "    sample_throughput: 22090.571\n",
+      "    sample_time_ms: 7324.03\n",
+      "    update_time_ms: 43.623\n",
+      "  timestamp: 1604233644\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 323584\n",
+      "  training_iteration: 2\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      2 |           43.083 | 323584 |  36.4721 |              43.6289 |              15.1237 |            115.703 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1407.1911728846624\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-27-44\n",
+      "  done: false\n",
+      "  episode_len_mean: 114.6612669245648\n",
+      "  episode_reward_max: 43.62886597938149\n",
+      "  episode_reward_mean: 37.6345041775509\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1444\n",
+      "  episodes_total: 4136\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1022506852944691\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.010415543181200823\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012739738527064523\n",
+      "        total_loss: 7.215804258982341\n",
+      "        vf_explained_var: 0.9305369257926941\n",
+      "        vf_loss: 7.227012077967326\n",
+      "    num_steps_sampled: 485376\n",
+      "    num_steps_trained: 485376\n",
+      "  iterations_since_restore: 3\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.087500000000002\n",
+      "    gpu_util_percent0: 0.37166666666666665\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5083333333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16367371839915396\n",
+      "    mean_env_wait_ms: 0.6634994267663006\n",
+      "    mean_inference_ms: 5.010201052450705\n",
+      "    mean_raw_obs_processing_ms: 0.43679686634070053\n",
+      "  time_since_restore: 63.11474633216858\n",
+      "  time_this_iter_s: 20.031725883483887\n",
+      "  time_total_s: 63.11474633216858\n",
+      "  timers:\n",
+      "    learn_throughput: 11492.021\n",
+      "    learn_time_ms: 14078.638\n",
+      "    sample_throughput: 23568.631\n",
+      "    sample_time_ms: 6864.718\n",
+      "    update_time_ms: 36.686\n",
+      "  timestamp: 1604233664\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 485376\n",
+      "  training_iteration: 3\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      3 |          63.1147 | 485376 |  37.6345 |              43.6289 |              15.1237 |            114.661 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1387.3099946552645\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-28-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 113.46689093484419\n",
+      "  episode_reward_max: 43.62886597938149\n",
+      "  episode_reward_mean: 38.66655836570194\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1512\n",
+      "  episodes_total: 5648\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0769410530726116\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0091951551536719\n",
+      "        model: {}\n",
+      "        policy_loss: -0.014317200764101775\n",
+      "        total_loss: 4.537634372711182\n",
+      "        vf_explained_var: 0.9580438733100891\n",
+      "        vf_loss: 4.550650993982951\n",
+      "    num_steps_sampled: 647168\n",
+      "    num_steps_trained: 647168\n",
+      "  iterations_since_restore: 4\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.513043478260872\n",
+      "    gpu_util_percent0: 0.4282608695652175\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5173913043478255\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16103675868646175\n",
+      "    mean_env_wait_ms: 0.6593645086787177\n",
+      "    mean_inference_ms: 4.8577089246646405\n",
+      "    mean_raw_obs_processing_ms: 0.42820753933909217\n",
+      "  time_since_restore: 82.97024512290955\n",
+      "  time_this_iter_s: 19.855498790740967\n",
+      "  time_total_s: 82.97024512290955\n",
+      "  timers:\n",
+      "    learn_throughput: 11507.373\n",
+      "    learn_time_ms: 14059.855\n",
+      "    sample_throughput: 24572.569\n",
+      "    sample_time_ms: 6584.253\n",
+      "    update_time_ms: 36.417\n",
+      "  timestamp: 1604233684\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 647168\n",
+      "  training_iteration: 4\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      4 |          82.9702 | 647168 |  38.6666 |              43.6289 |              15.1237 |            113.467 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1372.565211247704\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-28-24\n",
+      "  done: false\n",
+      "  episode_len_mean: 112.40185601799774\n",
+      "  episode_reward_max: 43.62886597938149\n",
+      "  episode_reward_mean: 39.44358453260353\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1464\n",
+      "  episodes_total: 7112\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.044628421465556\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009637930120031038\n",
+      "        model: {}\n",
+      "        policy_loss: -0.015056621322097877\n",
+      "        total_loss: 3.0646530191103616\n",
+      "        vf_explained_var: 0.9720616936683655\n",
+      "        vf_loss: 3.0783043106396994\n",
+      "    num_steps_sampled: 808960\n",
+      "    num_steps_trained: 808960\n",
+      "  iterations_since_restore: 5\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.678260869565225\n",
+      "    gpu_util_percent0: 0.44782608695652176\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.508695652173913\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15917782673985395\n",
+      "    mean_env_wait_ms: 0.6566410931470792\n",
+      "    mean_inference_ms: 4.748845539400791\n",
+      "    mean_raw_obs_processing_ms: 0.4219900698653993\n",
+      "  time_since_restore: 102.53243446350098\n",
+      "  time_this_iter_s: 19.56218934059143\n",
+      "  time_total_s: 102.53243446350098\n",
+      "  timers:\n",
+      "    learn_throughput: 11519.656\n",
+      "    learn_time_ms: 14044.863\n",
+      "    sample_throughput: 25439.401\n",
+      "    sample_time_ms: 6359.898\n",
+      "    update_time_ms: 36.623\n",
+      "  timestamp: 1604233704\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 808960\n",
+      "  training_iteration: 5\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      5 |          102.532 | 808960 |  39.4436 |              43.6289 |              15.1237 |            112.402 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1360.8171568057655\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-28-44\n",
+      "  done: false\n",
+      "  episode_len_mean: 111.4935170178282\n",
+      "  episode_reward_max: 43.628865979381494\n",
+      "  episode_reward_mean: 40.051285019680485\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1526\n",
+      "  episodes_total: 8638\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.008226936062177\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008314594083155194\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011961210014609\n",
+      "        total_loss: 2.176027218500773\n",
+      "        vf_explained_var: 0.9811684489250183\n",
+      "        vf_loss: 2.1868296464284263\n",
+      "    num_steps_sampled: 970752\n",
+      "    num_steps_trained: 970752\n",
+      "  iterations_since_restore: 6\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.013043478260872\n",
+      "    gpu_util_percent0: 0.3617391304347826\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.526086956521739\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1576901249282025\n",
+      "    mean_env_wait_ms: 0.6545619856913595\n",
+      "    mean_inference_ms: 4.661154625197678\n",
+      "    mean_raw_obs_processing_ms: 0.41690510698628513\n",
+      "  time_since_restore: 122.15152668952942\n",
+      "  time_this_iter_s: 19.619092226028442\n",
+      "  time_total_s: 122.15152668952942\n",
+      "  timers:\n",
+      "    learn_throughput: 11527.252\n",
+      "    learn_time_ms: 14035.609\n",
+      "    sample_throughput: 26007.896\n",
+      "    sample_time_ms: 6220.88\n",
+      "    update_time_ms: 34.802\n",
+      "  timestamp: 1604233724\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 970752\n",
+      "  training_iteration: 6\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      6 |          122.152 | 970752 |  40.0513 |              43.6289 |              15.1237 |            111.494 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1351.9801127931137\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-29-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 110.74748570301716\n",
+      "  episode_reward_max: 43.628865979381494\n",
+      "  episode_reward_mean: 40.50685320002359\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1504\n",
+      "  episodes_total: 10142\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9799897919098536\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007559017394669354\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013409938372205943\n",
+      "        total_loss: 1.644661049048106\n",
+      "        vf_explained_var: 0.9860979914665222\n",
+      "        vf_loss: 1.657049189011256\n",
+      "    num_steps_sampled: 1132544\n",
+      "    num_steps_trained: 1132544\n",
+      "  iterations_since_restore: 7\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.617391304347827\n",
+      "    gpu_util_percent0: 0.4239130434782608\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5217391304347827\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15650830518376826\n",
+      "    mean_env_wait_ms: 0.6530945053208776\n",
+      "    mean_inference_ms: 4.592386951937845\n",
+      "    mean_raw_obs_processing_ms: 0.41293979722789786\n",
+      "  time_since_restore: 141.83420944213867\n",
+      "  time_this_iter_s: 19.682682752609253\n",
+      "  time_total_s: 141.83420944213867\n",
+      "  timers:\n",
+      "    learn_throughput: 11524.629\n",
+      "    learn_time_ms: 14038.804\n",
+      "    sample_throughput: 26444.386\n",
+      "    sample_time_ms: 6118.198\n",
+      "    update_time_ms: 34.8\n",
+      "  timestamp: 1604233744\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1132544\n",
+      "  training_iteration: 7\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      7 |          141.834 | 1132544 |  40.5069 |              43.6289 |              15.1237 |            110.747 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1344.8585277968427\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-29-24\n",
+      "  done: false\n",
+      "  episode_len_mean: 110.01317252587461\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 40.877048782789124\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1549\n",
+      "  episodes_total: 11691\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9412155350049337\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007740705274045467\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012592456245329231\n",
+      "        total_loss: 1.2588910659154255\n",
+      "        vf_explained_var: 0.9897112846374512\n",
+      "        vf_loss: 1.2704059382279713\n",
+      "    num_steps_sampled: 1294336\n",
+      "    num_steps_trained: 1294336\n",
+      "  iterations_since_restore: 8\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.641666666666662\n",
+      "    gpu_util_percent0: 0.36375\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15552725421090569\n",
+      "    mean_env_wait_ms: 0.6520038178299323\n",
+      "    mean_inference_ms: 4.534700600650504\n",
+      "    mean_raw_obs_processing_ms: 0.4096249844377919\n",
+      "  time_since_restore: 161.7805416584015\n",
+      "  time_this_iter_s: 19.946332216262817\n",
+      "  time_total_s: 161.7805416584015\n",
+      "  timers:\n",
+      "    learn_throughput: 11521.5\n",
+      "    learn_time_ms: 14042.616\n",
+      "    sample_throughput: 26651.946\n",
+      "    sample_time_ms: 6070.551\n",
+      "    update_time_ms: 35.676\n",
+      "  timestamp: 1604233764\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1294336\n",
+      "  training_iteration: 8\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      8 |          161.781 | 1294336 |   40.877 |              43.6289 |              15.1237 |            110.013 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1339.0663941252176\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-29-44\n",
+      "  done: false\n",
+      "  episode_len_mean: 109.368015705225\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 41.17822892762955\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1553\n",
+      "  episodes_total: 13244\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9079152892033259\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0072981525445356965\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010131318272518305\n",
+      "        total_loss: 0.949362243215243\n",
+      "        vf_explained_var: 0.9923892021179199\n",
+      "        vf_loss: 0.9584879080454508\n",
+      "    num_steps_sampled: 1456128\n",
+      "    num_steps_trained: 1456128\n",
+      "  iterations_since_restore: 9\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.282608695652176\n",
+      "    gpu_util_percent0: 0.4395652173913045\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5739130434782598\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15471153080234437\n",
+      "    mean_env_wait_ms: 0.6512233236906179\n",
+      "    mean_inference_ms: 4.486726941601045\n",
+      "    mean_raw_obs_processing_ms: 0.40688607613554295\n",
+      "  time_since_restore: 181.48901557922363\n",
+      "  time_this_iter_s: 19.708473920822144\n",
+      "  time_total_s: 181.48901557922363\n",
+      "  timers:\n",
+      "    learn_throughput: 11526.677\n",
+      "    learn_time_ms: 14036.31\n",
+      "    sample_throughput: 26886.791\n",
+      "    sample_time_ms: 6017.527\n",
+      "    update_time_ms: 34.242\n",
+      "  timestamp: 1604233784\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1456128\n",
+      "  training_iteration: 9\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |      9 |          181.489 | 1456128 |  41.1782 |              43.6289 |              15.1237 |            109.368 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1334.3752454465434\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-30-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.81228046473926\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 41.422618434137334\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1560\n",
+      "  episodes_total: 14804\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.869762510061264\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0075428458318735165\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009666072980811199\n",
+      "        total_loss: 0.7397742619117101\n",
+      "        vf_explained_var: 0.994184672832489\n",
+      "        vf_loss: 0.7483666588862737\n",
+      "    num_steps_sampled: 1617920\n",
+      "    num_steps_trained: 1617920\n",
+      "  iterations_since_restore: 10\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.833333333333332\n",
+      "    gpu_util_percent0: 0.31916666666666665\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15401087755433693\n",
+      "    mean_env_wait_ms: 0.6506167732676298\n",
+      "    mean_inference_ms: 4.4459608456017845\n",
+      "    mean_raw_obs_processing_ms: 0.4045366030538726\n",
+      "  time_since_restore: 201.30298805236816\n",
+      "  time_this_iter_s: 19.81397247314453\n",
+      "  time_total_s: 201.30298805236816\n",
+      "  timers:\n",
+      "    learn_throughput: 11523.296\n",
+      "    learn_time_ms: 14040.428\n",
+      "    sample_throughput: 27081.39\n",
+      "    sample_time_ms: 5974.287\n",
+      "    update_time_ms: 34.416\n",
+      "  timestamp: 1604233804\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1617920\n",
+      "  training_iteration: 10\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     10 |          201.303 | 1617920 |  41.4226 |              43.6289 |              15.1237 |            108.812 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1330.5694061408346\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-30-25\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.33194716242662\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 41.6210186464785\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1548\n",
+      "  episodes_total: 16352\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8340491751829783\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006366107768068711\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009178327105473727\n",
+      "        total_loss: 0.6055479943752289\n",
+      "        vf_explained_var: 0.9953274130821228\n",
+      "        vf_loss: 0.6138701190551122\n",
+      "    num_steps_sampled: 1779712\n",
+      "    num_steps_trained: 1779712\n",
+      "  iterations_since_restore: 11\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.46666666666667\n",
+      "    gpu_util_percent0: 0.37000000000000005\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15341006651547073\n",
+      "    mean_env_wait_ms: 0.650181832154063\n",
+      "    mean_inference_ms: 4.4112331201416435\n",
+      "    mean_raw_obs_processing_ms: 0.40254424691393875\n",
+      "  time_since_restore: 221.31696248054504\n",
+      "  time_this_iter_s: 20.01397442817688\n",
+      "  time_total_s: 221.31696248054504\n",
+      "  timers:\n",
+      "    learn_throughput: 11519.218\n",
+      "    learn_time_ms: 14045.398\n",
+      "    sample_throughput: 28288.316\n",
+      "    sample_time_ms: 5719.393\n",
+      "    update_time_ms: 33.239\n",
+      "  timestamp: 1604233825\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1779712\n",
+      "  training_iteration: 11\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     11 |          221.317 | 1779712 |   41.621 |              43.6289 |              15.1237 |            108.332 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1327.2690156599554\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-30-44\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.91024281328495\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 41.79185500832971\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1563\n",
+      "  episodes_total: 17915\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8071108410755793\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006752079119905829\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009787990158656612\n",
+      "        total_loss: 0.4518005351225535\n",
+      "        vf_explained_var: 0.9965425133705139\n",
+      "        vf_loss: 0.46064166476329166\n",
+      "    num_steps_sampled: 1941504\n",
+      "    num_steps_trained: 1941504\n",
+      "  iterations_since_restore: 12\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.460869565217386\n",
+      "    gpu_util_percent0: 0.4491304347826087\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5739130434782598\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15287929224510746\n",
+      "    mean_env_wait_ms: 0.649859182584871\n",
+      "    mean_inference_ms: 4.38067919169665\n",
+      "    mean_raw_obs_processing_ms: 0.40078994113897726\n",
+      "  time_since_restore: 240.91183829307556\n",
+      "  time_this_iter_s: 19.594875812530518\n",
+      "  time_total_s: 240.91183829307556\n",
+      "  timers:\n",
+      "    learn_throughput: 11522.834\n",
+      "    learn_time_ms: 14040.99\n",
+      "    sample_throughput: 28801.969\n",
+      "    sample_time_ms: 5617.394\n",
+      "    update_time_ms: 31.109\n",
+      "  timestamp: 1604233844\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1941504\n",
+      "  training_iteration: 12\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     12 |          240.912 | 1941504 |  41.7919 |              43.6289 |              15.1237 |             107.91 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1324.5485464368408\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-31-05\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.57801746276323\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 41.93343711446106\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1555\n",
+      "  episodes_total: 19470\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7690616647402445\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0065094192589943605\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010228886812304458\n",
+      "        total_loss: 0.3978396902481715\n",
+      "        vf_explained_var: 0.9969910979270935\n",
+      "        vf_loss: 0.4071512247125308\n",
+      "    num_steps_sampled: 2103296\n",
+      "    num_steps_trained: 2103296\n",
+      "  iterations_since_restore: 13\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.712500000000002\n",
+      "    gpu_util_percent0: 0.40458333333333335\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15241252197920177\n",
+      "    mean_env_wait_ms: 0.6496173991986937\n",
+      "    mean_inference_ms: 4.353964505075953\n",
+      "    mean_raw_obs_processing_ms: 0.3992612917500714\n",
+      "  time_since_restore: 260.9479441642761\n",
+      "  time_this_iter_s: 20.03610587120056\n",
+      "  time_total_s: 260.9479441642761\n",
+      "  timers:\n",
+      "    learn_throughput: 11495.402\n",
+      "    learn_time_ms: 14074.497\n",
+      "    sample_throughput: 29007.895\n",
+      "    sample_time_ms: 5577.516\n",
+      "    update_time_ms: 31.578\n",
+      "  timestamp: 1604233865\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2103296\n",
+      "  training_iteration: 13\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     13 |          260.948 | 2103296 |  41.9334 |              43.6289 |              15.1237 |            107.578 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1322.226\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-31-25\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.29351081530783\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.054489449346825\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1565\n",
+      "  episodes_total: 21035\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7336616019407908\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0064004862603421015\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008804643754653322\n",
+      "        total_loss: 0.3278699740767479\n",
+      "        vf_explained_var: 0.9975385069847107\n",
+      "        vf_loss: 0.33576134343942005\n",
+      "    num_steps_sampled: 2265088\n",
+      "    num_steps_trained: 2265088\n",
+      "  iterations_since_restore: 14\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.491666666666664\n",
+      "    gpu_util_percent0: 0.32416666666666666\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15199672808495696\n",
+      "    mean_env_wait_ms: 0.6494243284753675\n",
+      "    mean_inference_ms: 4.330132256006824\n",
+      "    mean_raw_obs_processing_ms: 0.39788879446265113\n",
+      "  time_since_restore: 280.836660861969\n",
+      "  time_this_iter_s: 19.88871669769287\n",
+      "  time_total_s: 280.836660861969\n",
+      "  timers:\n",
+      "    learn_throughput: 11490.563\n",
+      "    learn_time_ms: 14080.424\n",
+      "    sample_throughput: 29086.085\n",
+      "    sample_time_ms: 5562.523\n",
+      "    update_time_ms: 31.329\n",
+      "  timestamp: 1604233885\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2265088\n",
+      "  training_iteration: 14\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     14 |          280.837 | 2265088 |  42.0545 |              43.6289 |              15.1237 |            107.294 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1320.1891843971632\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-31-45\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.05496791325514\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.16018734187611\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1560\n",
+      "  episodes_total: 22595\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7067601482073466\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006438710144720972\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010162829411759352\n",
+      "        total_loss: 0.2576701765259107\n",
+      "        vf_explained_var: 0.9980695843696594\n",
+      "        vf_loss: 0.26689864446719486\n",
+      "    num_steps_sampled: 2426880\n",
+      "    num_steps_trained: 2426880\n",
+      "  iterations_since_restore: 15\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.404347826086955\n",
+      "    gpu_util_percent0: 0.3060869565217391\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5739130434782598\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15162840674833306\n",
+      "    mean_env_wait_ms: 0.6492838913939692\n",
+      "    mean_inference_ms: 4.308869472451551\n",
+      "    mean_raw_obs_processing_ms: 0.3966675681414554\n",
+      "  time_since_restore: 300.50964164733887\n",
+      "  time_this_iter_s: 19.672980785369873\n",
+      "  time_total_s: 300.50964164733887\n",
+      "  timers:\n",
+      "    learn_throughput: 11490.394\n",
+      "    learn_time_ms: 14080.631\n",
+      "    sample_throughput: 29052.047\n",
+      "    sample_time_ms: 5569.04\n",
+      "    update_time_ms: 29.544\n",
+      "  timestamp: 1604233905\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2426880\n",
+      "  training_iteration: 15\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     15 |           300.51 | 2426880 |  42.1602 |              43.6289 |              15.1237 |            107.055 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1318.4346780546457\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-32-06\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.84805829262234\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.2515568060273\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1559\n",
+      "  episodes_total: 24154\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6743296881516775\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006636352161876857\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00975274900944593\n",
+      "        total_loss: 0.23658680294950804\n",
+      "        vf_explained_var: 0.9982344508171082\n",
+      "        vf_loss: 0.2453494481742382\n",
+      "    num_steps_sampled: 2588672\n",
+      "    num_steps_trained: 2588672\n",
+      "  iterations_since_restore: 16\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.991666666666664\n",
+      "    gpu_util_percent0: 0.33416666666666667\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15129670825904046\n",
+      "    mean_env_wait_ms: 0.6491675546769002\n",
+      "    mean_inference_ms: 4.289756257599939\n",
+      "    mean_raw_obs_processing_ms: 0.39556396298388297\n",
+      "  time_since_restore: 320.2244436740875\n",
+      "  time_this_iter_s: 19.714802026748657\n",
+      "  time_total_s: 320.2244436740875\n",
+      "  timers:\n",
+      "    learn_throughput: 11483.06\n",
+      "    learn_time_ms: 14089.624\n",
+      "    sample_throughput: 29083.807\n",
+      "    sample_time_ms: 5562.958\n",
+      "    update_time_ms: 30.273\n",
+      "  timestamp: 1604233926\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2588672\n",
+      "  training_iteration: 16\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     16 |          320.224 | 2588672 |  42.2516 |              43.6289 |              15.1237 |            106.848 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1316.8612322791712\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-32-26\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.6750029170394\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.333070966857214\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1557\n",
+      "  episodes_total: 25711\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6487419108549753\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006434203319561978\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010461925092386082\n",
+      "        total_loss: 0.18015940859913826\n",
+      "        vf_explained_var: 0.9986326694488525\n",
+      "        vf_loss: 0.1896588665743669\n",
+      "    num_steps_sampled: 2750464\n",
+      "    num_steps_trained: 2750464\n",
+      "  iterations_since_restore: 17\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.604347826086954\n",
+      "    gpu_util_percent0: 0.4843478260869565\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5739130434782598\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15099532910883745\n",
+      "    mean_env_wait_ms: 0.6490596721671469\n",
+      "    mean_inference_ms: 4.272450859355698\n",
+      "    mean_raw_obs_processing_ms: 0.3945623850682107\n",
+      "  time_since_restore: 339.8860158920288\n",
+      "  time_this_iter_s: 19.661572217941284\n",
+      "  time_total_s: 339.8860158920288\n",
+      "  timers:\n",
+      "    learn_throughput: 11488.521\n",
+      "    learn_time_ms: 14082.927\n",
+      "    sample_throughput: 29093.385\n",
+      "    sample_time_ms: 5561.127\n",
+      "    update_time_ms: 30.118\n",
+      "  timestamp: 1604233946\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2750464\n",
+      "  training_iteration: 17\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     17 |          339.886 | 2750464 |  42.3331 |              43.6289 |              15.1237 |            106.675 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1315.4772084481176\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-32-46\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.53646368305209\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.40514405004122\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1549\n",
+      "  episodes_total: 27260\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6147788117329279\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006190092225248615\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00844319449000371\n",
+      "        total_loss: 0.15160012369354567\n",
+      "        vf_explained_var: 0.9988699555397034\n",
+      "        vf_loss: 0.15911269187927246\n",
+      "    num_steps_sampled: 2912256\n",
+      "    num_steps_trained: 2912256\n",
+      "  iterations_since_restore: 18\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.108333333333334\n",
+      "    gpu_util_percent0: 0.40958333333333335\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15072186700405005\n",
+      "    mean_env_wait_ms: 0.6489589654205459\n",
+      "    mean_inference_ms: 4.256776083733925\n",
+      "    mean_raw_obs_processing_ms: 0.3936520268695803\n",
+      "  time_since_restore: 359.4751284122467\n",
+      "  time_this_iter_s: 19.589112520217896\n",
+      "  time_total_s: 359.4751284122467\n",
+      "  timers:\n",
+      "    learn_throughput: 11502.311\n",
+      "    learn_time_ms: 14066.043\n",
+      "    sample_throughput: 29213.386\n",
+      "    sample_time_ms: 5538.283\n",
+      "    update_time_ms: 28.725\n",
+      "  timestamp: 1604233966\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2912256\n",
+      "  training_iteration: 18\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     18 |          359.475 | 2912256 |  42.4051 |              43.6289 |              15.1237 |            106.536 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1314.2216509171762\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-33-07\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.39508657482911\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.47027859269532\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1559\n",
+      "  episodes_total: 28819\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5793089667956034\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005601404506402711\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009277280846921107\n",
+      "        total_loss: 0.12121031371255715\n",
+      "        vf_explained_var: 0.9990783333778381\n",
+      "        vf_loss: 0.1296569655338923\n",
+      "    num_steps_sampled: 3074048\n",
+      "    num_steps_trained: 3074048\n",
+      "  iterations_since_restore: 19\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.066666666666663\n",
+      "    gpu_util_percent0: 0.3979166666666667\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1504690836889304\n",
+      "    mean_env_wait_ms: 0.6488696992500765\n",
+      "    mean_inference_ms: 4.242361495701079\n",
+      "    mean_raw_obs_processing_ms: 0.39280933914753613\n",
+      "  time_since_restore: 379.6264307498932\n",
+      "  time_this_iter_s: 20.151302337646484\n",
+      "  time_total_s: 379.6264307498932\n",
+      "  timers:\n",
+      "    learn_throughput: 11477.051\n",
+      "    learn_time_ms: 14097.001\n",
+      "    sample_throughput: 29213.738\n",
+      "    sample_time_ms: 5538.216\n",
+      "    update_time_ms: 30.107\n",
+      "  timestamp: 1604233987\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3074048\n",
+      "  training_iteration: 19\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     19 |          379.626 | 3074048 |  42.4703 |              43.6289 |              15.1237 |            106.395 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1313.0996867271228\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-33-27\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.30233860342555\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.528634054575335\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1541\n",
+      "  episodes_total: 30360\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5525011867284775\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005483048929211994\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009698755030209819\n",
+      "        total_loss: 0.09727698999146621\n",
+      "        vf_explained_var: 0.9992494583129883\n",
+      "        vf_loss: 0.10615538681546847\n",
+      "    num_steps_sampled: 3235840\n",
+      "    num_steps_trained: 3235840\n",
+      "  iterations_since_restore: 20\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.075\n",
+      "    gpu_util_percent0: 0.43416666666666665\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15023976063883285\n",
+      "    mean_env_wait_ms: 0.6487841053204015\n",
+      "    mean_inference_ms: 4.22926206402729\n",
+      "    mean_raw_obs_processing_ms: 0.3920470315060969\n",
+      "  time_since_restore: 399.4815435409546\n",
+      "  time_this_iter_s: 19.8551127910614\n",
+      "  time_total_s: 399.4815435409546\n",
+      "  timers:\n",
+      "    learn_throughput: 11477.093\n",
+      "    learn_time_ms: 14096.949\n",
+      "    sample_throughput: 29223.589\n",
+      "    sample_time_ms: 5536.349\n",
+      "    update_time_ms: 30.052\n",
+      "  timestamp: 1604234007\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3235840\n",
+      "  training_iteration: 20\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     20 |          399.482 | 3235840 |  42.5286 |              43.6289 |              15.1237 |            106.302 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1312.0721969578171\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-33-47\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.19890350877193\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.58196716016847\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1560\n",
+      "  episodes_total: 31920\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5238876193761826\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005134576039078335\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009323944701463915\n",
+      "        total_loss: 0.0834660033384959\n",
+      "        vf_explained_var: 0.9993599057197571\n",
+      "        vf_loss: 0.09202497576673825\n",
+      "    num_steps_sampled: 3397632\n",
+      "    num_steps_trained: 3397632\n",
+      "  iterations_since_restore: 21\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.617391304347823\n",
+      "    gpu_util_percent0: 0.4456521739130434\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5739130434782598\n",
+      "    vram_util_percent0: 0.10109872089209576\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15002456451472287\n",
+      "    mean_env_wait_ms: 0.6487047149986278\n",
+      "    mean_inference_ms: 4.2170315233202755\n",
+      "    mean_raw_obs_processing_ms: 0.3913318433017469\n",
+      "  time_since_restore: 419.1035006046295\n",
+      "  time_this_iter_s: 19.621957063674927\n",
+      "  time_total_s: 419.1035006046295\n",
+      "  timers:\n",
+      "    learn_throughput: 11505.071\n",
+      "    learn_time_ms: 14062.668\n",
+      "    sample_throughput: 29282.333\n",
+      "    sample_time_ms: 5525.243\n",
+      "    update_time_ms: 30.159\n",
+      "  timestamp: 1604234027\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3397632\n",
+      "  training_iteration: 21\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     21 |          419.104 | 3397632 |   42.582 |              43.6289 |              15.1237 |            106.199 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1311.1479420914095\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-34-08\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.12468999312756\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.630005430799805\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1547\n",
+      "  episodes_total: 33467\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.49701932817697525\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005340795614756644\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010354490535974037\n",
+      "        total_loss: 0.07194800892223914\n",
+      "        vf_explained_var: 0.9994434714317322\n",
+      "        vf_loss: 0.0814828487734\n",
+      "    num_steps_sampled: 3559424\n",
+      "    num_steps_trained: 3559424\n",
+      "  iterations_since_restore: 22\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.325\n",
+      "    gpu_util_percent0: 0.37458333333333327\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14982882739957487\n",
+      "    mean_env_wait_ms: 0.6486235678612109\n",
+      "    mean_inference_ms: 4.205782708358309\n",
+      "    mean_raw_obs_processing_ms: 0.39066600076646296\n",
+      "  time_since_restore: 438.92495369911194\n",
+      "  time_this_iter_s: 19.821453094482422\n",
+      "  time_total_s: 438.92495369911194\n",
+      "  timers:\n",
+      "    learn_throughput: 11494.245\n",
+      "    learn_time_ms: 14075.914\n",
+      "    sample_throughput: 29271.325\n",
+      "    sample_time_ms: 5527.321\n",
+      "    update_time_ms: 31.246\n",
+      "  timestamp: 1604234048\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3559424\n",
+      "  training_iteration: 22\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     22 |          438.925 | 3559424 |    42.63 |              43.6289 |              15.1237 |            106.125 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1310.3136940853449\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-34-28\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.08285951027172\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.67351320494282\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1532\n",
+      "  episodes_total: 34999\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4672253554066022\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005037993270282944\n",
+      "        model: {}\n",
+      "        policy_loss: -0.00685786875934961\n",
+      "        total_loss: 0.06014314107596874\n",
+      "        vf_explained_var: 0.9995446801185608\n",
+      "        vf_loss: 0.06622702504197757\n",
+      "    num_steps_sampled: 3721216\n",
+      "    num_steps_trained: 3721216\n",
+      "  iterations_since_restore: 23\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.15416666666667\n",
+      "    gpu_util_percent0: 0.3633333333333333\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1496488629333257\n",
+      "    mean_env_wait_ms: 0.6485461766268289\n",
+      "    mean_inference_ms: 4.195418444138528\n",
+      "    mean_raw_obs_processing_ms: 0.3900530056382457\n",
+      "  time_since_restore: 458.79926347732544\n",
+      "  time_this_iter_s: 19.8743097782135\n",
+      "  time_total_s: 458.79926347732544\n",
+      "  timers:\n",
+      "    learn_throughput: 11517.323\n",
+      "    learn_time_ms: 14047.709\n",
+      "    sample_throughput: 29258.763\n",
+      "    sample_time_ms: 5529.694\n",
+      "    update_time_ms: 32.041\n",
+      "  timestamp: 1604234068\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3721216\n",
+      "  training_iteration: 23\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     23 |          458.799 | 3721216 |  42.6735 |              43.6289 |              15.1237 |            106.083 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1309.5558966207143\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-34-49\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.0737637588303\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.71301353738489\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1523\n",
+      "  episodes_total: 36522\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4321850041548411\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0057120353837187094\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009051567967010973\n",
+      "        total_loss: 0.05148738451922933\n",
+      "        vf_explained_var: 0.9995923042297363\n",
+      "        vf_loss: 0.059612637696166836\n",
+      "    num_steps_sampled: 3883008\n",
+      "    num_steps_trained: 3883008\n",
+      "  iterations_since_restore: 24\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.6125\n",
+      "    gpu_util_percent0: 0.35374999999999995\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14948084784143242\n",
+      "    mean_env_wait_ms: 0.6484509328204054\n",
+      "    mean_inference_ms: 4.185812792415693\n",
+      "    mean_raw_obs_processing_ms: 0.38947414275749065\n",
+      "  time_since_restore: 478.84203243255615\n",
+      "  time_this_iter_s: 20.042768955230713\n",
+      "  time_total_s: 478.84203243255615\n",
+      "  timers:\n",
+      "    learn_throughput: 11501.58\n",
+      "    learn_time_ms: 14066.937\n",
+      "    sample_throughput: 29276.676\n",
+      "    sample_time_ms: 5526.31\n",
+      "    update_time_ms: 31.839\n",
+      "  timestamp: 1604234089\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3883008\n",
+      "  training_iteration: 24\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     24 |          478.842 | 3883008 |   42.713 |              43.6289 |              15.1237 |            106.074 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1308.854354630823\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-35-09\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.09423946178913\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.74960796999439\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1530\n",
+      "  episodes_total: 38052\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.40411561727523804\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004467884932334225\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007561299067068224\n",
+      "        total_loss: 0.0415184999195238\n",
+      "        vf_explained_var: 0.9996755123138428\n",
+      "        vf_loss: 0.0483882799744606\n",
+      "    num_steps_sampled: 4044800\n",
+      "    num_steps_trained: 4044800\n",
+      "  iterations_since_restore: 25\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.00833333333333\n",
+      "    gpu_util_percent0: 0.3670833333333334\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14932390485994398\n",
+      "    mean_env_wait_ms: 0.6483514849496743\n",
+      "    mean_inference_ms: 4.176778186793073\n",
+      "    mean_raw_obs_processing_ms: 0.38892542131807273\n",
+      "  time_since_restore: 498.6148178577423\n",
+      "  time_this_iter_s: 19.772785425186157\n",
+      "  time_total_s: 498.6148178577423\n",
+      "  timers:\n",
+      "    learn_throughput: 11493.615\n",
+      "    learn_time_ms: 14076.686\n",
+      "    sample_throughput: 29308.484\n",
+      "    sample_time_ms: 5520.313\n",
+      "    update_time_ms: 31.941\n",
+      "  timestamp: 1604234109\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4044800\n",
+      "  training_iteration: 25\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "2020-11-01 12:35:10,587\tWARNING util.py:136 -- The `process_trial` operation took 0.5158097743988037 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     25 |          498.615 | 4044800 |  42.7496 |              43.6289 |              15.1237 |            106.094 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1308.2223065826438\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-35-30\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.13998179427531\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.78251353698859\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1496\n",
+      "  episodes_total: 39548\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3710899030168851\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005478878777163724\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008370831223146524\n",
+      "        total_loss: 0.03866795807455977\n",
+      "        vf_explained_var: 0.9996917843818665\n",
+      "        vf_loss: 0.04667644730458657\n",
+      "    num_steps_sampled: 4206592\n",
+      "    num_steps_trained: 4206592\n",
+      "  iterations_since_restore: 26\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.104166666666668\n",
+      "    gpu_util_percent0: 0.3454166666666667\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14918014489593562\n",
+      "    mean_env_wait_ms: 0.6482521101593612\n",
+      "    mean_inference_ms: 4.168509263007074\n",
+      "    mean_raw_obs_processing_ms: 0.38842351941405706\n",
+      "  time_since_restore: 518.4228372573853\n",
+      "  time_this_iter_s: 19.808019399642944\n",
+      "  time_total_s: 518.4228372573853\n",
+      "  timers:\n",
+      "    learn_throughput: 11494.237\n",
+      "    learn_time_ms: 14075.924\n",
+      "    sample_throughput: 29292.382\n",
+      "    sample_time_ms: 5523.347\n",
+      "    update_time_ms: 32.345\n",
+      "  timestamp: 1604234130\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4206592\n",
+      "  training_iteration: 26\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "2020-11-01 12:35:31,149\tWARNING util.py:136 -- The `process_trial` operation took 0.5663919448852539 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     26 |          518.423 | 4206592 |  42.7825 |              43.6289 |              15.1237 |             106.14 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1307.6298878595808\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-35-51\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.21381074168798\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.81325152203418\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1507\n",
+      "  episodes_total: 41055\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3422661249836286\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004864616707588236\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008692707876131559\n",
+      "        total_loss: 0.03158797137439251\n",
+      "        vf_explained_var: 0.9997386336326599\n",
+      "        vf_loss: 0.03996535111218691\n",
+      "    num_steps_sampled: 4368384\n",
+      "    num_steps_trained: 4368384\n",
+      "  iterations_since_restore: 27\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.462500000000002\n",
+      "    gpu_util_percent0: 0.33499999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14904403737255034\n",
+      "    mean_env_wait_ms: 0.6481460554960611\n",
+      "    mean_inference_ms: 4.160632746558721\n",
+      "    mean_raw_obs_processing_ms: 0.38794815762152746\n",
+      "  time_since_restore: 538.5130481719971\n",
+      "  time_this_iter_s: 20.090210914611816\n",
+      "  time_total_s: 538.5130481719971\n",
+      "  timers:\n",
+      "    learn_throughput: 11475.693\n",
+      "    learn_time_ms: 14098.67\n",
+      "    sample_throughput: 29224.222\n",
+      "    sample_time_ms: 5536.23\n",
+      "    update_time_ms: 32.82\n",
+      "  timestamp: 1604234151\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4368384\n",
+      "  training_iteration: 27\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "2020-11-01 12:35:52,001\tWARNING util.py:136 -- The `process_trial` operation took 0.5398478507995605 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     27 |          538.513 | 4368384 |  42.8133 |              43.6289 |              15.1237 |            106.214 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1307.0917562892712\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-36-11\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.31207674943566\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.841272069147415\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1473\n",
+      "  episodes_total: 42528\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.31406934062639874\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00531899471146365\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006233617905915405\n",
+      "        total_loss: 0.027707914200921852\n",
+      "        vf_explained_var: 0.9997760653495789\n",
+      "        vf_loss: 0.0338326171040535\n",
+      "    num_steps_sampled: 4530176\n",
+      "    num_steps_trained: 4530176\n",
+      "  iterations_since_restore: 28\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.541666666666668\n",
+      "    gpu_util_percent0: 0.38791666666666663\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14891911374014252\n",
+      "    mean_env_wait_ms: 0.6480333835817965\n",
+      "    mean_inference_ms: 4.153395707395419\n",
+      "    mean_raw_obs_processing_ms: 0.38750819763907707\n",
+      "  time_since_restore: 558.2239861488342\n",
+      "  time_this_iter_s: 19.710937976837158\n",
+      "  time_total_s: 558.2239861488342\n",
+      "  timers:\n",
+      "    learn_throughput: 11465.354\n",
+      "    learn_time_ms: 14111.382\n",
+      "    sample_throughput: 29254.98\n",
+      "    sample_time_ms: 5530.409\n",
+      "    update_time_ms: 31.925\n",
+      "  timestamp: 1604234171\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4530176\n",
+      "  training_iteration: 28\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "2020-11-01 12:36:12,490\tWARNING util.py:136 -- The `process_trial` operation took 0.5777196884155273 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     28 |          558.224 | 4530176 |  42.8413 |              43.6289 |              15.1237 |            106.312 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1306.5912378872663\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-36-32\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.44389390185694\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.86740122159219\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1469\n",
+      "  episodes_total: 43997\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.2867726534605026\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005043890094384551\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007655571622308344\n",
+      "        total_loss: 0.01982968676990519\n",
+      "        vf_explained_var: 0.999823808670044\n",
+      "        vf_loss: 0.027376449356476467\n",
+      "    num_steps_sampled: 4691968\n",
+      "    num_steps_trained: 4691968\n",
+      "  iterations_since_restore: 29\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.208333333333332\n",
+      "    gpu_util_percent0: 0.3120833333333333\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.148801680479015\n",
+      "    mean_env_wait_ms: 0.6479110446105578\n",
+      "    mean_inference_ms: 4.146556745190422\n",
+      "    mean_raw_obs_processing_ms: 0.3870915915108458\n",
+      "  time_since_restore: 578.142192363739\n",
+      "  time_this_iter_s: 19.918206214904785\n",
+      "  time_total_s: 578.142192363739\n",
+      "  timers:\n",
+      "    learn_throughput: 11477.643\n",
+      "    learn_time_ms: 14096.274\n",
+      "    sample_throughput: 29295.707\n",
+      "    sample_time_ms: 5522.72\n",
+      "    update_time_ms: 31.506\n",
+      "  timestamp: 1604234192\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4691968\n",
+      "  training_iteration: 29\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "2020-11-01 12:36:33,192\tWARNING util.py:136 -- The `process_trial` operation took 0.567206621170044 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     29 |          578.142 | 4691968 |  42.8674 |              43.6289 |              15.1237 |            106.444 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1306.1297474625158\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-36-52\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.60159721916663\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.89145908926165\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1457\n",
+      "  episodes_total: 45454\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.25657347589731216\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004977851562822859\n",
+      "        model: {}\n",
+      "        policy_loss: -0.0074265640663118875\n",
+      "        total_loss: 0.020246487848150235\n",
+      "        vf_explained_var: 0.999823272228241\n",
+      "        vf_loss: 0.02755244541913271\n",
+      "    num_steps_sampled: 4853760\n",
+      "    num_steps_trained: 4853760\n",
+      "  iterations_since_restore: 30\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.96666666666667\n",
+      "    gpu_util_percent0: 0.34375\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1486911615858267\n",
+      "    mean_env_wait_ms: 0.647780786364401\n",
+      "    mean_inference_ms: 4.140117442125262\n",
+      "    mean_raw_obs_processing_ms: 0.3867002477159633\n",
+      "  time_since_restore: 597.9215953350067\n",
+      "  time_this_iter_s: 19.7794029712677\n",
+      "  time_total_s: 597.9215953350067\n",
+      "  timers:\n",
+      "    learn_throughput: 11482.292\n",
+      "    learn_time_ms: 14090.567\n",
+      "    sample_throughput: 29325.187\n",
+      "    sample_time_ms: 5517.169\n",
+      "    update_time_ms: 29.907\n",
+      "  timestamp: 1604234212\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4853760\n",
+      "  training_iteration: 30\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "2020-11-01 12:36:53,780\tWARNING util.py:136 -- The `process_trial` operation took 0.5981490612030029 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | RUNNING  | 172.17.0.4:34519 |     30 |          597.922 | 4853760 |  42.8915 |              43.6289 |              15.1237 |            106.602 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_7b004_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1845\n",
+      "    time_step_mean: 1305.6988838856996\n",
+      "    time_step_min: 1292\n",
+      "  date: 2020-11-01_12-37-13\n",
+      "  done: true\n",
+      "  episode_len_mean: 106.77159124834733\n",
+      "  episode_reward_max: 43.6288659793815\n",
+      "  episode_reward_mean: 42.91394806184951\n",
+      "  episode_reward_min: 15.123711340206203\n",
+      "  episodes_this_iter: 1440\n",
+      "  episodes_total: 46894\n",
+      "  experiment_id: 1ac0a7e0bdbf42669f7b08f6bcd05da9\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.22576802472273508\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0045362276723608375\n",
+      "        model: {}\n",
+      "        policy_loss: -0.005217552456694345\n",
+      "        total_loss: 0.01427166493764768\n",
+      "        vf_explained_var: 0.9998777508735657\n",
+      "        vf_loss: 0.01948869600892067\n",
+      "    num_steps_sampled: 5015552\n",
+      "    num_steps_trained: 5015552\n",
+      "  iterations_since_restore: 31\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.72083333333333\n",
+      "    gpu_util_percent0: 0.36166666666666664\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.570833333333333\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 34519\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14858768250616303\n",
+      "    mean_env_wait_ms: 0.6476419244786176\n",
+      "    mean_inference_ms: 4.134089086382151\n",
+      "    mean_raw_obs_processing_ms: 0.3863330350642181\n",
+      "  time_since_restore: 617.738039970398\n",
+      "  time_this_iter_s: 19.816444635391235\n",
+      "  time_total_s: 617.738039970398\n",
+      "  timers:\n",
+      "    learn_throughput: 11472.012\n",
+      "    learn_time_ms: 14103.193\n",
+      "    sample_throughput: 29323.896\n",
+      "    sample_time_ms: 5517.411\n",
+      "    update_time_ms: 29.881\n",
+      "  timestamp: 1604234233\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 5015552\n",
+      "  training_iteration: 31\n",
+      "  trial_id: 7b004_00000\n",
+      "  \n",
+      "2020-11-01 12:37:14,609\tWARNING util.py:136 -- The `process_trial` operation took 0.7420144081115723 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | TERMINATED |       |     31 |          617.738 | 5015552 |  42.9139 |              43.6289 |              15.1237 |            106.772 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1101 12:37:14.976943 34403 34403 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Socket closed\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.2/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_7b004_00000 | TERMINATED |       |     31 |          617.738 | 5015552 |  42.9139 |              43.6289 |              15.1237 |            106.772 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 34338\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201101_122629-fdb3wrbz/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201101_122629-fdb3wrbz/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min 1292\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step 7\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime 646\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp 1604234235\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max 1845\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean 1305.69888\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max 43.62887\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min 15.12371\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean 42.91395\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total 46894\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration 31\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step ‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mpretty-sweep-4\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/fdb3wrbz\u001b[0m\n",
+      "2020-11-01 12:37:24,612 - wandb.wandb_agent - INFO - Cleaning up finished run: fdb3wrbz\n",
+      "2020-11-01 12:37:24,941 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-01 12:37:24,941 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/la/la15.txt\n",
+      "2020-11-01 12:37:24,943 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/la/la15.txt\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "2020-11-01 12:37:29,961 - wandb.wandb_agent - INFO - Running runs: ['pq2fv3jo']\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mdifferent-sweep-5\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/9xhkl8my\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/pq2fv3jo\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201101_123726-pq2fv3jo\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
+      "\n",
+      "2020-11-01 12:37:30,609\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "\n",
+      "\n",
+      "\u001b[2m\u001b[36m(pid=67571)\u001b[0m 2020-11-01 12:37:33,413\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=67560)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67560)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67520)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67520)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67567)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67567)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67478)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67478)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67518)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67518)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67536)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67536)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67514)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67514)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67448)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67448)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67564)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67564)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67534)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67534)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67524)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67524)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67529)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67529)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67569)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67569)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67563)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67563)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67445)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67445)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67547)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67547)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67531)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67531)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67540)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67540)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67545)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67545)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67462)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67462)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67447)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67447)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67453)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67453)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67469)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67469)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67452)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67452)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67541)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67541)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67477)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67477)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67446)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67446)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67475)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67475)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67553)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67553)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67472)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67472)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67468)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67468)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67556)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67556)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67450)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67450)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67566)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67566)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67527)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67527)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67455)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67455)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67457)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67457)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67456)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67456)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67466)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67466)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67459)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67459)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67476)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67476)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67467)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67467)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67516)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67516)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67521)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67521)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67515)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67515)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67512)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67512)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67568)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67568)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67551)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67551)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67519)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67519)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67537)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67537)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67525)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67525)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67546)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67546)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67451)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67451)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67581)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67581)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67449)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67449)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67530)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67530)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67562)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67562)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67533)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67533)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67522)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67522)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67464)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67464)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67573)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67573)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67463)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67463)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67506)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67506)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67555)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67555)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67523)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67523)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67544)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67544)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67461)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67461)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67513)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67513)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67479)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67479)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67510)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67510)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67526)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67526)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67473)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67473)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67548)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67548)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67460)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67460)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67552)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67552)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67509)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67509)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67465)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67465)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67517)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67517)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=67559)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=67559)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1540.9259259259259\n",
+      "    time_step_min: 1302\n",
+      "  date: 2020-11-01_12-38-00\n",
+      "  done: false\n",
+      "  episode_len_mean: 118.22310126582279\n",
+      "  episode_reward_max: 44.242424242424256\n",
+      "  episode_reward_mean: 32.03126997826365\n",
+      "  episode_reward_min: 13.989898989898997\n",
+      "  episodes_this_iter: 1264\n",
+      "  episodes_total: 1264\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1447077592213948\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005619530449621379\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007155387702672063\n",
+      "        total_loss: 40.47618579864502\n",
+      "        vf_explained_var: 0.7891119122505188\n",
+      "        vf_loss: 40.48278999328613\n",
+      "    num_steps_sampled: 161792\n",
+      "    num_steps_trained: 161792\n",
+      "  iterations_since_restore: 1\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 30.218518518518522\n",
+      "    gpu_util_percent0: 0.36629629629629634\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.440740740740741\n",
+      "    vram_util_percent0: 0.08366130971903357\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16496450454226685\n",
+      "    mean_env_wait_ms: 0.6576280720479034\n",
+      "    mean_inference_ms: 4.788716243497749\n",
+      "    mean_raw_obs_processing_ms: 0.4281524023401697\n",
+      "  time_since_restore: 22.09221601486206\n",
+      "  time_this_iter_s: 22.09221601486206\n",
+      "  time_total_s: 22.09221601486206\n",
+      "  timers:\n",
+      "    learn_throughput: 10922.862\n",
+      "    learn_time_ms: 14812.235\n",
+      "    sample_throughput: 22479.319\n",
+      "    sample_time_ms: 7197.371\n",
+      "    update_time_ms: 46.828\n",
+      "  timestamp: 1604234280\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 161792\n",
+      "  training_iteration: 1\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.3/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      1 |          22.0922 | 161792 |  32.0313 |              44.2424 |              13.9899 |            118.223 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1531.6367083807356\n",
+      "    time_step_min: 1302\n",
+      "  date: 2020-11-01_12-38-22\n",
+      "  done: false\n",
+      "  episode_len_mean: 117.54839910647803\n",
+      "  episode_reward_max: 44.242424242424256\n",
+      "  episode_reward_mean: 32.54738374060787\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1422\n",
+      "  episodes_total: 2686\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1255147556463878\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.009991972551991543\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012213830874922374\n",
+      "        total_loss: 10.040241003036499\n",
+      "        vf_explained_var: 0.9008758068084717\n",
+      "        vf_loss: 10.051019430160522\n",
+      "    num_steps_sampled: 323584\n",
+      "    num_steps_trained: 323584\n",
+      "  iterations_since_restore: 2\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 29.98846153846154\n",
+      "    gpu_util_percent0: 0.4046153846153846\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.511538461538462\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16294808968714042\n",
+      "    mean_env_wait_ms: 0.6564847478917705\n",
+      "    mean_inference_ms: 4.782872969782969\n",
+      "    mean_raw_obs_processing_ms: 0.42698163136099937\n",
+      "  time_since_restore: 43.73459029197693\n",
+      "  time_this_iter_s: 21.642374277114868\n",
+      "  time_total_s: 43.73459029197693\n",
+      "  timers:\n",
+      "    learn_throughput: 10992.045\n",
+      "    learn_time_ms: 14719.008\n",
+      "    sample_throughput: 22905.576\n",
+      "    sample_time_ms: 7063.433\n",
+      "    update_time_ms: 38.41\n",
+      "  timestamp: 1604234302\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 323584\n",
+      "  training_iteration: 2\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.5/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      2 |          43.7346 | 323584 |  32.5474 |              44.2424 |              13.0808 |            117.548 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1510.1358481262328\n",
+      "    time_step_min: 1302\n",
+      "  date: 2020-11-01_12-38-43\n",
+      "  done: false\n",
+      "  episode_len_mean: 116.32862362971986\n",
+      "  episode_reward_max: 44.79797979797981\n",
+      "  episode_reward_mean: 33.70579116376925\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1419\n",
+      "  episodes_total: 4105\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.1123215953509014\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00993400338726739\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013690461909087995\n",
+      "        total_loss: 6.506547371546428\n",
+      "        vf_explained_var: 0.9344742298126221\n",
+      "        vf_loss: 6.518807013829549\n",
+      "    num_steps_sampled: 485376\n",
+      "    num_steps_trained: 485376\n",
+      "  iterations_since_restore: 3\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 28.468000000000004\n",
+      "    gpu_util_percent0: 0.36560000000000004\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.508\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.16101849961752382\n",
+      "    mean_env_wait_ms: 0.6546024350645249\n",
+      "    mean_inference_ms: 4.701779084784631\n",
+      "    mean_raw_obs_processing_ms: 0.4230887594071475\n",
+      "  time_since_restore: 64.32173490524292\n",
+      "  time_this_iter_s: 20.58714461326599\n",
+      "  time_total_s: 64.32173490524292\n",
+      "  timers:\n",
+      "    learn_throughput: 11037.784\n",
+      "    learn_time_ms: 14658.015\n",
+      "    sample_throughput: 24159.746\n",
+      "    sample_time_ms: 6696.759\n",
+      "    update_time_ms: 34.468\n",
+      "  timestamp: 1604234323\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 485376\n",
+      "  training_iteration: 3\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      3 |          64.3217 | 485376 |  33.7058 |               44.798 |              13.0808 |            116.329 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1488.4381143065161\n",
+      "    time_step_min: 1270\n",
+      "  date: 2020-11-01_12-39-03\n",
+      "  done: false\n",
+      "  episode_len_mean: 114.89247699801551\n",
+      "  episode_reward_max: 46.01010101010102\n",
+      "  episode_reward_mean: 34.80499565381399\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1438\n",
+      "  episodes_total: 5543\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0760109821955364\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.010554853981981674\n",
+      "        model: {}\n",
+      "        policy_loss: -0.017120405255506437\n",
+      "        total_loss: 4.882782578468323\n",
+      "        vf_explained_var: 0.9524574279785156\n",
+      "        vf_loss: 4.898330052693685\n",
+      "    num_steps_sampled: 647168\n",
+      "    num_steps_trained: 647168\n",
+      "  iterations_since_restore: 4\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.83076923076923\n",
+      "    gpu_util_percent0: 0.33230769230769225\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5076923076923077\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15936923843872866\n",
+      "    mean_env_wait_ms: 0.6531312998927246\n",
+      "    mean_inference_ms: 4.622904338928759\n",
+      "    mean_raw_obs_processing_ms: 0.4189887193273442\n",
+      "  time_since_restore: 85.05826711654663\n",
+      "  time_this_iter_s: 20.73653221130371\n",
+      "  time_total_s: 85.05826711654663\n",
+      "  timers:\n",
+      "    learn_throughput: 11028.796\n",
+      "    learn_time_ms: 14669.96\n",
+      "    sample_throughput: 24936.84\n",
+      "    sample_time_ms: 6488.071\n",
+      "    update_time_ms: 46.059\n",
+      "  timestamp: 1604234343\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 647168\n",
+      "  training_iteration: 4\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      4 |          85.0583 | 647168 |   34.805 |              46.0101 |              13.0808 |            114.892 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1466.4215029231427\n",
+      "    time_step_min: 1237\n",
+      "  date: 2020-11-01_12-39-24\n",
+      "  done: false\n",
+      "  episode_len_mean: 113.48583970546588\n",
+      "  episode_reward_max: 47.52525252525255\n",
+      "  episode_reward_mean: 35.910843066747915\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1519\n",
+      "  episodes_total: 7062\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 1.0269921322663624\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.010993095813319087\n",
+      "        model: {}\n",
+      "        policy_loss: -0.013592622436893484\n",
+      "        total_loss: 3.9119317531585693\n",
+      "        vf_explained_var: 0.9633958339691162\n",
+      "        vf_loss: 3.923839290936788\n",
+      "    num_steps_sampled: 808960\n",
+      "    num_steps_trained: 808960\n",
+      "  iterations_since_restore: 5\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.444000000000006\n",
+      "    gpu_util_percent0: 0.41679999999999995\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.516\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1580018213167273\n",
+      "    mean_env_wait_ms: 0.6519685995559447\n",
+      "    mean_inference_ms: 4.555161635142564\n",
+      "    mean_raw_obs_processing_ms: 0.41520922328594023\n",
+      "  time_since_restore: 105.7582585811615\n",
+      "  time_this_iter_s: 20.699991464614868\n",
+      "  time_total_s: 105.7582585811615\n",
+      "  timers:\n",
+      "    learn_throughput: 11021.266\n",
+      "    learn_time_ms: 14679.983\n",
+      "    sample_throughput: 25435.818\n",
+      "    sample_time_ms: 6360.794\n",
+      "    update_time_ms: 44.668\n",
+      "  timestamp: 1604234364\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 808960\n",
+      "  training_iteration: 5\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      5 |          105.758 | 808960 |  35.9108 |              47.5253 |              13.0808 |            113.486 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1447.9500235183443\n",
+      "    time_step_min: 1237\n",
+      "  date: 2020-11-01_12-39-45\n",
+      "  done: false\n",
+      "  episode_len_mean: 112.33274874313106\n",
+      "  episode_reward_max: 47.52525252525255\n",
+      "  episode_reward_mean: 36.86168359616273\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1491\n",
+      "  episodes_total: 8553\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.987803190946579\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.010113457528253397\n",
+      "        model: {}\n",
+      "        policy_loss: -0.014161262234362463\n",
+      "        total_loss: 3.0733113487561545\n",
+      "        vf_explained_var: 0.9713076949119568\n",
+      "        vf_loss: 3.0859439174334207\n",
+      "    num_steps_sampled: 970752\n",
+      "    num_steps_trained: 970752\n",
+      "  iterations_since_restore: 6\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.396\n",
+      "    gpu_util_percent0: 0.3632000000000001\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5239999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15689234927636098\n",
+      "    mean_env_wait_ms: 0.651134098255352\n",
+      "    mean_inference_ms: 4.500464998774646\n",
+      "    mean_raw_obs_processing_ms: 0.4120524597642815\n",
+      "  time_since_restore: 126.29982709884644\n",
+      "  time_this_iter_s: 20.541568517684937\n",
+      "  time_total_s: 126.29982709884644\n",
+      "  timers:\n",
+      "    learn_throughput: 11029.447\n",
+      "    learn_time_ms: 14669.094\n",
+      "    sample_throughput: 25808.454\n",
+      "    sample_time_ms: 6268.954\n",
+      "    update_time_ms: 43.186\n",
+      "  timestamp: 1604234385\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 970752\n",
+      "  training_iteration: 6\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |     ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      6 |            126.3 | 970752 |  36.8617 |              47.5253 |              13.0808 |            112.333 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+--------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1430.1320079522864\n",
+      "    time_step_min: 1228\n",
+      "  date: 2020-11-01_12-40-06\n",
+      "  done: false\n",
+      "  episode_len_mean: 111.28944504896627\n",
+      "  episode_reward_max: 48.48484848484849\n",
+      "  episode_reward_mean: 37.7558351344087\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1556\n",
+      "  episodes_total: 10109\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.9375320275624593\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.008831425181900462\n",
+      "        model: {}\n",
+      "        policy_loss: -0.014223781297914684\n",
+      "        total_loss: 2.650870760281881\n",
+      "        vf_explained_var: 0.9759369492530823\n",
+      "        vf_loss: 2.6637970407803855\n",
+      "    num_steps_sampled: 1132544\n",
+      "    num_steps_trained: 1132544\n",
+      "  iterations_since_restore: 7\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.449999999999996\n",
+      "    gpu_util_percent0: 0.35692307692307695\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.565384615384615\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15594457790714622\n",
+      "    mean_env_wait_ms: 0.6505920718367179\n",
+      "    mean_inference_ms: 4.453229425218937\n",
+      "    mean_raw_obs_processing_ms: 0.409256308610765\n",
+      "  time_since_restore: 146.91562390327454\n",
+      "  time_this_iter_s: 20.6157968044281\n",
+      "  time_total_s: 146.91562390327454\n",
+      "  timers:\n",
+      "    learn_throughput: 11035.377\n",
+      "    learn_time_ms: 14661.212\n",
+      "    sample_throughput: 26039.628\n",
+      "    sample_time_ms: 6213.299\n",
+      "    update_time_ms: 41.221\n",
+      "  timestamp: 1604234406\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1132544\n",
+      "  training_iteration: 7\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      7 |          146.916 | 1132544 |  37.7558 |              48.4848 |              13.0808 |            111.289 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1413.9141553297743\n",
+      "    time_step_min: 1219\n",
+      "  date: 2020-11-01_12-40-27\n",
+      "  done: false\n",
+      "  episode_len_mean: 110.37700420132042\n",
+      "  episode_reward_max: 49.040404040404056\n",
+      "  episode_reward_mean: 38.58040665594469\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1554\n",
+      "  episodes_total: 11663\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8849463810523351\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00801295922913899\n",
+      "        model: {}\n",
+      "        policy_loss: -0.012614224765760204\n",
+      "        total_loss: 2.1787688732147217\n",
+      "        vf_explained_var: 0.9803922772407532\n",
+      "        vf_loss: 2.190222958723704\n",
+      "    num_steps_sampled: 1294336\n",
+      "    num_steps_trained: 1294336\n",
+      "  iterations_since_restore: 8\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.924000000000007\n",
+      "    gpu_util_percent0: 0.3896\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15514960562097774\n",
+      "    mean_env_wait_ms: 0.650196011864452\n",
+      "    mean_inference_ms: 4.41380605191362\n",
+      "    mean_raw_obs_processing_ms: 0.40683273492153127\n",
+      "  time_since_restore: 167.58297491073608\n",
+      "  time_this_iter_s: 20.667351007461548\n",
+      "  time_total_s: 167.58297491073608\n",
+      "  timers:\n",
+      "    learn_throughput: 11046.514\n",
+      "    learn_time_ms: 14646.43\n",
+      "    sample_throughput: 26162.052\n",
+      "    sample_time_ms: 6184.224\n",
+      "    update_time_ms: 41.682\n",
+      "  timestamp: 1604234427\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1294336\n",
+      "  training_iteration: 8\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      8 |          167.583 | 1294336 |  38.5804 |              49.0404 |              13.0808 |            110.377 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1399.354544764219\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-40-48\n",
+      "  done: false\n",
+      "  episode_len_mean: 109.57285519745801\n",
+      "  episode_reward_max: 49.04040404040408\n",
+      "  episode_reward_mean: 39.3178455763567\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1555\n",
+      "  episodes_total: 13218\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.8404552837212881\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007818623019071916\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011729774332100837\n",
+      "        total_loss: 1.9283219973246257\n",
+      "        vf_explained_var: 0.9828620553016663\n",
+      "        vf_loss: 1.9389082888762157\n",
+      "    num_steps_sampled: 1456128\n",
+      "    num_steps_trained: 1456128\n",
+      "  iterations_since_restore: 9\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.368000000000002\n",
+      "    gpu_util_percent0: 0.39\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15447110974777709\n",
+      "    mean_env_wait_ms: 0.6499648656278564\n",
+      "    mean_inference_ms: 4.380306434888785\n",
+      "    mean_raw_obs_processing_ms: 0.4047426878747494\n",
+      "  time_since_restore: 188.20489048957825\n",
+      "  time_this_iter_s: 20.621915578842163\n",
+      "  time_total_s: 188.20489048957825\n",
+      "  timers:\n",
+      "    learn_throughput: 11046.003\n",
+      "    learn_time_ms: 14647.108\n",
+      "    sample_throughput: 26334.762\n",
+      "    sample_time_ms: 6143.667\n",
+      "    update_time_ms: 40.969\n",
+      "  timestamp: 1604234448\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1456128\n",
+      "  training_iteration: 9\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |      9 |          188.205 | 1456128 |  39.3178 |              49.0404 |              13.0808 |            109.573 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1385.9825049162541\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-41-09\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.85056772100567\n",
+      "  episode_reward_max: 49.04040404040408\n",
+      "  episode_reward_mean: 40.00051201389402\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1578\n",
+      "  episodes_total: 14796\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7908046692609787\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007631780773711701\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011734772803417096\n",
+      "        total_loss: 1.5385288000106812\n",
+      "        vf_explained_var: 0.9865396022796631\n",
+      "        vf_loss: 1.5491326252619426\n",
+      "    num_steps_sampled: 1617920\n",
+      "    num_steps_trained: 1617920\n",
+      "  iterations_since_restore: 10\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.732000000000006\n",
+      "    gpu_util_percent0: 0.38040000000000007\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15388031735599098\n",
+      "    mean_env_wait_ms: 0.6498212598888915\n",
+      "    mean_inference_ms: 4.351027781645246\n",
+      "    mean_raw_obs_processing_ms: 0.40287986554113797\n",
+      "  time_since_restore: 208.505108833313\n",
+      "  time_this_iter_s: 20.30021834373474\n",
+      "  time_total_s: 208.505108833313\n",
+      "  timers:\n",
+      "    learn_throughput: 11056.477\n",
+      "    learn_time_ms: 14633.233\n",
+      "    sample_throughput: 26549.982\n",
+      "    sample_time_ms: 6093.865\n",
+      "    update_time_ms: 40.654\n",
+      "  timestamp: 1604234469\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1617920\n",
+      "  training_iteration: 10\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     10 |          208.505 | 1617920 |  40.0005 |              49.0404 |              13.0808 |            108.851 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1373.7871090163433\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-41-29\n",
+      "  done: false\n",
+      "  episode_len_mean: 108.19760771390212\n",
+      "  episode_reward_max: 49.040404040404084\n",
+      "  episode_reward_mean: 40.61680826327476\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1590\n",
+      "  episodes_total: 16386\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7443548093239466\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.007289290855017801\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011087999266843932\n",
+      "        total_loss: 1.2828177213668823\n",
+      "        vf_explained_var: 0.9888736605644226\n",
+      "        vf_loss: 1.2928200562795003\n",
+      "    num_steps_sampled: 1779712\n",
+      "    num_steps_trained: 1779712\n",
+      "  iterations_since_restore: 11\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.136\n",
+      "    gpu_util_percent0: 0.3856\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15335957704686504\n",
+      "    mean_env_wait_ms: 0.6497293652386255\n",
+      "    mean_inference_ms: 4.325424204249887\n",
+      "    mean_raw_obs_processing_ms: 0.4011955359649914\n",
+      "  time_since_restore: 229.01598072052002\n",
+      "  time_this_iter_s: 20.51087188720703\n",
+      "  time_total_s: 229.01598072052002\n",
+      "  timers:\n",
+      "    learn_throughput: 11068.877\n",
+      "    learn_time_ms: 14616.84\n",
+      "    sample_throughput: 27216.446\n",
+      "    sample_time_ms: 5944.641\n",
+      "    update_time_ms: 39.857\n",
+      "  timestamp: 1604234489\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1779712\n",
+      "  training_iteration: 11\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     11 |          229.016 | 1779712 |  40.6168 |              49.0404 |              13.0808 |            108.198 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1362.7848496680983\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-41-50\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.6175456163774\n",
+      "  episode_reward_max: 49.040404040404084\n",
+      "  episode_reward_mean: 41.17096364175804\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1590\n",
+      "  episodes_total: 17976\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.7057946672042211\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006505049881525338\n",
+      "        model: {}\n",
+      "        policy_loss: -0.011637478950433433\n",
+      "        total_loss: 1.0556738674640656\n",
+      "        vf_explained_var: 0.9909140467643738\n",
+      "        vf_loss: 1.066363235314687\n",
+      "    num_steps_sampled: 1941504\n",
+      "    num_steps_trained: 1941504\n",
+      "  iterations_since_restore: 12\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.067999999999998\n",
+      "    gpu_util_percent0: 0.38120000000000004\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15290224314841672\n",
+      "    mean_env_wait_ms: 0.6497100863030586\n",
+      "    mean_inference_ms: 4.30291912913981\n",
+      "    mean_raw_obs_processing_ms: 0.3997009547743406\n",
+      "  time_since_restore: 249.53435850143433\n",
+      "  time_this_iter_s: 20.518377780914307\n",
+      "  time_total_s: 249.53435850143433\n",
+      "  timers:\n",
+      "    learn_throughput: 11067.812\n",
+      "    learn_time_ms: 14618.246\n",
+      "    sample_throughput: 27784.289\n",
+      "    sample_time_ms: 5823.147\n",
+      "    update_time_ms: 40.514\n",
+      "  timestamp: 1604234510\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 1941504\n",
+      "  training_iteration: 12\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     12 |          249.534 | 1941504 |   41.171 |              49.0404 |              13.0808 |            107.618 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1352.7341357234316\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-42-11\n",
+      "  done: false\n",
+      "  episode_len_mean: 107.1025339736385\n",
+      "  episode_reward_max: 49.04040404040409\n",
+      "  episode_reward_mean: 41.67515040050036\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1598\n",
+      "  episodes_total: 19574\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6686889827251434\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0063633088720962405\n",
+      "        model: {}\n",
+      "        policy_loss: -0.01186193727577726\n",
+      "        total_loss: 0.8905991663535436\n",
+      "        vf_explained_var: 0.9923557639122009\n",
+      "        vf_loss: 0.9015227903922399\n",
+      "    num_steps_sampled: 2103296\n",
+      "    num_steps_trained: 2103296\n",
+      "  iterations_since_restore: 13\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.288461538461544\n",
+      "    gpu_util_percent0: 0.38153846153846155\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5692307692307685\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15249499620405588\n",
+      "    mean_env_wait_ms: 0.6497364450001253\n",
+      "    mean_inference_ms: 4.282874551579647\n",
+      "    mean_raw_obs_processing_ms: 0.39836613551654754\n",
+      "  time_since_restore: 270.1388850212097\n",
+      "  time_this_iter_s: 20.60452651977539\n",
+      "  time_total_s: 270.1388850212097\n",
+      "  timers:\n",
+      "    learn_throughput: 11056.406\n",
+      "    learn_time_ms: 14633.327\n",
+      "    sample_throughput: 27887.324\n",
+      "    sample_time_ms: 5801.632\n",
+      "    update_time_ms: 41.993\n",
+      "  timestamp: 1604234531\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2103296\n",
+      "  training_iteration: 13\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     13 |          270.139 | 2103296 |  41.6752 |              49.0404 |              13.0808 |            107.103 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1343.4148870685165\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-42-32\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.65310846560847\n",
+      "  episode_reward_max: 49.04040404040409\n",
+      "  episode_reward_mean: 42.142787951319704\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1594\n",
+      "  episodes_total: 21168\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.6273181239763895\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006019947739938895\n",
+      "        model: {}\n",
+      "        policy_loss: -0.009247757125801096\n",
+      "        total_loss: 0.7534371664126714\n",
+      "        vf_explained_var: 0.9935855865478516\n",
+      "        vf_loss: 0.7617945869763693\n",
+      "    num_steps_sampled: 2265088\n",
+      "    num_steps_trained: 2265088\n",
+      "  iterations_since_restore: 14\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.48\n",
+      "    gpu_util_percent0: 0.3504\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15213206388671544\n",
+      "    mean_env_wait_ms: 0.6497940000882954\n",
+      "    mean_inference_ms: 4.2649850452281735\n",
+      "    mean_raw_obs_processing_ms: 0.39716794855089166\n",
+      "  time_since_restore: 290.5424859523773\n",
+      "  time_this_iter_s: 20.403600931167603\n",
+      "  time_total_s: 290.5424859523773\n",
+      "  timers:\n",
+      "    learn_throughput: 11072.943\n",
+      "    learn_time_ms: 14611.472\n",
+      "    sample_throughput: 27934.424\n",
+      "    sample_time_ms: 5791.85\n",
+      "    update_time_ms: 35.766\n",
+      "  timestamp: 1604234552\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2265088\n",
+      "  training_iteration: 14\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     14 |          290.542 | 2265088 |  42.1428 |              49.0404 |              13.0808 |            106.653 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1334.9958170049756\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-42-53\n",
+      "  done: false\n",
+      "  episode_len_mean: 106.25092267135325\n",
+      "  episode_reward_max: 49.04040404040409\n",
+      "  episode_reward_mean: 42.566322273703655\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1592\n",
+      "  episodes_total: 22760\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.593339666724205\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0052832565270364285\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007287261697153251\n",
+      "        total_loss: 0.6348467022180557\n",
+      "        vf_explained_var: 0.994635820388794\n",
+      "        vf_loss: 0.6413739621639252\n",
+      "    num_steps_sampled: 2426880\n",
+      "    num_steps_trained: 2426880\n",
+      "  iterations_since_restore: 15\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.588\n",
+      "    gpu_util_percent0: 0.3836\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1518110809879511\n",
+      "    mean_env_wait_ms: 0.6498897805634568\n",
+      "    mean_inference_ms: 4.248940110401404\n",
+      "    mean_raw_obs_processing_ms: 0.39609601756717205\n",
+      "  time_since_restore: 311.00591683387756\n",
+      "  time_this_iter_s: 20.463430881500244\n",
+      "  time_total_s: 311.00591683387756\n",
+      "  timers:\n",
+      "    learn_throughput: 11097.5\n",
+      "    learn_time_ms: 14579.139\n",
+      "    sample_throughput: 27995.833\n",
+      "    sample_time_ms: 5779.146\n",
+      "    update_time_ms: 35.119\n",
+      "  timestamp: 1604234573\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2426880\n",
+      "  training_iteration: 15\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     15 |          311.006 | 2426880 |  42.5663 |              49.0404 |              13.0808 |            106.251 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1327.4121421520238\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-43-14\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.89524239563237\n",
+      "  episode_reward_max: 49.04040404040409\n",
+      "  episode_reward_mean: 42.95161292328897\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1601\n",
+      "  episodes_total: 24361\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5610497693220774\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005239539352866511\n",
+      "        model: {}\n",
+      "        policy_loss: -0.008563858728545407\n",
+      "        total_loss: 0.5433527330557505\n",
+      "        vf_explained_var: 0.9954302906990051\n",
+      "        vf_loss: 0.5511491994063059\n",
+      "    num_steps_sampled: 2588672\n",
+      "    num_steps_trained: 2588672\n",
+      "  iterations_since_restore: 16\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.983999999999995\n",
+      "    gpu_util_percent0: 0.37079999999999996\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15151777280002335\n",
+      "    mean_env_wait_ms: 0.6499960724887209\n",
+      "    mean_inference_ms: 4.234304826550604\n",
+      "    mean_raw_obs_processing_ms: 0.39511468708048586\n",
+      "  time_since_restore: 331.8462426662445\n",
+      "  time_this_iter_s: 20.840325832366943\n",
+      "  time_total_s: 331.8462426662445\n",
+      "  timers:\n",
+      "    learn_throughput: 11077.938\n",
+      "    learn_time_ms: 14604.884\n",
+      "    sample_throughput: 28012.835\n",
+      "    sample_time_ms: 5775.638\n",
+      "    update_time_ms: 35.504\n",
+      "  timestamp: 1604234594\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2588672\n",
+      "  training_iteration: 16\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     16 |          331.846 | 2588672 |  42.9516 |              49.0404 |              13.0808 |            105.895 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1320.4339440694312\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-43-36\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.57168707168707\n",
+      "  episode_reward_max: 49.04040404040409\n",
+      "  episode_reward_mean: 43.304979416090546\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1613\n",
+      "  episodes_total: 25974\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.5246386776367823\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005194058952232202\n",
+      "        model: {}\n",
+      "        policy_loss: -0.010037654642170915\n",
+      "        total_loss: 0.3729574630657832\n",
+      "        vf_explained_var: 0.9968838095664978\n",
+      "        vf_loss: 0.3822186241547267\n",
+      "    num_steps_sampled: 2750464\n",
+      "    num_steps_trained: 2750464\n",
+      "  iterations_since_restore: 17\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.15\n",
+      "    gpu_util_percent0: 0.34961538461538466\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5692307692307685\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1512500032596141\n",
+      "    mean_env_wait_ms: 0.6501069321395831\n",
+      "    mean_inference_ms: 4.2209558905247935\n",
+      "    mean_raw_obs_processing_ms: 0.3942088287210041\n",
+      "  time_since_restore: 352.6941442489624\n",
+      "  time_this_iter_s: 20.847901582717896\n",
+      "  time_total_s: 352.6941442489624\n",
+      "  timers:\n",
+      "    learn_throughput: 11060.738\n",
+      "    learn_time_ms: 14627.595\n",
+      "    sample_throughput: 28046.143\n",
+      "    sample_time_ms: 5768.779\n",
+      "    update_time_ms: 36.388\n",
+      "  timestamp: 1604234616\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2750464\n",
+      "  training_iteration: 17\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.6/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     17 |          352.694 | 2750464 |   43.305 |              49.0404 |              13.0808 |            105.572 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1314.0839173535712\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-43-57\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.28088299260548\n",
+      "  episode_reward_max: 49.0404040404041\n",
+      "  episode_reward_mean: 43.62569621105941\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1614\n",
+      "  episodes_total: 27588\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.20000000000000004\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.49088098108768463\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004925240180455148\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007551613341396053\n",
+      "        total_loss: 0.27305928741892177\n",
+      "        vf_explained_var: 0.997745931148529\n",
+      "        vf_loss: 0.27987127751111984\n",
+      "    num_steps_sampled: 2912256\n",
+      "    num_steps_trained: 2912256\n",
+      "  iterations_since_restore: 18\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.076923076923077\n",
+      "    gpu_util_percent0: 0.35576923076923084\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5730769230769224\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1510024924486738\n",
+      "    mean_env_wait_ms: 0.6502222563745731\n",
+      "    mean_inference_ms: 4.208793894567712\n",
+      "    mean_raw_obs_processing_ms: 0.3933811392042326\n",
+      "  time_since_restore: 373.5547993183136\n",
+      "  time_this_iter_s: 20.860655069351196\n",
+      "  time_total_s: 373.5547993183136\n",
+      "  timers:\n",
+      "    learn_throughput: 11035.452\n",
+      "    learn_time_ms: 14661.112\n",
+      "    sample_throughput: 28141.143\n",
+      "    sample_time_ms: 5749.304\n",
+      "    update_time_ms: 34.956\n",
+      "  timestamp: 1604234637\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 2912256\n",
+      "  training_iteration: 18\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     18 |          373.555 | 2912256 |  43.6257 |              49.0404 |              13.0808 |            105.281 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1308.3422956891525\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-44-18\n",
+      "  done: false\n",
+      "  episode_len_mean: 105.01201725554643\n",
+      "  episode_reward_max: 49.0404040404041\n",
+      "  episode_reward_mean: 43.913729876137445\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1620\n",
+      "  episodes_total: 29208\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4603450372815132\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0052619769315545755\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007839118620419564\n",
+      "        total_loss: 0.24682058518131575\n",
+      "        vf_explained_var: 0.9979783892631531\n",
+      "        vf_loss: 0.25436367591222125\n",
+      "    num_steps_sampled: 3074048\n",
+      "    num_steps_trained: 3074048\n",
+      "  iterations_since_restore: 19\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.90384615384615\n",
+      "    gpu_util_percent0: 0.3811538461538462\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5692307692307685\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1507749922403882\n",
+      "    mean_env_wait_ms: 0.6503503182530888\n",
+      "    mean_inference_ms: 4.197625625739776\n",
+      "    mean_raw_obs_processing_ms: 0.3926215964880014\n",
+      "  time_since_restore: 394.43259143829346\n",
+      "  time_this_iter_s: 20.87779211997986\n",
+      "  time_total_s: 394.43259143829346\n",
+      "  timers:\n",
+      "    learn_throughput: 11025.644\n",
+      "    learn_time_ms: 14674.154\n",
+      "    sample_throughput: 28102.66\n",
+      "    sample_time_ms: 5757.177\n",
+      "    update_time_ms: 33.741\n",
+      "  timestamp: 1604234658\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3074048\n",
+      "  training_iteration: 19\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     19 |          394.433 | 3074048 |  43.9137 |              49.0404 |              13.0808 |            105.012 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1303.1952154976273\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-44-40\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.77212396560117\n",
+      "  episode_reward_max: 49.0404040404041\n",
+      "  episode_reward_mean: 44.17383145096922\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1607\n",
+      "  episodes_total: 30815\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.10000000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.43477704375982285\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004907564221260448\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007642344086586188\n",
+      "        total_loss: 0.17235680421193442\n",
+      "        vf_explained_var: 0.998579740524292\n",
+      "        vf_loss: 0.17972578232487044\n",
+      "    num_steps_sampled: 3235840\n",
+      "    num_steps_trained: 3235840\n",
+      "  iterations_since_restore: 20\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.568\n",
+      "    gpu_util_percent0: 0.3516\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15056551159545464\n",
+      "    mean_env_wait_ms: 0.650477071010486\n",
+      "    mean_inference_ms: 4.187399168266206\n",
+      "    mean_raw_obs_processing_ms: 0.39192218046315624\n",
+      "  time_since_restore: 415.2149660587311\n",
+      "  time_this_iter_s: 20.782374620437622\n",
+      "  time_total_s: 415.2149660587311\n",
+      "  timers:\n",
+      "    learn_throughput: 11005.002\n",
+      "    learn_time_ms: 14701.678\n",
+      "    sample_throughput: 28031.542\n",
+      "    sample_time_ms: 5771.784\n",
+      "    update_time_ms: 33.384\n",
+      "  timestamp: 1604234680\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3235840\n",
+      "  training_iteration: 20\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     20 |          415.215 | 3235840 |  44.1738 |              49.0404 |              13.0808 |            104.772 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1298.6048573988814\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-45-01\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.55760212267062\n",
+      "  episode_reward_max: 49.0404040404041\n",
+      "  episode_reward_mean: 44.4073915135559\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1597\n",
+      "  episodes_total: 32412\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.4088049481312434\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0050367383907238645\n",
+      "        model: {}\n",
+      "        policy_loss: -0.004726681110696518\n",
+      "        total_loss: 0.15046600687007108\n",
+      "        vf_explained_var: 0.9988059401512146\n",
+      "        vf_loss: 0.15514524901906648\n",
+      "    num_steps_sampled: 3397632\n",
+      "    num_steps_trained: 3397632\n",
+      "  iterations_since_restore: 21\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.25769230769231\n",
+      "    gpu_util_percent0: 0.3230769230769231\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5692307692307685\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15037307743519757\n",
+      "    mean_env_wait_ms: 0.6506021265347358\n",
+      "    mean_inference_ms: 4.177989463073186\n",
+      "    mean_raw_obs_processing_ms: 0.39127952344764305\n",
+      "  time_since_restore: 436.0554406642914\n",
+      "  time_this_iter_s: 20.840474605560303\n",
+      "  time_total_s: 436.0554406642914\n",
+      "  timers:\n",
+      "    learn_throughput: 10991.518\n",
+      "    learn_time_ms: 14719.713\n",
+      "    sample_throughput: 27990.599\n",
+      "    sample_time_ms: 5780.226\n",
+      "    update_time_ms: 33.786\n",
+      "  timestamp: 1604234701\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3397632\n",
+      "  training_iteration: 21\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     21 |          436.055 | 3397632 |  44.4074 |              49.0404 |              13.0808 |            104.558 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1294.3254164459356\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-45-23\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.35706938607576\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 44.62349862987593\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1615\n",
+      "  episodes_total: 34027\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.05000000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.38861273725827533\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004962532625844081\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006052409371477552\n",
+      "        total_loss: 0.10335199224452178\n",
+      "        vf_explained_var: 0.9991534352302551\n",
+      "        vf_loss: 0.1093505813429753\n",
+      "    num_steps_sampled: 3559424\n",
+      "    num_steps_trained: 3559424\n",
+      "  iterations_since_restore: 22\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.088461538461537\n",
+      "    gpu_util_percent0: 0.34846153846153843\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.565384615384615\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15019358290939233\n",
+      "    mean_env_wait_ms: 0.6507335363952385\n",
+      "    mean_inference_ms: 4.169147396856916\n",
+      "    mean_raw_obs_processing_ms: 0.39067463008215425\n",
+      "  time_since_restore: 456.7496886253357\n",
+      "  time_this_iter_s: 20.69424796104431\n",
+      "  time_total_s: 456.7496886253357\n",
+      "  timers:\n",
+      "    learn_throughput: 10986.132\n",
+      "    learn_time_ms: 14726.93\n",
+      "    sample_throughput: 28004.762\n",
+      "    sample_time_ms: 5777.303\n",
+      "    update_time_ms: 33.873\n",
+      "  timestamp: 1604234723\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3559424\n",
+      "  training_iteration: 22\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     22 |           456.75 | 3559424 |  44.6235 |              49.0404 |              13.0808 |            104.357 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1290.3840622454425\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-45-44\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.17307152875175\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 44.82170512983978\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1623\n",
+      "  episodes_total: 35650\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.36651041358709335\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006440783229966958\n",
+      "        model: {}\n",
+      "        policy_loss: -0.007153725775424391\n",
+      "        total_loss: 0.08216805756092072\n",
+      "        vf_explained_var: 0.999314546585083\n",
+      "        vf_loss: 0.0893440234164397\n",
+      "    num_steps_sampled: 3721216\n",
+      "    num_steps_trained: 3721216\n",
+      "  iterations_since_restore: 23\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.088\n",
+      "    gpu_util_percent0: 0.3868\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.15002367096031743\n",
+      "    mean_env_wait_ms: 0.6508575565151\n",
+      "    mean_inference_ms: 4.160903003774551\n",
+      "    mean_raw_obs_processing_ms: 0.3901072062383884\n",
+      "  time_since_restore: 477.2431552410126\n",
+      "  time_this_iter_s: 20.49346661567688\n",
+      "  time_total_s: 477.2431552410126\n",
+      "  timers:\n",
+      "    learn_throughput: 11006.978\n",
+      "    learn_time_ms: 14699.039\n",
+      "    sample_throughput: 27941.378\n",
+      "    sample_time_ms: 5790.409\n",
+      "    update_time_ms: 31.7\n",
+      "  timestamp: 1604234744\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3721216\n",
+      "  training_iteration: 23\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     23 |          477.243 | 3721216 |  44.8217 |              49.0404 |              13.0808 |            104.173 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1286.7964535196131\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-46-04\n",
+      "  done: false\n",
+      "  episode_len_mean: 104.00566154176393\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 45.00310735680616\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1619\n",
+      "  episodes_total: 37269\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.3446768522262573\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.006010537773060302\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006810000515542924\n",
+      "        total_loss: 0.05681590953220924\n",
+      "        vf_explained_var: 0.9995128512382507\n",
+      "        vf_loss: 0.06364798328528802\n",
+      "    num_steps_sampled: 3883008\n",
+      "    num_steps_trained: 3883008\n",
+      "  iterations_since_restore: 24\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.616\n",
+      "    gpu_util_percent0: 0.42919999999999997\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.1498672084151353\n",
+      "    mean_env_wait_ms: 0.6509884510617694\n",
+      "    mean_inference_ms: 4.153243452307446\n",
+      "    mean_raw_obs_processing_ms: 0.38958140467964614\n",
+      "  time_since_restore: 497.40847873687744\n",
+      "  time_this_iter_s: 20.165323495864868\n",
+      "  time_total_s: 497.40847873687744\n",
+      "  timers:\n",
+      "    learn_throughput: 11023.912\n",
+      "    learn_time_ms: 14676.46\n",
+      "    sample_throughput: 27996.068\n",
+      "    sample_time_ms: 5779.097\n",
+      "    update_time_ms: 33.775\n",
+      "  timestamp: 1604234764\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 3883008\n",
+      "  training_iteration: 24\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     24 |          497.408 | 3883008 |  45.0031 |              49.0404 |              13.0808 |            104.006 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1283.5285511912427\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-46-25\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.8526007099861\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 45.16817737492225\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1605\n",
+      "  episodes_total: 38874\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.32262827704350155\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005610594448323051\n",
+      "        model: {}\n",
+      "        policy_loss: -0.004409408691572025\n",
+      "        total_loss: 0.04963509986797968\n",
+      "        vf_explained_var: 0.9995853304862976\n",
+      "        vf_loss: 0.054065559059381485\n",
+      "    num_steps_sampled: 4044800\n",
+      "    num_steps_trained: 4044800\n",
+      "  iterations_since_restore: 25\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.457692307692305\n",
+      "    gpu_util_percent0: 0.4265384615384616\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.565384615384615\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14972028928263528\n",
+      "    mean_env_wait_ms: 0.6511154433665545\n",
+      "    mean_inference_ms: 4.146093777194914\n",
+      "    mean_raw_obs_processing_ms: 0.3890936155505342\n",
+      "  time_since_restore: 517.5921437740326\n",
+      "  time_this_iter_s: 20.18366503715515\n",
+      "  time_total_s: 517.5921437740326\n",
+      "  timers:\n",
+      "    learn_throughput: 11035.673\n",
+      "    learn_time_ms: 14660.819\n",
+      "    sample_throughput: 28000.79\n",
+      "    sample_time_ms: 5778.123\n",
+      "    update_time_ms: 32.664\n",
+      "  timestamp: 1604234785\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4044800\n",
+      "  training_iteration: 25\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "2020-11-01 12:46:26,652\tWARNING util.py:136 -- The `process_trial` operation took 0.5261285305023193 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     25 |          517.592 | 4044800 |  45.1682 |              49.0404 |              13.0808 |            103.853 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1280.5338148716173\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-46-46\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.71221741815936\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 45.319422763771136\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1601\n",
+      "  episodes_total: 40475\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.2999122018615405\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.0053110466881965595\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006303349079341085\n",
+      "        total_loss: 0.05139423534274101\n",
+      "        vf_explained_var: 0.9995618462562561\n",
+      "        vf_loss: 0.0577147655809919\n",
+      "    num_steps_sampled: 4206592\n",
+      "    num_steps_trained: 4206592\n",
+      "  iterations_since_restore: 26\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.96\n",
+      "    gpu_util_percent0: 0.4584\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14958343418475262\n",
+      "    mean_env_wait_ms: 0.6512359147663624\n",
+      "    mean_inference_ms: 4.139411227315708\n",
+      "    mean_raw_obs_processing_ms: 0.38863613088367416\n",
+      "  time_since_restore: 537.769278049469\n",
+      "  time_this_iter_s: 20.1771342754364\n",
+      "  time_total_s: 537.769278049469\n",
+      "  timers:\n",
+      "    learn_throughput: 11085.459\n",
+      "    learn_time_ms: 14594.975\n",
+      "    sample_throughput: 28023.358\n",
+      "    sample_time_ms: 5773.469\n",
+      "    update_time_ms: 30.886\n",
+      "  timestamp: 1604234806\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4206592\n",
+      "  training_iteration: 26\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "2020-11-01 12:46:47,593\tWARNING util.py:136 -- The `process_trial` operation took 0.5515177249908447 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     26 |          537.769 | 4206592 |  45.3194 |              49.0404 |              13.0808 |            103.712 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1277.717564514211\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-47-07\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.58062906827577\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 45.461481590264796\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1619\n",
+      "  episodes_total: 42094\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.2697679474949837\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.005566679639741778\n",
+      "        model: {}\n",
+      "        policy_loss: -0.006809816346503794\n",
+      "        total_loss: 0.03190007215986649\n",
+      "        vf_explained_var: 0.9997119307518005\n",
+      "        vf_loss: 0.038705606323977314\n",
+      "    num_steps_sampled: 4368384\n",
+      "    num_steps_trained: 4368384\n",
+      "  iterations_since_restore: 27\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.436000000000003\n",
+      "    gpu_util_percent0: 0.3812\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14945344756304582\n",
+      "    mean_env_wait_ms: 0.6513545610993874\n",
+      "    mean_inference_ms: 4.133051412280412\n",
+      "    mean_raw_obs_processing_ms: 0.38819843216626215\n",
+      "  time_since_restore: 557.9500815868378\n",
+      "  time_this_iter_s: 20.180803537368774\n",
+      "  time_total_s: 557.9500815868378\n",
+      "  timers:\n",
+      "    learn_throughput: 11129.942\n",
+      "    learn_time_ms: 14536.644\n",
+      "    sample_throughput: 28097.666\n",
+      "    sample_time_ms: 5758.201\n",
+      "    update_time_ms: 30.627\n",
+      "  timestamp: 1604234827\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4368384\n",
+      "  training_iteration: 27\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "2020-11-01 12:47:08,513\tWARNING util.py:136 -- The `process_trial` operation took 0.5479977130889893 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     27 |           557.95 | 4368384 |  45.4615 |              49.0404 |              13.0808 |            103.581 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1275.0976458734085\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-47-28\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.45904339273052\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 45.59383551183082\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1623\n",
+      "  episodes_total: 43717\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.025000000000000005\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.23974776516358057\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004747193811150889\n",
+      "        model: {}\n",
+      "        policy_loss: -0.004243802364120104\n",
+      "        total_loss: 0.02101877443298387\n",
+      "        vf_explained_var: 0.999813973903656\n",
+      "        vf_loss: 0.025263771259536345\n",
+      "    num_steps_sampled: 4530176\n",
+      "    num_steps_trained: 4530176\n",
+      "  iterations_since_restore: 28\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 26.936\n",
+      "    gpu_util_percent0: 0.364\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.5679999999999996\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14933083667741634\n",
+      "    mean_env_wait_ms: 0.6514677609541502\n",
+      "    mean_inference_ms: 4.127067697966748\n",
+      "    mean_raw_obs_processing_ms: 0.3877881594254328\n",
+      "  time_since_restore: 578.1908588409424\n",
+      "  time_this_iter_s: 20.240777254104614\n",
+      "  time_total_s: 578.1908588409424\n",
+      "  timers:\n",
+      "    learn_throughput: 11182.422\n",
+      "    learn_time_ms: 14468.421\n",
+      "    sample_throughput: 28093.626\n",
+      "    sample_time_ms: 5759.029\n",
+      "    update_time_ms: 30.485\n",
+      "  timestamp: 1604234848\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4530176\n",
+      "  training_iteration: 28\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "2020-11-01 12:47:29,582\tWARNING util.py:136 -- The `process_trial` operation took 0.5904042720794678 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     28 |          578.191 | 4530176 |  45.5938 |              49.0404 |              13.0808 |            103.459 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1272.6863282026368\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-47-49\n",
+      "  done: false\n",
+      "  episode_len_mean: 103.34723815406335\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 45.71580313859499\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1615\n",
+      "  episodes_total: 45332\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.012500000000000002\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.21396022414167723\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.00464061457508554\n",
+      "        model: {}\n",
+      "        policy_loss: -0.003965421337246274\n",
+      "        total_loss: 0.02320340438745916\n",
+      "        vf_explained_var: 0.9998058676719666\n",
+      "        vf_loss: 0.027217798711111147\n",
+      "    num_steps_sampled: 4691968\n",
+      "    num_steps_trained: 4691968\n",
+      "  iterations_since_restore: 29\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 25.857692307692307\n",
+      "    gpu_util_percent0: 0.34076923076923077\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.565384615384615\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14921483484635445\n",
+      "    mean_env_wait_ms: 0.6515697684351597\n",
+      "    mean_inference_ms: 4.121446270442373\n",
+      "    mean_raw_obs_processing_ms: 0.38740127780397765\n",
+      "  time_since_restore: 598.5525875091553\n",
+      "  time_this_iter_s: 20.36172866821289\n",
+      "  time_total_s: 598.5525875091553\n",
+      "  timers:\n",
+      "    learn_throughput: 11221.151\n",
+      "    learn_time_ms: 14418.485\n",
+      "    sample_throughput: 28165.983\n",
+      "    sample_time_ms: 5744.234\n",
+      "    update_time_ms: 31.72\n",
+      "  timestamp: 1604234869\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4691968\n",
+      "  training_iteration: 29\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "2020-11-01 12:47:50,804\tWARNING util.py:136 -- The `process_trial` operation took 0.6144161224365234 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 26.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status   | loc              |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | RUNNING  | 172.17.0.4:67571 |     29 |          598.553 | 4691968 |  45.7158 |              49.0404 |              13.0808 |            103.347 |\n",
+      "+-------------------------+----------+------------------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "Result for PPO_jss_env_02bc6_00000:\n",
+      "  custom_metrics:\n",
+      "    time_step_max: 1901\n",
+      "    time_step_mean: 1270.4485656393304\n",
+      "    time_step_min: 1207\n",
+      "  date: 2020-11-01_12-48-10\n",
+      "  done: true\n",
+      "  episode_len_mean: 103.24400221587761\n",
+      "  episode_reward_max: 49.040404040404106\n",
+      "  episode_reward_mean: 45.82882130203902\n",
+      "  episode_reward_min: 13.080808080808094\n",
+      "  episodes_this_iter: 1602\n",
+      "  episodes_total: 46934\n",
+      "  experiment_id: 6c8ebffc261a4cedb67adf4d1763a8dd\n",
+      "  experiment_tag: '0'\n",
+      "  hostname: f85e62b52919\n",
+      "  info:\n",
+      "    learner:\n",
+      "      default_policy:\n",
+      "        allreduce_latency: 0.0\n",
+      "        cur_kl_coeff: 0.006250000000000001\n",
+      "        cur_lr: 5.0e-05\n",
+      "        entropy: 0.19203581909338632\n",
+      "        entropy_coeff: 0.0005000000000000001\n",
+      "        kl: 0.004001018533017486\n",
+      "        model: {}\n",
+      "        policy_loss: -0.0069229137285825955\n",
+      "        total_loss: 0.009018626738300858\n",
+      "        vf_explained_var: 0.9998963475227356\n",
+      "        vf_loss: 0.01601255312561989\n",
+      "    num_steps_sampled: 4853760\n",
+      "    num_steps_trained: 4853760\n",
+      "  iterations_since_restore: 30\n",
+      "  node_ip: 172.17.0.4\n",
+      "  num_healthy_workers: 79\n",
+      "  off_policy_estimator: {}\n",
+      "  perf:\n",
+      "    cpu_util_percent: 27.076000000000004\n",
+      "    gpu_util_percent0: 0.4292\n",
+      "    gpu_util_percent1: 0.0\n",
+      "    gpu_util_percent2: 0.0\n",
+      "    ram_util_percent: 3.571999999999999\n",
+      "    vram_util_percent0: 0.10109872089209578\n",
+      "    vram_util_percent1: 0.0\n",
+      "    vram_util_percent2: 0.0\n",
+      "  pid: 67571\n",
+      "  policy_reward_max: {}\n",
+      "  policy_reward_mean: {}\n",
+      "  policy_reward_min: {}\n",
+      "  sampler_perf:\n",
+      "    mean_action_processing_ms: 0.14910530030356728\n",
+      "    mean_env_wait_ms: 0.6516595301622415\n",
+      "    mean_inference_ms: 4.116169102966147\n",
+      "    mean_raw_obs_processing_ms: 0.3870328506532899\n",
+      "  time_since_restore: 618.7089035511017\n",
+      "  time_this_iter_s: 20.15631604194641\n",
+      "  time_total_s: 618.7089035511017\n",
+      "  timers:\n",
+      "    learn_throughput: 11261.529\n",
+      "    learn_time_ms: 14366.788\n",
+      "    sample_throughput: 28251.677\n",
+      "    sample_time_ms: 5726.81\n",
+      "    update_time_ms: 31.9\n",
+      "  timestamp: 1604234890\n",
+      "  timesteps_since_restore: 0\n",
+      "  timesteps_total: 4853760\n",
+      "  training_iteration: 30\n",
+      "  trial_id: 02bc6_00000\n",
+      "  \n",
+      "2020-11-01 12:48:11,852\tWARNING util.py:136 -- The `process_trial` operation took 0.6959054470062256 seconds to complete, which may be a performance bottleneck.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.3/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | TERMINATED |       |     30 |          618.709 | 4853760 |  45.8288 |              49.0404 |              13.0808 |            103.244 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.2/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/554.54 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 TERMINATED)\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "| Trial name              | status     | loc   |   iter |   total time (s) |      ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
+      "|-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------|\n",
+      "| PPO_jss_env_02bc6_00000 | TERMINATED |       |     30 |          618.709 | 4853760 |  45.8288 |              49.0404 |              13.0808 |            103.244 |\n",
+      "+-------------------------+------------+-------+--------+------------------+---------+----------+----------------------+----------------------+--------------------+\n",
+      "\n",
+      "\n",
+      "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 67339\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201101_123726-pq2fv3jo/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201101_123726-pq2fv3jo/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min 1207\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step 7\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime 646\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp 1604234892\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max 1901\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean 1270.44857\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max 49.0404\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min 13.08081\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean 45.82882\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total 46934\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration 30\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                 _step ‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:              _runtime ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:            _timestamp ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:         time_step_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        time_step_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_max ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    episode_reward_min ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   episode_reward_mean ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        episodes_total ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:    training_iteration ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mdifferent-sweep-5\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/pq2fv3jo\u001b[0m\n",
+      "2020-11-01 12:48:21,592 - wandb.wandb_agent - INFO - Cleaning up finished run: pq2fv3jo\n",
+      "2020-11-01 12:48:21,916 - wandb.wandb_agent - INFO - Agent received command: exit\n",
+      "2020-11-01 12:48:21,916 - wandb.wandb_agent - INFO - Received exit command. Killing runs and quitting.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Terminating and syncing runs. Press ctrl-c to kill.\n"
      ]
     }
    ],
    "source": [
-    "!wandb agent 1x8v92mc"
+    "!wandb agent 9xhkl8my"
    ]
   },
   {
diff --git a/JSS/.ipynb_checkpoints/Random-checkpoint.ipynb b/JSS/.ipynb_checkpoints/Random-checkpoint.ipynb
index c3d10c3..6d201e1 100644
--- a/JSS/.ipynb_checkpoints/Random-checkpoint.ipynb
+++ b/JSS/.ipynb_checkpoints/Random-checkpoint.ipynb
@@ -56,7 +56,7 @@
     "    print(\"I have detected {} CPUs here, so I'm going to create {} actors\".format(mp.cpu_count(), mp.cpu_count() - 1))\n",
     "    os.environ[\"WANDB_API_KEY\"] = '3487a01956bf67cc7882bca2a38f70c8c95f8463'\n",
     "    sweep_config = {\n",
-    "        'program': 'random_loop.py',\n",
+    "        'program': 'CP.py',\n",
     "        'method': 'grid',\n",
     "        'metric': {\n",
     "            'name': 'time_step_min',\n",
@@ -64,9 +64,9 @@
     "        },\n",
     "        'parameters': {\n",
     "            'instance_path': {\n",
-    "                'values': ['/JSS/JSS/env/instances/ta51', '/JSS/JSS/env/instances/ta52', '/JSS/JSS/env/instances/ta53', '/JSS/JSS/env/instances/ta54',\n",
-    "                           '/JSS/JSS/env/instances/ta55', '/JSS/JSS/env/instances/ta56', '/JSS/JSS/env/instances/ta57', '/JSS/JSS/env/instances/ta58',\n",
-    "                           '/JSS/JSS/env/instances/ta59', '/JSS/JSS/env/instances/ta60']\n",
+    "                'values': ['/JSS/JSS/env/instances/ta71', '/JSS/JSS/env/instances/ta72', '/JSS/JSS/env/instances/ta73', '/JSS/JSS/env/instances/ta74',\n",
+    "                           '/JSS/JSS/env/instances/ta75', '/JSS/JSS/env/instances/ta76', '/JSS/JSS/env/instances/ta77', '/JSS/JSS/env/instances/ta78',\n",
+    "                           '/JSS/JSS/env/instances/ta79', '/JSS/JSS/env/instances/ta80']\n",
     "            }\n",
     "        }\n",
     "    }"
@@ -81,8 +81,8 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Create sweep with ID: kitgghxj\n",
-      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/kitgghxj\n"
+      "Create sweep with ID: kkxvg8te\n",
+      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/kkxvg8te\n"
      ]
     }
    ],
@@ -92,7 +92,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": null,
    "metadata": {},
    "outputs": [
     {
@@ -100,239 +100,102 @@
      "output_type": "stream",
      "text": [
       "\u001b[34m\u001b[1mwandb\u001b[0m: Starting wandb agent üïµÔ∏è\n",
-      "2020-10-13 12:32:48,579 - wandb.wandb_agent - INFO - Running runs: []\n",
-      "2020-10-13 12:32:48,906 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-13 12:32:48,906 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "2020-11-03 17:48:30,968 - wandb.wandb_agent - INFO - Running runs: []\n",
+      "2020-11-03 17:48:31,522 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-03 17:48:31,522 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
       "\tinstance_path: /JSS/JSS/env/instances/ta51\n",
-      "2020-10-13 12:32:48,908 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python random_loop.py --instance_path=/JSS/JSS/env/instances/ta51\n",
+      "2020-11-03 17:48:31,524 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta51\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mdrawn-sweep-1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/kitgghxj\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/7zjyogzl\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201013_123250-7zjyogzl\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/kkxvg8te\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/quk2usr5\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201103_174832-quk2usr5\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "2020-10-13 12:32:53,926 - wandb.wandb_agent - INFO - Running runs: ['7zjyogzl']\n",
-      "2020-10-13 12:32:54,468\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
-      "== Status ==\n",
-      "Memory usage on this node: 11.5/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/558.4 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+-------+\n",
-      "| Trial name                       | status   | loc   |\n",
-      "|----------------------------------+----------+-------|\n",
-      "| RandomMasked_jss_env_3851e_00000 | RUNNING  |       |\n",
-      "+----------------------------------+----------+-------+\n",
+      "2020-11-03 17:48:36,541 - wandb.wandb_agent - INFO - Running runs: ['quk2usr5']\n",
+      "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 24629\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201103_174832-quk2usr5/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201103_174832-quk2usr5/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2762.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 603\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604426315\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/quk2usr5\u001b[0m\n",
+      "2020-11-03 17:58:41,416 - wandb.wandb_agent - INFO - Cleaning up finished run: quk2usr5\n",
+      "2020-11-03 17:58:41,795 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-03 17:58:41,795 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta52\n",
+      "2020-11-03 17:58:41,799 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta52\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/kkxvg8te\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/l0rsmjin\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201103_175842-l0rsmjin\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-03 17:58:46,817 - wandb.wandb_agent - INFO - Running runs: ['l0rsmjin']\n",
+      "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 24731\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201103_175842-l0rsmjin/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201103_175842-l0rsmjin/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2799.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 603\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604426925\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/l0rsmjin\u001b[0m\n",
+      "2020-11-03 18:08:52,752 - wandb.wandb_agent - INFO - Cleaning up finished run: l0rsmjin\n",
+      "2020-11-03 18:08:53,460 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-03 18:08:53,460 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta53\n",
+      "2020-11-03 18:08:53,462 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta53\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/kkxvg8te\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/dy77i2y1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201103_180854-dy77i2y1\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m F1013 12:32:56.746781   308   308 service_based_gcs_client.cc:207] Couldn't reconnect to GCS server. The last attempted GCS server address was 172.17.0.4:35371\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m *** Check failure stack trace: ***\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f29941c66ed  google::LogMessage::Fail()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f29941c784c  google::LogMessage::SendToLog()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f29941c63c9  google::LogMessage::Flush()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f29941c65e1  google::LogMessage::~LogMessage()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f299417d789  ray::RayLog::~RayLog()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f2993ec11ea  ray::gcs::ServiceBasedGcsClient::ReconnectGcsServer()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f2993ec12ef  ray::gcs::ServiceBasedGcsClient::GcsServiceFailureDetected()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f2993ec1491  ray::gcs::ServiceBasedGcsClient::PeriodicallyCheckGcsServerAddress()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f2993ec3801  ray::gcs::ServiceBasedGcsClient::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m F1013 12:32:56.731905   318   318 service_based_gcs_client.cc:207] Couldn't reconnect to GCS server. The last attempted GCS server address was 172.17.0.4:35371\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m *** Check failure stack trace: ***\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d8d36ed  google::LogMessage::Fail()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d8d484c  google::LogMessage::SendToLog()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d8d33c9  google::LogMessage::Flush()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d8d35e1  google::LogMessage::~LogMessage()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d88a789  ray::RayLog::~RayLog()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d5ce1ea  ray::gcs::ServiceBasedGcsClient::ReconnectGcsServer()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d5ce2ef  ray::gcs::ServiceBasedGcsClient::GcsServiceFailureDetected()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d5ce491  ray::gcs::ServiceBasedGcsClient::PeriodicallyCheckGcsServerAddress()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d5d0801  ray::gcs::ServiceBasedGcsClient::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d4df7a8  ray::gcs::GlobalStateAccessor::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914d450a2c  __pyx_pw_3ray_7_raylet_19GlobalStateAccessor_3connect()\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9dcc98a  method_vectorcall_NOARGS\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9d5cb08  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9de76a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9de8a20  method_vectorcall\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9d5dde6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9de7baf  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9de8643  _PyFunction_Vectorcall.localalias.353\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9d5dde6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9de76a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9de8454  PyEval_EvalCodeEx\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9e76bbc  PyEval_EvalCode\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9e76c64  run_eval_code_obj\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9ea8d14  run_mod\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9d71625  PyRun_FileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9d71a0a  PyRun_SimpleFileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9d728cf  Py_RunMain.cold.2911\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9eab829  Py_BytesMain\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x7f914ebd8840  __libc_start_main\n",
-      "\u001b[2m\u001b[36m(pid=318)\u001b[0m     @     0x55b7d9e3bb33  (unknown)\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m F1013 12:32:56.749399   329   329 service_based_gcs_client.cc:207] Couldn't reconnect to GCS server. The last attempted GCS server address was 172.17.0.4:35371\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m *** Check failure stack trace: ***\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245ddef6ed  google::LogMessage::Fail()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245ddf084c  google::LogMessage::SendToLog()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245ddef3c9  google::LogMessage::Flush()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245ddef5e1  google::LogMessage::~LogMessage()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245dda6789  ray::RayLog::~RayLog()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245daea1ea  ray::gcs::ServiceBasedGcsClient::ReconnectGcsServer()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245daea2ef  ray::gcs::ServiceBasedGcsClient::GcsServiceFailureDetected()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245daea491  ray::gcs::ServiceBasedGcsClient::PeriodicallyCheckGcsServerAddress()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245daec801  ray::gcs::ServiceBasedGcsClient::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245d9fb7a8  ray::gcs::GlobalStateAccessor::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m F1013 12:32:56.749487   437   437 service_based_gcs_client.cc:207] Couldn't reconnect to GCS server. The last attempted GCS server address was 172.17.0.4:35371\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m *** Check failure stack trace: ***\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f36026ed  google::LogMessage::Fail()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f360384c  google::LogMessage::SendToLog()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f36023c9  google::LogMessage::Flush()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f36025e1  google::LogMessage::~LogMessage()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f35b9789  ray::RayLog::~RayLog()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f32fd1ea  ray::gcs::ServiceBasedGcsClient::ReconnectGcsServer()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f32fd2ef  ray::gcs::ServiceBasedGcsClient::GcsServiceFailureDetected()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f32fd491  ray::gcs::ServiceBasedGcsClient::PeriodicallyCheckGcsServerAddress()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f32ff801  ray::gcs::ServiceBasedGcsClient::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f3280ed6  ray::CoreWorker::CoreWorker()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m F1013 12:32:56.749395   401   401 service_based_gcs_client.cc:207] Couldn't reconnect to GCS server. The last attempted GCS server address was 172.17.0.4:35371\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m *** Check failure stack trace: ***\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253f536ed  google::LogMessage::Fail()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253f5484c  google::LogMessage::SendToLog()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253f533c9  google::LogMessage::Flush()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253f535e1  google::LogMessage::~LogMessage()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253f0a789  ray::RayLog::~RayLog()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253c4e1ea  ray::gcs::ServiceBasedGcsClient::ReconnectGcsServer()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253c4e2ef  ray::gcs::ServiceBasedGcsClient::GcsServiceFailureDetected()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253c4e491  ray::gcs::ServiceBasedGcsClient::PeriodicallyCheckGcsServerAddress()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253c50801  ray::gcs::ServiceBasedGcsClient::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253bd1ed6  ray::CoreWorker::CoreWorker()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m F1013 12:32:56.749400   363   363 service_based_gcs_client.cc:207] Couldn't reconnect to GCS server. The last attempted GCS server address was 172.17.0.4:35371\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m *** Check failure stack trace: ***\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42549ba6ed  google::LogMessage::Fail()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42549bb84c  google::LogMessage::SendToLog()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42549ba3c9  google::LogMessage::Flush()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42549ba5e1  google::LogMessage::~LogMessage()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f4254971789  ray::RayLog::~RayLog()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42546b51ea  ray::gcs::ServiceBasedGcsClient::ReconnectGcsServer()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42546b52ef  ray::gcs::ServiceBasedGcsClient::GcsServiceFailureDetected()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42546b5491  ray::gcs::ServiceBasedGcsClient::PeriodicallyCheckGcsServerAddress()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f42546b7801  ray::gcs::ServiceBasedGcsClient::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f4254638ed6  ray::CoreWorker::CoreWorker()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f2993dd27a8  ray::gcs::GlobalStateAccessor::Connect()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f2993d43a2c  __pyx_pw_3ray_7_raylet_19GlobalStateAccessor_3connect()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c48b98a  method_vectorcall_NOARGS\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c41bb08  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4a66a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4a7a20  method_vectorcall\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c41cde6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4a6baf  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4a7643  _PyFunction_Vectorcall.localalias.353\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c41cde6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4a66a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4a7454  PyEval_EvalCodeEx\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c535bbc  PyEval_EvalCode\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c535c64  run_eval_code_obj\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c567d14  run_mod\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c430625  PyRun_FileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c430a0a  PyRun_SimpleFileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4318cf  Py_RunMain.cold.2911\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c56a829  Py_BytesMain\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245d96ca2c  __pyx_pw_3ray_7_raylet_19GlobalStateAccessor_3connect()\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f167698a  method_vectorcall_NOARGS\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1606b08  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f16916a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1692a20  method_vectorcall\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1607de6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1691baf  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1692643  _PyFunction_Vectorcall.localalias.353\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1607de6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f16916a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1692454  PyEval_EvalCodeEx\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1720bbc  PyEval_EvalCode\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1720c64  run_eval_code_obj\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f3284c14  ray::CoreWorkerProcess::CreateWorker()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f3285e82  ray::CoreWorkerProcess::CoreWorkerProcess()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253bd5c14  ray::CoreWorkerProcess::CreateWorker()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253bd6e82  ray::CoreWorkerProcess::CoreWorkerProcess()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f425463cc14  ray::CoreWorkerProcess::CreateWorker()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f425463de82  ray::CoreWorkerProcess::CoreWorkerProcess()\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x7f29954cb840  __libc_start_main\n",
-      "\u001b[2m\u001b[36m(pid=308)\u001b[0m     @     0x563b5c4fab33  (unknown)\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1752d14  run_mod\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f161b625  PyRun_FileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f161ba0a  PyRun_SimpleFileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f161c8cf  Py_RunMain.cold.2911\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f1755829  Py_BytesMain\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x7f245f0f4840  __libc_start_main\n",
-      "\u001b[2m\u001b[36m(pid=329)\u001b[0m     @     0x55d7f16e5b33  (unknown)\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f328684b  ray::CoreWorkerProcess::Initialize()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f31c4448  __pyx_pw_3ray_7_raylet_10CoreWorker_1__cinit__()\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f31c5ba5  __pyx_tp_new_3ray_7_raylet_CoreWorker()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253bd784b  ray::CoreWorkerProcess::Initialize()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253b15448  __pyx_pw_3ray_7_raylet_10CoreWorker_1__cinit__()\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1253b16ba5  __pyx_tp_new_3ray_7_raylet_CoreWorker()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f425463e84b  ray::CoreWorkerProcess::Initialize()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f425457c448  __pyx_pw_3ray_7_raylet_10CoreWorker_1__cinit__()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f425457dba5  __pyx_tp_new_3ray_7_raylet_CoreWorker()\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fad7337d  _PyObject_MakeTpCall\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d1cb37d  _PyObject_MakeTpCall\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d253d09  _PyEval_EvalFrameDefault\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d218baf  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d219643  _PyFunction_Vectorcall.localalias.353\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d18ede6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d2186a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d219454  PyEval_EvalCodeEx\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d2a7bbc  PyEval_EvalCode\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d2a7c64  run_eval_code_obj\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d2d9d14  run_mod\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d1a2625  PyRun_FileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d1a2a0a  PyRun_SimpleFileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f801b37d  _PyObject_MakeTpCall\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f80a3d09  _PyEval_EvalFrameDefault\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f8068baf  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f8069643  _PyFunction_Vectorcall.localalias.353\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f7fdede6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f80686a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f8069454  PyEval_EvalCodeEx\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f80f7bbc  PyEval_EvalCode\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f80f7c64  run_eval_code_obj\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f8129d14  run_mod\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f7ff2625  PyRun_FileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f7ff2a0a  PyRun_SimpleFileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fadfbd09  _PyEval_EvalFrameDefault\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fadc0baf  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fadc1643  _PyFunction_Vectorcall.localalias.353\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fad36de6  _PyEval_EvalFrameDefault.cold.2792\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fadc06a2  _PyEval_EvalCodeWithName\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fadc1454  PyEval_EvalCodeEx\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fae4fbbc  PyEval_EvalCode\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fae4fc64  run_eval_code_obj\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fae81d14  run_mod\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fad4a625  PyRun_FileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fad4aa0a  PyRun_SimpleFileExFlags\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fad4b8cf  Py_RunMain.cold.2911\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d1a38cf  Py_RunMain.cold.2911\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d2dc829  Py_BytesMain\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x7f92f4907840  __libc_start_main\n",
-      "\u001b[2m\u001b[36m(pid=437)\u001b[0m     @     0x55917d26cb33  (unknown)\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f7ff38cf  Py_RunMain.cold.2911\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f812c829  Py_BytesMain\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x7f1255258840  __libc_start_main\n",
-      "\u001b[2m\u001b[36m(pid=401)\u001b[0m     @     0x55c7f80bcb33  (unknown)\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fae84829  Py_BytesMain\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x7f4255cbf840  __libc_start_main\n",
-      "\u001b[2m\u001b[36m(pid=363)\u001b[0m     @     0x5609fae14b33  (unknown)\n",
-      "2020-10-13 12:32:56,926\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffdf5a1a8201000000.\n",
-      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1013 12:32:56.915767   265   265 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Socket closed\n",
-      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1013 12:32:56.929625   265   265 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Socket closed\n",
-      "\u001b[2m\u001b[33m(pid=raylet)\u001b[0m E1013 12:32:56.932425   265   265 node_manager.cc:3307] Failed to send get core worker stats request: IOError: 14: Socket closed\n"
+      "2020-11-03 18:08:58,480 - wandb.wandb_agent - INFO - Running runs: ['dy77i2y1']\n"
      ]
     }
    ],
    "source": [
-    "!wandb agent kitgghxj"
+    "!wandb agent kkxvg8te"
    ]
   },
   {
diff --git a/JSS/.ipynb_checkpoints/default_config-checkpoint.py b/JSS/.ipynb_checkpoints/default_config-checkpoint.py
index 46f4d10..4729210 100644
--- a/JSS/.ipynb_checkpoints/default_config-checkpoint.py
+++ b/JSS/.ipynb_checkpoints/default_config-checkpoint.py
@@ -6,7 +6,7 @@ default_config = {
     'env': 'jss_env',
     'seed': 0,
     'framework': 'torch',
-    'log_level': 'INFO',
+    'log_level': 'WARN',
     'num_gpus': 1,
     'instance_path': '/JSS/JSS/env/instances/ta51',
     'num_envs_per_worker': 2,
diff --git a/JSS/.ipynb_checkpoints/train-checkpoint.py b/JSS/.ipynb_checkpoints/train-checkpoint.py
index d4ac941..0275259 100644
--- a/JSS/.ipynb_checkpoints/train-checkpoint.py
+++ b/JSS/.ipynb_checkpoints/train-checkpoint.py
@@ -47,10 +47,10 @@ def train_func():
     config.pop('layer_size', None)
     config.pop('layer_nb', None)
 
-    ray.init()
+    ray.init(num_gpus=1)
 
     stop = {
-        "time_total_s": 60 * 60,
+        "time_total_s": 10 * 60,
     }
 
     analysis = tune.run(PPOTrainer, config=config, stop=stop, name="ppo-jss")
diff --git a/JSS/MTWR.py b/JSS/MTWR.py
index 1b7b946..37944ef 100644
--- a/JSS/MTWR.py
+++ b/JSS/MTWR.py
@@ -21,11 +21,11 @@ def MTWR_worker(default_config):
         real_state = np.copy(state['real_obs'])
         legal_actions = state['action_mask'][:-1]
         reshaped = np.reshape(real_state, (env.jobs, 7))
-        remaining_time = reshaped[:, 3]
+        remaining_time = (reshaped[:, 3] * env.max_time_jobs) / env.jobs_length
         illegal_actions = np.invert(legal_actions)
-        mask = illegal_actions * -1e8
+        mask = illegal_actions * 1e8
         remaining_time += mask
-        MTWR_action = np.argmax(remaining_time)
+        MTWR_action = np.argmin(remaining_time)
         assert legal_actions[MTWR_action]
         state, reward, done, _ = env.step(MTWR_action)
     env.reset()
diff --git a/JSS/PPO.ipynb b/JSS/PPO.ipynb
index 23b572b..0925956 100644
--- a/JSS/PPO.ipynb
+++ b/JSS/PPO.ipynb
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": 17,
    "metadata": {},
    "outputs": [
     {
@@ -56,7 +56,7 @@
     "    print(\"I have detected {} CPUs here, so I'm going to create {} actors\".format(mp.cpu_count(), mp.cpu_count() - 1))\n",
     "    os.environ[\"WANDB_API_KEY\"] = '3487a01956bf67cc7882bca2a38f70c8c95f8463'\n",
     "    sweep_config = {\n",
-    "        'program': 'MTWR.py',\n",
+    "        'program': 'train.py',\n",
     "        'method': 'grid',\n",
     "        'metric': {\n",
     "            'name': 'time_step_min',\n",
@@ -64,9 +64,9 @@
     "        },\n",
     "        'parameters': {\n",
     "            'instance_path': {\n",
-    "                'values': ['/JSS/JSS/env/instances/ta51', '/JSS/JSS/env/instances/ta52', '/JSS/JSS/env/instances/ta53', '/JSS/JSS/env/instances/ta54',\n",
-    "                           '/JSS/JSS/env/instances/ta55', '/JSS/JSS/env/instances/ta56', '/JSS/JSS/env/instances/ta57', '/JSS/JSS/env/instances/ta58',\n",
-    "                           '/JSS/JSS/env/instances/ta59', '/JSS/JSS/env/instances/ta60']\n",
+    "                'values': ['/JSS/JSS/env/instances/ta40', '/JSS/JSS/env/instances/ta41', '/JSS/JSS/env/instances/ta42', '/JSS/JSS/env/instances/ta43', '/JSS/JSS/env/instances/ta44',\n",
+    "                           '/JSS/JSS/env/instances/ta45', '/JSS/JSS/env/instances/ta46', '/JSS/JSS/env/instances/ta47', '/JSS/JSS/env/instances/ta48',\n",
+    "                           '/JSS/JSS/env/instances/ta49', '/JSS/JSS/env/instances/ta50']\n",
     "            }\n",
     "        }\n",
     "    }"
@@ -74,25 +74,32 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 18,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Create sweep with ID: po3ygyxo\n",
-      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\n"
+      "Create sweep with ID: pjuczesa\n",
+      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/pjuczesa\n"
      ]
     }
    ],
    "source": [
-    "sweep_id = wandb.sweep(sweep_config, project=\"RLLIB_SWEEP_2\")"
+    "sweep_id = wandb.sweep(sweep_config, project=\"RLLIB_SWEEP_3\")"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 15,
+   "execution_count": null,
    "metadata": {},
    "outputs": [
     {
@@ -100,425 +107,13031 @@
      "output_type": "stream",
      "text": [
       "\u001b[34m\u001b[1mwandb\u001b[0m: Starting wandb agent üïµÔ∏è\n",
-      "2020-10-14 20:43:27,735 - wandb.wandb_agent - INFO - Running runs: []\n",
-      "2020-10-14 20:43:31,145 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:43:31,145 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta51\n",
-      "2020-10-14 20:43:31,147 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta51\n",
+      "2020-11-05 10:54:58,793 - wandb.wandb_agent - INFO - Running runs: []\n",
+      "2020-11-05 10:54:59,108 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-05 10:54:59,108 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta40\n",
+      "2020-11-05 10:54:59,110 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/ta40\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.9 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "2020-11-05 10:55:04,126 - wandb.wandb_agent - INFO - Running runs: ['ocw6ikaw']\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/9bbl2cxc\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204333-9bbl2cxc\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mcelestial-sweep-1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/pjuczesa\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/ocw6ikaw\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201105_105500-ocw6ikaw\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3282\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:43:36,159 - wandb.wandb_agent - INFO - Running runs: ['9bbl2cxc']\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204333-9bbl2cxc/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204333-9bbl2cxc/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 197.38384\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 197.38384\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3753\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708214\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/9bbl2cxc\u001b[0m\n",
-      "2020-10-14 20:43:41,380 - wandb.wandb_agent - INFO - Cleaning up finished run: 9bbl2cxc\n",
-      "2020-10-14 20:43:41,772 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:43:41,772 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta52\n",
-      "2020-10-14 20:43:41,774 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta52\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/frw3hck3\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204343-frw3hck3\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
+      "2020-11-05 10:55:04,789\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/1 GPUs, 0.0/555.96 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_5d2b6_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
       "\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3372\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:43:46,790 - wandb.wandb_agent - INFO - Running runs: ['frw3hck3']\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204343-frw3hck3/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204343-frw3hck3/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 163.86869\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 163.86869\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3871\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 2\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708225\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/frw3hck3\u001b[0m\n",
-      "2020-10-14 20:43:52,006 - wandb.wandb_agent - INFO - Cleaning up finished run: frw3hck3\n",
-      "2020-10-14 20:43:52,326 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:43:52,327 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta53\n",
-      "2020-10-14 20:43:52,329 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta53\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/o0hyb863\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204354-o0hyb863\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m 2020-11-05 10:55:07,590\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m *** SIGSEGV (@0x0) received by PID 75099 (TID 0x7f1342540700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m *** SIGSEGV (@0x0) received by PID 75079 (TID 0x7fa7fb59e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x7fa7fb177390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x7f78fd38cfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x7f78fa68064b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m *** SIGSEGV (@0x0) received by PID 75165 (TID 0x7f5ef670a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x7f5ef62e3390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x7f2ff83b1fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x7f2ff56a564b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m *** SIGSEGV (@0x0) received by PID 75154 (TID 0x7f2726fb5700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x7f2726b8e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x7ef828c98fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x7ef825f8c64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m *** SIGSEGV (@0x0) received by PID 75131 (TID 0x7f7fef130700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x7f7feed09390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x7f50f0f06fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x7f50ee1fa64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m *** SIGSEGV (@0x0) received by PID 75144 (TID 0x7f4d493e4700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x7f4d48fbd390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x7f1e4b1c6fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x7f1e484ba64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m *** SIGSEGV (@0x0) received by PID 75135 (TID 0x7fb3c8b26700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x7fb3c86ff390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x7f84ca885fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x7f84c7b7964b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m *** SIGSEGV (@0x0) received by PID 75155 (TID 0x7f5a13dae700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x7f5a13987390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x7f2b159c8fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x7f2b12cbc64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m *** SIGSEGV (@0x0) received by PID 75167 (TID 0x7fa4bd2cb700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x7fa4bcea4390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x7f75bee96fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x7f75bc18a64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m *** SIGSEGV (@0x0) received by PID 75158 (TID 0x7f1a4695d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x7f1a46536390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x7eeb485dcfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x7eeb458d064b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m *** SIGSEGV (@0x0) received by PID 75153 (TID 0x7f4f1d50d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x7f4f1d0e6390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x7f201f2fffb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x7f201c5f364b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m *** SIGSEGV (@0x0) received by PID 75141 (TID 0x7f42ac7ff700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x7f42ac3d8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x7f13ae5aafb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x7f13ab89e64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m *** SIGSEGV (@0x0) received by PID 75102 (TID 0x7fadd0a30700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x7fadd0609390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x7f7ed27dafb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x7f7ecface64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m *** SIGSEGV (@0x0) received by PID 75100 (TID 0x7fce45a0e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x7fce455e7390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x7f9f477f6fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x7f9f44aea64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m *** SIGSEGV (@0x0) received by PID 75134 (TID 0x7f2e51a68700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x7f2e51641390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x7eff5385bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x7eff50b4f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m *** SIGSEGV (@0x0) received by PID 75168 (TID 0x7fe7401ef700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x7fe73fdc8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x7fb841fddfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x7fb83f2d164b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m *** SIGSEGV (@0x0) received by PID 75149 (TID 0x7fe2e1e09700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x7fe2e19e2390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x7fb3e3a70fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x7fb3e0d6464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m *** SIGSEGV (@0x0) received by PID 75115 (TID 0x7ff121cc1700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x7ff12189a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x7fc22396bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x7fc220c5f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x7f1342119390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x7ee444344fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x7ee44163864b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x7f78fa683977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x7f2ff56a8977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x7ef825f8f977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x7f50ee1fd977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x7f50ee1fdb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x7f1e484bd977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x7f84c7b7c977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x7f2b12cbf977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x7f75bc18d977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x7eeb458d3977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x7f201c5f6977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x7f201c5f6b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x7f13ab8a1977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x7f13ab8a1b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x7f7ecfad1977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x7f9f44aed977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x7eff50b52977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x7fb83f2d4977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x7fb83f2d4b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x7fb3e0d67977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x7fb3e0d67b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x7fc220c62977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x7fc220c62b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x7ee44163b977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x7f78fa683b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x7f2ff56a8b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x7f2ff56a8e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x7f2ff83c1c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x7f2ff83e4cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x7ef825f8fb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x7ef825f8fe11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x7ef828ca8c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x7ef828ccbcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x7f50ee1fde11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x7f50f0f16c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x7f50f0f39cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x7f1e484bdb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x7f1e484bde11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x7f1e4b1d6c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x7f1e4b1f9cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x7f84c7b7cb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x7f84c7b7ce11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x7f84ca895c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x7f84ca8b8cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x7f2b12cbfb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x7f2b12cbfe11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x7f2b159d8c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x7f2b159fbcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x7f75bc18db53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x7f75bc18de11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x7f75beea6c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x7f75beec9cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x7eeb458d3b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x7eeb458d3e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x7eeb485ecc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x7eeb4860fcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x7f201c5f6e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x7f201f30fc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x7f201f332cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x7f13ab8a1e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x7f13ae5bac12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x7f7ecfad1b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x7f7ecfad1e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x7f9f44aedb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x7eff50b52b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x7eff50b52e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x7eff5386bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x7fb83f2d4e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x7fb841fedc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x7fb3e0d67e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x7fb3e3a80c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x7fb3e3aa3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m *** SIGSEGV (@0x0) received by PID 75136 (TID 0x7fbe5a81c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x7fc220c62e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x7fc22397bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x7fc22399ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m *** SIGSEGV (@0x0) received by PID 75133 (TID 0x7fe829bae700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x7ee44163bb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x7ee44163be11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x7ee444354c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x7ee444377cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m *** SIGSEGV (@0x0) received by PID 75057 (TID 0x7f1c2a31e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m *** SIGSEGV (@0x0) received by PID 75159 (TID 0x7f125a773700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m *** SIGSEGV (@0x0) received by PID 75162 (TID 0x7f41ac3a2700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x7f41abf7b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m *** SIGSEGV (@0x0) received by PID 75126 (TID 0x7f6b95cf1700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x7f6b958ca390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m *** SIGSEGV (@0x0) received by PID 75142 (TID 0x7f72c5a77700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m *** SIGSEGV (@0x0) received by PID 75058 (TID 0x7f5aee8d4700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m *** SIGSEGV (@0x0) received by PID 75124 (TID 0x7fcec981d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m *** SIGSEGV (@0x0) received by PID 75146 (TID 0x7f6d2763b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x7f6d27214390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m *** SIGSEGV (@0x0) received by PID 75118 (TID 0x7fc1881d5700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m *** SIGSEGV (@0x0) received by PID 75174 (TID 0x7f492f354700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m *** SIGSEGV (@0x0) received by PID 75128 (TID 0x7f1088897700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m *** SIGSEGV (@0x0) received by PID 75064 (TID 0x7f77c493e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m *** SIGSEGV (@0x0) received by PID 75105 (TID 0x7ff2aaaf5700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m *** SIGSEGV (@0x0) received by PID 75074 (TID 0x7f5df2ea6700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m *** SIGSEGV (@0x0) received by PID 75040 (TID 0x7fdc1b0db700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x7fdc1acb4390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x7fad1cd48fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m *** SIGSEGV (@0x0) received by PID 75116 (TID 0x7fc542dbe700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x7fc542997390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x7f9644981fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x7f9641c7564b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m *** SIGSEGV (@0x0) received by PID 75053 (TID 0x7f106efd3700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x7f106ebac390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x7ee170c98fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x7ee16df8c64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m *** SIGSEGV (@0x0) received by PID 75130 (TID 0x7f5282cc8700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x7f52828a1390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x7f2384981fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m *** SIGSEGV (@0x0) received by PID 75050 (TID 0x7f49adfc1700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x7f49adb9a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m *** SIGSEGV (@0x0) received by PID 75044 (TID 0x7efe30be9700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x7efe307c2390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x7ecf329c3fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x7ecf2fcb764b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m *** SIGSEGV (@0x0) received by PID 75048 (TID 0x7f68f41cb700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x7f68f3da4390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x7f39f5fd5fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m *** SIGSEGV (@0x0) received by PID 75070 (TID 0x7f1b9ed70700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x7f1b9e949390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x7eeca0981fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x7eec9dc7564b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m *** SIGSEGV (@0x0) received by PID 75043 (TID 0x7f6af1d11700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x7f6af18ea390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m *** SIGSEGV (@0x0) received by PID 75169 (TID 0x7faed2e7c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x7faed2a55390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x7f7fd4a32fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x7f7fd1d2664b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m *** SIGSEGV (@0x0) received by PID 75059 (TID 0x7f00d2321700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m *** SIGSEGV (@0x0) received by PID 75106 (TID 0x7fa0fb267700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x7fa0fae40390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m *** SIGSEGV (@0x0) received by PID 75049 (TID 0x7f542fe4d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x7f542fa26390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x7f2531b55fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m *** SIGSEGV (@0x0) received by PID 75132 (TID 0x7f19da253700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x7f19d9e2c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x7eeadc05bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x7eead934f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x7eead9352977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m *** SIGSEGV (@0x0) received by PID 75097 (TID 0x7ff9acd10700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x7ff9ac8e9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x7fcaae9f3fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x7fcaabce764b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m *** SIGSEGV (@0x0) received by PID 75069 (TID 0x7fd3bdcbf700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x7fd3bd898390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x7fa4bfa70fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x7fa4bcd6464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m *** SIGSEGV (@0x0) received by PID 75066 (TID 0x7ff9ad25c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x7ff9ace35390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x7fcaaedfcfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x7fcaac0f064b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x7fcaac0f3977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m *** SIGSEGV (@0x0) received by PID 75103 (TID 0x7f99ace9a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x7f99aca73390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x7f6aae9ebfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x7f6aabcdf64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x7f6aabce2977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m *** SIGSEGV (@0x0) received by PID 75137 (TID 0x7fc41bb3e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x7fc41b717390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x7f951d896fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x7f951ab8a64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x7f951ab8d977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x7f78fa683e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x7f78fd39cc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x7f78fd3bfcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x7f78fa3fd009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x7f78fa3fbc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x7f78fa3fced4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m *** SIGSEGV (@0x0) received by PID 75052 (TID 0x7fee94604700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x7fee941dd390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x7fbf96344fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x7fbf9363864b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x7fbf9363b977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x7fbf9363bb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x7f2ff5422009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x7f2ff5420c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x7f2ff5421ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x7f2ff5b645cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x7f2ff5c6c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x7f2ff7863989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x7ef825d09009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x7ef825d07c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x7ef825d08ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x7ef82644b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x7ef826553148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x7f50edf77009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x7f50edf75c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x7f50edf76ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x7f50ee6b95cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x7f50ee7c1148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x7f50f03b8989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x7f1e48237009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x7f1e48235c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x7f1e48236ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x7f1e489795cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x7f1e48a81148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x7f84c78f6009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x7f84c78f4c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x7f84c78f5ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x7f84c80385cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x7f84c8140148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x7f2b12a39009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x7f2b12a37c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x7f2b12a38ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x7f2b1317b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x7f2b13283148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x7f75bbf07009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x7f75bbf05c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x7f75bbf06ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x7f75bc6495cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x7f75bc751148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x7f75be348989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x7eeb4564d009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x7eeb4564bc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x7eeb4564ced4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x7eeb45d8f5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x7eeb45e97148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x7eeb47a8e989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x7f201c370009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x7f201c36ec3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x7f201c36fed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x7f201cab25cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x7f201cbba148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m *** SIGSEGV (@0x0) received by PID 75081 (TID 0x7fc51b4d5700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x7fc51b0ae390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x7f961d2c9fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x7f961a5bd64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m *** SIGSEGV (@0x0) received by PID 75129 (TID 0x7f3f4ce33700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x7f3f4ca0c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x7f104ea9cfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x7f104bd9064b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m *** SIGSEGV (@0x0) received by PID 75083 (TID 0x7faed80ec700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x7faed7cc5390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x7f7fd9d6cfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x7f7fd706064b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m *** SIGSEGV (@0x0) received by PID 75056 (TID 0x7fd3d5aef700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x7fd3d56c8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x7fa4d78ebfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x7fa4d4bdf64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x7fa4d4be2977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m *** SIGSEGV (@0x0) received by PID 75060 (TID 0x7fc9caf2d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x7fc9cab06390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x7f9accc98fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x7f9ac9f8c64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x7f9ac9f8f977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m *** SIGSEGV (@0x0) received by PID 75127 (TID 0x7fad57a78700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x7fad57651390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x7f7e59869fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x7f7e56b5d64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x7f7e56b60977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m *** SIGSEGV (@0x0) received by PID 75055 (TID 0x7f237d025700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x7f237cbfe390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x7ef47ed02fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x7ef47bff664b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x7ef47bff9977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m *** SIGSEGV (@0x0) received by PID 75123 (TID 0x7fa1fbc9d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x7fa1fb876390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x7f72fda85fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x7f72fad7964b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x7f72fad7c977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x7f72fad7cb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m *** SIGSEGV (@0x0) received by PID 75054 (TID 0x7fe60f816700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x7fe60f3ef390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x7fb7114a0fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x7fb70e79464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x7fb70e797977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x7f13ae5ddcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x7f13ab61b009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x7f13ab619c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x7f13ab61aed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x7f13abd5d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x7f7ed27eac12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x7f7ed280dcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x7f7ecf84b009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x7f7ecf849c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x7f7ecf84aed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x7f7ecff8d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x7f9f44aede11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x7f9f47806c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x7f9f47829cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x7f9f44867009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x7f9f44865c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x7f9f44866ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x7f9f44fa95cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m *** SIGSEGV (@0x0) received by PID 75164 (TID 0x7f9cb1ffa700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x7f9cb1bd3390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x7f6db3c81fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x7f6db0f7564b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x7f6db0f78977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x7f6db0f78b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x7eff5388ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x7eff508cc009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x7eff508cac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x7eff508cbed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x7eff5100e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x7fb842010cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x7fb83f04e009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x7fb83f04cc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x7fb83f04ded4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x7fb83f7905cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m *** SIGSEGV (@0x0) received by PID 75140 (TID 0x7fc7cc1f0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x7fc7cbdc9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x7f98cdb77fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x7f98cae6b64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x7f98cae6e977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x7f98cae6eb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x7fb3e0ae1009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x7fb3e0adfc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x7fb3e0ae0ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x7fb3e12235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x7fb3e132b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x7fb3e2f22989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x7fbe5a3f5390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x7f8f5c5c2fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x7f8f598b664b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x7f8f598b9977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x7f8f598b9b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x7fc2209dc009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x7fc2209dac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x7fc2209dbed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x7fc22111e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x7fc221226148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m *** SIGSEGV (@0x0) received by PID 75117 (TID 0x7fe885579700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x7fe885152390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x7fb98732cfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x7fb98462064b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x7fb984623977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x7fb984623b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m *** SIGSEGV (@0x0) received by PID 75151 (TID 0x7faa6a551700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x7faa6a12a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x7f7b6c09bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x7f7b6938f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x7f7b69392977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x7f7b69392b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m *** SIGSEGV (@0x0) received by PID 75042 (TID 0x7f4542e63700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x7f4542a3c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x7f1644878fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x7f1641b6c64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x7f1641b6f977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m *** SIGSEGV (@0x0) received by PID 75047 (TID 0x7fa6f5c86700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x7fa6f585f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x7f77f7a70fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x7f77f4d6464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x7f77f4d67977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x7f77f4d67b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x7fe829787390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x7fb92b756fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x7fb928a4a64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x7fb928a4d977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x7fb928a4db53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m *** SIGSEGV (@0x0) received by PID 75062 (TID 0x7f93e1e5b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x7f93e1a34390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x7f64e3a70fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x7f64e0d6464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x7f64e0d67977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x7f64e0d67b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x7ee4413b5009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x7ee4413b3c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x7ee4413b4ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x7ee441af75cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x7ee441bff148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x7f1c29ef7390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x7eed2c09bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x7eed2938f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x7eed29392977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x7eed29392b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x7f125a34c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x7ee35c555fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x7ee35984964b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x7ee35984c977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x7ee35984cb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m *** SIGSEGV (@0x0) received by PID 75073 (TID 0x7fc61e128700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x7fc61dd01390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x7f971fe84fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x7f971d17864b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x7f12ae12dfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x7f12ab42164b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x7f12ab424977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x7f12ab424b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x7f3c97a70fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x7f3c94d6464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x7f72c5650390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x7f43c7859fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x7f43c4b4d64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x7f43c4b50977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x7f5aee4ad390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x7f2bf05c2fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x7f2bed8b664b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x7f2bed8b9977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x7fcec93f6390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x7f9fcb5eefb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x7f9fc88e264b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x7f9fc88e5977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m *** SIGSEGV (@0x0) received by PID 75096 (TID 0x7fb2438e1700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x7f3e2939bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x7f3e2668f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x7f3e26692977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x7f3e26692b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x7fc187dae390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x7f9289e6efb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x7f928716264b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x7f9287165977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m *** SIGSEGV (@0x0) received by PID 75077 (TID 0x7fb559efc700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x7fb559ad5390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x7f492ef2d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x7f1a3114afb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x7f1a2e43e64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x7f1a2e441977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x7f1088470390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x7ee18a5aafb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x7ee18789e64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m *** SIGSEGV (@0x0) received by PID 75125 (TID 0x7f2a4772e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x7f2a47307390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x7efb494a0fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x7f77c4517390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x7f48c665afb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x7f48c394e64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x7f48c3951977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x7f48c3951b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x7ff2aa6ce390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x7fc3ac81bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x7fc3a9b0f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x7fc3a9b12977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x7f5df2a7f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x7f2ef4c6bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x7f2ef1f5f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x7f2ef1f62977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x7fad1a03c64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x7fad1a03f977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x7f9641c78977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x7f9641c78b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x7f9641c78e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x7f9644991c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m *** SIGSEGV (@0x0) received by PID 75109 (TID 0x7fd6d588a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x7fd6d5463390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x7fa7d7643fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x7fa7d493764b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x7fa7d493a977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x7ee16df8f977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x7ee16df8fb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x7ee16df8fe11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x7ee170ca8c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x7f2381c7564b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x7f2381c78977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x7f2381c78b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x7f2381c78e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x7f1aafdb1fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x7f1aad0a564b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x7f1aad0a8977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x7f1aad0a8b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x7ecf2fcba977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x7ecf2fcbab53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x7ecf2fcbae11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x7ecf329d3c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x7f39f32c964b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x7f39f32cc977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x7f39f32ccb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x7f39f32cce11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x7eec9dc78977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x7eec9dc78b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x7eec9dc78e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x7eeca0991c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x7eeca09b4cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x7f3bf3978fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x7f3bf0c6c64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x7f3bf0c6f977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x7f3bf0c6fb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x7f7fd1d29977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x7f7fd1d29b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m *** SIGSEGV (@0x0) received by PID 75157 (TID 0x7f0df9136700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x7f0df8d0f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x7edefae48fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x7edef813c64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x7edef813f977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m *** SIGSEGV (@0x0) received by PID 75112 (TID 0x7fdd4d686700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x7fdd4d25f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x7fae4f32cfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x7fae4c62064b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x7f00d1efa390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x7ed1d409bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x7ed1d138f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x7ed1d1392977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x7ed1d1392b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x7f71fd067fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x7f71fa35b64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x7f71fa35e977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x7f71fa35eb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m *** SIGSEGV (@0x0) received by PID 75045 (TID 0x7f7fa9334700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x7f7fa8f0d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x7f50ab11bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x7f50a840f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x7f50a8412977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m *** Aborted at 1604573713 (unix time) try \"date -d @1604573713\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m *** SIGSEGV (@0x0) received by PID 75041 (TID 0x7fc96166d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x7fc961246390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x7f9a6332cfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x7f9a6062064b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x7f252ee4964b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x7f252ee4c977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x7f252ee4cb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x7f252ee4ce11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x7eead9352b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x7eead9352e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x7eeadc06bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x7eeadc08ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x7eead90cc009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x7eead90cac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x7fcaabcea977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x7fcaabceab53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x7fcaabceae11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x7fcaaea03c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x7fa4bcd67977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x7fa4bcd67b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x7fa4bcd67e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x7fa4bfa80c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x7fcaac0f3b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x7fcaac0f3e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x7fcaaee0cc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x7f6aabce2b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x7f6aabce2e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x7f951ab8db53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x7f951ab8de11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x7f951d8a6c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x7f78fab3f5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x7f78fac47148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x7f78fc83e989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x7fbf9363be11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x7fbf96354c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x7fbf96377cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x7f2ff5b645cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x7f2ff5c6c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x7ef82814a989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x7ef82644b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x7f50ee6b95cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x7f50ee7c1148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x7f50f4a77bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x562af5a90fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x562af59ebb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x562af5a76baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x562af5a77a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x562af59ebbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x562af5a76baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x562af5a77643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x562af59ec689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x7f1e4a678989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x7f1e489795cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x7f1e48a81148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x7f84c9d37989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x7f84c80385cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x7f2b14e7a989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x7f2b1317b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x7f75bc6495cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x7f75bc751148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x7eeb45d8f5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x7eeb45e97148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x7eeb4c14dbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x55603882cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x556038787b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x556038812baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x556038813a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x556038787bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x556038812baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x556038813643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x556038788689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x556038812baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x556038813643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x556038788689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x556038812baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x556038813643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x556038788689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75158)\u001b[0m     @     0x556038812baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x7f201e7b1989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x7f201cab25cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x7f961a5c0977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x7f961a5c0b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x7f104bd93977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x7f104bd93b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x7f7fd7063977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x7f7fd7063b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x7f7fd7063e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x7fa4d4be2b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x7fa4d4be2e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x7fa4d78fbc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x7fa4d791ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x7f9ac9f8fb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x7f9ac9f8fe11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x7f9accca8c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x7f9accccbcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x7f7e56b60b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x7f7e56b60e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x7ef47bff9b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x7ef47bff9e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x7f72fad7ce11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x7f72fda95c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x7f72fdab8cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x7fb70e797b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x7fb70e797e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x7fb7114b0c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x7f13abe65148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x7f13ada5c989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x7f13abd5d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x7f7ed0095148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x7f7ed1c8c989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x7f7ecff8d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x7f9f450b1148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x7f9f46ca8989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x7f6db0f78e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x7f6db3c91c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x7f6db3cb4cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x7f6db0cf2009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x7f6db0cf0c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x7eff51116148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x7eff52d0d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x7eff5100e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x7fb83f898148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x7fb84148f989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x7fb83f7905cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x7f98cae6ee11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x7f98cdb87c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x7f98cdbaacfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x7fb3e12235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x7fb3e132b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x7fb3e75e1bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x55fa3626ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x7f8f598b9e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x7f8f5c5d2c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x7f8f5c5f5cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x7f8f59633009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x7f8f59631c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x7fc222e1d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x7fc22111e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x7fb984623e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x7fb98733cc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x7fb98735fcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x7fb98439d009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x7f7b69392e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x7f7b6c0abc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x7f7b6c0cecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x7f7b6910c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x7f7b6910ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x7f1641b6fb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x7f1641b6fe11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x7f1644888c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x7f16448abcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x7f16418e9009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x7f77f4d67e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x7f77f7a80c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x7f77f7aa3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x7f77f4ae1009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x7f77f4adfc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x7fb928a4de11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x7fb92b766c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x7fb92b789cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x7fb9287c7009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x7fb9287c5c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x7fb9287c6ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x7f64e0d67e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x7f64e3a80c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x7f64e3aa3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x7f64e0ae1009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x7f64e0adfc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x7f64e0ae0ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x7ee4437f6989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x7ee441af75cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x7ee441bff148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x7ee447eb5bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x55af8b698fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x55af8b5f3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x55af8b67ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x55af8b67fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x55af8b5f3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x55af8b67ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x55af8b67f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x55af8b5f4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x55af8b67ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x55af8b67f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x55af8b5f4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x55af8b67ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x55af8b67f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x55af8b5f4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75099)\u001b[0m     @     0x55af8b67ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x7eed29392e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x7eed2c0abc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x7eed2c0cecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x7eed2910c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x7eed2910ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x7ee35984ce11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x7ee35c565c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x7ee35c588cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x7ee3595c6009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x7ee3595c4c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x7ee3595c5ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x7f971d17b977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x7f971d17bb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x7f971d17be11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x7f971fe94c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x7f12ab424e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x7f12ae13dc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x7f12ae160cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x7f12ab19e009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x7f12ab19cc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x7f3c94d67977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x7f43c4b50b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x7f43c4b50e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x7f43c7869c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x7f43c788ccfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x7f43c48ca009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x7f43c48c8c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x7f2bed8b9b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x7f2bed8b9e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x7f2bf05d2c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x7f2bf05f5cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x7f2bed633009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x7f9fc88e5b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x7f9fc88e5e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x7f9fcb5fec12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x7f9fcb621cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x7f9fc865f009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x7fb2434ba390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x7f83454a0fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x7f834279464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x7f8342797977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x7f8342797b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x7f3e26692e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x7f3e293abc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x7f3e293cecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x7f3e2640c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x7f3e2640ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x7f9287165b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x7f9287165e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x7f9289e7ec12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x7f9289ea1cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x7f9286edf009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x7f9286eddc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x7f865ba70fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x7f8658d6464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x7f8658d67977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x7f8658d67b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x7f1a2e441b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x7f1a2e441e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x7f1a3115ac12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x7f1a3117dcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x7ee1878a1977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x7ee1878a1b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x7ee1878a1e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x7ee18a5bac12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x7efb4679464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x7efb46797977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x7f48c3951e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x7f48c666ac12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x7f48c668dcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x7f48c36cb009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x7f48c36c9c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x7fc3a9b12b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x7fc3a9b12e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x7fc3ac82bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x7fc3ac84ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x7fc3a988c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x7f2ef1f62b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x7f2ef1f62e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x7f2ef4c7bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x7f2ef4c9ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x7f2ef1cdc009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x7fad1a03fb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x7fad1a03fe11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x7fad1cd58c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x7fad1cd7bcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x7fad19db9009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x7f96449b4cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x7f96419f2009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x7f96419f0c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x7fa7d493ab53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x7fa7d493ae11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x7fa7d7653c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x7fa7d7676cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x7ee170ccbcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x7ee16dd09009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x7ee16dd07c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x7ee16dd08ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x7f2384991c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x7f23849b4cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x7f1aad0a8e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x7f1aafdc1c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x7f1aafde4cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x7f1aace22009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x7f1aace20c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x7ecf329f6cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x7ecf2fa34009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x7ecf2fa32c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x7ecf2fa33ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x7f39f5fe5c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x7f39f6008cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x7f39f3046009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x7f39f3044c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x7eec9d9f2009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x7eec9d9f0c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x7eec9d9f1ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x7f3bf0c6fe11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x7f3bf3988c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x7f3bf39abcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x7f3bf09e9009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x7f3bf09e7c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x7f7fd1d29e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x7f7fd4a42c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x7f7fd4a65cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x7f7fd1aa3009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x7f7fd1aa1c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x7edef813fb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x7edef813fe11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x7edefae58c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x7fae4c623977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x7fae4c623b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x7ed1d1392e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x7ed1d40abc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x7ed1d40cecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x7ed1d110c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x7ed1d110ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x7f71fa35ee11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x7f71fd077c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x7f71fd09acfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x7f71fa0d8009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x7f71fa0d6c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x7f50a8412b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x7f50a8412e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x7f50ab12bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x7f9a60623977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x7f9a60623b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x7f9a60623e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x7f2531b65c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x7f2531b88cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x7f252ebc6009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x7f252ebc4c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x7f252ebc5ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x7eead90cbed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x7eead980e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x7eead9916148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x7fcaaea26cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x7fcaaba64009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x7fcaaba62c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x7fcaaba63ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x7fa4bfaa3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x7fa4bcae1009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x7fa4bcadfc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x7fa4bcae0ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x7fcaaee2fcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x7fcaabe6d009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x7fcaabe6bc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x7fcaabe6ced4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x7fcaac5af5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x7f6aae9fbc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x7f6aaea1ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x7f6aaba5c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x7f6aaba5ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x7f6aaba5bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x7f951d8c9cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x7f951a907009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x7f951a905c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x7f951a906ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x7f951b0495cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x7f78fab3f5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x7f78fac47148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x7f7900efdbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x55dac6046fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x55dac5fa1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x55dac602cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x55dac602da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x55dac5fa1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x55dac602cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x55dac602d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x55dac5fa2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x55dac602cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x55dac602d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x55dac5fa2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x55dac602cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x55dac602d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x55dac5fa2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75079)\u001b[0m     @     0x55dac602cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x7fbf933b5009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x7fbf933b3c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x7fbf933b4ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x7fbf93af75cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x7f2ffbf22bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x5605ff0c0fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x5605ff01bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x5605ff0a6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x5605ff0a7a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x5605ff01bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x5605ff0a6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x5605ff0a7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x5605ff01c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x5605ff0a6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x5605ff0a7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x5605ff01c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x5605ff0a6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x5605ff0a7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x5605ff01c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75165)\u001b[0m     @     0x5605ff0a6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x7ef826553148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x7ef82c809bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x559571861fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x5595717bcb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x559571847baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x559571848a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x5595717bcbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x559571847baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x559571848643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x5595717bd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x559571847baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x559571848643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x5595717bd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x559571847baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x559571848643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x5595717bd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75154)\u001b[0m     @     0x559571847baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x562af5a76baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x562af5a77643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x562af59ec689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x562af5a76baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x562af5a77643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x562af59ec689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75131)\u001b[0m     @     0x562af5a76baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x7f1e4ed37bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x55d1ef731fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x55d1ef68cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x55d1ef717baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x55d1ef718a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x55d1ef68cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x55d1ef717baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x55d1ef718643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x55d1ef68d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x55d1ef717baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x55d1ef718643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x55d1ef68d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x55d1ef717baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x55d1ef718643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x55d1ef68d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75144)\u001b[0m     @     0x55d1ef717baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x7f84c8140148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x7f84ce3f6bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x55a0d3823fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x55a0d377eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x55a0d3809baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x55a0d380aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x55a0d377ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x55a0d3809baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x55a0d380a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x55a0d377f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x55a0d3809baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x55a0d380a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x55a0d377f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x55a0d3809baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x55a0d380a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x55a0d377f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75135)\u001b[0m     @     0x55a0d3809baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x7f2b13283148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x7f2b19539bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x55629056efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x5562904c9b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x556290554baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x556290555a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x5562904c9bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x556290554baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x556290555643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x5562904ca689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x556290554baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x556290555643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x5562904ca689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x556290554baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x556290555643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x5562904ca689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75155)\u001b[0m     @     0x556290554baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x7f75c2a07bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x564aea0f4fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x564aea04fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x564aea0dabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x564aea0dba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x564aea04fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x564aea0dabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x564aea0db643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x564aea050689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x564aea0dabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x564aea0db643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x564aea050689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x564aea0dabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x564aea0db643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x564aea050689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75167)\u001b[0m     @     0x564aea0dabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x7f201cbba148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x7f2022e70bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x55d92e887fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x55d92e7e2b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x55d92e86dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x55d92e86ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x55d92e7e2bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x55d92e86dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x55d92e86e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x55d92e7e3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x55d92e86dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x55d92e86e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x55d92e7e3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x55d92e86dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x55d92e86e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x55d92e7e3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75153)\u001b[0m     @     0x55d92e86dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x7f961a5c0e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x7f961d2d9c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x7f961d2fccfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x7f961a33a009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x7f961a338c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x7f104bd93e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x7f104eaacc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x7f104eacfcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x7f104bb0d009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x7f104bb0bc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x7f104bb0ced4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x7f7fd9d7cc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x7f7fd9d9fcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x7f7fd6ddd009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x7f7fd6ddbc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x7f7fd6ddced4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x7f7fd751f5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x7fa4d495c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x7fa4d495ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x7fa4d495bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x7fa4d509e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x7f9ac9d09009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x7f9ac9d07c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x7f9ac9d08ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x7f9aca44b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x7f7e59879c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x7f7e5989ccfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x7f7e568da009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x7f7e568d8c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x7f7e568d9ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x7ef47ed12c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x7ef47ed35cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x7ef47bd73009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x7ef47bd71c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x7ef47bd72ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x7f72faaf6009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x7f72faaf4c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x7f72faaf5ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x7f72fb2385cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x7f72fb340148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x7fb7114d3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x7fb70e511009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x7fb70e50fc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x7fb70e510ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x7fb70ec535cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x7f13abe65148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x7f13b211bbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x5634b2d3afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x5634b2c95b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x5634b2d20baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x5634b2d21a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x5634b2c95bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x5634b2d20baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x5634b2d21643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x5634b2c96689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x5634b2d20baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x5634b2d21643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x5634b2c96689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x5634b2d20baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x5634b2d21643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x5634b2c96689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75141)\u001b[0m     @     0x5634b2d20baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x7f7ed0095148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x7f7ed634bbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x55e48e613fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x55e48e56eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x55e48e5f9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x55e48e5faa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x55e48e56ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x55e48e5f9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x55e48e5fa643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x55e48e56f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x55e48e5f9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x55e48e5fa643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x55e48e56f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x55e48e5f9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x55e48e5fa643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x55e48e56f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75102)\u001b[0m     @     0x55e48e5f9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x7f9f44fa95cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x7f9f450b1148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x7f9f4b367bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x5617495e8fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x561749543b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x5617495cebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x5617495cfa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x561749543bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x5617495cebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x5617495cf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x561749544689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x5617495cebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x5617495cf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x561749544689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x5617495cebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x5617495cf643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x561749544689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75100)\u001b[0m     @     0x5617495cebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x7f6db0cf1ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x7f6db14345cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x7f6db153c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x7f6db3133989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x7eff51116148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x7eff573ccbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x55ec4b93dfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x55ec4b898b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x55ec4b923baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x55ec4b924a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x55ec4b898bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x55ec4b923baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x55ec4b924643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x55ec4b899689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x55ec4b923baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x55ec4b924643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x55ec4b899689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x55ec4b923baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x55ec4b924643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x55ec4b899689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75134)\u001b[0m     @     0x55ec4b923baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x7fb83f898148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x7fb845b4ebd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x5652ae4b8fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x5652ae413b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x5652ae49ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x5652ae49fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x5652ae413bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x5652ae49ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x5652ae49f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x5652ae414689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x5652ae49ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x5652ae49f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x5652ae414689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x5652ae49ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x5652ae49f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x5652ae414689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75168)\u001b[0m     @     0x5652ae49ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x7f98cabe8009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x7f98cabe6c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x7f98cabe7ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x7f98cb32a5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x7f98cb432148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x55fa361cab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x55fa36255baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x55fa36256a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x55fa361cabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x55fa36255baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x55fa36256643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x55fa361cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x55fa36255baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x55fa36256643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x55fa361cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x55fa36255baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x55fa36256643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x55fa361cb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75149)\u001b[0m     @     0x55fa36255baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x7f8f59632ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x7f8f59d755cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x7f8f59e7d148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x7f8f5ba74989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x7f8f59d755cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x7fc221226148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x7fc2274dcbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x561a188c1fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x561a1881cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x561a188a7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x561a188a8a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x561a1881cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x561a188a7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x561a188a8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x561a1881d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x561a188a7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x561a188a8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x561a1881d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x561a188a7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x561a188a8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x561a1881d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75115)\u001b[0m     @     0x561a188a7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x7fb98439bc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x7fb98439ced4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x7fb984adf5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x7fb984be7148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x7fb9867de989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x7f7b6910bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x7f7b6984e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x7f7b69956148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x7f16418e7c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x7f16418e8ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x7f164202b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x7f77f4ae0ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x7f77f52235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x7f77f532b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x7fb928f095cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x7fb929011148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x7fb92ac08989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x7f64e12235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x7f64e132b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x7f64e2f22989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x7eed2910bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x7eed2984e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x7eed29956148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x7eed2b54d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x7ee359d085cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x7ee359e10148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x7ee35ba07989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x7f971feb7cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x7f971cef5009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x7f971cef3c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x7f971cef4ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x7f12ab19ded4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x7f12ab8e05cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x7f12ab9e8148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x7f3c94d67b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x7f3c94d67e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x7f3c97a80c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x7f3c97aa3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x7f43c48c9ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x7f43c500c5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x7f2bed631c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x7f2bed632ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x7f2bedd755cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x7f9fc865dc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x7f9fc865eed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x7f9fc8da15cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x7f8342797e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x7f83454b0c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x7f83454d3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x7f8342511009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x7f834250fc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x7f3e2640bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x7f3e26b4e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x7f3e26c56148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x7f3e2884d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x7f9286edeed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x7f92876215cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x7f8658d67e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x7f865ba80c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x7f865baa3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x7f8658ae1009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x7f8658adfc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x7f8658ae0ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x7f1a2e1bb009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x7f1a2e1b9c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x7f1a2e1baed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x7f1a2e8fd5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x7ee18a5ddcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x7ee18761b009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x7ee187619c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x7ee18761aed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x7efb46797b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x7efb46797e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x7efb494b0c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x7f48c36caed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x7f48c3e0d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x7f48c3f15148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x7fc3a988ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x7fc3a988bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x7fc3a9fce5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x7f2ef1cdac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x7f2ef1cdbed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x7f2ef241e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x7fad19db7c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x7fad19db8ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x7fad1a4fb5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x7fad1a603148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x7f96419f1ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x7f96421345cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x7f964223c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x7f9643e33989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x7f96421345cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x7fa7d46b4009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x7fa7d46b2c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x7fa7d46b3ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x7fa7d4df65cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x7ee16e44b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x7ee16e553148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x7ee17014a989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x7ee16e44b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x7f23819f2009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x7f23819f0c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x7f23819f1ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x7f23821345cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x7f1aace21ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x7f1aad5645cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x7f1aad66c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x7f1aaf263989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x7ecf301765cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x7ecf3027e148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x7ecf31e75989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x7ecf301765cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x7f39f3045ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x7f39f37885cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x7f39f3890148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x7f39f5487989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x7eec9e1345cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x7eec9e23c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x7eec9fe33989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x7eec9e1345cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x7f3bf09e8ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x7f3bf112b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x7f3bf1233148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x7f3bf2e2a989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x7f7fd1aa2ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x7f7fd21e55cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x7f7fd22ed148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x7f7fd3ee4989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x7edefae7bcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x7edef7eb9009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x7edef7eb7c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x7edef7eb8ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x7edef85fb5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x7fae4c623e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x7fae4f33cc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x7fae4f35fcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x7fae4c39d009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x7fae4c39bc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x7ed1d110bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x7ed1d184e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x7ed1d1956148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x7ed1d354d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x7f71fa0d7ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x7f71fa81a5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x7f71fa922148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x7f71fc519989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x7f50ab14ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x7f50a818c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x7f50a818ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x7f50a818bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x7f50a88ce5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x7f9a6333cc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x7f9a6335fcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x7f9a6039d009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x7f9a6039bc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x7f9a6039ced4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x7f9a60adf5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x7f252f3085cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x7f252f410148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x7f2531007989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x7f252f3085cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x7eeadb50d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x7eead980e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x7eead9916148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x7eeadfbccbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x560855896fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x5608557f1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x56085587cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x56085587da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x5608557f1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x56085587cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x56085587d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x5608557f2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x56085587cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x7fcaac1a65cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x7fcaac2ae148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x7fcaadea5989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x7fcaac1a65cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x7fa4bd2235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x7fa4bd32b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x7fa4bef22989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x7fa4bd2235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x7fcaac6b7148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x7fcaae2ae989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x7fcaac5af5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x7f6aac19e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x7f6aac2a6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x7f6aade9d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x7f6aac19e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x7f951b151148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x7f951cd48989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x7f951b0495cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x7fbf93bff148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x7fbf957f6989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x7fbf93af75cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x7f961a339ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x7f961aa7c5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x7f961ab84148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x7f961c77b989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x7f961aa7c5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x7f104c24f5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x7f104c357148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x7f104df4e989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x7f7fd7627148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x7f7fd921e989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x7f7fd751f5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x7f7fd7627148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x7f7fdd8ddbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x55eaf3c59fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x55eaf3bb4b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x55eaf3c3fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x55eaf3c40a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x55eaf3bb4bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x55eaf3c3fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x55eaf3c40643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x7fa4d51a6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x7fa4d6d9d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x7fa4d509e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x7fa4d51a6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x7fa4db45cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x5606ab90bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x5606ab866b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x5606ab8f1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x5606ab8f2a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x5606ab866bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x5606ab8f1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x5606ab8f2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x5606ab867689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x5606ab8f1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x5606ab8f2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x5606ab867689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x5606ab8f1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x5606ab8f2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x5606ab867689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x7f9aca553148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x7f9acc14a989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x7f9aca44b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x7f9aca553148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x7f9ad0809bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x55eebd2defd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x55eebd239b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x55eebd2c4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x55eebd2c5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x55eebd239bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x55eebd2c4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x55eebd2c5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x55eebd23a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x55eebd2c4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x55eebd2c5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x55eebd23a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x55eebd2c4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x55eebd2c5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x55eebd23a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75060)\u001b[0m     @     0x55eebd2c4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x7f7e5701c5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x7f7e57124148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x7f7e58d1b989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x7f7e5701c5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x7ef47c4b55cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x7ef47c5bd148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x7ef47e1b4989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x7ef47c4b55cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x7f72fcf37989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x7f72fb2385cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x7f72fb340148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x7f73015f6bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x562896d9efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x562896cf9b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x562896d84baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x562896d85a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x562896cf9bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x562896d84baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x562896d85643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x562896cfa689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x562896d84baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x562896d85643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x562896cfa689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x562896d84baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x562896d85643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x562896cfa689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75123)\u001b[0m     @     0x562896d84baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x7fb70ed5b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x7fb710952989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x7fb70ec535cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x7fb70ed5b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x7f6db14345cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x7f6db153c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x7f6db77f2bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x560a00d3cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x560a00c97b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x560a00d22baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x560a00d23a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x560a00c97bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x560a00d22baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x560a00d23643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x560a00c98689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x560a00d22baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x560a00d23643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x560a00c98689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x560a00d22baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x560a00d23643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x560a00c98689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75164)\u001b[0m     @     0x560a00d22baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x7f98cd029989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x7f98cb32a5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x7f98cb432148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x7f98d16e8bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x5599bb4adfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x5599bb408b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x5599bb493baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x5599bb494a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x5599bb408bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x5599bb493baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x5599bb494643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x5599bb409689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x5599bb493baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x5599bb494643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x5599bb409689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x5599bb493baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x5599bb494643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x5599bb409689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75140)\u001b[0m     @     0x5599bb493baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x7f8f59e7d148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x7f8f60133bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x559e13856fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x559e137b1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x559e1383cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x559e1383da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x559e137b1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x559e1383cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x559e1383d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x559e137b2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x559e1383cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x559e1383d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x559e137b2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x559e1383cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x559e1383d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x559e137b2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75136)\u001b[0m     @     0x559e1383cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x7fb984adf5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x7fb984be7148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x7fb98ae9dbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x562b01ac1fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x562b01a1cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x562b01aa7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x562b01aa8a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x562b01a1cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x562b01aa7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x562b01aa8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x562b01a1d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x562b01aa7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x562b01aa8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x562b01a1d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x562b01aa7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x562b01aa8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x562b01a1d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75117)\u001b[0m     @     0x562b01aa7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x7f7b6b54d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x7f7b6984e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x7f7b69956148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x7f7b6fc0cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x5559a13defd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x5559a1339b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x5559a13c4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x5559a13c5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x5559a1339bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x5559a13c4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x5559a13c5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x5559a133a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x5559a13c4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x5559a13c5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x5559a133a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x5559a13c4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x5559a13c5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x5559a133a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75151)\u001b[0m     @     0x5559a13c4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x7f1642133148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x7f1643d2a989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x7f164202b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x7f1642133148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x7f77f6f22989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x7f77f52235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x7f77f532b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x7f77fb5e1bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x564b37194fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x564b370efb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x564b3717abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x564b3717ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x564b370efbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x564b3717abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x564b3717b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x564b370f0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x564b3717abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x564b3717b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x564b370f0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x564b3717abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x564b3717b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x564b370f0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75047)\u001b[0m     @     0x564b3717abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x7fb928f095cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x7fb929011148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x7fb92f2c7bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x55a2dd727fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x55a2dd682b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x55a2dd70dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x55a2dd70ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x55a2dd682bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x55a2dd70dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x55a2dd70e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x55a2dd683689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x55a2dd70dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x55a2dd70e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x55a2dd683689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x55a2dd70dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x55a2dd70e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x55a2dd683689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75133)\u001b[0m     @     0x55a2dd70dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x7f64e12235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x7f64e132b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x7f64e75e1bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x55e60970ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x55e60966ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x55e6096f5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x55e6096f6a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x55e60966abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x55e6096f5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x55e6096f6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x55e60966b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x55e6096f5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x55e6096f6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x55e60966b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x55e6096f5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x55e6096f6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x55e60966b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75062)\u001b[0m     @     0x55e6096f5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x7eed2984e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x7eed29956148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x7eed2fc0cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x56479d499fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x56479d3f4b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x56479d47fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x56479d480a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x56479d3f4bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x56479d47fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x56479d480643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x56479d3f5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x56479d47fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x56479d480643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x56479d3f5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x56479d47fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x56479d480643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x56479d3f5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75057)\u001b[0m     @     0x56479d47fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x7ee359d085cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x7ee359e10148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x7ee3600c6bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x55e565825fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x55e565780b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x55e56580bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x55e56580ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x55e565780bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x55e56580bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x55e56580c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x55e565781689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x55e56580bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x55e56580c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x55e565781689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x55e56580bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x55e56580c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x55e565781689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75159)\u001b[0m     @     0x55e56580bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x7f971d6375cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x7f971d73f148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x7f971f336989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x7f12ad5df989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x7f12ab8e05cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x7f12ab9e8148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x7f12b1c9ebd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x559a3919ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x559a390fab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x559a39185baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x559a39186a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x559a390fabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x559a39185baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x559a39186643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x559a390fb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x559a39185baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x559a39186643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x559a390fb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x559a39185baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x559a39186643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x559a390fb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75162)\u001b[0m     @     0x559a39185baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x7f3c94ae1009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x7f3c94adfc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x7f3c94ae0ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x7f3c952235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x7f43c5114148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x7f43c6d0b989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x7f43c500c5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x7f43c5114148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x7f43cb3cabd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x5629c6be2fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x5629c6b3db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x5629c6bc8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x5629c6bc9a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x5629c6b3dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x5629c6bc8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x5629c6bc9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x5629c6b3e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x5629c6bc8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x5629c6bc9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x7f2bede7d148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x7f2befa74989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x7f2bedd755cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x7f2bede7d148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x7f2bf4133bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x55d85bb31fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x55d85ba8cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x55d85bb17baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x55d85bb18a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x55d85ba8cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x55d85bb17baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x55d85bb18643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x55d85ba8d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x55d85bb17baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x55d85bb18643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x55d85ba8d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x55d85bb17baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x55d85bb18643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x7f9fc8ea9148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x7f9fcaaa0989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x7f9fc8da15cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x7f8342510ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x7f8342c535cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x7f8342d5b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x7f8344952989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x7f3e26b4e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x7f3e26c56148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x7f3e2cf0cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x5596ccc33fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x5596ccb8eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x5596ccc19baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x5596ccc1aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x5596ccb8ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x5596ccc19baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x5596ccc1a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x5596ccb8f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x5596ccc19baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x5596ccc1a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x5596ccb8f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x5596ccc19baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x5596ccc1a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x5596ccb8f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75146)\u001b[0m     @     0x5596ccc19baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x7f9287729148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x7f9289320989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x7f92876215cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x7f9287729148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x7f928d9dfbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x55fe6cd8ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x55fe6cceab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x55fe6cd75baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x55fe6cd76a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x55fe6cceabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x55fe6cd75baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x55fe6cd76643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x55fe6cceb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x55fe6cd75baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x55fe6cd76643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x55fe6cceb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x55fe6cd75baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x55fe6cd76643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x55fe6cceb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75118)\u001b[0m     @     0x55fe6cd75baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x7f86592235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x7f865932b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x7f865af22989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x7f86592235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x7f1a2ea05148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x7f1a305fc989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x7f1a2e8fd5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x7ee187d5d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x7ee187e65148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x7ee189a5c989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x7ee187d5d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x7efb494d3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x7efb46511009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x7efb4650fc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x7efb46510ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x7f48c5b0c989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x7f48c3e0d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x7f48c3f15148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x7f48ca1cbbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x55a49d62ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x55a49d58ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x55a49d615baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x55a49d616a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x55a49d58abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x55a49d615baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x7fc3aa0d6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x7fc3abccd989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x7fc3a9fce5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x7f2ef2526148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x7f2ef411d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x7f2ef241e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x7f2ef2526148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x7f2ef87dcbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x55f3a72d2fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x55f3a722db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x55f3a72b8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x55f3a72b9a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x55f3a722dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x55f3a72b8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x55f3a72b9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x55f3a722e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x55f3a72b8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x55f3a72b9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x55f3a722e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x55f3a72b8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x55f3a72b9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x55f3a722e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75074)\u001b[0m     @     0x55f3a72b8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x7fad1c1fa989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x7fad1a4fb5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x7f964223c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x7f96484f2bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x55640365efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x5564035b9b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x556403644baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x556403645a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x5564035b9bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x556403644baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x556403645643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x5564035ba689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x556403644baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x556403645643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x5564035ba689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x556403644baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x556403645643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x5564035ba689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75116)\u001b[0m     @     0x556403644baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x7fa7d4efe148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x7fa7d6af5989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x7fa7d4df65cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x7ee16e553148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x7ee174809bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x55c40fbabfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x55c40fb06b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x55c40fb91baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x55c40fb92a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x55c40fb06bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x55c40fb91baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x55c40fb92643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x55c40fb07689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x55c40fb91baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x55c40fb92643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x55c40fb07689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x55c40fb91baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x55c40fb92643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x55c40fb07689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75053)\u001b[0m     @     0x55c40fb91baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x7f238223c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x7f2383e33989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x7f23821345cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x7f1aad5645cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x7f1aad66c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x7f1ab3922bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x5561e0842fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x5561e079db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x5561e0828baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x5561e0829a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x5561e079dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x5561e0828baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x5561e0829643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x5561e079e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x5561e0828baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x5561e0829643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x7ecf3027e148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x7ecf36534bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x561066198fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x5610660f3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x56106617ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x56106617fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x5610660f3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x56106617ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x56106617f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x5610660f4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x56106617ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x56106617f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x5610660f4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x56106617ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x56106617f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x5610660f4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75044)\u001b[0m     @     0x56106617ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x7f39f37885cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x7f39f3890148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x7f39f9b46bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x55cb8c0f5fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x55cb8c050b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x55cb8c0dbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x55cb8c0dca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x55cb8c050bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x55cb8c0dbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x55cb8c0dc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x55cb8c051689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x55cb8c0dbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x55cb8c0dc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x55cb8c051689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x55cb8c0dbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x55cb8c0dc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x55cb8c051689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75048)\u001b[0m     @     0x55cb8c0dbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x7eec9e23c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x7eeca44f2bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x560fb9e77fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x560fb9dd2b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x560fb9e5dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x560fb9e5ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x560fb9dd2bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x560fb9e5dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x560fb9e5e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x560fb9dd3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x560fb9e5dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x560fb9e5e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x560fb9dd3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x560fb9e5dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x560fb9e5e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x560fb9dd3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75070)\u001b[0m     @     0x560fb9e5dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x7f3bf112b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x7f3bf1233148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x7f3bf74e9bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x56199a116fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x56199a071b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x56199a0fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x56199a0fda20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x56199a071bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x56199a0fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x56199a0fd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x56199a072689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x56199a0fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x56199a0fd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x56199a072689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x56199a0fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x56199a0fd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x56199a072689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75043)\u001b[0m     @     0x56199a0fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x7f7fd21e55cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x7f7fd22ed148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x7f7fd85a3bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x560d6b8bbfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x560d6b816b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x560d6b8a1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x560d6b8a2a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x560d6b816bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x560d6b8a1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x560d6b8a2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x560d6b817689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x560d6b8a1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x560d6b8a2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x560d6b817689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x560d6b8a1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x560d6b8a2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x560d6b817689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75169)\u001b[0m     @     0x560d6b8a1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x7edef8703148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x7edefa2fa989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x7edef85fb5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x7edef8703148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x7edefe9b9bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x7fae4c39ced4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x7fae4cadf5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x7fae4cbe7148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x7fae4e7de989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x7ed1d184e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x7ed1d1956148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x7ed1d7c0cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x55856d52dfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x55856d488b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x55856d513baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x55856d514a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x55856d488bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x55856d513baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x55856d514643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x55856d489689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x55856d513baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x55856d514643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x55856d489689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x55856d513baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x55856d514643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x55856d489689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75059)\u001b[0m     @     0x55856d513baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x7f71fa81a5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x7f71fa922148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x7f7200bd8bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x55f4f9cabfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x55f4f9c06b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x55f4f9c91baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x55f4f9c92a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x55f4f9c06bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x55f4f9c91baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x55f4f9c92643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x55f4f9c07689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x55f4f9c91baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x55f4f9c92643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x55f4f9c07689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x55f4f9c91baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x55f4f9c92643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x55f4f9c07689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75106)\u001b[0m     @     0x55f4f9c91baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x7f50a89d6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x7f50aa5cd989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x7f50a88ce5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x7f50a89d6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x7f9a60be7148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x7f9a627de989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x7f9a60adf5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x7f9a60be7148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x7f252f410148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x7f25356c6bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x55f0f22b9fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x55f0f2214b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x55f0f229fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x55f0f22a0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x55f0f2214bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x55f0f229fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x55f0f22a0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x55f0f2215689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x55f0f229fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x55f0f22a0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x55f0f2215689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x55f0f229fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x55f0f22a0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x55f0f2215689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75049)\u001b[0m     @     0x55f0f229fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x56085587d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x5608557f2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x56085587cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x56085587d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x5608557f2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75132)\u001b[0m     @     0x56085587cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x7fcaac2ae148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x7fcab2564bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x557335fc9fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x557335f24b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x557335fafbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x557335fb0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x557335f24bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x557335fafbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x557335fb0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x557335f25689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x557335fafbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x557335fb0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x557335f25689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x557335fafbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x557335fb0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x557335f25689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75097)\u001b[0m     @     0x557335fafbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x7fa4bd32b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x7fa4c35e1bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x56037e16bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x56037e0c6b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x56037e151baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x56037e152a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x56037e0c6bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x56037e151baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x56037e152643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x56037e0c7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x56037e151baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x56037e152643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x56037e0c7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x56037e151baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x56037e152643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x56037e0c7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75069)\u001b[0m     @     0x56037e151baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x7fcaac6b7148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x7fcab296dbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x56020bcabfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x56020bc06b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x56020bc91baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x56020bc92a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x56020bc06bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x56020bc91baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x56020bc92643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x56020bc07689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x56020bc91baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x56020bc92643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x56020bc07689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x56020bc91baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x56020bc92643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x56020bc07689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75066)\u001b[0m     @     0x56020bc91baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x7f6aac2a6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x7f6ab255cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x562539df4fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x562539d4fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x562539ddabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x562539ddba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x562539d4fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x562539ddabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x562539ddb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x562539d50689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x562539ddabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x562539ddb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x562539d50689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x562539ddabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x562539ddb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x562539d50689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75103)\u001b[0m     @     0x562539ddabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x7f951b151148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x7f9521407bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x55d4051b6fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x55d405111b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x55d40519cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x55d40519da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x55d405111bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x55d40519cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x55d40519d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x55d405112689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x55d40519cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x55d40519d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x55d405112689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x55d40519cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x55d40519d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x55d405112689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75137)\u001b[0m     @     0x55d40519cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x7fbf93bff148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x7fbf99eb5bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x55ecadf80fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x55ecadedbb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x55ecadf66baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x55ecadf67a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x55ecadedbbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x55ecadf66baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x55ecadf67643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x55ecadedc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x55ecadf66baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x55ecadf67643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x55ecadedc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x55ecadf66baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x55ecadf67643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x55ecadedc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75052)\u001b[0m     @     0x55ecadf66baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x7f961ab84148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x7f9620e3abd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x56296a12dfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x56296a088b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x56296a113baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x56296a114a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x56296a088bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x56296a113baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x56296a114643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x56296a089689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x56296a113baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x56296a114643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x56296a089689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x56296a113baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x56296a114643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x56296a089689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75081)\u001b[0m     @     0x56296a113baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x7f104c24f5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x7f104c357148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x7f105260dbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x55a778026fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x55a777f81b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x55a77800cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x55a77800da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x55a777f81bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x55a77800cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x55a77800d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x55a777f82689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x55a77800cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x55a77800d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x55a777f82689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x55a77800cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x55a77800d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x55a777f82689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75129)\u001b[0m     @     0x55a77800cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x55eaf3bb5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x55eaf3c3fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x55eaf3c40643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x55eaf3bb5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x55eaf3c3fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x55eaf3c40643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x55eaf3bb5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75083)\u001b[0m     @     0x55eaf3c3fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75056)\u001b[0m     @     0x5606ab8f1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x7f7e57124148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x7f7e5d3dabd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x555b03174fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x555b030cfb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x555b0315abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x555b0315ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x555b030cfbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x555b0315abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x555b0315b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x555b030d0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x555b0315abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x555b0315b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x555b030d0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x555b0315abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x555b0315b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x555b030d0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75127)\u001b[0m     @     0x555b0315abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x7ef47c5bd148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x7ef482873bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x55c13ca65fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x55c13c9c0b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x55c13ca4bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x55c13ca4ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x55c13c9c0bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x55c13ca4bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x55c13ca4c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x55c13c9c1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x55c13ca4bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x55c13ca4c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x55c13c9c1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x55c13ca4bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x55c13ca4c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x55c13c9c1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75055)\u001b[0m     @     0x55c13ca4bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x7fb715011bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x55f476707fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x55f476662b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x55f4766edbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x55f4766eea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x55f476662bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x55f4766edbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x55f4766ee643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x55f476663689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x55f4766edbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x55f4766ee643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x55f476663689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x55f4766edbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x55f4766ee643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x55f476663689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75054)\u001b[0m     @     0x55f4766edbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x7f16483e9bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x55d64411afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x55d644075b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x55d644100baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x55d644101a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x55d644075bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x55d644100baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x55d644101643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x55d644076689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x55d644100baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x55d644101643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x55d644076689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x55d644100baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x55d644101643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x55d644076689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75042)\u001b[0m     @     0x55d644100baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x7f971d6375cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x7f971d73f148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x7f97239f5bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x563e94449fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x563e943a4b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x563e9442fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x563e94430a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x563e943a4bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x563e9442fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x563e94430643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x563e943a5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x563e9442fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x563e94430643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x563e943a5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x563e9442fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x563e94430643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x563e943a5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75073)\u001b[0m     @     0x563e9442fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x7f3c9532b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x7f3c96f22989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x7f3c952235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x7f3c9532b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x5629c6b3e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x5629c6bc8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x5629c6bc9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x5629c6b3e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75142)\u001b[0m     @     0x5629c6bc8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x55d85ba8d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75058)\u001b[0m     @     0x55d85bb17baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x7f9fc8ea9148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x7f9fcf15fbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x563aa427afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x563aa41d5b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x563aa4260baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x563aa4261a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x563aa41d5bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x563aa4260baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x563aa4261643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x563aa41d6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x563aa4260baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x563aa4261643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x563aa41d6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x563aa4260baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x563aa4261643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x563aa41d6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75124)\u001b[0m     @     0x563aa4260baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x7f8342c535cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x7f8342d5b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x7f8349011bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x56099eee9fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x56099ee44b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x56099eecfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x56099eed0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x56099ee44bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x56099eecfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x56099eed0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x56099ee45689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x56099eecfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x56099eed0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x56099ee45689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x56099eecfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x56099eed0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x56099ee45689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75096)\u001b[0m     @     0x56099eecfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x7f865932b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x7f865f5e1bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x5648ef7f0fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x5648ef74bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x5648ef7d6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x5648ef7d7a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x5648ef74bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x5648ef7d6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x5648ef7d7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x5648ef74c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x5648ef7d6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x5648ef7d7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x5648ef74c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x5648ef7d6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x5648ef7d7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x5648ef74c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75077)\u001b[0m     @     0x5648ef7d6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x7f1a2ea05148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x7f1a34cbbbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x55a10ce9efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x55a10cdf9b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x55a10ce84baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x55a10ce85a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x55a10cdf9bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x55a10ce84baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x55a10ce85643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x55a10cdfa689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x55a10ce84baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x55a10ce85643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x55a10cdfa689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x55a10ce84baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x55a10ce85643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x55a10cdfa689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75174)\u001b[0m     @     0x55a10ce84baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x7ee187e65148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x7ee18e11bbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x55dda759ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x55dda74fab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x55dda7585baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x55dda7586a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x55dda74fabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x55dda7585baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x55dda7586643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x55dda74fb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x55dda7585baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x55dda7586643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x55dda74fb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x55dda7585baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x55dda7586643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x55dda74fb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75128)\u001b[0m     @     0x55dda7585baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x7efb46c535cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x7efb46d5b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x7efb48952989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x55a49d616643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x55a49d58b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x55a49d615baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x55a49d616643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x55a49d58b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x55a49d615baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x55a49d616643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x55a49d58b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75064)\u001b[0m     @     0x55a49d615baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x7fc3aa0d6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x7fc3b038cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x564ed7a16fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x564ed7971b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x564ed79fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x564ed79fda20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x564ed7971bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x564ed79fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x564ed79fd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x564ed7972689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x564ed79fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x564ed79fd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x564ed7972689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x564ed79fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x564ed79fd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x564ed7972689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75105)\u001b[0m     @     0x564ed79fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x7fad1a603148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x7fad208b9bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x55a091f63fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x55a091ebeb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x55a091f49baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x55a091f4aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x55a091ebebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x55a091f49baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x55a091f4a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x55a091ebf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x55a091f49baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x55a091f4a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x55a091ebf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x55a091f49baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x55a091f4a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x55a091ebf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75040)\u001b[0m     @     0x55a091f49baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x7fa7d4efe148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x7fa7db1b4bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x5567c7188fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x5567c70e3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x5567c716ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x5567c716fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x5567c70e3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x5567c716ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x5567c716f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x5567c70e4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x5567c716ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x5567c716f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x5567c70e4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x5567c716ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x5567c716f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x5567c70e4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75109)\u001b[0m     @     0x5567c716ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x7f238223c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x7f23884f2bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x5601bf766fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x5601bf6c1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x5601bf74cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x5601bf74da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x5601bf6c1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x5601bf74cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x5601bf74d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x5601bf6c2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x5601bf74cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x5601bf74d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x5601bf6c2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x5601bf74cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x5601bf74d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x5601bf6c2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75130)\u001b[0m     @     0x5601bf74cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x5561e079e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x5561e0828baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x5561e0829643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x5561e079e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75050)\u001b[0m     @     0x5561e0828baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x560b54a56fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x560b549b1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x560b54a3cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x560b54a3da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x560b549b1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x560b54a3cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x560b54a3d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x560b549b2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x560b54a3cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x560b54a3d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x560b549b2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x560b54a3cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x560b54a3d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x560b549b2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75157)\u001b[0m     @     0x560b54a3cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x7fae4cadf5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x7fae4cbe7148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x7f50aec8cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x563c77633fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x563c7758eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x563c77619baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x563c7761aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x563c7758ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x563c77619baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x563c7761a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x563c7758f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x563c77619baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x563c7761a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x563c7758f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x563c77619baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x563c7761a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x563c7758f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75045)\u001b[0m     @     0x563c77619baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x7f9a66e9dbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x55c2a5191fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x55c2a50ecb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x55c2a5177baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x55c2a5178a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x55c2a50ecbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x55c2a5177baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x55c2a5178643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x55c2a50ed689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x55c2a5177baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x55c2a5178643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x55c2a50ed689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x55c2a5177baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x55c2a5178643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x55c2a50ed689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75041)\u001b[0m     @     0x55c2a5177baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x7f3c9b5e1bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x55ccd4b53fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x55ccd4aaeb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x55ccd4b39baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x55ccd4b3aa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x55ccd4aaebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x55ccd4b39baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x55ccd4b3a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x55ccd4aaf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x55ccd4b39baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x55ccd4b3a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x55ccd4aaf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x55ccd4b39baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x55ccd4b3a643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x55ccd4aaf689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75126)\u001b[0m     @     0x55ccd4b39baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x7efb46c535cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x7efb46d5b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x7efb4d011bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x555b7aa49fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x555b7a9a4b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x555b7aa2fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x555b7aa30a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x555b7a9a4bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x7fae52e9dbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x55c79719bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x55c7970f6b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x55c797181baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x55c797182a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x55c7970f6bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x55c797181baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x55c797182643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x55c7970f7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x55c797181baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x55c797182643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x55c7970f7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x55c797181baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x55c797182643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x55c7970f7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75112)\u001b[0m     @     0x55c797181baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x555b7aa2fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x555b7aa30643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x555b7a9a5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x555b7aa2fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x555b7aa30643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x555b7a9a5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x555b7aa2fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x555b7aa30643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x555b7a9a5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=75125)\u001b[0m     @     0x555b7aa2fbaf _PyEval_EvalCodeWithName\n",
+      "2020-11-05 10:55:13,485\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffa97540c201000000.\n",
+      "2020-11-05 10:55:13,487\tERROR trial_runner.py:567 -- Trial PPO_jss_env_5d2b6_00000: Error processing event.\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py\", line 515, in _process_trial\n",
+      "    result = self.trial_executor.fetch_result(trial)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py\", line 488, in fetch_result\n",
+      "    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1428, in get\n",
+      "    raise value.as_instanceof_cause()\n",
+      "ray.exceptions.RayTaskError: \u001b[36mray::PPO.train()\u001b[39m (pid=75166, ip=172.17.0.4)\n",
+      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
+      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 516, in train\n",
+      "    raise e\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 505, in train\n",
+      "    result = Trainable.train(self)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py\", line 336, in train\n",
+      "    result = self.step()\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py\", line 134, in step\n",
+      "    res = next(self.train_exec_impl)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 756, in __next__\n",
+      "    return next(self.built_iterator)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  [Previous line repeated 1 more time]\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 876, in apply_flatten\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 828, in add_wait_hooks\n",
+      "    item = next(it)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  [Previous line repeated 1 more time]\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 466, in base_iterator\n",
+      "    actor_set.init_actors()\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1238, in init_actors\n",
+      "    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])\n",
+      "ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.478181 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=fde3d5eda9f525d7a97540c201000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=a97540c201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.478368 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=d16c21eef3935840a97540c201000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=a97540c201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "2020-11-05 10:55:13,504\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffe0497dac01000000.\n",
+      "2020-11-05 10:55:13,505\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff091d563401000000.\n",
+      "2020-11-05 10:55:13,505\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff9f3cc57a01000000.\n",
+      "2020-11-05 10:55:13,505\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff4e242e9f01000000.\n",
+      "2020-11-05 10:55:13,506\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff56c9ec1501000000.\n",
+      "2020-11-05 10:55:13,506\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffbdff035801000000.\n",
+      "2020-11-05 10:55:13,506\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff4100f4fd01000000.\n",
+      "2020-11-05 10:55:13,506\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff31c3fed901000000.\n",
+      "2020-11-05 10:55:13,506\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff0314ce3001000000.\n",
+      "2020-11-05 10:55:13,506\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff252160a301000000.\n",
+      "2020-11-05 10:55:13,506\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffb2413f7201000000.\n",
+      "2020-11-05 10:55:13,506\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff59d91ef301000000.\n",
+      "2020-11-05 10:55:13,506\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff821ddf4301000000.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 23.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/555.96 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 ERROR)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_5d2b6_00000 | ERROR    |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "Number of errored trials: 1\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "| Trial name              |   # failures | error file                                                                        |\n",
+      "|-------------------------+--------------+-----------------------------------------------------------------------------------|\n",
+      "| PPO_jss_env_5d2b6_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_5d2b6_00000_0_2020-11-05_10-55-06/error.txt |\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
       "\n",
+      "Traceback (most recent call last):\n",
+      "  File \"train.py\", line 74, in <module>\n",
+      "    train_func()\n",
+      "  File \"train.py\", line 56, in train_func\n",
+      "    analysis = tune.run(PPOTrainer, config=config, stop=stop, name=\"ppo-jss\")\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py\", line 427, in run\n",
+      "    raise TuneError(\"Trials did not complete\", incomplete_trials)\n",
+      "ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_5d2b6_00000])\n",
+      "2020-11-05 10:55:13,519\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff43fb47bd01000000.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 23.2/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/555.96 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 ERROR)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_5d2b6_00000 | ERROR    |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "Number of errored trials: 1\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "| Trial name              |   # failures | error file                                                                        |\n",
+      "|-------------------------+--------------+-----------------------------------------------------------------------------------|\n",
+      "| PPO_jss_env_5d2b6_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_5d2b6_00000_0_2020-11-05_10-55-06/error.txt |\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "2020-11-05 10:55:13,519\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffc2621d1401000000.\n",
+      "2020-11-05 10:55:13,519\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff90aded9101000000.\n",
+      "2020-11-05 10:55:13,519\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff8168b55d01000000.\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3461\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:43:57,342 - wandb.wandb_agent - INFO - Running runs: ['o0hyb863']\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 74934\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program failed with code 1.  Press ctrl-c to abort syncing.\n",
+      "--- Logging error --- 6.58MB of 6.58MB uploaded (0.00MB deduped)\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8f9a5fc701000000.'\n",
+      "Arguments: ()\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.495419 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=efaf5dbfabc208739f3cc57a01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=9f3cc57a01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.495563 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=b3b45bae970c41729f3cc57a01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=9f3cc57a01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.496163 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=d984ee9d41b92c534100f4fd01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=4100f4fd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.496263 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=6c41da4ee8b0b4d04100f4fd01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=4100f4fd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.496397 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=170fdfd5d34985a7e0497dac01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=e0497dac01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.496479 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=1f6f5417a7b065f9091d563401000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=091d563401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.496551 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=89f63fee54d6858ee0497dac01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=e0497dac01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.496650 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=e76b5820fbdeb0f2091d563401000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=091d563401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.497213 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=bf6cd9795b8b23124e242e9f01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=4e242e9f01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.497316 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=c5da4173a1c517cf4e242e9f01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=4e242e9f01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.497416 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=4db1cba171d56c3356c9ec1501000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=56c9ec1501000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.497480 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=5cf29c5b7b7ed08d56c9ec1501000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=56c9ec1501000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.497576 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=137dbd5547ea6deabdff035801000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=bdff035801000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.497655 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=3f75a43fb9f70f24bdff035801000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=bdff035801000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.497723 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=150a9d56b40e3700bdff035801000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=bdff035801000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.500097 75166 76279 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=d88ec84d5baca957a97540c201000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=a97540c201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.502653 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=7dd3b2683d323ffd31c3fed901000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=31c3fed901000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.502776 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=f4d9d8a5e202b0910314ce3001000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=0314ce3001000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.502842 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=8b0b449b9f08d0430314ce3001000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=0314ce3001000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.502962 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=0a51bbe8b791810831c3fed901000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=31c3fed901000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.503100 75166 76279 task_manager.cc:323] Task failed: IOError: 14: failed to connect to all addresses: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=37f711ca0d66f5bd4100f4fd01000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=4100f4fd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.503196 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=3e4916e36cb3ce60252160a301000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=252160a301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.503266 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=c2d663ba592886f5252160a301000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=252160a301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.503403 75166 76279 task_manager.cc:323] Task failed: IOError: 14: failed to connect to all addresses: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=c6f8a2750fad0b0de0497dac01000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=e0497dac01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.503499 75166 76279 task_manager.cc:323] Task failed: IOError: 14: failed to connect to all addresses: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=d7b1ed864d13e17f31c3fed901000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=31c3fed901000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.503572 75166 76279 task_manager.cc:323] Task failed: IOError: 14: failed to connect to all addresses: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=457f03c785986c89252160a301000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=252160a301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.503645 75166 76279 task_manager.cc:323] Task failed: IOError: 14: failed to connect to all addresses: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=4f22c19b5f703db99f3cc57a01000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=9f3cc57a01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.503731 75166 76279 task_manager.cc:323] Task failed: IOError: 14: failed to connect to all addresses: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=626c71df3976eafd4e242e9f01000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=4e242e9f01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.503854 75166 76279 task_manager.cc:323] Task failed: IOError: 14: failed to connect to all addresses: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=7249131d8582b825091d563401000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=091d563401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.503949 75166 76279 task_manager.cc:323] Task failed: IOError: 14: failed to connect to all addresses: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=ad47e6e6a1a1660b0314ce3001000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=0314ce3001000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.505323 75166 76279 task_manager.cc:323] Task failed: IOError: 14: failed to connect to all addresses: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=9d0a2db204e8f81056c9ec1501000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=56c9ec1501000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.506335 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=8b485cbbeaa005a559d91ef301000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=59d91ef301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.506453 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=ca546fa1af7e507159d91ef301000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=59d91ef301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.506536 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=fd2b07e19848a86a59d91ef301000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=59d91ef301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.506769 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=9e78156cc0f1c18db2413f7201000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=b2413f7201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.506858 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=99a573b913884b0db2413f7201000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=b2413f7201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.507292 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=8e79ac7e91b36714821ddf4301000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=821ddf4301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.507381 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=428a4b4025d91890821ddf4301000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=821ddf4301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.507458 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=38e2d2d27b716bfb821ddf4301000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=821ddf4301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.507727 75166 76279 task_manager.cc:323] Task failed: IOError: 14: failed to connect to all addresses: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=716ad7ba0ea412bfb2413f7201000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=b2413f7201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.508937 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=1e9c16c25b494a4a43fb47bd01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=43fb47bd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.509027 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=61afdfe40390d0a343fb47bd01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=43fb47bd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.509093 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=10a4a4113c6c36ea43fb47bd01000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=43fb47bd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.511657 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=9ecf84e34eb8e61dc2621d1401000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=c2621d1401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.511746 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=f3cba62d4c01820bc2621d1401000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=c2621d1401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.511806 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=8fbf1bd7de98d288c2621d1401000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=c2621d1401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.513948 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=37f0cff2c5fdc1c790aded9101000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=90aded9101000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=75166)\u001b[0m E1105 10:55:13.514041 75166 76279 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=ff02fc67a478da9090aded9101000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=90aded9101000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff9d526f0201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa4f7314201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff452e714401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff310e963d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff302122d001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff0f72e3901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff2d1a71ea01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8cd168e101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffee8852f401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7b2861ac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff75f329e601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff41e0fbff01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff50168bc201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7ef9157101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffef1af81501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff5cc87e2501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0d557f6601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff257d30801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff5843697701000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffc3083e0c01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffe9f6a7cf01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff61dc472601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff58dd50c101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff04668d8f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8edbbd3001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffffefbd9801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffccf343cc01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffb3cace0801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0fae11b201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7a508a7a01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff51728d3301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff392716d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff1e7ae67b01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff10f667b001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffdd5654aa01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff99d0343201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd989d1f001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8d06128001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff3166f9e301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff3a9488b101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff80993fa801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff244a7d1001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff20d842ad01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffeca600ef01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa7ad1db301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff702ed69e01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff358dd45601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff19fd5b4901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd784bf0601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0aeae6a301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffda2cd21f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7f7c936001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff32335d4e01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff14da135201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd8f83c3801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff120020c01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4f9bfece01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff018c9dac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff34cbbac201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff71ca01c001000000.'\n",
+      "Arguments: ()\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204354-o0hyb863/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204354-o0hyb863/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 180.92929\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 180.92929\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3790\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708235\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201105_105500-ocw6ikaw/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201105_105500-ocw6ikaw/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/o0hyb863\u001b[0m\n",
-      "2020-10-14 20:44:02,563 - wandb.wandb_agent - INFO - Cleaning up finished run: o0hyb863\n",
-      "2020-10-14 20:44:02,910 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:44:02,911 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta54\n",
-      "2020-10-14 20:44:02,913 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta54\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mcelestial-sweep-1\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/ocw6ikaw\u001b[0m\n",
+      "2020-11-05 10:55:24,978 - wandb.wandb_agent - INFO - Cleaning up finished run: ocw6ikaw\n",
+      "2020-11-05 10:55:25,281 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-05 10:55:25,281 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta41\n",
+      "2020-11-05 10:55:25,283 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/ta41\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.9 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/802owiob\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204405-802owiob\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mtreasured-sweep-2\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/pjuczesa\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/kj5omumc\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201105_105527-kj5omumc\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-05 10:55:30,300 - wandb.wandb_agent - INFO - Running runs: ['kj5omumc']\n",
+      "2020-11-05 10:55:30,802\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/1 GPUs, 0.0/555.96 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_6cb09_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3552\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:44:07,929 - wandb.wandb_agent - INFO - Running runs: ['802owiob']\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204405-802owiob/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204405-802owiob/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 201.68687\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 201.68687\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3601\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708246\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/802owiob\u001b[0m\n",
-      "2020-10-14 20:44:13,147 - wandb.wandb_agent - INFO - Cleaning up finished run: 802owiob\n",
-      "2020-10-14 20:44:13,451 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:44:13,451 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta55\n",
-      "2020-10-14 20:44:13,453 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta55\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/ix8moovg\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204415-ix8moovg\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m 2020-11-05 10:55:33,616\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m *** SIGSEGV (@0x0) received by PID 76705 (TID 0x7fb677704700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x7fb6772dd390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x7f87794f0fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x7f87767e464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x7f87767e7977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m *** SIGSEGV (@0x0) received by PID 76702 (TID 0x7f45afd19700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x7f45af8f2390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x7f16b1b15fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x7f16aee0964b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x7f16aee0c977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m *** SIGSEGV (@0x0) received by PID 76682 (TID 0x7f80c6ad9700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x7f80c66b2390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x7f51c8770fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x7f51c5a6464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x7f51c5a67977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m *** SIGSEGV (@0x0) received by PID 76678 (TID 0x7ff8f6f89700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x7ff8f6b62390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x7fc9f8c43fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x7fc9f5f3764b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x7fc9f5f3a977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x7fc9f5f3ab53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m *** SIGSEGV (@0x0) received by PID 76726 (TID 0x7f34cfb8b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x7f34cf764390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x7f05d1896fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x7f05ceb8a64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x7f05ceb8d977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x7f05ceb8db53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m *** SIGSEGV (@0x0) received by PID 76721 (TID 0x7f1a69aa8700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x7f1a69681390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x7eeb6b87efb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x7eeb68b7264b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x7eeb68b75977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x7eeb68b75b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m *** SIGSEGV (@0x0) received by PID 76753 (TID 0x7fbad0cd4700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x7fbad08ad390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x7f8bd29ebfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x7f8bcfcdf64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x7f8bcfce2977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x7f8bcfce2b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m *** SIGSEGV (@0x0) received by PID 76746 (TID 0x7fcbc8b26700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x7fcbc86ff390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x7f9cca86bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x7f9cc7b5f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x7f9cc7b62977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x7f9cc7b62b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m *** SIGSEGV (@0x0) received by PID 76694 (TID 0x7febc3534700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x7febc310d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x7fbcc5309fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x7fbcc25fd64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x7fbcc2600977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m *** SIGSEGV (@0x0) received by PID 76719 (TID 0x7f11aa02b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x7f11a9c04390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x7ee2abe16fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x7ee2a910a64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x7ee2a910d977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x7ee2a910db53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m *** SIGSEGV (@0x0) received by PID 76724 (TID 0x7f8e9e3a0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x7f8e9df79390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x7f5f9ffeafb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x7f5f9d2de64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x7f5f9d2e1977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m *** SIGSEGV (@0x0) received by PID 76623 (TID 0x7f9c99a35700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m *** SIGSEGV (@0x0) received by PID 76641 (TID 0x7fa8570d0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m *** SIGSEGV (@0x0) received by PID 76689 (TID 0x7ff1dd338700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m *** SIGSEGV (@0x0) received by PID 76737 (TID 0x7f452ae9a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x7f452aa73390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x7f162cc76fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x7f1629f6a64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x7f1629f6d977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x7f1629f6db53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x7f1629f6de11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x7f162cc86c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x7f162cca9cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m *** SIGSEGV (@0x0) received by PID 76696 (TID 0x7f5f1cf5d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m *** SIGSEGV (@0x0) received by PID 76707 (TID 0x7f1b5dce1700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x7f1b5d8ba390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x7eec5fa70fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x7eec5cd6464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x7eec5cd67977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x7eec5cd67b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x7eec5cd67e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x7eec5fa80c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x7eec5faa3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m *** SIGSEGV (@0x0) received by PID 76699 (TID 0x7f1be2a8e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x7f1be2667390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x7eece45dcfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x7eece18d064b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x7eece18d3977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x7eece18d3b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x7eece18d3e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x7eece45ecc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x7eece460fcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m *** SIGSEGV (@0x0) received by PID 76754 (TID 0x7f8d0f766700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x7f8d0f33f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x7f5e114a0fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x7f5e0e79464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x7f5e0e797977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x7f5e0e797b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x7f5e0e797e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x7f5e114b0c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x7f5e114d3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m *** SIGSEGV (@0x0) received by PID 76710 (TID 0x7f5340c66700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x7f534083f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x7f24427dafb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x7f243face64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x7f243fad1977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x7f243fad1b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x7f243fad1e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x7f24427eac12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x7f244280dcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x7f243f84b009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m *** SIGSEGV (@0x0) received by PID 76749 (TID 0x7ffbe5eb0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x7ffbe5a89390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x7fcce7c81fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x7fcce4f7564b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x7fcce4f78977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x7fcce4f78b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x7fcce4f78e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x7fcce7c91c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x7fcce7cb4cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m *** SIGSEGV (@0x0) received by PID 76740 (TID 0x7ff8931bf700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x7ff892d98390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x7fc994f59fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x7fc99224d64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x7fc992250977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x7fc992250b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x7fc992250e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x7fc994f69c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x7fc994f8ccfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x7fc991fca009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x7fc991fc8c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m *** SIGSEGV (@0x0) received by PID 76748 (TID 0x7f43dd671700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x7f43dd24a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m *** SIGSEGV (@0x0) received by PID 76645 (TID 0x7f357276c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m *** SIGSEGV (@0x0) received by PID 76679 (TID 0x7fcb1d7cf700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m *** SIGSEGV (@0x0) received by PID 76684 (TID 0x7efe75f2d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m *** SIGSEGV (@0x0) received by PID 76743 (TID 0x7fa76b777700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m *** SIGSEGV (@0x0) received by PID 76629 (TID 0x7f6f5088e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m *** SIGSEGV (@0x0) received by PID 76624 (TID 0x7fbea62c4700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x7fbea5e9d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x7f8fa7feafb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m *** SIGSEGV (@0x0) received by PID 76628 (TID 0x7fdc59e3d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x7fdc59a16390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x7fad5b952fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x7fad58c4664b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m *** SIGSEGV (@0x0) received by PID 76633 (TID 0x7f18a2a44700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x7f18a261d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m *** SIGSEGV (@0x0) received by PID 76680 (TID 0x7fcbee5c0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x7fcbee199390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x7f87767e7b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x7f87767e7e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x7f8779500c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x7f8779523cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x7f8776561009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x7f877655fc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x7f8776560ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m *** SIGSEGV (@0x0) received by PID 76744 (TID 0x7f6c8c5f6700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x7f6c8c1cf390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x7f3d8e293fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x7f3d8b58764b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m *** SIGSEGV (@0x0) received by PID 76637 (TID 0x7f819a1ef700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x7f8199dc8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x7f529bfc9fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m *** SIGSEGV (@0x0) received by PID 76627 (TID 0x7fc8f2747700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x7fc8f2320390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m *** SIGSEGV (@0x0) received by PID 76647 (TID 0x7fc642d04700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x7fc6428dd390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x7f9744ae0fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x7f9741dd464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m *** SIGSEGV (@0x0) received by PID 76646 (TID 0x7f10de1f6700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x7f10dddcf390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x7ee1dffc9fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x7ee1dd2bd64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m *** SIGSEGV (@0x0) received by PID 76651 (TID 0x7f50a47f6700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x7f50a43cf390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m *** SIGSEGV (@0x0) received by PID 76625 (TID 0x7f13e9de9700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x7f13e99c2390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x7ee4eb952fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x7ee4e8c4664b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m *** SIGSEGV (@0x0) received by PID 76759 (TID 0x7fc4b1efb700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x7fc4b1ad4390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x7f95b3c81fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x7f95b0f7564b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m *** SIGSEGV (@0x0) received by PID 76716 (TID 0x7f7a307bf700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x7f7a30398390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x7f4b325adfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x7f4b2f8a164b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x7f16aee0cb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x7f16aee0ce11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x7f16b1b25c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x7f16b1b48cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x7f16aeb86009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x7f16aeb84c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x7f51c5a67b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x7f51c5a67e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x7f51c8780c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x7f51c87a3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x7f51c57e1009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x7f51c57dfc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x7f51c57e0ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x7fc9f5f3ae11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x7fc9f8c53c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x7fc9f8c76cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x7fc9f5cb4009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x7fc9f5cb2c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x7fc9f5cb3ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x7f05ceb8de11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x7f05d18a6c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x7f05d18c9cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x7f05ce907009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x7f05ce905c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x7f05ce906ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m *** SIGSEGV (@0x0) received by PID 76687 (TID 0x7fc523339700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x7fc522f12390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x7f962510afb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x7f96223fe64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x7eeb68b75e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x7eeb6b88ec12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x7eeb6b8b1cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x7eeb688ef009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x7eeb688edc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x7eeb688eeed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x7f8bcfce2e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x7f8bd29fbc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x7f8bd2a1ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x7f8bcfa5c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x7f8bcfa5ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x7f8bcfa5bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m *** SIGSEGV (@0x0) received by PID 76650 (TID 0x7f1035d2d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x7f1035906390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x7ee137a70fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x7ee134d6464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x7f9cc7b62e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x7f9cca87bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x7f9cca89ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x7f9cc78dc009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x7f9cc78dac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x7f9cc78dbed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x7fbcc2600b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x7fbcc2600e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x7fbcc5319c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x7fbcc533ccfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x7fbcc237a009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x7fbcc2378c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x7fbcc2379ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m *** SIGSEGV (@0x0) received by PID 76712 (TID 0x7f7fbcdff700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x7f7fbc9d8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x7f50bea9cfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x7f50bbd9064b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m *** SIGSEGV (@0x0) received by PID 76631 (TID 0x7fbbd68dd700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x7fbbd64b6390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x7f8cd85c2fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x7f8cd58b664b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m *** SIGSEGV (@0x0) received by PID 76706 (TID 0x7fbe8b8a6700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x7fbe8b47f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x7f8f8d4a0fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x7f8f8a79464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m *** SIGSEGV (@0x0) received by PID 76635 (TID 0x7f03669f7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x7f03665d0390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x7ed46860cfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x7ed46590064b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x7ee2a910de11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x7ee2abe26c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x7ee2abe49cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x7ee2a8e87009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x7ee2a8e85c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x7ee2a8e86ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x7f5f9d2e1b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x7f5f9d2e1e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x7f5f9fffac12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x7f5fa001dcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x7f5f9d05b009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x7f5f9d059c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x7f9c9960e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x7f6d9b81bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x7f6d98b0f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x7fa856ca9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x7f7958c98fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x7f7955f8c64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x7f7955f8f977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x7ff1dcf11390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x7fc2df130fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x7fc2dc42464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m *** SIGSEGV (@0x0) received by PID 76695 (TID 0x7f1904f24700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x7f1904afd390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m *** SIGSEGV (@0x0) received by PID 76745 (TID 0x7fbaf34d9700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x7fbaf30b2390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x7f8bf52c9fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x7f8bf25bd64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m *** SIGSEGV (@0x0) received by PID 76626 (TID 0x7fd833c5c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x7fd833835390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x7fa9359c8fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m *** SIGSEGV (@0x0) received by PID 76739 (TID 0x7f3e76fa2700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x7f3e76b7b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x7f0f78c98fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x7f0f75f8c64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m *** SIGSEGV (@0x0) received by PID 76634 (TID 0x7f7f180aa700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x7f7f17c83390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x7f5019d6cfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m *** SIGSEGV (@0x0) received by PID 76738 (TID 0x7f136f541700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x7f136f11a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x7ee47132efb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x7ee46e62264b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x7f1629ce7009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x7f1629ce5c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x7f1629ce6ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x7f5f1cb36390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x7f301ec5ffb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x7f301bf5364b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x7eec5cae1009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x7eec5cadfc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x7eec5cae0ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m *** SIGSEGV (@0x0) received by PID 76735 (TID 0x7fe422ca0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m *** SIGSEGV (@0x0) received by PID 76704 (TID 0x7f5b5aaf6700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m *** SIGSEGV (@0x0) received by PID 76644 (TID 0x7f27bbf9c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x7f27bbb75390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x7ef8bdd6cfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x7ef8bb06064b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x7eece164d009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x7eece164bc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x7eece164ced4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x7f5e0e511009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x7f5e0e50fc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x7f5e0e510ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x7f243f849c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x7f243f84aed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m *** SIGSEGV (@0x0) received by PID 76638 (TID 0x7f2ab6512700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x7f2ab60eb390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x7efbb8304fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x7efbb55f864b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x7fcce4cf2009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x7fcce4cf0c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x7fcce4cf1ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x7fc991fc9ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x7fc99270c5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x7f14df32cfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x7f14dc62064b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x7f14dc623977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x7f3572345390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x7f06743b1fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x7f06716a564b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x7f06716a8977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m *** SIGSEGV (@0x0) received by PID 76640 (TID 0x7f358cdab700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x7f358c984390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x7f068e9ebfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x7f068bcdf64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x7f068bce2977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m *** SIGSEGV (@0x0) received by PID 76677 (TID 0x7fa245de0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x7fa2459b9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x7f7347a70fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x7f7344d6464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x7f7344d67977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x7fcb1d3a8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x7f9c1f5b1fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x7f9c1c8a564b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x7f9c1c8a8977 at::TensorIterator::serial_for_each()\n",
+      "2020-11-05 10:55:39,524\tWARNING worker.py:945 -- The driver may not be able to keep up with the stdout/stderr of the workers. To avoid forwarding logs to the driver, use 'ray.init(log_to_driver=False)'.\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m *** SIGSEGV (@0x0) received by PID 76660 (TID 0x7f925455d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x7f9254136390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x7f635612dfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x7f635342164b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x7f6353424977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m *** SIGSEGV (@0x0) received by PID 76729 (TID 0x7f924d452700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m *** SIGSEGV (@0x0) received by PID 76661 (TID 0x7f9e1717d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x7f9e16d56390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x7f6f18f73fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x7f6f1626764b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x7f6f1626a977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m *** SIGSEGV (@0x0) received by PID 76700 (TID 0x7f2d58487700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x7f2d58060390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x7efe5a266fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x7efe5755a64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x7efe5755d977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m *** SIGSEGV (@0x0) received by PID 76632 (TID 0x7f9193032700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x7f9192c0b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x7f6294e24fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x7f629211864b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x7f629211b977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m *** SIGSEGV (@0x0) received by PID 76709 (TID 0x7f78fdcff700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x7f78fd8d8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x7f49ffa70fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x7f49fcd6464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x7f49fcd67977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m *** SIGSEGV (@0x0) received by PID 76643 (TID 0x7f8785450700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x7f8785029390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x7f588711bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x7f588440f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m *** SIGSEGV (@0x0) received by PID 76708 (TID 0x7fc462406700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m *** SIGSEGV (@0x0) received by PID 76741 (TID 0x7f8481684700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x7f848125d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x7f558332cfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x7f558062064b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x7f5580623977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m *** SIGSEGV (@0x0) received by PID 76675 (TID 0x7fe8dab3e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x7fe8da717390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x7fb9dc7f3fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x7fb9d9ae764b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x7fb9d9aea977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x7efe75b06390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x7ecf77c81fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x7ecf74f7564b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x7ecf74f78977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m *** SIGSEGV (@0x0) received by PID 76630 (TID 0x7f86be536700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x7f86be10f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x7f57c0344fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x7f57bd63864b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x7f57bd63b977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x7fa76b350390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x7f786d4a0fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x7f786a79464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x7f786a797977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m *** SIGSEGV (@0x0) received by PID 76681 (TID 0x7f8c12c0c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x7f8c127e5390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x7f5d14770fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x7f5d11a6464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x7f5d11a67977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x7f6f50467390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x7f405265afb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x7f404f94e64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x7f404f951977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x7f8fa52de64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x7f8fa52e1977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x7fad58c49977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x7fad58c49b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x7ee9a481bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x7ee9a1b0f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x7ee9a1b12977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m *** SIGSEGV (@0x0) received by PID 76736 (TID 0x7fdba1501700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m *** SIGSEGV (@0x0) received by PID 76654 (TID 0x7fe163322700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x7fe162efb390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m *** Aborted at 1604573739 (unix time) try \"date -d @1604573739\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m *** SIGSEGV (@0x0) received by PID 76728 (TID 0x7fe76efdf700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x7f9cf0204fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x7f9ced4f864b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x7f9ced4fb977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x7f8776ca35cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x7f8776dab148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x7f3d8b58a977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x7f3d8b58ab53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x7f52992bd64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x7f52992c0977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x7f99f4530fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x7f99f182464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x7f99f1827977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x7f99f1827b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x7f9741dd7977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x7f9741dd7b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x7ee1dd2c0977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x7ee1dd2c0b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x7f21a6555fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x7f21a384964b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x7f21a384c977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x7ee4e8c49977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x7ee4e8c49b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x7f95b0f78977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x7f95b0f78b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x7f95b0f78e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x7f95b3c91c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x7f95b3cb4cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x7f4b2f8a4977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x7f4b2f8a4b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x7f4b2f8a4e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x7f4b325bdc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x7f16aeb85ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x7f16af2c85cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x7f16af3d0148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x7f51c5f235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x7f51c602b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x7f51c7c22989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x7fc9f63f65cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x7fc9f64fe148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x7fc9f80f5989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x7f05cf0495cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x7f05cf151148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x7f05d0d48989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x7f9622401977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x7f9622401b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x7f9622401e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x7eeb690315cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x7eeb69139148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x7eeb6ad30989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x7eeb690315cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x7f8bd019e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x7f8bd02a6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x7f8bd1e9d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x7ee134d67977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x7ee134d67b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x7ee134d67e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x7f9cc801e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x7f9cc8126148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x7f9cc9d1d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x7fbcc2abc5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x7fbcc2bc4148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x7fbcc47bb989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x7f50bbd93977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x7f50bbd93b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x7f50bbd93e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x7f50beaacc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x7f8cd58b9977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x7f8cd58b9b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x7f8cd58b9e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x7f8cd85d2c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x7f8cd85f5cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x7f8f8a797977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x7f8f8a797b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x7f8f8a797e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x7ed465903977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x7ed465903b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x7ed465903e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x7ed46861cc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x7ee2a95c95cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x7ee2a96d1148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x7ee2ab2c8989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x7ee2a95c95cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x7f5f9d05aed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x7f5f9d79d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x7f5f9d8a5148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x7f5f9f49c989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x7f6d98b12977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x7f6d98b12b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x7f6d98b12e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x7f6d9b82bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x7f7955f8fb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x7f7955f8fe11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x7f7958ca8c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x7f7958ccbcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x7fc2dc427977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x7fc2dc427b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x7fc2dc427e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x7fc2df140c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x7eea06a9cfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x7eea03d9064b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x7eea03d93977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x7eea03d93b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m *** SIGSEGV (@0x0) received by PID 76732 (TID 0x7f82bebbd700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x7f82be796390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x7f53c081bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x7f53bdb0f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x7f8bf25c0977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x7f8bf25c0b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x7fa932cbc64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x7fa932cbf977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x7fa932cbfb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x7f0f75f8f977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x7f0f75f8fb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x7f501706064b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x7f5017063977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x7f5017063b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x7ee46e625977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x7ee46e625b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x7f162a4295cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x7f162a531148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x7f162c128989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x7f301bf56977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x7f301bf56b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x7f301bf56e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x7f301ec6fc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x7eec5d2235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x7eec5d32b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x7eec5ef22989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m *** SIGSEGV (@0x0) received by PID 76664 (TID 0x7f4d96ba6700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x7f4d9677f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m *** SIGSEGV (@0x0) received by PID 76639 (TID 0x7f2313a26700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x7f23135ff390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x7ef415804fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x7ef412af864b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x7ef412afb977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x7fe422879390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x7fb524a32fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x7fb521d2664b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x7fb521d29977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x7f5b5a6cf390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x7f2c5c81bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x7f2c59b0f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x7f2c59b12977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m *** SIGSEGV (@0x0) received by PID 76656 (TID 0x7fd8f83a7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x7fd8f7f80390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x7fa9fa082fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x7fa9f737664b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m *** SIGSEGV (@0x0) received by PID 76692 (TID 0x7fb019b80700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x7fb019759390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x7f811b96bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x7f8118c5f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x7f8118c62977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x7ef8bb063977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x7ef8bb063b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x7eece1d8f5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x7eece1e97148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x7eece3a8e989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x7f5e0ec535cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x7f5e0ed5b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x7f5e10952989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x7f243ff8d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x7f2440095148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x7f2441c8c989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x7f243ff8d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x7efbb55fb977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x7efbb55fbb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x7efbb55fbe11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x7fcce54345cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x7fcce553c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x7fcce7133989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x7fcce54345cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x7fc992814148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x7fc99440b989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x7fc99270c5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x7f14dc623b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x7f14dc623e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x7f14df33cc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x7f14df35fcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x7f14dc39d009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x7f06716a8b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x7f06716a8e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x7f06743c1c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x7f06743e4cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x7f068bce2b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x7f7344d67b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x7f7344d67e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x7f9c1c8a8b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x7f9c1c8a8e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x7f9c1f5c1c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x7f6353424b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x7f6353424e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x7f924d02b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x7f634f11bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x7f634c40f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x7f634c412977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x7f6f1626ab53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x7f6f1626ae11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x7efe5755db53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x7efe5755de11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x7f629211bb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x7f629211be11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x7f49fcd67b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x7f49fcd67e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x7f5884412977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x7f5884412b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x7fc461fdf390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x7f9563feafb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x7f95612de64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x7f5580623b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x7f5580623e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x7fb9d9aeab53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x7fb9d9aeae11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x7ecf74f78b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x7ecf74f78e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x7ecf77c91c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x7ecf77cb4cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x7f57bd63bb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x7f57bd63be11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x7f57c0354c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x7f57c0377cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x7f786a797b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x7f786a797e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x7f786d4b0c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x7f786d4d3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x7f5d11a67b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x7f5d11a67e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x7f5d14780c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x7f5d147a3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x7f404f951b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x7f404f951e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x7f405266ac12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x7f405268dcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x7f8fa52e1b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x7f8fa52e1e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x7f8fa7ffac12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x7f8fa801dcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x7f8fa505b009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x7fad58c49e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x7fad5b962c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x7fad5b985cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x7fad589c3009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x7fad589c1c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x7ee9a1b12b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x7ee9a1b12e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x7ee9a482bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x7ee9a484ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x7fdba10da390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x7faca32ecfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x7faca05e064b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x7fb26510afb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x7fb2623fe64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x7fb262401977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x7fe76ebb8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x7fb870d48fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x7fb86e03c64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x7fb86e03f977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x7fb86e03fb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x7f9ced4fbb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x7f9ced4fbe11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x7f9cf0214c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x7f9cf0237cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x7f87789a2989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x7f8776ca35cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x7f8776dab148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x7f877d061bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x55e13d9bafd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x55e13d915b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x55e13d9a0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x55e13d9a1a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x55e13d915bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x55e13d9a0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x55e13d9a1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x55e13d916689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x7f3d8b58ae11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x7f3d8e2a3c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x7f3d8e2c6cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x7f3d8b304009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x7f3d8b302c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x7f52992c0b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x7f52992c0e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x7f529bfd9c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x7f529bffccfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x7f529903a009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x7f99f1827e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x7f99f4540c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x7f99f4563cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x7f99f15a1009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x7f99f159fc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x7f9741dd7e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x7f9744af0c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x7f9744b13cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x7f9741b51009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x7f9741b4fc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x7ee1dd2c0e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x7ee1dffd9c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x7ee1dfffccfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x7ee1dd03a009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x7ee1dd038c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x7f21a384cb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x7f21a384ce11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x7f21a6565c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x7f21a6588cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x7f21a35c6009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x7f21a35c4c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x7ee4e8c49e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x7ee4eb962c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x7ee4eb985cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x7ee4e89c3009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x7ee4e89c1c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x7f95b0cf2009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x7f95b0cf0c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x7f95b0cf1ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x7f4b325e0cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x7f4b2f61e009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x7f4b2f61cc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x7f16b0fc7989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x7f16af2c85cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x7f16af3d0148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x7f51c5f235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x7f51c602b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x7f51cc2e1bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x5628f293efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x5628f2899b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x5628f2924baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x5628f2925a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x5628f2899bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x5628f2924baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x5628f2925643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x5628f289a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x5628f2924baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x5628f2925643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x5628f289a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x5628f2924baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x5628f2925643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x5628f289a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76682)\u001b[0m     @     0x5628f2924baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x7fc9f63f65cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x7fc9f64fe148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x7fc9fc7b4bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x55b9c0ff2fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x55b9c0f4db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x55b9c0fd8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x55b9c0fd9a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x55b9c0f4dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x55b9c0fd8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x55b9c0fd9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x55b9c0f4e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x55b9c0fd8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x55b9c0fd9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x55b9c0f4e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x55b9c0fd8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x55b9c0fd9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x55b9c0f4e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76678)\u001b[0m     @     0x55b9c0fd8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x7f05cf0495cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x7f05cf151148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x7f05d5407bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x55746c05dfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x55746bfb8b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x55746c043baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x55746c044a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x55746bfb8bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x55746c043baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x55746c044643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x55746bfb9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x55746c043baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x55746c044643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x55746bfb9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x55746c043baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x55746c044643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x55746bfb9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76726)\u001b[0m     @     0x55746c043baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x7f962511ac12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x7f962513dcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x7f962217b009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x7f9622179c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x7eeb69139148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x7eeb6f3efbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x561949e88fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x561949de3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x561949e6ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x561949e6fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x561949de3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x561949e6ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x561949e6f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x561949de4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x561949e6ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x561949e6f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x561949de4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x561949e6ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x561949e6f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x561949de4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76721)\u001b[0m     @     0x561949e6ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x7f8bd019e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x7f8bd02a6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x7f8bd655cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x561d8713dfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x561d87098b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x561d87123baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x561d87124a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x561d87098bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x561d87123baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x561d87124643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x561d87099689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x561d87123baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x561d87124643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x561d87099689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x561d87123baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x561d87124643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x561d87099689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76753)\u001b[0m     @     0x561d87123baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x7ee137a80c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x7ee137aa3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x7ee134ae1009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x7ee134adfc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x7f9cc801e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x7f9cc8126148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x7f9cce3dcbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x55c7d60b0fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x55c7d600bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x55c7d6096baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x55c7d6097a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x55c7d600bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x55c7d6096baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x55c7d6097643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x55c7d600c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x55c7d6096baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x55c7d6097643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x55c7d600c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x55c7d6096baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x55c7d6097643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x55c7d600c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76746)\u001b[0m     @     0x55c7d6096baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x7fbcc2abc5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x7fbcc2bc4148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x7fbcc8e7abd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x55f25ba8bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x55f25b9e6b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x55f25ba71baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x55f25ba72a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x55f25b9e6bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x55f25ba71baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x55f25ba72643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x55f25b9e7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x55f25ba71baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x55f25ba72643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x55f25b9e7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x55f25ba71baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x55f25ba72643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x55f25b9e7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76694)\u001b[0m     @     0x55f25ba71baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x7f50beacfcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x7f50bbb0d009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x7f50bbb0bc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x7f8cd5633009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x7f8cd5631c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x7f8cd5632ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x7f8f8d4b0c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x7f8f8d4d3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x7f8f8a511009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x7f8f8a50fc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x7ed46863fcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x7ed46567d009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x7ed46567bc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x7ee2a96d1148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x7ee2af987bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x564d7cdfefd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x564d7cd59b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x564d7cde4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x564d7cde5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x564d7cd59bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x564d7cde4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x564d7cde5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x564d7cd5a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x564d7cde4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x564d7cde5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x564d7cd5a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x564d7cde4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x564d7cde5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x564d7cd5a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76719)\u001b[0m     @     0x564d7cde4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x7f5f9d79d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x7f5f9d8a5148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x7f5fa3b5bbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x558160337fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x558160292b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x55816031dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x55816031ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x558160292bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x55816031dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x55816031e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x558160293689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x7f6d9b84ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x7f6d9888c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x7f6d9888ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x7f6d9888bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x7f7955d09009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x7f7955d07c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x7f7955d08ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x7fc2df163cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x7fc2dc1a1009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x7fc2dc19fc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x7fc2dc1a0ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x7eea03d93e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x7eea06aacc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x7eea06acfcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x7eea03b0d009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x7f53bdb12977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x7f53bdb12b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x7f8bf25c0e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x7f8bf52d9c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x7f8bf52fccfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x7f8bf233a009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x7f8bf2338c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x7fa932cbfe11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x7fa9359d8c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x7fa9359fbcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x7fa932a39009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x7fa932a37c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x7f0f75f8fe11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x7f0f78ca8c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x7f0f78ccbcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x7f0f75d09009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x7f0f75d07c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x7f5017063e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x7f5019d7cc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x7f5019d9fcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x7f5016ddd009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x7f5016ddbc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x7ee46e625e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x7ee47133ec12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x7ee471361cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x7ee46e39f009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x7ee46e39dc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x7f162a4295cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x7f162a531148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x7f16307e7bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x5637a7ec2fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x5637a7e1db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x5637a7ea8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x5637a7ea9a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x5637a7e1dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x5637a7ea8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x5637a7ea9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x5637a7e1e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x5637a7ea8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x5637a7ea9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x5637a7e1e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x5637a7ea8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x5637a7ea9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x5637a7e1e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76737)\u001b[0m     @     0x5637a7ea8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x7f301ec92cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x7f301bcd0009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x7f301bccec3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x7f301bccfed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x7eec5d2235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x7eec5d32b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x7eec635e1bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x561eb3f74fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x561eb3ecfb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x561eb3f5abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x561eb3f5ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x561eb3ecfbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x561eb3f5abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x561eb3f5b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x561eb3ed0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x561eb3f5abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x561eb3f5b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x561eb3ed0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x561eb3f5abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x561eb3f5b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x561eb3ed0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76707)\u001b[0m     @     0x561eb3f5abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x7f1e98962fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x7f1e95c5664b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x7f1e95c59977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x7ef412afbb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x7ef412afbe11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x7fb521d29b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x7fb521d29e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x7fb524a42c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x7fb524a65cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x7f2c59b12b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x7f2c59b12e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x7f2c5c82bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x7fa9f7379977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x7f8118c62b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x7f8118c62e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x7f811b97bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x7ef8bb063e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x7ef8bdd7cc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x7ef8bdd9fcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x7ef8baddd009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x7ef8baddbc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x7eece1d8f5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x7eece1e97148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x7eece814dbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x560cd6c15fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x560cd6b70b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x560cd6bfbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x560cd6bfca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x560cd6b70bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x560cd6bfbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x560cd6bfc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x560cd6b71689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x560cd6bfbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x560cd6bfc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x560cd6b71689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x560cd6bfbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x560cd6bfc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x560cd6b71689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76699)\u001b[0m     @     0x560cd6bfbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x7f5e0ec535cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x7f5e0ed5b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x7f5e15011bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x557433c94fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x557433befb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x557433c7abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x557433c7ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x557433befbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x557433c7abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x557433c7b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x557433bf0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x557433c7abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x557433c7b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x557433bf0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x557433c7abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x557433c7b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x557433bf0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76754)\u001b[0m     @     0x557433c7abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x7f2440095148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x7f244634bbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x5579cd60efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x5579cd569b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x5579cd5f4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x5579cd5f5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x5579cd569bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x5579cd5f4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x5579cd5f5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x5579cd56a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x5579cd5f4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x5579cd5f5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x5579cd56a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x5579cd5f4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x5579cd5f5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x5579cd56a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76710)\u001b[0m     @     0x5579cd5f4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x7efbb8314c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x7efbb8337cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x7efbb5375009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x7efbb5373c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x7efbb5374ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x7fcce553c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x7fcceb7f2bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x558d4cdc2fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x558d4cd1db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x558d4cda8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x558d4cda9a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x558d4cd1dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x558d4cda8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x558d4cda9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x558d4cd1e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x558d4cda8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x558d4cda9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x558d4cd1e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x558d4cda8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x558d4cda9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x558d4cd1e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76749)\u001b[0m     @     0x558d4cda8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x7fc992814148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x7fc998acabd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x55da81e78fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x55da81dd3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x55da81e5ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x55da81e5fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x55da81dd3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x55da81e5ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x55da81e5f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x55da81dd4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x55da81e5ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x55da81e5f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x55da81dd4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x55da81e5ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x55da81e5f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x55da81dd4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76740)\u001b[0m     @     0x55da81e5ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x7f14dc39bc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x7f14dc39ced4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x7f14dcadf5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x7f14dcbe7148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x7f14de7de989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x7f0671422009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x7f0671420c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x7f0671421ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x7f0671b645cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x7f068bce2e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x7f068e9fbc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x7f068ea1ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x7f068ba5c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x7f068ba5ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x7f068ba5bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x7f068c19e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x7f7347a80c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x7f7347aa3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x7f7344ae1009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x7f7344adfc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x7f7344ae0ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x7f73452235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x7f9c1f5e4cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x7f9c1c622009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x7f9c1c620c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x7f9c1c621ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x7f9c1cd645cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x7f635613dc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x7f6356160cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x7f635319e009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x7f635319cc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x7f635319ded4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x7f63538e05cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x7f634c412b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x7f634c412e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x7f634f12bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x7f634f14ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x7f6f18f83c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x7f6f18fa6cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x7f6f15fe4009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x7f6f15fe2c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x7f6f15fe3ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x7f6f167265cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x7efe5a276c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x7efe5a299cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x7efe572d7009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x7efe572d5c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x7efe572d6ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x7efe57a195cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x7f6294e34c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x7f6294e57cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x7f6291e95009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x7f6291e93c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x7f6291e94ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x7f49ffa80c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x7f49ffaa3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x7f49fcae1009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x7f49fcadfc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x7f49fcae0ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x7f5884412e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x7f588712bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x7f588714ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x7f588418c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x7f588418ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x7f588418bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x7f95612e1977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x7f95612e1b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x7f95612e1e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x7f9563ffac12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x7f558333cc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x7f558335fcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x7f558039d009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x7f558039bc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x7f558039ced4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x7fb9dc803c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x7fb9dc826cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x7fb9d9864009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x7fb9d9862c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x7fb9d9863ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x7ecf74cf2009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x7ecf74cf0c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x7ecf74cf1ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x7ecf754345cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x7f57bd3b5009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x7f57bd3b3c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x7f57bd3b4ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x7f786a511009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x7f786a50fc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x7f786a510ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x7f786ac535cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x7f5d117e1009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x7f5d117dfc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x7f5d117e0ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x7f404f6cb009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x7f404f6c9c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x7f404f6caed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x7f8fa5059c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x7f8fa505aed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x7f8fa579d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x7fad589c2ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x7fad591055cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x7fad5920d148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x7ee9a188c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x7ee9a188ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x7ee9a188bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x7ee9a1fce5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x7faca05e3977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x7faca05e3b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x7fb262401b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x7fb86e03fe11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x7fb870d58c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x7fb870d7bcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x7fb86ddb9009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x7fb86ddb7c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x7fb86ddb8ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x7f9ced275009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x7f9ced273c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x7f9ced274ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x7f9ced9b75cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x7f9cedabf148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x7f9cef6b6989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x55e13d9a0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x55e13d9a1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x55e13d916689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x55e13d9a0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x55e13d9a1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x55e13d916689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76705)\u001b[0m     @     0x55e13d9a0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x7f3d8b303ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x7f3d8ba465cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x7f3d8bb4e148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x7f3d8d745989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x7f5299038c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x7f5299039ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x7f529977c5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x7f5299884148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x7f99f15a0ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x7f99f1ce35cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x7f99f1deb148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x7f99f39e2989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x7f9741b50ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x7f97422935cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x7f974239b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x7f9743f92989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x7ee1dd039ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x7ee1dd77c5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x7ee1dd884148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x7ee1df47b989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x7f21a35c5ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x7f21a3d085cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x7f21a3e10148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x7ee4e89c2ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x7ee4e91055cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x7ee4e920d148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x7ee4eae04989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x7f95b14345cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x7f95b153c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x7f95b3133989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x7f95b14345cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x7f4b2f61ded4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x7f4b2fd605cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x7f4b2fe68148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x7f16b5686bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x55d89f2b7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x55d89f212b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x55d89f29dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x55d89f29ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x55d89f212bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x55d89f29dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x55d89f29e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x55d89f213689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x55d89f29dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x55d89f29e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x55d89f213689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x55d89f29dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x55d89f29e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x55d89f213689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76702)\u001b[0m     @     0x55d89f29dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x7f962217aed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x7f96228bd5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x7f96229c5148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x7f96245bc989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x7ee134ae0ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x7ee1352235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x7ee13532b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x7ee136f22989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x7f50bbb0ced4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x7f50bc24f5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x7f50bc357148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x7f50bdf4e989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x7f50bc24f5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x7f8cd5d755cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x7f8cd5e7d148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x7f8cd7a74989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x7f8f8a510ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x7f8f8ac535cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x7f8f8ad5b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x7f8f8c952989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x7ed46567ced4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x7ed465dbf5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x7ed465ec7148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x7ed467abe989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x55816031dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x55816031e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x558160293689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x55816031dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x55816031e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x558160293689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76724)\u001b[0m     @     0x55816031dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x7f6d98fce5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x7f6d990d6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x7f6d9accd989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x7f6d98fce5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x7f795644b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x7f7956553148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x7f795814a989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x7f795644b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x7fc2dc8e35cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x7fc2dc9eb148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x7fc2de5e2989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x7eea03b0bc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x7eea03b0ced4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x7eea0424f5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x7eea04357148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x7f53bdb12e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x7f53c082bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x7f53c084ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x7f53bd88c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x7f53bd88ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x7f8bf2339ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x7f8bf2a7c5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x7f8bf2b84148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x7fa932a38ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x7fa93317b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x7fa933283148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x7fa934e7a989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x7f0f75d08ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x7f0f7644b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x7f0f76553148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x7f5016ddced4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x7f501751f5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x7f5017627148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x7ee46e39eed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x7ee46eae15cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x7ee46ebe9148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x7f301c4125cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x7f301c51a148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x7f301e111989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x7f1e95c59b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x7f1e95c59e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x7f1e98972c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x7f1e98995cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x7ef415814c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x7ef415837cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x7ef412875009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x7ef412873c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x7ef412874ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x7fb521aa3009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x7fb521aa1c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x7fb521aa2ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x7fb5221e55cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x7f2c5c84ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x7f2c5988c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x7f2c5988ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x7f2c5988bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x7f2c59fce5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x7fa9f7379b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x7fa9f7379e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x7fa9fa092c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x7f811b99ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x7f81189dc009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x7f81189dac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x7f81189dbed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x7ef8baddced4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x7ef8bb51f5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x7ef8bb627148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x7efbb5ab75cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x7efbb5bbf148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x7efbb77b6989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x7f14dcadf5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x7f0671c6c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x7f068c2a6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x7f068de9d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x7f734532b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x7f7346f22989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x7f9c1ce6c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x7f9c1ea63989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x7f9c1cd645cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x7f63539e8148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x7f63555df989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x7f634c18c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x7f634c18ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x7f634c18bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x7f6f1682e148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x7f6f18425989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x7efe57b21148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x7efe59718989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x7f62925d75cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x7f62926df148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x7f62942d6989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x7f49fd2235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x7f49fd32b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x7f49fef22989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x7f58848ce5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x7f58849d6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x7f956401dcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x7f956105b009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x7f9561059c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x7f956105aed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x7f5580adf5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x7f5580be7148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x7f55827de989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x7f5580adf5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x7fb9d9fa65cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x7fb9da0ae148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x7fb9dbca5989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x7ecf7553c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x7ecf77133989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x7ecf754345cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x7f57bdaf75cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x7f57bdbff148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x7f57bf7f6989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x7f786ad5b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x7f786c952989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x7f786ac535cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x7f5d11f235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x7f5d1202b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x7f5d13c22989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x7f404fe0d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x7f404ff15148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x7f4051b0c989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x7f8fa58a5148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x7f8fa749c989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x7f8fa579d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x7fad5ae04989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x7fad591055cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x7fad5920d148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x7fad704d5bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x56124eb76fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x56124ead1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x56124eb5cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x56124eb5da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x56124ead1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x56124eb5cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x56124eb5d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x56124ead2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x56124eb5cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x56124eb5d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x56124ead2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x56124eb5cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x56124eb5d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x56124ead2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x7ee9a20d6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x7ee9a3ccd989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x7ee9a1fce5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x7faca05e3e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x7faca32fcc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x7faca331fcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x7fb262401e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x7fb26511ac12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x7fb26513dcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x7fb86e4fb5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x7fb86e603148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x7fb8701fa989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x7f9ced9b75cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x7f3d8ba465cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x7f3d8bb4e148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x7f3d91e04bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x55f4101cefd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x55f410129b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x55f4101b4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x55f4101b5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x55f410129bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x7f529b47b989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x7f529977c5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x7f99f1ce35cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x7f99f1deb148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x7f97422935cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x7f974239b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x7f9748651bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x555d1d520fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x555d1d47bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x555d1d506baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x555d1d507a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x555d1d47bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x555d1d506baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x555d1d507643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x555d1d47c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x555d1d506baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x555d1d507643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x555d1d47c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x555d1d506baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x555d1d507643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x555d1d47c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76647)\u001b[0m     @     0x555d1d506baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x7ee1dd77c5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x7ee1dd884148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x7ee1e3b3abd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x560a4a4a7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x560a4a402b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x560a4a48dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x560a4a48ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x560a4a402bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x560a4a48dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x560a4a48e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x560a4a403689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x7f21a5a07989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x7f21a3d085cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x7ee4e91055cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x7ee4e920d148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x7f95b153c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x7f95b77f2bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x56420c960fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x56420c8bbb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x56420c946baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x56420c947a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x56420c8bbbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x56420c946baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x56420c947643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x56420c8bc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x56420c946baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x56420c947643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x56420c8bc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x56420c946baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x56420c947643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x56420c8bc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76759)\u001b[0m     @     0x56420c946baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x7f4b31a5f989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x7f4b2fd605cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x7f96228bd5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x7f96229c5148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x7f9628c7bbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x5593b18d6fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x5593b1831b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x5593b18bcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x5593b18bda20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x5593b1831bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x5593b18bcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x5593b18bd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x5593b1832689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x5593b18bcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x5593b18bd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x7ee1352235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x7ee13532b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x7f50bc357148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x7f50c260dbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x55f64931efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x55f649279b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x55f649304baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x55f649305a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x55f649279bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x55f649304baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x55f649305643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x55f64927a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x55f649304baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x55f649305643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x55f64927a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x55f649304baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x55f649305643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x55f64927a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76712)\u001b[0m     @     0x55f649304baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x7f8cd5d755cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x7f8f8ac535cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x7f8f8ad5b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x7ed465dbf5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x7ed465ec7148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x7ed46c17dbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x557809285fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x5578091e0b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x55780926bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x55780926ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x5578091e0bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x55780926bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x7f6d990d6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x7f6d9f38cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x56082a0d4fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x56082a02fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x56082a0babaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x56082a0bba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x56082a02fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x56082a0babaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x56082a0bb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x56082a030689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x56082a0babaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x56082a0bb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x56082a030689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x56082a0babaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x56082a0bb643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x56082a030689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76623)\u001b[0m     @     0x56082a0babaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x7f7956553148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x7f795c809bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x5562d0e7efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x5562d0dd9b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x5562d0e64baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x5562d0e65a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x5562d0dd9bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x5562d0e64baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x5562d0e65643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x5562d0dda689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x5562d0e64baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x5562d0e65643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x5562d0dda689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x5562d0e64baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x5562d0e65643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x5562d0dda689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76641)\u001b[0m     @     0x5562d0e64baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x7fc2dc8e35cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x7fc2dc9eb148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x7fc2e2ca1bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x55c8cdc88fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x55c8cdbe3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x55c8cdc6ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x55c8cdc6fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x55c8cdbe3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x55c8cdc6ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x55c8cdc6f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x55c8cdbe4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x55c8cdc6ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x55c8cdc6f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x55c8cdbe4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x55c8cdc6ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x55c8cdc6f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x55c8cdbe4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76689)\u001b[0m     @     0x55c8cdc6ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x7eea05f4e989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x7eea0424f5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x7eea04357148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x7eea0a60dbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x55ef03eb1fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x55ef03e0cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x55ef03e97baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x55ef03e98a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x55ef03e0cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x55ef03e97baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x55ef03e98643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x7f53bd88bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x7f53bdfce5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x7f53be0d6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x7f53bfccd989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x7f8bf477b989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x7f8bf2a7c5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x7f8bf2b84148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x7f8bf8e3abd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x55e77cc7bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x55e77cbd6b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x55e77cc61baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x55e77cc62a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x55e77cbd6bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x55e77cc61baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x55e77cc62643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x55e77cbd7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x55e77cc61baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x55e77cc62643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x55e77cbd7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x55e77cc61baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x55e77cc62643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x55e77cbd7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76745)\u001b[0m     @     0x55e77cc61baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x7fa93317b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x7fa933283148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x7fa939539bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x560662d1afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x560662c75b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x560662d00baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x560662d01a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x560662c75bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x560662d00baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x560662d01643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x560662c76689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x560662d00baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x560662d01643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x560662c76689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x560662d00baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x560662d01643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x560662c76689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76626)\u001b[0m     @     0x560662d00baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x7f0f7814a989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x7f0f7644b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x7f0f76553148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x7f0f7c809bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x55930ff0ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x55930fe6ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x55930fef5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x55930fef6a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x55930fe6abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x55930fef5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x55930fef6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x55930fe6b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x55930fef5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x55930fef6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x55930fe6b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x55930fef5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x55930fef6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x55930fe6b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76739)\u001b[0m     @     0x55930fef5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x7f501921e989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x7f501751f5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x7f5017627148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x7f501d8ddbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x55d1cd66dfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x55d1cd5c8b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x55d1cd653baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x55d1cd654a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x55d1cd5c8bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x55d1cd653baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x55d1cd654643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x55d1cd5c9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x55d1cd653baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x55d1cd654643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x55d1cd5c9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x55d1cd653baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x55d1cd654643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x55d1cd5c9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76634)\u001b[0m     @     0x55d1cd653baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x7ee4707e0989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x7ee46eae15cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x7ee46ebe9148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x7ee474e9fbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x5569726d2fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x55697262db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x5569726b8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x5569726b9a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x55697262dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x5569726b8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x5569726b9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x55697262e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x5569726b8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x5569726b9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x55697262e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x5569726b8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x5569726b9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x55697262e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76738)\u001b[0m     @     0x5569726b8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x7f301c4125cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x7f301c51a148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x7f30227d0bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x56415aee2fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x56415ae3db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x56415aec8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x56415aec9a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x56415ae3dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x56415aec8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x56415aec9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x56415ae3e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x56415aec8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x56415aec9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x56415ae3e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x56415aec8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x56415aec9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x56415ae3e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76696)\u001b[0m     @     0x56415aec8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x7f1e959d3009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x7f1e959d1c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x7f1e959d2ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x7f1e961155cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x7ef412fb75cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x7ef4130bf148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x7ef414cb6989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x7fb5222ed148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x7fb523ee4989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x7fb5221e55cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x7f2c5a0d6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x7f2c5bccd989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x7f2c59fce5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x7f2c5a0d6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x7f2c6038cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x55761e76efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x55761e6c9b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x55761e754baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x55761e755a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x55761e6c9bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x55761e754baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x55761e755643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x55761e6ca689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x55761e754baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x55761e755643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x55761e6ca689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x55761e754baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x55761e755643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x55761e6ca689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76704)\u001b[0m     @     0x55761e754baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x7fa9fa0b5cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x7fa9f70f3009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x7fa9f70f1c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x7fa9f70f2ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x7f811911e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x7f8119226148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x7f811ae1d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x7f811911e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x7ef8bd21e989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x7ef8bb51f5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x7ef8bb627148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x7ef8c18ddbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x55c69a5befd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x55c69a519b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x55c69a5a4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x55c69a5a5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x55c69a519bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x55c69a5a4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x55c69a5a5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x55c69a51a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x55c69a5a4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x55c69a5a5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x55c69a51a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x55c69a5a4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x55c69a5a5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x55c69a51a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76644)\u001b[0m     @     0x55c69a5a4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x7efbb5ab75cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x7efbb5bbf148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x7efbbbe75bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x55d3dad4bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x55d3daca6b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x55d3dad31baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x55d3dad32a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x55d3daca6bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x55d3dad31baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x55d3dad32643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x55d3daca7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x55d3dad31baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x55d3dad32643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x55d3daca7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x55d3dad31baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x55d3dad32643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x55d3daca7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76638)\u001b[0m     @     0x55d3dad31baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x7f14dcbe7148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x7f14e2e9dbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x562369240fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x56236919bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x562369226baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x562369227a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x56236919bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x562369226baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x562369227643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x56236919c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x562369226baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x562369227643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x56236919c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x562369226baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x562369227643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x56236919c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76748)\u001b[0m     @     0x562369226baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x7f0673863989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x7f0671b645cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x7f0671c6c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x7f0677f22bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x55645da47fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x55645d9a2b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x55645da2dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x55645da2ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x55645d9a2bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x55645da2dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x55645da2e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x55645d9a3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x55645da2dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x55645da2e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x55645d9a3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x55645da2dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x7f068c19e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x7f068c2a6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x7f069255cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x56205c4ebfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x56205c446b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x56205c4d1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x56205c4d2a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x56205c446bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x56205c4d1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x56205c4d2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x56205c447689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x56205c4d1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x56205c4d2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x56205c447689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x56205c4d1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x56205c4d2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x56205c447689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76640)\u001b[0m     @     0x56205c4d1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x7f73452235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x7f734532b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x7f734b5e1bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x5648ca969fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x5648ca8c4b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x5648ca94fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x5648ca950a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x5648ca8c4bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x5648ca94fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x5648ca950643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x5648ca8c5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x5648ca94fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x5648ca950643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x5648ca8c5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x5648ca94fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x5648ca950643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x5648ca8c5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76677)\u001b[0m     @     0x5648ca94fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x7f9c1ce6c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x7f9c23122bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x5643c55c4fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x5643c551fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x5643c55aabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x5643c55aba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x5643c551fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x5643c55aabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x5643c55ab643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x5643c5520689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x5643c55aabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x5643c55ab643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x5643c5520689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x5643c55aabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x5643c55ab643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x5643c5520689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76679)\u001b[0m     @     0x5643c55aabaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x7f63538e05cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x7f63539e8148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x7f6359c9ebd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x557ec9d2bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x557ec9c86b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x557ec9d11baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x557ec9d12a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x557ec9c86bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x557ec9d11baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x557ec9d12643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x557ec9c87689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x557ec9d11baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x557ec9d12643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x557ec9c87689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x557ec9d11baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x557ec9d12643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x557ec9c87689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76660)\u001b[0m     @     0x557ec9d11baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x7f634c8ce5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x7f634c9d6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x7f634e5cd989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x7f634c8ce5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x7f6f167265cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x7f6f1682e148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x7f6f1cae4bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x55836b2f1fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x55836b24cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x55836b2d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x55836b2d8a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x55836b24cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x55836b2d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x55836b2d8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x55836b24d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x55836b2d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x55836b2d8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x55836b24d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x55836b2d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x55836b2d8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x55836b24d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76661)\u001b[0m     @     0x55836b2d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x7efe57a195cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x7efe57b21148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x7efe5ddd7bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x55a888a40fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x55a88899bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x55a888a26baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x55a888a27a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x55a88899bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x55a888a26baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x55a888a27643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x55a88899c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x55a888a26baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x55a888a27643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x55a88899c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x55a888a26baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x55a888a27643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x55a88899c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76700)\u001b[0m     @     0x55a888a26baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x7f62925d75cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x7f62926df148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x7f6298995bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x55aee739ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x55aee72fab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x55aee7385baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x55aee7386a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x55aee72fabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x55aee7385baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x55aee7386643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x55aee72fb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x55aee7385baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x55aee7386643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x55aee72fb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x55aee7385baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x55aee7386643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x55aee72fb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76632)\u001b[0m     @     0x55aee7385baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x7f49fd2235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x7f49fd32b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x7f4a035e1bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x561a52cb9fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x561a52c14b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x561a52c9fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x561a52ca0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x561a52c14bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x561a52c9fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x561a52ca0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x561a52c15689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x561a52c9fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x561a52ca0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x561a52c15689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x561a52c9fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x561a52ca0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x561a52c15689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76709)\u001b[0m     @     0x561a52c9fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x7f58865cd989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x7f58848ce5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x7f58849d6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x7f588ac8cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x561ac211cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x561ac2077b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x561ac2102baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x561ac2103a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x561ac2077bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x561ac2102baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x561ac2103643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x561ac2078689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x561ac2102baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x561ac2103643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x561ac2078689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x561ac2102baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x561ac2103643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x561ac2078689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76643)\u001b[0m     @     0x561ac2102baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x7f956179d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x7f95618a5148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x7f956349c989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x7f5580be7148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x7f5586e9dbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x558121f5ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x558121ebab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x558121f45baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x558121f46a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x558121ebabfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x558121f45baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x558121f46643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x558121ebb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x558121f45baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x558121f46643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x558121ebb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x558121f45baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x558121f46643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x558121ebb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76741)\u001b[0m     @     0x558121f45baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x7fb9d9fa65cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x7fb9da0ae148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x7fb9e0364bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x55e397954fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x55e3978afb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x55e39793abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x55e39793ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x55e3978afbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x55e39793abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x55e39793b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x55e3978b0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x55e39793abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x55e39793b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x55e3978b0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x55e39793abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x55e39793b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x55e3978b0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76675)\u001b[0m     @     0x55e39793abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x7ecf7553c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x7ecf7b7f2bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x5589bf595fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x5589bf4f0b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x5589bf57bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x5589bf57ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x5589bf4f0bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x5589bf57bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x5589bf57c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x5589bf4f1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x5589bf57bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x5589bf57c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x5589bf4f1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x5589bf57bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x5589bf57c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x5589bf4f1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76684)\u001b[0m     @     0x5589bf57bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x7f57bdaf75cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x7f57bdbff148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x7f57c3eb5bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x55c6c2f98fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x55c6c2ef3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x55c6c2f7ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x55c6c2f7fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x55c6c2ef3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x55c6c2f7ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x55c6c2f7f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x55c6c2ef4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x55c6c2f7ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x55c6c2f7f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x55c6c2ef4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x55c6c2f7ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x55c6c2f7f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x55c6c2ef4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76630)\u001b[0m     @     0x55c6c2f7ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x7f786ad5b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x7f7871011bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x55a607544fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x55a60749fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x55a60752abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x55a60752ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x55a60749fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x55a60752abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x55a60752b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x55a6074a0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x55a60752abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x55a60752b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x55a6074a0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x55a60752abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x55a60752b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x55a6074a0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76743)\u001b[0m     @     0x55a60752abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x7f5d11f235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x7f5d1202b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x7f5d182e1bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x561f06578fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x561f064d3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x561f0655ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x561f0655fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x561f064d3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x561f0655ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x561f0655f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x561f064d4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x561f0655ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x561f0655f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x561f064d4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x561f0655ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x561f0655f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x561f064d4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76681)\u001b[0m     @     0x561f0655ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x7f404fe0d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x7f404ff15148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x7f40561cbbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x55ed279b4fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x55ed2790fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x55ed2799abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x55ed2799ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x55ed2790fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x55ed2799abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x55ed2799b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x55ed27910689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x55ed2799abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x55ed2799b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x55ed27910689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x55ed2799abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x55ed2799b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x55ed27910689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76629)\u001b[0m     @     0x55ed2799abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x7f8fa58a5148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x7f8fabb5bbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x559216caffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x559216c0ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x559216c95baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x559216c96a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x559216c0abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x559216c95baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x559216c96643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x559216c0b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x559216c95baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x559216c96643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x559216c0b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x559216c95baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x559216c96643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x559216c0b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76624)\u001b[0m     @     0x559216c95baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76628)\u001b[0m     @     0x56124eb5cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x7ee9a20d6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x7ee9a838cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x559f0310afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x559f03065b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x559f030f0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x559f030f1a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x559f03065bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x559f030f0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x559f030f1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x559f03066689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x559f030f0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x559f030f1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x559f03066689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x559f030f0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x559f030f1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x559f03066689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76633)\u001b[0m     @     0x559f030f0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x7faca035d009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x7faca035bc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x7faca035ced4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x7faca0a9f5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x7fb26217b009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x7fb262179c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x7fb26217aed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x7fb86e4fb5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x7fb86e603148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x7fb8748b9bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x5630e490cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x5630e4867b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x5630e48f2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x5630e48f3a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x5630e4867bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x5630e48f2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x5630e48f3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x5630e4868689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x5630e48f2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x5630e48f3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x5630e4868689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x5630e48f2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x5630e48f3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x5630e4868689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76728)\u001b[0m     @     0x5630e48f2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x7f9cedabf148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x7f9cf3d75bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x55999f7a7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x55999f702b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x55999f78dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x55999f78ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x55999f702bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x55999f78dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x55999f78e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x55999f703689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x55999f78dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x55999f78e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x55999f703689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x55999f78dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x55999f78e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x55999f703689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76680)\u001b[0m     @     0x55999f78dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x55f4101b4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x55f4101b5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x55f41012a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x55f4101b4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x55f4101b5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x55f41012a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x55f4101b4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x55f4101b5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x55f41012a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76744)\u001b[0m     @     0x55f4101b4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x7f5299884148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x7f529fb3abd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x5628deea5fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x5628dee00b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x5628dee8bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x5628dee8ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x5628dee00bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x5628dee8bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x5628dee8c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x5628dee01689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x5628dee8bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x5628dee8c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x5628dee01689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x5628dee8bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x5628dee8c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x5628dee01689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76637)\u001b[0m     @     0x5628dee8bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x7f99f80a1bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x55e3e3c65fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x55e3e3bc0b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x55e3e3c4bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x55e3e3c4ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x55e3e3bc0bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x55e3e3c4bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x55e3e3c4c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x55e3e3bc1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x55e3e3c4bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x55e3e3c4c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x55e3e3bc1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x55e3e3c4bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x55e3e3c4c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x55e3e3bc1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76627)\u001b[0m     @     0x55e3e3c4bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x560a4a48dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x560a4a48e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x560a4a403689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x560a4a48dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x560a4a48e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x560a4a403689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76646)\u001b[0m     @     0x560a4a48dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x7f21a3e10148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x7f21aa0c6bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x55bb2f10efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x55bb2f069b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x55bb2f0f4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x55bb2f0f5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x55bb2f069bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x55bb2f0f4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x55bb2f0f5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x55bb2f06a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x55bb2f0f4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x55bb2f0f5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x55bb2f06a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x55bb2f0f4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x55bb2f0f5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x55bb2f06a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76651)\u001b[0m     @     0x55bb2f0f4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x7ee5184f5bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x55ede106cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x55ede0fc7b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x55ede1052baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x55ede1053a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x55ede0fc7bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x55ede1052baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x55ede1053643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x55ede0fc8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x55ede1052baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x55ede1053643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x55ede0fc8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x55ede1052baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x55ede1053643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x55ede0fc8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76625)\u001b[0m     @     0x55ede1052baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x7f4b2fe68148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x7f4b3611ebd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x562d7ee1bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x562d7ed76b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x562d7ee01baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x562d7ee02a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x562d7ed76bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x562d7ee01baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x562d7ee02643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x562d7ed77689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x562d7ee01baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x562d7ee02643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x562d7ed77689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x562d7ee01baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x562d7ee02643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x562d7ed77689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76716)\u001b[0m     @     0x562d7ee01baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x5593b1832689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x5593b18bcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x5593b18bd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x5593b1832689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76687)\u001b[0m     @     0x5593b18bcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x7ee13b5e1bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x55560e251fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x55560e1acb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x55560e237baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x55560e238a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x55560e1acbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x55560e237baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x55560e238643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x55560e1ad689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x55560e237baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x55560e238643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x55560e1ad689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x55560e237baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x55560e238643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x55560e1ad689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76650)\u001b[0m     @     0x55560e237baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x7f8cd5e7d148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x7f8cdc133bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x55c1c22a5fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x55c1c2200b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x55c1c228bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x55c1c228ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x55c1c2200bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x55c1c228bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x55c1c228c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x55c1c2201689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x55c1c228bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x55c1c228c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x55c1c2201689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x55c1c228bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x7f8f91011bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x55edff526fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x55edff481b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x55edff50cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x55edff50da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x55edff481bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x55edff50cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x55edff50d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x55edff482689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x55edff50cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x55edff50d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x55edff482689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x55edff50cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x55edff50d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x55edff482689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76706)\u001b[0m     @     0x55edff50cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x55780926c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x5578091e1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x55780926bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x55780926c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x5578091e1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x55780926bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x55780926c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x5578091e1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76635)\u001b[0m     @     0x55780926bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x55ef03e0d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x55ef03e97baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x55ef03e98643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x55ef03e0d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x55ef03e97baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x55ef03e98643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x55ef03e0d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76695)\u001b[0m     @     0x55ef03e97baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x7f53bdfce5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x7f53be0d6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x7f53c438cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x5618b84fefd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x5618b8459b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x5618b84e4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x5618b84e5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x5618b8459bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x5618b84e4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x5618b84e5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x5618b845a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x5618b84e4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x5618b84e5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x5618b845a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x5618b84e4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x5618b84e5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x5618b845a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76732)\u001b[0m     @     0x5618b84e4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x7f1e9621d148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x7f1e97e14989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x7f1e961155cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x7ef412fb75cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x7ef4130bf148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x7ef419375bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x55a652355fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x55a6522b0b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x55a65233bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x55a65233ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x55a6522b0bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x55a65233bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x55a65233c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x55a6522b1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x55a65233bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x55a65233c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x55a6522b1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x55a65233bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x55a65233c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x55a6522b1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76639)\u001b[0m     @     0x55a65233bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x7fb5222ed148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x7fb5285a3bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x55efeefcafd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x55efeef25b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x55efeefb0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x55efeefb1a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x55efeef25bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x55efeefb0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x55efeefb1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x55efeef26689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x55efeefb0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x55efeefb1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x55efeef26689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x55efeefb0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x55efeefb1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x55efeef26689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76735)\u001b[0m     @     0x55efeefb0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x7fa9f78355cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x7fa9f793d148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x7fa9f9534989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x7f8119226148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x7f811f4dcbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x55c67297afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x55c6728d5b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x55c672960baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x55c672961a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x55c6728d5bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x55c672960baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x55c672961643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x55c6728d6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x55c672960baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x55c672961643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x55c6728d6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x55c672960baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x55c672961643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x55c6728d6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76692)\u001b[0m     @     0x55c672960baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x55645da2e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x55645d9a3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76645)\u001b[0m     @     0x55645da2dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x7f634c9d6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x7f6352c8cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x5619d28e0fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x5619d283bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x5619d28c6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x5619d28c7a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x5619d283bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x5619d28c6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x5619d28c7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x5619d283c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x5619d28c6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x5619d28c7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x5619d283c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x5619d28c6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x5619d28c7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x5619d283c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76729)\u001b[0m     @     0x5619d28c6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x7f956179d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x7f95618a5148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x7f9567b5bbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x559901cc1fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x559901c1cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x559901ca7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x559901ca8a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x559901c1cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x559901ca7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x559901ca8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x559901c1d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x559901ca7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x559901ca8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x559901c1d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x559901ca7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x559901ca8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x559901c1d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76708)\u001b[0m     @     0x559901ca7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x7faca0ba7148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x7faca279e989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x7fb2628bd5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x55c1c228c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x55c1c2201689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76631)\u001b[0m     @     0x55c1c228bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x7f1e9621d148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x7f1e9c4d3bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x563fe4f8bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x563fe4ee6b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x563fe4f71baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x563fe4f72a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x563fe4ee6bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x563fe4f71baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x563fe4f72643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x563fe4ee7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x563fe4f71baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x563fe4f72643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x563fe4ee7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x563fe4f71baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x563fe4f72643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x563fe4ee7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76664)\u001b[0m     @     0x563fe4f71baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x7fa9f78355cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x7fa9f793d148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x7fa9fdbf3bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x558040b68fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x558040ac3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x558040b4ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x558040b4fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x558040ac3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x558040b4ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x558040b4f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x558040ac4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x558040b4ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x558040b4f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x558040ac4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x558040b4ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x558040b4f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x558040ac4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76656)\u001b[0m     @     0x558040b4ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x7faca0a9f5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x7faca0ba7148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x7faca6e5dbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x55f77abfafd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x55f77ab55b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x55f77abe0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x55f77abe1a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x55f77ab55bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x55f77abe0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x55f77abe1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x55f77ab56689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x55f77abe0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x55f77abe1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x55f77ab56689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x55f77abe0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x55f77abe1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x55f77ab56689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76736)\u001b[0m     @     0x55f77abe0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x7fb2629c5148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x7fb2645bc989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x7fb2628bd5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x7fb2629c5148 at::Tensor::copy_()\n",
+      "2020-11-05 10:55:39,788\tERROR trial_runner.py:567 -- Trial PPO_jss_env_6cb09_00000: Error processing event.\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py\", line 515, in _process_trial\n",
+      "    result = self.trial_executor.fetch_result(trial)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py\", line 488, in fetch_result\n",
+      "    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1428, in get\n",
+      "    raise value.as_instanceof_cause()\n",
+      "ray.exceptions.RayTaskError: \u001b[36mray::PPO.train()\u001b[39m (pid=76757, ip=172.17.0.4)\n",
+      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
+      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 516, in train\n",
+      "    raise e\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 505, in train\n",
+      "    result = Trainable.train(self)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py\", line 336, in train\n",
+      "    result = self.step()\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py\", line 134, in step\n",
+      "    res = next(self.train_exec_impl)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 756, in __next__\n",
+      "    return next(self.built_iterator)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  [Previous line repeated 1 more time]\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 876, in apply_flatten\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 828, in add_wait_hooks\n",
+      "    item = next(it)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  [Previous line repeated 1 more time]\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 466, in base_iterator\n",
+      "    actor_set.init_actors()\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1238, in init_actors\n",
+      "    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])\n",
+      "ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.\n",
+      "2020-11-05 10:55:39,790\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffbdff035801000000.\n",
+      "2020-11-05 10:55:39,791\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffe0497dac01000000.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.9/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/555.96 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 ERROR)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_6cb09_00000 | ERROR    |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "Number of errored trials: 1\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "| Trial name              |   # failures | error file                                                                        |\n",
+      "|-------------------------+--------------+-----------------------------------------------------------------------------------|\n",
+      "| PPO_jss_env_6cb09_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_6cb09_00000_0_2020-11-05_10-55-32/error.txt |\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3642\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:44:18,469 - wandb.wandb_agent - INFO - Running runs: ['ix8moovg']\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204415-ix8moovg/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204415-ix8moovg/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 224.37374\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 224.37374\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3435\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708256\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/ix8moovg\u001b[0m\n",
-      "2020-10-14 20:44:23,694 - wandb.wandb_agent - INFO - Cleaning up finished run: ix8moovg\n",
-      "2020-10-14 20:44:24,023 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:44:24,023 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta56\n",
-      "2020-10-14 20:44:24,025 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta56\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/zda8eskt\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204426-zda8eskt\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 24.8/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/555.96 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 ERROR)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_6cb09_00000 | ERROR    |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "Number of errored trials: 1\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "| Trial name              |   # failures | error file                                                                        |\n",
+      "|-------------------------+--------------+-----------------------------------------------------------------------------------|\n",
+      "| PPO_jss_env_6cb09_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_6cb09_00000_0_2020-11-05_10-55-32/error.txt |\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
       "\n",
+      "2020-11-05 10:55:39,801\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff4100f4fd01000000.\n",
+      "2020-11-05 10:55:39,812\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff091d563401000000.\n",
+      "2020-11-05 10:55:39,813\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff43fb47bd01000000.\n",
+      "2020-11-05 10:55:39,813\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff9f3cc57a01000000.\n",
+      "2020-11-05 10:55:39,813\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffa97540c201000000.\n",
+      "2020-11-05 10:55:39,813\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff0314ce3001000000.\n",
+      "Traceback (most recent call last):\n",
+      "  File \"train.py\", line 74, in <module>\n",
+      "    train_func()\n",
+      "  File \"train.py\", line 56, in train_func\n",
+      "    analysis = tune.run(PPOTrainer, config=config, stop=stop, name=\"ppo-jss\")\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py\", line 427, in run\n",
+      "    raise TuneError(\"Trials did not complete\", incomplete_trials)\n",
+      "ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_6cb09_00000])\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x7fb268c7bbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x55fdb8bf3fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x55fdb8b4eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x55fdb8bd9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x55fdb8bdaa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x55fdb8b4ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x55fdb8bd9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x55fdb8bda643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x55fdb8b4f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x55fdb8bd9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x55fdb8bda643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x55fdb8b4f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x55fdb8bd9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x55fdb8bda643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x55fdb8b4f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=76654)\u001b[0m     @     0x55fdb8bd9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m E1105 10:55:39.780390 76757 77942 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=137dbd5547ea6deabdff035801000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=bdff035801000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m E1105 10:55:39.780573 76757 77942 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=3f75a43fb9f70f24bdff035801000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=bdff035801000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3726\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:44:29,037 - wandb.wandb_agent - INFO - Running runs: ['zda8eskt']\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 76517\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program failed with code 1.  Press ctrl-c to abort syncing.\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffb2413f7201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff90aded9101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8168b55d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m E1105 10:55:39.811161 76757 77942 task_manager.cc:323] Task failed: IOError: 14: failed to connect to all addresses: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=37f711ca0d66f5bd4100f4fd01000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=4100f4fd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m E1105 10:55:39.811338 76757 77942 task_manager.cc:323] Task failed: IOError: 14: failed to connect to all addresses: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=c6f8a2750fad0b0de0497dac01000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=e0497dac01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m E1105 10:55:39.811422 76757 77942 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=1f6f5417a7b065f9091d563401000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=091d563401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m E1105 10:55:39.811507 76757 77942 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=e76b5820fbdeb0f2091d563401000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=091d563401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m E1105 10:55:39.811583 76757 77942 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=7249131d8582b825091d563401000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=091d563401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m E1105 10:55:39.812187 76757 77942 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=1e9c16c25b494a4a43fb47bd01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=43fb47bd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m E1105 10:55:39.812296 76757 77942 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=61afdfe40390d0a343fb47bd01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=43fb47bd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m E1105 10:55:39.812391 76757 77942 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=10a4a4113c6c36ea43fb47bd01000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=43fb47bd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m E1105 10:55:39.813246 76757 77942 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=efaf5dbfabc208739f3cc57a01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=9f3cc57a01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m E1105 10:55:39.813356 76757 77942 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=b3b45bae970c41729f3cc57a01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=9f3cc57a01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m E1105 10:55:39.813424 76757 77942 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=4f22c19b5f703db99f3cc57a01000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=9f3cc57a01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m E1105 10:55:39.815987 76757 77942 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=fde3d5eda9f525d7a97540c201000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=a97540c201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m E1105 10:55:39.816128 76757 77942 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=d16c21eef3935840a97540c201000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=a97540c201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m E1105 10:55:39.816218 76757 77942 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=d88ec84d5baca957a97540c201000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=a97540c201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m E1105 10:55:39.816581 76757 77942 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=f4d9d8a5e202b0910314ce3001000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=0314ce3001000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m E1105 10:55:39.816685 76757 77942 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=8b0b449b9f08d0430314ce3001000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=0314ce3001000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m E1105 10:55:39.816778 76757 77942 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=ad47e6e6a1a1660b0314ce3001000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=0314ce3001000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m E1105 10:55:39.821511 76757 77942 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=9e78156cc0f1c18db2413f7201000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=b2413f7201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m E1105 10:55:39.821641 76757 77942 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=99a573b913884b0db2413f7201000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=b2413f7201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=76757)\u001b[0m E1105 10:55:39.821723 76757 77942 task_manager.cc:323] Task failed: IOError: 14: Connection reset by peer: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=716ad7ba0ea412bfb2413f7201000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=b2413f7201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff31c3fed901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4e242e9f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff821ddf4301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff56c9ec1501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff252160a301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffc2621d1401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff59d91ef301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffee8852f401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff04668d8f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7ef9157101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0d557f6601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8edbbd3001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8cd168e101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffda2cd21f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff310e963d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff32335d4e01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4f9bfece01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffe9f6a7cf01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff3a9488b101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff5843697701000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff80993fa801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff302122d001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff99d0343201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff20d842ad01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff018c9dac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff702ed69e01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff392716d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff34cbbac201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff50168bc201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff51728d3301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff19fd5b4901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd784bf0601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa4f7314201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff58dd50c101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8d06128001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7f7c936001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffc3083e0c01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffef1af81501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff9d526f0201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff120020c01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff5cc87e2501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff1e7ae67b01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff2d1a71ea01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffeca600ef01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff10f667b001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff71ca01c001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffffefbd9801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff14da135201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff75f329e601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd989d1f001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd8f83c3801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0aeae6a301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff257d30801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff358dd45601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8f9a5fc701000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff452e714401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffdd5654aa01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff244a7d1001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff3166f9e301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa7ad1db301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffccf343cc01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7b2861ac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff0f72e3901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0fae11b201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff61dc472601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff41e0fbff01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7a508a7a01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffb3cace0801000000.'\n",
+      "Arguments: ()\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204426-zda8eskt/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204426-zda8eskt/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 178.59596\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 178.59596\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3881\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708267\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201105_105527-kj5omumc/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201105_105527-kj5omumc/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/zda8eskt\u001b[0m\n",
-      "2020-10-14 20:44:34,252 - wandb.wandb_agent - INFO - Cleaning up finished run: zda8eskt\n",
-      "2020-10-14 20:44:36,273 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:44:36,273 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta57\n",
-      "2020-10-14 20:44:36,275 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta57\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mtreasured-sweep-2\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/kj5omumc\u001b[0m\n",
+      "2020-11-05 10:55:51,159 - wandb.wandb_agent - INFO - Cleaning up finished run: kj5omumc\n",
+      "2020-11-05 10:55:51,475 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-05 10:55:51,475 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta42\n",
+      "2020-11-05 10:55:51,477 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/ta42\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.9 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/uz9lk4hk\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204438-uz9lk4hk\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33msweet-sweep-3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/pjuczesa\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/dy15f9rj\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201105_105553-dy15f9rj\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-05 10:55:56,494 - wandb.wandb_agent - INFO - Running runs: ['dy15f9rj']\n",
+      "2020-11-05 10:55:57,147\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/1 GPUs, 0.0/555.96 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_7c602_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3824\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:44:41,292 - wandb.wandb_agent - INFO - Running runs: ['uz9lk4hk']\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204438-uz9lk4hk/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204438-uz9lk4hk/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 209.43434\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 209.43434\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3742\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708279\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/uz9lk4hk\u001b[0m\n",
-      "2020-10-14 20:44:46,515 - wandb.wandb_agent - INFO - Cleaning up finished run: uz9lk4hk\n",
-      "2020-10-14 20:44:46,834 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:44:46,834 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta58\n",
-      "2020-10-14 20:44:46,836 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta58\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/i1pzxngg\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204448-i1pzxngg\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "\u001b[2m\u001b[36m(pid=78267)\u001b[0m 2020-11-05 10:55:59,896\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m *** SIGSEGV (@0x0) received by PID 78195 (TID 0x7f1aed4dc700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x7f1aed0b5390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x7eebef2bffb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x7eebec5b364b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x7eebec5b6977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x7eebec5b6b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x7eebec5b6e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x7eebef2cfc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x7eebef2f2cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m *** SIGSEGV (@0x0) received by PID 78246 (TID 0x7f6619471700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m *** SIGSEGV (@0x0) received by PID 78268 (TID 0x7f68cb1c2700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m *** SIGSEGV (@0x0) received by PID 78181 (TID 0x7efe3d826700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m *** SIGSEGV (@0x0) received by PID 78301 (TID 0x7f00b7f60700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x7f00b7b39390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x7ed1b9d3ffb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x7ed1b703364b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x7ed1b7036977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x7ed1b7036b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x7ed1b7036e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x7ed1b9d4fc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x7ed1b9d72cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m *** SIGSEGV (@0x0) received by PID 78202 (TID 0x7f7515dbd700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x7f7515996390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x7f4617a70fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x7f4614d6464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m *** SIGSEGV (@0x0) received by PID 78245 (TID 0x7f3a007b5700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m *** SIGSEGV (@0x0) received by PID 78198 (TID 0x7fa0bb369700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x7fa0baf42390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m *** SIGSEGV (@0x0) received by PID 78273 (TID 0x7f97cfd47700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x7f97cf920390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m *** SIGSEGV (@0x0) received by PID 78179 (TID 0x7fee02e5c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x7fee02a35390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x7fbf04a32fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x7fbf01d2664b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x7fbf01d29977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x7fbf01d29b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x7fbf01d29e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m *** SIGSEGV (@0x0) received by PID 78316 (TID 0x7fbcac2a9700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x7fbcabe82390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x7f8dade6efb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x7f8dab16264b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x7f8dab165977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x7f8dab165b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x7f8dab165e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x7f8dade7ec12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x7f8dadea1cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m *** SIGSEGV (@0x0) received by PID 78294 (TID 0x7f8a0763d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x7f8a07216390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x7f5b0939bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x7f5b0668f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x7f5b06692977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x7f5b06692b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x7f5b06692e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x7f5b093abc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x7f5b093cecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x7f5b0640c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x7f5b0640ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m *** SIGSEGV (@0x0) received by PID 78266 (TID 0x7fed20f1f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x7fed20af8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x7fbe22c5ffb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x7fbe1ff5364b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x7fbe1ff56977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x7fbe1ff56b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x7fbe1ff56e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x7fbe22c6fc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x7fbe22c92cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x7fbe1fcd0009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x7fbe1fccec3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m *** SIGSEGV (@0x0) received by PID 78318 (TID 0x7f7bb22a6700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x7f7bb1e7f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x7f4cb408efb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x7f4cb138264b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x7f4cb1385977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x7f4cb1385b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x7f4cb1385e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x7f4cb409ec12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m *** SIGSEGV (@0x0) received by PID 78302 (TID 0x7f194b53e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x7f194b117390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x7eea4d32efb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x7eea4a62264b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x7eea4a625977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x7eea4a625b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x7eea4a625e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x7eea4d33ec12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x7eea4d361cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x7eea4a39f009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x7eea4a39dc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m *** SIGSEGV (@0x0) received by PID 78306 (TID 0x7f5948226700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x7f5947dff390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x7f2a4a01dfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x7f2a4731164b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x7f2a47314977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x7f2a47314b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x7f2a47314e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x7f2a4a02dc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x7f2a4a050cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x7f2a4708e009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x7f2a4708cc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m *** SIGSEGV (@0x0) received by PID 78295 (TID 0x7f20b9b5b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x7f20b9734390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x7ef1bb92bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x7ef1b8c1f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x7ef1b8c22977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x7ef1b8c22b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x7ef1b8c22e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x7ef1bb93bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m *** SIGSEGV (@0x0) received by PID 78309 (TID 0x7ff517d10700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x7ff5178e9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x7fc6199c8fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x7fc616cbc64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x7fc616cbf977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x7fc616cbfb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x7fc616cbfe11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x7fc6199d8c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x7fc6199fbcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x7fc616a39009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x7fc616a37c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x7fc616a38ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m *** SIGSEGV (@0x0) received by PID 78288 (TID 0x7fd6f014f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x7fd6efd28390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x7fa7f1e6efb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x7fa7ef16264b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x7fa7ef165977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x7fa7ef165b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x7fa7ef165e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x7fa7f1e7ec12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m *** SIGSEGV (@0x0) received by PID 78270 (TID 0x7fe1beadf700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x7fe1be6b8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x7fb2c081bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x7fb2bdb0f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x7fb2bdb12977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x7fb2bdb12b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x7fb2bdb12e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x7fb2c082bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x7fb2c084ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x7fb2bd88c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x7fb2bd88ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m *** SIGSEGV (@0x0) received by PID 78275 (TID 0x7fbe7765a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x7fbe77233390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x7f8f7939bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x7f8f7668f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x7f8f76692977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x7f8f76692b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x7f8f76692e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x7f8f793abc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x7f8f793cecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x7f8f7640c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x7f8f7640ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m *** SIGSEGV (@0x0) received by PID 78209 (TID 0x7f51127b5700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x7f511238e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x7f22145c2fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m *** SIGSEGV (@0x0) received by PID 78186 (TID 0x7fb1add32700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x7fb1ad90b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x7f82afa70fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x7f82acd6464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x7f82acd67977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x7f82acd67b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x7f82acd67e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x7f82afa80c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x7f82afaa3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x7f82acae1009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x7f82acadfc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x7f82acae0ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m *** SIGSEGV (@0x0) received by PID 78194 (TID 0x7f4978897700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x7f4978470390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x7f1a7a5aafb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x7f1a7789e64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x7f1a778a1977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x7f1a778a1b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x7f1a778a1e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m *** SIGSEGV (@0x0) received by PID 78265 (TID 0x7f924cd8b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x7f924c964390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x7f634e9f3fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x7f634bce764b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x7f634bcea977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x7f634bceab53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x7f634bceae11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x7f634ea03c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x7f634ea26cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x7f634ba64009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x7f634ba62c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x7f634ba63ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m *** SIGSEGV (@0x0) received by PID 78236 (TID 0x7fe1ffd1d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x7fe1ff8f6390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x7fb301b15fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x7fb2fee0964b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x7fb2fee0c977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x7fb2fee0cb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x7fb2fee0ce11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x7fb301b25c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x7fb301b48cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x7fb2feb86009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x7fb2feb84c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x7fb2feb85ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m *** SIGSEGV (@0x0) received by PID 78278 (TID 0x7fea011ff700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x7fea00dd8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x7fbb02e96fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x7fbb0018a64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x7fbb0018d977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x7fbb0018db53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x7fbb0018de11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x7fbb02ea6c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x7fbb02ec9cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x7fbafff07009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x7fbafff05c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x7fbafff06ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m *** SIGSEGV (@0x0) received by PID 78193 (TID 0x7f80d5cb3700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x7f80d588c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x7f51d7a70fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x7f51d4d6464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x7f51d4d67977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x7f51d4d67b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x7f51d4d67e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x7f51d7a80c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x7f51d7aa3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x7f51d4ae1009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m *** SIGSEGV (@0x0) received by PID 78260 (TID 0x7fcd93fd8700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x7fcd93bb1390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x7f9e95d6cfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x7f9e9306064b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x7f9e93063977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x7f9e93063b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x7f9e93063e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x7f9e95d7cc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x7f9e95d9fcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x7f9e92ddd009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x7f9e92ddbc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m *** SIGSEGV (@0x0) received by PID 78320 (TID 0x7f703997e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x7f7039557390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x7f413b75afb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x7f4138a4e64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x7f4138a51977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x7f4138a51b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x7f4138a51e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x7f413b76ac12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x7f413b78dcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m *** SIGSEGV (@0x0) received by PID 78200 (TID 0x7ff706c48700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x7ff706821390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x7fc808a32fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x7fc805d2664b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x7fc805d29977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x7fc805d29b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x7fc805d29e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x7fc808a42c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m *** SIGSEGV (@0x0) received by PID 78253 (TID 0x7f1fe9baa700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x7f1fe9783390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x7ef0eb96bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x7ef0e8c5f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x7ef0e8c62977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x7ef0e8c62b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x7ef0e8c62e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x7ef0eb97bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x7ef0eb99ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x7ef0e89dc009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x7ef0e89dac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x7ef0e89dbed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m *** SIGSEGV (@0x0) received by PID 78187 (TID 0x7f112a03b700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x7f1129c14390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x7ee22bd90fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x7ee22908464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x7ee229087977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x7ee229087b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x7ee229087e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x7ee22bda0c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x7ee22bdc3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x7ee228e01009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m *** SIGSEGV (@0x0) received by PID 78237 (TID 0x7f254a377700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x7f2549f50390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x7ef64c09bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x7ef64938f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x7ef649392977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x7ef649392b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x7ef649392e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x7ef64c0abc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m *** SIGSEGV (@0x0) received by PID 78197 (TID 0x7f880f457700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x7f880f030390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x7f591118afb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x7f590e47e64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x7f590e481977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x7f590e481b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x7f590e481e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x7f591119ac12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x7f59111bdcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m *** SIGSEGV (@0x0) received by PID 78252 (TID 0x7f9cecbe0700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x7f9cec7b9390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x7f6dee9c3fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x7f6debcb764b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x7f6debcba977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x7f6debcbab53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x7f6debcbae11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x7f6dee9d3c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x7f6dee9f6cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m *** SIGSEGV (@0x0) received by PID 78184 (TID 0x7fb68aeef700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x7fb68aac8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m *** SIGSEGV (@0x0) received by PID 78263 (TID 0x7f39a8730700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x7f39a8309390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x7f0aaa1a6fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x7f0aa749a64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x7f0aa749d977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x7f0aa749db53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x7f0aa749de11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x7f0aaa1b6c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x7f0aaa1d9cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x7f0aa7217009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x7f0aa7215c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x7f0aa7216ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m *** SIGSEGV (@0x0) received by PID 78282 (TID 0x7f98ca062700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x7f98c9c3b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x7f69cbe63fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x7f69c915764b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x7f69c915a977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x7f69c915ab53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x7f69c915ae11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x7f69cbe73c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x7f69cbe96cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x7f69c8ed4009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x7f69c8ed2c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m *** SIGSEGV (@0x0) received by PID 78243 (TID 0x7f7642a96700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x7f764266f390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x7f4744770fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x7f4741a6464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x7f4741a67977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x7f4741a67b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x7f4741a67e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x7f4744780c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x7f47447a3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x7f47417e1009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x7f47417dfc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m *** SIGSEGV (@0x0) received by PID 78274 (TID 0x7f4750c7a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x7f4750853390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x7f1852885fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x7f184fb7964b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x7f184fb7c977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x7f184fb7cb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x7f184fb7ce11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x7f1852895c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m *** SIGSEGV (@0x0) received by PID 78257 (TID 0x7fc24c6d1700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x7fc24c2aa390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x7f934e4c7fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x7f934b7bb64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x7f934b7be977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x7f934b7beb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x7f934b7bee11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x7f934e4d7c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x7f934e4facfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x7f934b538009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x7f934b536c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m *** SIGSEGV (@0x0) received by PID 78247 (TID 0x7f8aae198700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x7f8aadd71390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x7f5baff89fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x7f5bad27d64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x7f5bad280977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x7f5bad280b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x7f5bad280e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x7f5baff99c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x7f5baffbccfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m *** SIGSEGV (@0x0) received by PID 78240 (TID 0x7fb560d50700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x7fb560929390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x7f86629ebfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x7f865fcdf64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x7f865fce2977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x7f865fce2b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x7f865fce2e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x7f86629fbc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x7f8662a1ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m *** SIGSEGV (@0x0) received by PID 78272 (TID 0x7f4fad0ef700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x7f4faccc8390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x7f20aee96fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x7f20ac18a64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x7f20ac18d977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x7f20ac18db53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x7f20ac18de11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x7f20aeea6c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x7f20aeec9cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m *** SIGSEGV (@0x0) received by PID 78210 (TID 0x7fc077ba7700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x7fc077780390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x7f9179896fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x7f9176b8a64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x7f9176b8d977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x7f9176b8db53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x7f9176b8de11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x7f91798a6c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x7f91798c9cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x7f9176907009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x7f9176905c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m *** SIGSEGV (@0x0) received by PID 78206 (TID 0x7f08eb83a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x7f08eb413390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m *** SIGSEGV (@0x0) received by PID 78277 (TID 0x7fd343e9e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m *** SIGSEGV (@0x0) received by PID 78214 (TID 0x7f6ad7e91700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x7f6ad7a6a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m *** SIGSEGV (@0x0) received by PID 78182 (TID 0x7f35dc2b3700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x7f35dbe8c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x7f06de082fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x7f06db37664b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m *** SIGSEGV (@0x0) received by PID 78188 (TID 0x7f486914d700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x7f4868d26390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x7f196abc9fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m *** SIGSEGV (@0x0) received by PID 78262 (TID 0x7f2c4da1a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x7f2c4d5f3390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m *** SIGSEGV (@0x0) received by PID 78286 (TID 0x7f1a696ee700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x7f1a692c7390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x7eeb6b4c1fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x7eeb687b564b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m *** SIGSEGV (@0x0) received by PID 78250 (TID 0x7fb7f2607700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x7fb7f21e0390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m *** SIGSEGV (@0x0) received by PID 78199 (TID 0x7fc59cc8e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x7fc59c867390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x7f969e9ebfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x7f969bcdf64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m *** SIGSEGV (@0x0) received by PID 78304 (TID 0x7fed61f9a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x7fed61b73390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x7fbe63c81fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x7fbe60f7564b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x7fbe60f78977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x7fbe60f78b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m *** SIGSEGV (@0x0) received by PID 78280 (TID 0x7f84bc1d4700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x7f84bbdad390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x7f55bdfb8fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x7f55bb2ac64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x7f55bb2af977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x7f55bb2afb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m *** SIGSEGV (@0x0) received by PID 78281 (TID 0x7fabb67ee700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x7fabb63c7390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x7f7cb85c2fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m *** SIGSEGV (@0x0) received by PID 78180 (TID 0x7fe58d08f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x7fe58cc68390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x7fb68ebc9fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x7fb68bebd64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m *** SIGSEGV (@0x0) received by PID 78211 (TID 0x7fb60e3b5700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x7fb60df8e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m *** SIGSEGV (@0x0) received by PID 78204 (TID 0x7f255194a700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x7f2551523390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x7ef65375afb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x7ef650a4e64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x7ef650a51977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x7ef650a51b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m *** SIGSEGV (@0x0) received by PID 78218 (TID 0x7fb77b365700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x7fb77af3e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x7f887d11dfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x7f887a41164b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x7f887a414977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x7f887a414b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m *** SIGSEGV (@0x0) received by PID 78196 (TID 0x7fa96bdf2700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x7fa96b9cb390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x7f7a6db55fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x7f7a6ae4964b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x7f7a6ae4c977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x7f7a6ae4cb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m *** SIGSEGV (@0x0) received by PID 78242 (TID 0x7f327f70c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x7f327f2e5390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x7f03814a0fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x7f037e79464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x7f037e797977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x7f037e797b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m *** SIGSEGV (@0x0) received by PID 78185 (TID 0x7f4375194700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x7f4374d6d390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x7f1476eebfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x7f14741df64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x7f14741e2977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x7f14741e2b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x7f14741e2e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m *** SIGSEGV (@0x0) received by PID 78216 (TID 0x7fe2d8426700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x7fe2d7fff390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x7fb3da082fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x7fb3d737664b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x7fb3d7379977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m *** SIGSEGV (@0x0) received by PID 78189 (TID 0x7f6180bb8700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x7f6180791390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x7f3282885fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x7f327fb7964b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x7f327fb7c977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x7f327fb7cb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m *** SIGSEGV (@0x0) received by PID 78322 (TID 0x7f250527e700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x7f2504e57390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x7ef607049fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x7ef60433d64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x7ef604340977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x7ef604340b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m *** SIGSEGV (@0x0) received by PID 78290 (TID 0x7f9487998700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x7f9487571390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x7f6589784fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x7f6586a7864b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x7f6586a7b977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x7f6586a7bb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m *** SIGSEGV (@0x0) received by PID 78178 (TID 0x7fc38be5c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x7fc38ba35390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x7f948d9c8fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x7f948acbc64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x7f948acbf977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x7f948acbfb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x7eebec330009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x7eebec32ec3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x7eebec32fed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x7eebeca725cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x7eebecb7a148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x7f661904a390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x7f371b11bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x7f371840f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x7f3718412977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x7f3718412b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x7f68cad9b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x7f39ccf73fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x7f39ca26764b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x7f39ca26a977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x7f39ca26ab53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m *** SIGSEGV (@0x0) received by PID 78256 (TID 0x7ff430848700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x7ff430421390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x7fc532555fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x7fc52f84964b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x7fc52f84c977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x7efe3d3ff390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x7ecf3f623fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x7ecf3c91764b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x7ecf3c91a977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x7ecf3c91ab53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x7ed1b6db0009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x7ed1b6daec3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x7ed1b6dafed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x7ed1b74f25cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x7f4614d67977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x7f4614d67b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x7f4614d67e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x7f4617a80c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x7f4617aa3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x7f4614ae1009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x7f4614adfc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m *** SIGSEGV (@0x0) received by PID 78254 (TID 0x7f29f765c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x7f29f7235390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x7efaf939bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x7efaf668f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x7efaf6692977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m *** SIGSEGV (@0x0) received by PID 78190 (TID 0x7f1889235700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x7f1888e0e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x7ee98b000fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x7f3a0038e390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x7f0b025adfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x7f0aff8a164b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x7f0aff8a4977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x7f0aff8a4b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x7f71bd14afb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x7f71ba43e64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x7f71ba441977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x7f71ba441b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x7f71ba441e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m *** SIGSEGV (@0x0) received by PID 78255 (TID 0x7fc0cb4a3700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x7fc0cb07c390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x7f91cd2aefb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x7f91ca5a264b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x7f91ca5a5977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m *** SIGSEGV (@0x0) received by PID 78192 (TID 0x7fb1a51c2700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x7fb1a4d9b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x7f82a6eebfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x7f82a41df64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x7f82a41e2977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m *** SIGSEGV (@0x0) received by PID 78285 (TID 0x7faf57869700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x7faf57442390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x7f80594a0fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x7f805679464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x7f8056797977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x7f8056797b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m *** SIGSEGV (@0x0) received by PID 78248 (TID 0x7f5854192700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x7f5853d6b390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x7f2955f70fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x7f295326464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x7f2953267977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x7f2953267b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x7f68d1b28fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x7f68cee1c64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x7f68cee1f977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x7f68cee1fb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x7f68cee1fe11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x7f68d1b38c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x7f68d1b5bcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x7fbf04a42c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x7fbf04a65cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x7fbf01aa3009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x7fbf01aa1c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x7fbf01aa2ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x7fbf021e55cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x7f8daaedf009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x7f8daaeddc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x7f8daaedeed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x7f8dab6215cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x7f8dab729148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x7f5b0640bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x7f5b06b4e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x7f5b06c56148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x7f5b0884d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x7f5b06b4e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x7fbe1fccfed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x7fbe204125cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x7fbe2051a148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x7fbe22111989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x7fbe204125cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x7f4cb40c1cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x7f4cb10ff009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x7f4cb10fdc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x7f4cb10feed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x7f4cb18415cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x7eea4a39eed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x7eea4aae15cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x7eea4abe9148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x7eea4c7e0989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x7eea4aae15cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x7f2a4708ded4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x7f2a477d05cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x7f2a478d8148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x7f2a494cf989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x7f2a477d05cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x7ef1bb95ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x7ef1b899c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x7ef1b899ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x7ef1b899bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x7ef1b90de5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x7ef1b91e6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x7fc61717b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x7fc617283148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x7fc618e7a989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x7fc61717b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x7fc617283148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x7fa7f1ea1cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x7fa7eeedf009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x7fa7eeeddc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x7fa7eeedeed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x7fa7ef6215cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x7fa7ef729148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x7fb2bd88bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x7fb2bdfce5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x7fb2be0d6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x7fb2bfccd989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x7fb2bdfce5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x7f8f7640bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x7f8f76b4e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x7f8f76c56148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x7f8f7884d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1603729061180/work/torch/csrc/utils/tensor_numpy.cpp:141.)\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m   tensor = torch.from_numpy(np.asarray(item))\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m *** Aborted at 1604573765 (unix time) try \"date -d @1604573765\" if you are using GNU date ***\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m *** SIGSEGV (@0x0) received by PID 78258 (TID 0x7fddc9a4f700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x7fddc9628390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x7faecb85bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x7faec8b4f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x7f22118b664b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x7f22118b9977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x7f22118b9b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x7f22118b9e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x7f22145d2c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x7f22145f5cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x7f82ad2235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x7f82ad32b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x7f82aef22989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x7f82ad2235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x7f82ad32b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x7f82b35e1bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x55f187788fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x55f1876e3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x55f18776ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x55f18776fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x55f1876e3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x55f18776ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x55f18776f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x55f1876e4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x7f1a7a5bac12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x7f1a7a5ddcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x7f1a7761b009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x7f1a77619c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x7f1a7761aed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x7f1a77d5d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x7f634c1a65cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x7f634c2ae148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x7f634dea5989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x7f634c1a65cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x7fb2ff2c85cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x7fb2ff3d0148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x7fb300fc7989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x7fb2ff2c85cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x7fbb006495cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x7fbb00751148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x7fbb02348989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x7fbb006495cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x7fbb00751148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x7fbb06a07bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x5609a19d9fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x5609a1934b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x5609a19bfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x5609a19c0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x5609a1934bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x5609a19bfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x5609a19c0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x5609a1935689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x5609a19bfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x5609a19c0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x5609a1935689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x5609a19bfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x5609a19c0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x5609a1935689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78278)\u001b[0m     @     0x5609a19bfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x7f51d4adfc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x7f51d4ae0ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x7f51d52235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x7f51d532b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x7f51d6f22989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x7f51d52235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x7f9e92ddced4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x7f9e9351f5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x7f9e93627148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x7f9e9521e989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x7f9e9351f5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x7f9e93627148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x7f9e998ddbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x562a4f515fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x562a4f470b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x562a4f4fbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x562a4f4fca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x562a4f470bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x562a4f4fbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x562a4f4fc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x562a4f471689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x562a4f4fbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x562a4f4fc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x562a4f471689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x562a4f4fbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x7f41387cb009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x7f41387c9c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x7f41387caed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x7f4138f0d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x7f4139015148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x7f413ac0c989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x7fc808a65cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x7fc805aa3009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x7fc805aa1c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x7fc805aa2ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x7fc8061e55cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x7fc8062ed148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x7fc807ee4989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x7ef0e911e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x7ef0e9226148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x7ef0eae1d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x7ef0e911e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x7ef0e9226148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x7ef0ef4dcbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x559ddc215fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x559ddc170b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x559ddc1fbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x559ddc1fca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x559ddc170bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x559ddc1fbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x559ddc1fc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x559ddc171689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x559ddc1fbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x559ddc1fc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x559ddc171689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x559ddc1fbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x559ddc1fc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x559ddc171689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78253)\u001b[0m     @     0x559ddc1fbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x7ee228dffc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x7ee228e00ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x7ee2295435cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x7ee22964b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x7ee22b242989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x7ee2295435cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x7ef64c0cecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x7ef64910c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x7ef64910ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x7ef64910bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x7ef64984e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x7ef649956148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x7ef64b54d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x7f590e1fb009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x7f590e1f9c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x7f590e1faed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x7f590e93d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x7f590ea45148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x7f591063c989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x7f6deba34009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x7f6deba32c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x7f6deba33ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x7f6dec1765cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x7f6dec27e148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x7f6dede75989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x7f878ccdbfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x7f8789fcf64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x7f8789fd2977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x7f8789fd2b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x7f8789fd2e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x7f878ccebc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x7f878cd0ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x7f8789d4c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x7f8789d4ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x7f0aa79595cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x7f0aa7a61148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x7f0aa9658989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x7f0aa79595cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x7f0aa7a61148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x7f0aadd17bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x564300978fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x5643008d3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x56430095ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x56430095fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x5643008d3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x56430095ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x56430095f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x5643008d4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x56430095ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x56430095f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x5643008d4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x56430095ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x56430095f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x5643008d4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78263)\u001b[0m     @     0x56430095ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x7f69c8ed3ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x7f69c96165cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x7f69c971e148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x7f69cb315989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x7f69c96165cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x7f69c971e148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x7f69cf9d4bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x560e651d3fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x560e6512eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x560e651b9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x560e651baa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x560e6512ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x560e651b9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x560e651ba643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x560e6512f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x560e651b9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x560e651ba643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x560e6512f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x560e651b9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x560e651ba643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x560e6512f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78282)\u001b[0m     @     0x560e651b9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x7f47417e0ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x7f4741f235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x7f474202b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x7f4743c22989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x7f4741f235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x7f474202b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x7f18528b8cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x7f184f8f6009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x7f184f8f4c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x7f184f8f5ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x7f18500385cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x7f1850140148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x7f1851d37989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x7f934b537ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x7f934bc7a5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x7f934bd82148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x7f934d979989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x7f934bc7a5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x7f934bd82148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x7f5bacffa009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x7f5bacff8c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x7f5bacff9ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x7f5bad73c5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x7f5bad844148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x7f5baf43b989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x7f865fa5c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x7f865fa5ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x7f865fa5bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x7f866019e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x7f86602a6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x7f8661e9d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x7f20abf07009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x7f20abf05c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x7f20abf06ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x7f20ac6495cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x7f20ac751148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x7f20ae348989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x7f9176906ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x7f91770495cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x7f9177151148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x7f9178d48989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x7f91770495cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x7f9177151148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x7f917d407bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x555ca7e3cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x555ca7d97b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x555ca7e22baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x555ca7e23a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x555ca7d97bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x555ca7e22baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x555ca7e23643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x555ca7d98689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x555ca7e22baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x555ca7e23643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x555ca7d98689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x555ca7e22baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x555ca7e23643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x7ed9ed4a0fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x7ed9ea79464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x7ed9ea797977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x7ed9ea797b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x7ed9ea797e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x7ed9ed4b0c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x7ed9ed4d3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x7ed9ea511009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x7fd343a77390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x7fa445c7ffb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x7fa442f7364b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x7fa442f76977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x7fa442f76b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x7fa442f76e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x7fa445c8fc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x7fa445cb2cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x7f3bd9c3cfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x7f3bd6f3064b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x7f3bd6f33977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x7f3bd6f33b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x7f3bd6f33e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x7f3bd9c4cc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x7f3bd9c6fcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x7f06db379977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x7f06db379b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x7f06db379e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x7f06de092c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x7f06de0b5cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x7f06db0f3009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x7f06db0f1c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x7f06db0f2ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m PC: @                0x0 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m *** SIGSEGV (@0x0) received by PID 78259 (TID 0x7f638077c700) from PID 0; stack trace: ***\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x7f6380355390 (unknown)\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x7f3482507fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x7f347f7fb64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x7f347f7fe977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x7f347f7feb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x7f347f7fee11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x7f3482517c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x7f1967ebd64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x7f1967ec0977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x7f1967ec0b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x7f1967ec0e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x7f196abd9c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x7f196abfccfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x7efd4f7f6fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x7efd4caea64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x7efd4caed977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x7efd4caedb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x7efd4caede11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x7efd4f806c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x7efd4f829cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x7efd4c867009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x7eeb687b8977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x7eeb687b8b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x7eeb687b8e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x7eeb6b4d1c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x7eeb6b4f4cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x7f88f43b1fb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x7f88f16a564b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x7f88f16a8977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x7f88f16a8b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x7f88f16a8e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x7f88f43c1c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x7f88f43e4cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x7f88f1422009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x7f88f1420c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x7f969bce2977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x7f969bce2b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x7f969bce2e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x7f969e9fbc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x7f969ea1ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x7f969ba5c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x7f969ba5ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x7fbe60f78e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x7fbe63c91c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x7fbe63cb4cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x7fbe60cf2009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x7fbe60cf0c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x7f55bb2afe11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x7f55bdfc8c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x7f55bdfebcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x7f55bb029009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x7f55bb027c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x7f7cb58b664b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x7f7cb58b9977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x7f7cb58b9b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x7fb68bec0977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x7fb68bec0b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x7fb68bec0e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x7f871009bfb0 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x7f870d38f64b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x7ef650a51e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x7ef65376ac12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x7ef65378dcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x7ef6507cb009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x7ef6507c9c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x7f887a414e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x7f887d12dc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x7f887d150cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x7f887a18e009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x7f887a18cc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x7f7a6ae4ce11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x7f7a6db65c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x7f7a6db88cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x7f7a6abc6009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x7f7a6abc4c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x7f037e797e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x7f03814b0c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x7f03814d3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x7f037e511009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x7f037e50fc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x7f1476efbc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x7f1476f1ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x7f1473f5c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x7f1473f5ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x7f1473f5bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x7fb3d7379b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x7fb3d7379e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x7fb3da092c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x7fb3da0b5cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x7fb3d70f3009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x7f327fb7ce11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x7f3282895c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x7f32828b8cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x7f327f8f6009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x7f327f8f4c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x7ef604340e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x7ef607059c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x7ef60707ccfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x7ef6040ba009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x7ef6040b8c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x7ef6040b9ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x7ef6047fc5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x7f6586a7be11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x7f6589794c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x7f65897b7cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x7f65867f5009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x7f65867f3c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x7f65867f4ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x7f948acbfe11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x7f948d9d8c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x7f948d9fbcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x7f948aa39009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x7f948aa37c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x7f948aa38ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x7eebee771989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x7eebeca725cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x7eebecb7a148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x7eebf2e30bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x55ec07efafd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x55ec07e55b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x55ec07ee0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x55ec07ee1a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x55ec07e55bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x55ec07ee0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x55ec07ee1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x55ec07e56689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x55ec07ee0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x55ec07ee1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x55ec07e56689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x55ec07ee0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x55ec07ee1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x55ec07e56689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78195)\u001b[0m     @     0x55ec07ee0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x7f3718412e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x7f371b12bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x7f371b14ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x7f371818c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x7f371818ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x7f371818bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x7f39ca26ae11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x7f39ccf83c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x7f39ccfa6cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x7f39c9fe4009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x7f39c9fe2c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x7f39c9fe3ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x7f39ca7265cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x7fc52f84cb53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x7fc52f84ce11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x7fc532565c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x7fc532588cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x7ecf3c91ae11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x7ecf3f633c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x7ecf3f656cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x7ecf3c694009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x7ecf3c692c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x7ecf3c693ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x7ed1b75fa148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x7ed1b91f1989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x7ed1b74f25cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x7ed1b75fa148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x7ed1bd8b0bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x5636f5e3cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x5636f5d97b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x5636f5e22baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x5636f5e23a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x5636f5d97bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x5636f5e22baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x5636f5e23643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x5636f5d98689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x5636f5e22baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x5636f5e23643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x5636f5d98689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x5636f5e22baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x5636f5e23643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x5636f5d98689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78301)\u001b[0m     @     0x5636f5e22baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x7f4614ae0ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x7f46152235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x7f461532b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x7f4616f22989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x7f46152235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x7efaf6692b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x7efaf6692e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x7efaf93abc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x7efaf93cecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x7efaf640c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x7efaf640ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x7ee9882f464b _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x7ee9882f7977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x7f0aff8a4e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x7f0b025bdc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x7f0b025e0cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x7f0aff61e009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x7f0aff61cc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x7f0aff61ded4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x7f0affd605cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x7f71bd15ac12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x7f71bd17dcfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x7f71ba1bb009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x7f71ba1b9c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x7f71ba1baed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x7f71ba8fd5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x7f91ca5a5b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x7f91ca5a5e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x7f91cd2bec12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x7f91cd2e1cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x7f82a41e2b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x7f82a41e2e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x7f82a6efbc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x7f82a6f1ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x7f82a3f5c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x7f82a3f5ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x7f8056797e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x7f80594b0c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x7f80594d3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x7f8056511009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x7f805650fc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x7f2953267e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x7f2955f80c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x7f2955fa3cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x7f2952fe1009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x7f2952fdfc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x7f2952fe0ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x7f68ceb99009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x7f68ceb97c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x7f68ceb98ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x7f68cf2db5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x7fbf022ed148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x7fbf03ee4989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x7fbf021e55cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x7fbf022ed148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x7fbf085a3bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x55a8ac400fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x55a8ac35bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x55a8ac3e6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x55a8ac3e7a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x55a8ac35bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x55a8ac3e6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x55a8ac3e7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x7f8dad320989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x7f8dab6215cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x7f8dab729148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x7f8db19dfbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x55d45b8e0fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x55d45b83bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x55d45b8c6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x55d45b8c7a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x55d45b83bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x55d45b8c6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x55d45b8c7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x55d45b83c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x55d45b8c6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x55d45b8c7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x55d45b83c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x55d45b8c6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x55d45b8c7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x55d45b83c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78316)\u001b[0m     @     0x55d45b8c6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x7f5b06c56148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x7f5b0cf0cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x5555960f1fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x55559604cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x5555960d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x5555960d8a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x55559604cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x5555960d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x5555960d8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x55559604d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x5555960d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x5555960d8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x55559604d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x5555960d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x5555960d8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x55559604d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78294)\u001b[0m     @     0x5555960d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x7fbe2051a148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x7fbe267d0bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x55a75a047fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x55a759fa2b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x55a75a02dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x55a75a02ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x55a759fa2bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x55a75a02dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x55a75a02e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x55a759fa3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x55a75a02dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x55a75a02e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x55a759fa3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x55a75a02dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x55a75a02e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x55a759fa3689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78266)\u001b[0m     @     0x55a75a02dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x7f4cb1949148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x7f4cb3540989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x7f4cb18415cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x7f4cb1949148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x7f4cb7bffbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x5573e8cbffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x5573e8c1ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x5573e8ca5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x5573e8ca6a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x5573e8c1abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x5573e8ca5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x5573e8ca6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x5573e8c1b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x5573e8ca5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x5573e8ca6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x5573e8c1b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x5573e8ca5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x5573e8ca6643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x5573e8c1b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78318)\u001b[0m     @     0x5573e8ca5baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x7eea4abe9148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x7eea50e9fbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x56277340cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x562773367b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x5627733f2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x5627733f3a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x562773367bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x5627733f2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x5627733f3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x562773368689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x5627733f2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x5627733f3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x562773368689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x5627733f2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x5627733f3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x562773368689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78302)\u001b[0m     @     0x5627733f2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x7f2a478d8148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x7f2a4db8ebd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x55c968b5dfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x55c968ab8b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x55c968b43baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x55c968b44a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x55c968ab8bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x55c968b43baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x55c968b44643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x55c968ab9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x55c968b43baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x55c968b44643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x55c968ab9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x55c968b43baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x55c968b44643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x55c968ab9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78306)\u001b[0m     @     0x55c968b43baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x7ef1baddd989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x7ef1b90de5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x7ef1b91e6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x7ef1bf49cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x55d64265ffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x55d6425bab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x55d642645baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x55d642646a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x55d6425babfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x55d642645baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x55d642646643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x55d6425bb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x55d642645baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x55d642646643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x55d6425bb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x55d642645baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x55d642646643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x55d6425bb689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78295)\u001b[0m     @     0x55d642645baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x7fc61d539bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x5639ef26afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x5639ef1c5b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x5639ef250baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x5639ef251a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x5639ef1c5bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x5639ef250baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x5639ef251643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x5639ef1c6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x5639ef250baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x5639ef251643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x5639ef1c6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x5639ef250baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x5639ef251643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x5639ef1c6689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78309)\u001b[0m     @     0x5639ef250baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x7fa7f1320989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x7fa7ef6215cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x7fa7ef729148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x7fa7f59dfbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x562c37e37fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x562c37d92b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x562c37e1dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x562c37e1ea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x562c37d92bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x562c37e1dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x562c37e1e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x562c37d93689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x562c37e1dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x562c37e1e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x562c37d93689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x562c37e1dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x562c37e1e643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x562c37d93689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78288)\u001b[0m     @     0x562c37e1dbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x7fb2be0d6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x7fb2c438cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x55847c7acfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x55847c707b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x55847c792baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x55847c793a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x55847c707bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x55847c792baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x55847c793643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x55847c708689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x55847c792baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x55847c793643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x55847c708689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x55847c792baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x55847c793643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x55847c708689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78270)\u001b[0m     @     0x55847c792baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x7f8f76b4e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x7f8f76c56148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x7f8f7cf0cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x561bc95fefd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x561bc9559b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x561bc95e4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x561bc95e5a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x561bc9559bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x561bc95e4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x561bc95e5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x561bc955a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x561bc95e4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x561bc95e5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x561bc955a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x561bc95e4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x561bc95e5643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x561bc955a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78275)\u001b[0m     @     0x561bc95e4baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x7faec8b52977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x7faec8b52b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x7faec8b52e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x7faecb86bc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x7faecb88ecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x7f2211633009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x7f2211631c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x7f2211632ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x7f2211d755cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x55f18776ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x55f18776f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x55f1876e4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x55f18776ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x55f18776f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x55f1876e4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78186)\u001b[0m     @     0x55f18776ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x7f1a77e65148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x7f1a79a5c989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x7f1a77d5d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x7f1a77e65148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x7f1a7e11bbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x55b10f015fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x55b10ef70b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x55b10effbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x55b10effca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x55b10ef70bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x55b10effbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x55b10effc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x55b10ef71689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x55b10effbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x55b10effc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x55b10ef71689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x7f634c2ae148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x7f6352564bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x55cc80ebdfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x55cc80e18b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x55cc80ea3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x55cc80ea4a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x55cc80e18bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x55cc80ea3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x55cc80ea4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x55cc80e19689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x55cc80ea3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x55cc80ea4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x55cc80e19689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x55cc80ea3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x55cc80ea4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x55cc80e19689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78265)\u001b[0m     @     0x55cc80ea3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x7fb2ff3d0148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x7fb305686bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x557ab78f9fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x557ab7854b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x557ab78dfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x557ab78e0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x557ab7854bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x557ab78dfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x557ab78e0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x557ab7855689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x557ab78dfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x557ab78e0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x557ab7855689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x557ab78dfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x557ab78e0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x557ab7855689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78236)\u001b[0m     @     0x557ab78dfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x7f51d532b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x7f51db5e1bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x55ebb1328fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x55ebb1283b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x55ebb130ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x55ebb130fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x55ebb1283bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x55ebb130ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x55ebb130f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x55ebb1284689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x55ebb130ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x55ebb130f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x55ebb1284689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x55ebb130ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x55ebb130f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x55ebb1284689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78193)\u001b[0m     @     0x55ebb130ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x562a4f4fc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x562a4f471689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78260)\u001b[0m     @     0x562a4f4fbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x7f4138f0d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x7f4139015148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x7f413f2cbbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x5640b091efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x5640b0879b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x5640b0904baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x5640b0905a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x5640b0879bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x5640b0904baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x5640b0905643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x5640b087a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x5640b0904baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x5640b0905643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x5640b087a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x5640b0904baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x5640b0905643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x5640b087a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78320)\u001b[0m     @     0x5640b0904baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x7fc8061e55cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x7fc8062ed148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x7fc80c5a3bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x5577cfe26fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x5577cfd81b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x5577cfe0cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x5577cfe0da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x5577cfd81bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x5577cfe0cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x5577cfe0d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x5577cfd82689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x5577cfe0cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x5577cfe0d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x5577cfd82689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x5577cfe0cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x5577cfe0d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x5577cfd82689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78200)\u001b[0m     @     0x5577cfe0cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x7ee22964b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x7ee22f901bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x55d12d9dcfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x55d12d937b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x55d12d9c2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x55d12d9c3a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x55d12d937bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x55d12d9c2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x55d12d9c3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x55d12d938689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x55d12d9c2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x55d12d9c3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x55d12d938689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x55d12d9c2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x55d12d9c3643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x55d12d938689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78187)\u001b[0m     @     0x55d12d9c2baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x7ef64984e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x7ef649956148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x7ef64fc0cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x55aae00b9fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x55aae0014b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x55aae009fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x55aae00a0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x55aae0014bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x55aae009fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x55aae00a0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x55aae0015689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x55aae009fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x55aae00a0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x55aae0015689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x55aae009fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x55aae00a0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x7f590e93d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x7f590ea45148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x7f5914cfbbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x55c66f224fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x55c66f17fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x55c66f20abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x55c66f20ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x55c66f17fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x55c66f20abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x55c66f20b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x55c66f180689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x55c66f20abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x55c66f20b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x55c66f180689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x55c66f20abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x55c66f20b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x55c66f180689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78197)\u001b[0m     @     0x55c66f20abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x7f6dec1765cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x7f6dec27e148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x7f6df2534bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x5641419f9fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x564141954b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x5641419dfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x5641419e0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x564141954bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x5641419dfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x5641419e0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x564141955689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x5641419dfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x5641419e0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x564141955689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x5641419dfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x5641419e0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x564141955689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78252)\u001b[0m     @     0x5641419dfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x7f8789d4bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x7f878a48e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x7f47482e1bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x556445605fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x556445560b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x5564455ebbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x5564455eca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x556445560bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x5564455ebbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x5564455ec643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x556445561689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x5564455ebbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x5564455ec643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x556445561689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x5564455ebbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x5564455ec643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x556445561689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78243)\u001b[0m     @     0x5564455ebbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x7f18500385cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x7f1850140148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x7f18563f6bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x55a4f7269fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x55a4f71c4b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x55a4f724fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x55a4f7250a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x55a4f71c4bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x55a4f724fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x55a4f7250643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x55a4f71c5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x55a4f724fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x55a4f7250643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x55a4f71c5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x55a4f724fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x55a4f7250643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x55a4f71c5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78274)\u001b[0m     @     0x55a4f724fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x7f9352038bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x558ac9a10fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x558ac996bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x558ac99f6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x558ac99f7a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x558ac996bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x558ac99f6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x558ac99f7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x558ac996c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x558ac99f6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x558ac99f7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x558ac996c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x558ac99f6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x558ac99f7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x558ac996c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78257)\u001b[0m     @     0x558ac99f6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x7f5bad73c5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x7f5bad844148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x7f5bb3afabd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x5559f62bbfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x5559f6216b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x5559f62a1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x5559f62a2a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x5559f6216bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x5559f62a1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x5559f62a2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x5559f6217689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x5559f62a1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x5559f62a2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x5559f6217689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x5559f62a1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x5559f62a2643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x5559f6217689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78247)\u001b[0m     @     0x5559f62a1baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x7f866019e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x7f86602a6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x7f866655cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x55b31a3f7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x55b31a352b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x55b31a3ddbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x55b31a3dea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x55b31a352bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x55b31a3ddbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x55b31a3de643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x55b31a353689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x55b31a3ddbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x55b31a3de643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x55b31a353689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x55b31a3ddbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x55b31a3de643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x55b31a353689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78240)\u001b[0m     @     0x55b31a3ddbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x7f20ac6495cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x7f20ac751148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x7f20b2a07bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x55dc46faffd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x55dc46f0ab08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x55dc46f95baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x55dc46f96a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x55dc46f0abfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x55dc46f95baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x55dc46f96643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x55dc46f0b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x55dc46f95baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x55dc46f96643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x55dc46f0b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x55dc46f95baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x55dc46f96643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x55dc46f0b689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78272)\u001b[0m     @     0x55dc46f95baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x555ca7d98689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78210)\u001b[0m     @     0x555ca7e22baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x7ed9ea50fc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x7ed9ea510ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x7ed9eac535cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x7fa442cf0009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x7fa442ceec3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x7fa442cefed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x7f3bd6cad009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x7f3bd6cabc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x7f3bd6caced4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x7f06db8355cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x7f06db93d148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x7f06dd534989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x7f348253acfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x7f347f578009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x7f347f576c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x7f1967c3a009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x7f1967c38c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x7f1967c39ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x7efd4c865c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x7efd4c866ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x7efd4cfa95cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x7eeb68532009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x7eeb68530c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x7eeb68531ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x7f88f1421ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x7f88f1b645cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x7f969ba5bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x7f969c19e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x7f969c2a6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x7fbe60cf1ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x7fbe614345cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x7fbe6153c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x7f7cb58b9e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x7f7cb85d2c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x7f7cb85f5cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x7f7cb5633009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x7f7cb5631c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x7f7cb5632ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x7fb68ebd9c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x7fb68ebfccfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x7fb68bc3a009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x7fb68bc38c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x7fb68bc39ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x7f870d392977 at::TensorIterator::serial_for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x7f870d392b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x7ef6507caed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x7ef650f0d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x7ef651015148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x7f887a18ded4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x7f887a8d05cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x7f887a9d8148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x7f7a6abc5ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x7f7a6b3085cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x7f7a6b410148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x7f037e510ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x7f037ec535cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x7f037ed5b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x7f0380952989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x7f147469e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x7f14747a6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x7f147639d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x7f147469e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x7fb3d70f1c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x7fb3d70f2ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x7fb3d78355cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x7fb3d793d148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x7f327f8f5ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x7f32800385cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x7f3280140148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x7f3281d37989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x7ef604904148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x7ef6064fb989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x7ef6047fc5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x7f6586f375cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x7f658703f148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x7f948b17b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x7f948b283148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x7f948ce7a989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x7f37188ce5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x7f37189d6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x7f371a5cd989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x7f39ca82e148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x7f39cc425989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x7fc52f5c6009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x7fc52f5c4c3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x7fc52f5c5ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x7ecf3cdd65cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x7ecf3cede148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x7ecf3ead5989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x7f461532b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x7f461b5e1bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x563b4b58cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x563b4b4e7b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x563b4b572baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x563b4b573a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x563b4b4e7bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x563b4b572baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x563b4b573643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x563b4b4e8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x563b4b572baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x563b4b573643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x563b4b4e8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x563b4b572baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x563b4b573643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x563b4b4e8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78202)\u001b[0m     @     0x563b4b572baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x7efaf640bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x7efaf6b4e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x7ee9882f7b53 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x7f0affe68148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x7f0b01a5f989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x7f71baa05148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x7f71bc5fc989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x7f91ca31f009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x7f91ca31dc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x7f91ca31eed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x7f82a3f5bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x7f82a469e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x7f8056510ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x7f8056c535cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x7f29537235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x7f295382b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x7f68cf3e3148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x7f68d0fda989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x55a8ac35c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x55a8ac3e6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x55a8ac3e7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x55a8ac35c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x55a8ac3e6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x55a8ac3e7643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x55a8ac35c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78179)\u001b[0m     @     0x55a8ac3e6baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x7faec88cc009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x7faec88cac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x7faec88cbed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x7faec900e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x7f2211e7d148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x7f2213a74989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x7f2211d755cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x55b10effbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x55b10effc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x55b10ef71689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78194)\u001b[0m     @     0x55b10effbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x55aae0015689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78237)\u001b[0m     @     0x55aae009fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x7f878a596148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x7f878c18d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x7f878a48e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x7ed9ead5b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x7ed9ec952989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x7ed9eac535cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x7fa4434325cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x7fa44353a148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x7fa445131989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x7f3bd73ef5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x7f3bd74f7148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x7f3bd90ee989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x7f3bd73ef5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x7f06db8355cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x7f06db93d148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x7f06e1bf3bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x564b1595cfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x564b158b7b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x564b15942baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x564b15943a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x564b158b7bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x564b15942baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x564b15943643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x564b158b8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x564b15942baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x564b15943643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x564b158b8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x564b15942baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x564b15943643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x564b158b8689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78182)\u001b[0m     @     0x564b15942baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x7f347f577ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x7f347fcba5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x7f347fdc2148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x7f196837c5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x7f1968484148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x7f196a07b989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x7f196837c5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x7efd4d0b1148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x7efd4eca8989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x7efd4cfa95cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x7eeb68c745cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x7eeb68d7c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x7eeb6a973989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x7eeb68c745cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x7f88f1c6c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x7f88f3863989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x7f88f1b645cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x7f88f1c6c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x7f969de9d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x7f969c19e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x7f969c2a6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x7f96a255cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x5557b6cfdfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x5557b6c58b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x5557b6ce3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x5557b6ce4a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x5557b6c58bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x5557b6ce3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x7fbe63133989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x7fbe614345cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x7f55bb028ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x7f7cb5d755cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x7fb68c37c5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x7fb68c484148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x7fb68e07b989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x7f870d392e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x7ef652c0c989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x7ef650f0d5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x7f887c5cf989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x7f887a8d05cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x7f7a6d007989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x7f7a6b3085cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x7f037ec535cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x7f037ed5b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x7f0385011bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x564268e2afd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x564268d85b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x564268e10baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x564268e11a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x564268d85bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x564268e10baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x564268e11643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x564268d86689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x564268e10baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x564268e11643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x564268d86689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x564268e10baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x564268e11643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x564268d86689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78242)\u001b[0m     @     0x564268e10baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x7f14747a6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x7f147aa5cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x564e5eae2fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x564e5ea3db08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x564e5eac8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x564e5eac9a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x564e5ea3dbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x564e5eac8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x564e5eac9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x564e5ea3e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x564e5eac8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x564e5eac9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x564e5ea3e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x564e5eac8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x564e5eac9643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x564e5ea3e689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78185)\u001b[0m     @     0x564e5eac8baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x7fb3d9534989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x7fb3d78355cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x7fb3d793d148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x7fb3ddbf3bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x564758455fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x5647583b0b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x56475843bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x56475843ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x5647583b0bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x56475843bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x56475843c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x5647583b1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x56475843bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x56475843c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x5647583b1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x56475843bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x56475843c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x5647583b1689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78216)\u001b[0m     @     0x56475843bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x7f32800385cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x7f3280140148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x7f32863f6bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x55e03194efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x55e0318a9b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x55e031934baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x55e031935a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x55e0318a9bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x55e031934baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x55e031935643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x55e0318aa689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x55e031934baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x55e031935643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x55e0318aa689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x55e031934baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x55e031935643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x55e0318aa689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78189)\u001b[0m     @     0x55e031934baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x7ef604904148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x7ef60abbabd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x55960dd7bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x55960dcd6b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x55960dd61baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x55960dd62a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x55960dcd6bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x55960dd61baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x55960dd62643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x55960dcd7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x55960dd61baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x55960dd62643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x55960dcd7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x55960dd61baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x55960dd62643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x55960dcd7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78322)\u001b[0m     @     0x55960dd61baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x7f6588c36989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x7f6586f375cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x7f658703f148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x7f948b17b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x7f948b283148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x7f9491539bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x5578546a5fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x557854600b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x55785468bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x55785468ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x557854600bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x55785468bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x55785468c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x557854601689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x55785468bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x55785468c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x557854601689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x55785468bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x55785468c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x557854601689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78178)\u001b[0m     @     0x55785468bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x7f37188ce5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x7f37189d6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x7f371ec8cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x5637395fdfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x563739558b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x5637395e3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x5637395e4a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x563739558bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x5637395e3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x5637395e4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x563739559689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x5637395e3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x5637395e4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x563739559689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x5637395e3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x5637395e4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x563739559689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78246)\u001b[0m     @     0x5637395e3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x7f39ca7265cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x7f39ca82e148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x7f39d0ae4bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x5572a4f30fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x5572a4e8bb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x5572a4f16baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x5572a4f17a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x5572a4e8bbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x5572a4f16baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x5572a4f17643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x5572a4e8c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x5572a4f16baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x5572a4f17643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x5572a4e8c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x5572a4f16baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x5572a4f17643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x5572a4e8c689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78268)\u001b[0m     @     0x5572a4f16baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x7fc52fd085cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x7fc52fe10148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x7fc531a07989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x7ecf3cdd65cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x7ecf3cede148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x7ecf43194bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x55da0edf1fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x55da0ed4cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x55da0edd7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x55da0edd8a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x55da0ed4cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x55da0edd7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x55da0edd8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x55da0ed4d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x55da0edd7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x55da0edd8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x55da0ed4d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x55da0edd7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x55da0edd8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x55da0ed4d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78181)\u001b[0m     @     0x55da0edd7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x7efaf6c56148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x7efaf884d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x7efaf6b4e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x7ee9882f7e11 at::TensorIterator::for_each()\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x7ee98b010c12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x7ee98b033cfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x7f0affd605cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x7f0affe68148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x7f0b0611ebd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x55a5070d7fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x55a507032b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x55a5070bdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x55a5070bea20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x55a507032bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x55a5070bdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x55a5070be643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x55a507033689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x55a5070bdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x55a5070be643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x55a507033689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x55a5070bdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x55a5070be643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x55a507033689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78245)\u001b[0m     @     0x55a5070bdbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x7f71ba8fd5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x7f71baa05148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x7f71c0cbbbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x5558e60e3fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x5558e603eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x5558e60c9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x5558e60caa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x5558e603ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x5558e60c9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x5558e60ca643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x5558e603f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x5558e60c9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x5558e60ca643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x5558e603f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x5558e60c9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x5558e60ca643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x5558e603f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78198)\u001b[0m     @     0x5558e60c9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x7f91caa615cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x7f91cab69148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x7f91cc760989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x7f82a47a6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x7f82a639d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x7f82a469e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x7f8056d5b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x7f8058952989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x7f8056c535cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x7f8056d5b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x7f805d011bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x55dbf075bfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x7f2955422989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x7f29537235cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x7f295382b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x7f2959ae1bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x55c0820b8fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x55c082013b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x55c08209ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x55c08209fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x55c082013bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x55c08209ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x55c08209f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x55c082014689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x55c08209ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x55c08209f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x55c082014689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x55c08209ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x55c08209f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x55c082014689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78248)\u001b[0m     @     0x55c08209ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x7f68cf2db5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x7f68cf3e3148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x7f68d5699bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x56469afadfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x56469af08b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x56469af93baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x56469af94a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x56469af08bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x56469af93baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x56469af94643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x56469af09689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x56469af93baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x56469af94643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x56469af09689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x56469af93baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x56469af94643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x56469af09689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78273)\u001b[0m     @     0x56469af93baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x7faec9116148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x7faecad0d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x7f2211e7d148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x7f2218133bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x560229878fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x5602297d3b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x56022985ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x56022985fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x5602297d3bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x56022985ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x56022985f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x5602297d4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x56022985ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x56022985f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x5602297d4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x56022985ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x56022985f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x5602297d4689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78209)\u001b[0m     @     0x56022985ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x7f878a596148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x7f879084cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x562793d34fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x562793c8fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x562793d1abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x562793d1ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x562793c8fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x562793d1abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x562793d1b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x562793c90689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x562793d1abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x562793d1b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x562793c90689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x562793d1abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x562793d1b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x562793c90689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78184)\u001b[0m     @     0x562793d1abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x7ed9ead5b148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x7ed9f1011bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x55db22644fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x55db2259fb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x55db2262abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x55db2262ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x55db2259fbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x55db2262abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x55db2262b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x55db225a0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x55db2262abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x55db2262b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x55db225a0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x55db2262abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x55db2262b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x55db225a0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78206)\u001b[0m     @     0x55db2262abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x7fa4434325cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x7fa44353a148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x7fa4497f0bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x561594dddfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x561594d38b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x561594dc3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x561594dc4a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x561594d38bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x561594dc3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x561594dc4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x561594d39689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x561594dc3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x561594dc4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x561594d39689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x561594dc3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x561594dc4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x561594d39689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78277)\u001b[0m     @     0x561594dc3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x7f3bd74f7148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x7f3bdd7adbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x564de17a5fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x564de1700b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x564de178bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x564de178ca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x564de1700bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x564de178bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x564de178c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x564de1701689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x564de178bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x564de178c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x564de1701689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x564de178bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x564de178c643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x564de1701689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78214)\u001b[0m     @     0x564de178bbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x7f34819b9989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x7f347fcba5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x7f347fdc2148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x7f3486078bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x55e54a9f1fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x55e54a94cb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x55e54a9d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x55e54a9d8a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x55e54a94cbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x55e54a9d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x55e54a9d8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x55e54a94d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x55e54a9d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x55e54a9d8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x55e54a94d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x55e54a9d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x55e54a9d8643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x55e54a94d689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78259)\u001b[0m     @     0x55e54a9d7baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x7f1968484148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x7f196e31ebd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x559ef41a8fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x559ef4103b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x559ef418ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x559ef418fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x559ef4103bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x559ef418ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x559ef418f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x559ef4104689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x559ef418ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x559ef418f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x559ef4104689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x559ef418ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x559ef418f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x559ef4104689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78188)\u001b[0m     @     0x559ef418ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x7efd4d0b1148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x7efd53367bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x56120eb09fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x56120ea64b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x56120eaefbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x56120eaf0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x56120ea64bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x56120eaefbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x56120eaf0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x56120ea65689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x56120eaefbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x56120eaf0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x56120ea65689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x56120eaefbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x56120eaf0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x56120ea65689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78262)\u001b[0m     @     0x56120eaefbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x7eeb68d7c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x7eeb6f032bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x563564879fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x5635647d4b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x56356485fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x563564860a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x5635647d4bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x56356485fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x563564860643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x5635647d5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x56356485fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x563564860643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x5635647d5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x56356485fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x563564860643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x5635647d5689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78286)\u001b[0m     @     0x56356485fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x7f88f7f22bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x55d570d54fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x55d570cafb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x55d570d3abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x55d570d3ba20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x55d570cafbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x55d570d3abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x55d570d3b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x55d570cb0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x55d570d3abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x55d570d3b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x55d570cb0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x55d570d3abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x55d570d3b643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x55d570cb0689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78250)\u001b[0m     @     0x55d570d3abaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x5557b6ce4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x5557b6c59689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x5557b6ce3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x5557b6ce4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x5557b6c59689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x5557b6ce3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x5557b6ce4643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x5557b6c59689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78199)\u001b[0m     @     0x5557b6ce3baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x7fbe6153c148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x7fbe677f2bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x5583c1dd9fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x5583c1d34b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x5583c1dbfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x5583c1dc0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x5583c1d34bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x5583c1dbfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x5583c1dc0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x5583c1d35689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x5583c1dbfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x5583c1dc0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x5583c1d35689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x5583c1dbfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x5583c1dc0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x5583c1d35689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78304)\u001b[0m     @     0x5583c1dbfbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x7f55bb76b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x7f55bb873148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x7f55bd46a989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x7f7cb5e7d148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x7f7cb7a74989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x7f7cb5d755cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x7f7cb5e7d148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x7f7cbc133bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x7fb68c37c5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x7fb68c484148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x7fb69231ebd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x5634c4facfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x5634c4f07b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x5634c4f92baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x5634c4f93a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x5634c4f07bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x5634c4f92baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x5634c4f93643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x5634c4f08689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x5634c4f92baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x5634c4f93643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x5634c4f08689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x5634c4f92baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x5634c4f93643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x5634c4f08689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78180)\u001b[0m     @     0x5634c4f92baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x7f87100abc12 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x7f87100cecfd at::native::(anonymous namespace)::copy_kernel()\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x7f870d10c009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x7ef651015148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x7ef6572cbbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x5629f6616fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x5629f6571b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x5629f65fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x5629f65fda20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x5629f6571bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x5629f65fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x5629f65fd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x5629f6572689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x5629f65fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x5629f65fd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x5629f6572689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x5629f65fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x5629f65fd643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x5629f6572689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78204)\u001b[0m     @     0x5629f65fcbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x7f887a9d8148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x7f8880c8ebd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x55b738286fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x55b7381e1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x55b73826cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x55b73826da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x55b7381e1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x55b73826cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x55b73826d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x55b7381e2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x55b73826cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x55b73826d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x55b7381e2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x55b73826cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x55b73826d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x55b7381e2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78218)\u001b[0m     @     0x55b73826cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x7f7a6b410148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x7f7a716c6bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x5641cc370fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x5641cc2cbb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x5641cc356baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x5641cc357a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x5641cc2cbbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x5641cc356baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x5641cc357643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x5641cc2cc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x5641cc356baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x5641cc357643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x5641cc2cc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x5641cc356baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x5641cc357643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x5641cc2cc689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78196)\u001b[0m     @     0x5641cc356baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x7f658d2f5bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x55a83b0c3fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x55a83b01eb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x55a83b0a9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x55a83b0aaa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x55a83b01ebfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x55a83b0a9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x55a83b0aa643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x55a83b01f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x55a83b0a9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x55a83b0aa643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x55a83b01f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x55a83b0a9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x55a83b0aa643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x55a83b01f689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78290)\u001b[0m     @     0x55a83b0a9baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x7fc52fd085cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x7fc52fe10148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x7fc5360c6bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x56285fc72fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x56285fbcdb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x56285fc58baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x56285fc59a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x56285fbcdbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x56285fc58baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x56285fc59643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x56285fbce689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x56285fc58baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x56285fc59643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x56285fbce689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x56285fc58baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x56285fc59643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x56285fbce689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78256)\u001b[0m     @     0x56285fc58baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x7efaf6c56148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x7efafcf0cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x5572ae3b9fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x5572ae314b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x5572ae39fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x5572ae3a0a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x5572ae314bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x5572ae39fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x5572ae3a0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x5572ae315689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x5572ae39fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x5572ae3a0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x5572ae315689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x5572ae39fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x5572ae3a0643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x5572ae315689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78254)\u001b[0m     @     0x5572ae39fbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x7ee988071009 at::native::DispatchStub<>::operator()<>()\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x7ee98806fc3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x7f91caa615cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x7f91cab69148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x7f91d0e1fbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x55d9737f5fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x55d973750b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x55d9737dbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x55d9737dca20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x55d973750bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x55d9737dbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x55d9737dc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x55d973751689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x55d9737dbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x55d9737dc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x55d973751689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x55d9737dbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x55d9737dc643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x55d973751689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78255)\u001b[0m     @     0x55d9737dbbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x7f82a47a6148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x7f82aaa5cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x55d8f213efd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x55d8f2099b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x55d8f2124baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x55d8f2125a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x55d8f2099bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x55d8f2124baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x55d8f2125643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x55d8f209a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x55d8f2124baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x55d8f2125643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x55d8f209a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x55d8f2124baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x55d8f2125643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x55d8f209a689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78192)\u001b[0m     @     0x55d8f2124baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x55dbf06b6b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x55dbf0741baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x55dbf0742a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x55dbf06b6bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x55dbf0741baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x55dbf0742643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x55dbf06b7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x55dbf0741baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x55dbf0742643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x55dbf06b7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x55dbf0741baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x55dbf0742643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x55dbf06b7689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78285)\u001b[0m     @     0x55dbf0741baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x7faec900e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x7faec9116148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x7faecf3ccbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x5644a9738fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x5644a9693b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x5644a971ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x5644a971fa20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x5644a9693bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x5644a971ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x5644a971f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x5644a9694689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x5644a971ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x5644a971f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x5644a9694689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x5644a971ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x5644a971f643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x5644a9694689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78258)\u001b[0m     @     0x5644a971ebaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x7f55bb76b5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x7f55bb873148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x7f55c1b29bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x55ec48c96fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x55ec48bf1b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x55ec48c7cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x55ec48c7da20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x55ec48bf1bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x55ec48c7cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x55ec48c7d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x55ec48bf2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x55ec48c7cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x55ec48c7d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x55ec48bf2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x55ec48c7cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x55ec48c7d643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x55ec48bf2689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78280)\u001b[0m     @     0x55ec48c7cbaf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x55d385661fd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x55d3855bcb08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x55d385647baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x55d385648a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x55d3855bcbfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x55d385647baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x55d385648643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x55d3855bd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x55d385647baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x55d385648643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x55d3855bd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x55d385647baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x55d385648643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x55d3855bd689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78281)\u001b[0m     @     0x55d385647baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x7f870d10ac3f at::native::copy_impl()\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x7ee988070ed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x7ee9887b35cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x7ee9888bb148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x7ee98a4b2989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x7ee9887b35cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x7ee9888bb148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x7ee98eb71bd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x55fb572dafd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x55fb57235b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x55fb572c0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x55fb572c1a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x55fb57235bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x55fb572c0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x55fb572c1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x55fb57236689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x55fb572c0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x55fb572c1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x55fb57236689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x55fb572c0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x55fb572c1643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x55fb57236689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78190)\u001b[0m     @     0x55fb572c0baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x7f870d10bed4 at::native::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x7f870d84e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x7f870d956148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x7f870f54d989 torch::autograd::VariableType::(anonymous namespace)::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x7f870d84e5cc c10::Dispatcher::callWithDispatchKey<>()\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x7f870d956148 at::Tensor::copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x7f8713c0cbd4 torch::autograd::THPVariable_copy_()\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x55ee72f8dfd7 method_vectorcall_VARARGS_KEYWORDS\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x55ee72ee8b08 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x55ee72f73baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x55ee72f74a20 method_vectorcall\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x55ee72ee8bfd _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x55ee72f73baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x55ee72f74643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x55ee72ee9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x55ee72f73baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x55ee72f74643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x55ee72ee9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x55ee72f73baf _PyEval_EvalCodeWithName\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x55ee72f74643 _PyFunction_Vectorcall.localalias.353\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x55ee72ee9689 _PyEval_EvalFrameDefault.cold.2792\n",
+      "\u001b[2m\u001b[36m(pid=78211)\u001b[0m     @     0x55ee72f73baf _PyEval_EvalCodeWithName\n",
+      "2020-11-05 10:56:05,941\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff252160a301000000.\n",
+      "2020-11-05 10:56:05,952\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff821ddf4301000000.\n",
+      "2020-11-05 10:56:05,954\tERROR trial_runner.py:567 -- Trial PPO_jss_env_7c602_00000: Error processing event.\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py\", line 515, in _process_trial\n",
+      "    result = self.trial_executor.fetch_result(trial)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py\", line 488, in fetch_result\n",
+      "    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1428, in get\n",
+      "    raise value.as_instanceof_cause()\n",
+      "ray.exceptions.RayTaskError: \u001b[36mray::PPO.train()\u001b[39m (pid=78267, ip=172.17.0.4)\n",
+      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
+      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 516, in train\n",
+      "    raise e\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 505, in train\n",
+      "    result = Trainable.train(self)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py\", line 336, in train\n",
+      "    result = self.step()\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py\", line 134, in step\n",
+      "    res = next(self.train_exec_impl)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 756, in __next__\n",
+      "    return next(self.built_iterator)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  [Previous line repeated 1 more time]\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 876, in apply_flatten\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 828, in add_wait_hooks\n",
+      "    item = next(it)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
+      "    for item in it:\n",
+      "  [Previous line repeated 1 more time]\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 466, in base_iterator\n",
+      "    actor_set.init_actors()\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1238, in init_actors\n",
+      "    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])\n",
+      "ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.\n",
+      "2020-11-05 10:56:05,963\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff8168b55d01000000.\n",
+      "2020-11-05 10:56:05,963\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff59d91ef301000000.\n",
+      "2020-11-05 10:56:05,963\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff50168bc201000000.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 22.4/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/555.96 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 ERROR)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_7c602_00000 | ERROR    |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "Number of errored trials: 1\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "| Trial name              |   # failures | error file                                                                        |\n",
+      "|-------------------------+--------------+-----------------------------------------------------------------------------------|\n",
+      "| PPO_jss_env_7c602_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_7c602_00000_0_2020-11-05_10-55-58/error.txt |\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3912\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:44:51,849 - wandb.wandb_agent - INFO - Running runs: ['i1pzxngg']\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204448-i1pzxngg/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204448-i1pzxngg/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 209.89899\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 209.89899\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3826\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708290\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/i1pzxngg\u001b[0m\n",
-      "2020-10-14 20:44:57,073 - wandb.wandb_agent - INFO - Cleaning up finished run: i1pzxngg\n",
-      "2020-10-14 20:44:57,383 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:44:57,384 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta59\n",
-      "2020-10-14 20:44:57,386 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta59\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/3kcee9dt\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204459-3kcee9dt\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
+      "== Status ==\n",
+      "Memory usage on this node: 22.2/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/555.96 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 ERROR)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_7c602_00000 | ERROR    |       |\n",
+      "+-------------------------+----------+-------+\n",
+      "Number of errored trials: 1\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
+      "| Trial name              |   # failures | error file                                                                        |\n",
+      "|-------------------------+--------------+-----------------------------------------------------------------------------------|\n",
+      "| PPO_jss_env_7c602_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_7c602_00000_0_2020-11-05_10-55-58/error.txt |\n",
+      "+-------------------------+--------------+-----------------------------------------------------------------------------------+\n",
       "\n",
+      "Traceback (most recent call last):\n",
+      "  File \"train.py\", line 74, in <module>\n",
+      "    train_func()\n",
+      "2020-11-05 10:56:05,987\tWARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff7ef9157101000000.\n",
+      "  File \"train.py\", line 56, in train_func\n",
+      "    analysis = tune.run(PPOTrainer, config=config, stop=stop, name=\"ppo-jss\")\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py\", line 427, in run\n",
+      "    raise TuneError(\"Trials did not complete\", incomplete_trials)\n",
+      "ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_7c602_00000])\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 3998\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:45:02,401 - wandb.wandb_agent - INFO - Running runs: ['3kcee9dt']\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 78077\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program failed with code 1.  Press ctrl-c to abort syncing.\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffbdff035801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0314ce3001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0d557f6601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.loaded (0.00MB deduped)\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff310e963d01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff120020c01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa97540c201000000.'\n",
+      "Arguments: ()\n",
+      "\u001b[2m\u001b[36m(pid=78267)\u001b[0m E1105 10:56:05.942586 78267 79388 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=3e4916e36cb3ce60252160a301000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=252160a301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=78267)\u001b[0m E1105 10:56:05.942749 78267 79388 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=c2d663ba592886f5252160a301000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=252160a301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=78267)\u001b[0m E1105 10:56:05.949717 78267 79388 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=8e79ac7e91b36714821ddf4301000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=821ddf4301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=78267)\u001b[0m E1105 10:56:05.949836 78267 79388 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=428a4b4025d91890821ddf4301000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=821ddf4301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=78267)\u001b[0m E1105 10:56:05.952484 78267 79388 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=726b8519c6d92b8e8168b55d01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=8168b55d01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=78267)\u001b[0m E1105 10:56:05.952606 78267 79388 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=e8fef079b20e071c8168b55d01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=8168b55d01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=78267)\u001b[0m E1105 10:56:05.953624 78267 79388 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=8b485cbbeaa005a559d91ef301000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=59d91ef301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=78267)\u001b[0m E1105 10:56:05.953742 78267 79388 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=ca546fa1af7e507159d91ef301000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=59d91ef301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=78267)\u001b[0m E1105 10:56:05.960412 78267 79388 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=457f03c785986c89252160a301000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=252160a301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=78267)\u001b[0m E1105 10:56:05.960517 78267 79388 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=ae55ff142808692450168bc201000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=50168bc201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}\n",
+      "\u001b[2m\u001b[36m(pid=78267)\u001b[0m E1105 10:56:05.960594 78267 79388 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=8f6a5b29913ddd5a50168bc201000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=50168bc201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}\n",
+      "\u001b[2m\u001b[36m(pid=78267)\u001b[0m E1105 10:56:05.961537 78267 79388 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=38e2d2d27b716bfb821ddf4301000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=821ddf4301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=78267)\u001b[0m E1105 10:56:05.961750 78267 79388 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=575b3faf45c7d0bd8168b55d01000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=8168b55d01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=78267)\u001b[0m E1105 10:56:05.962746 78267 79388 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=fd2b07e19848a86a59d91ef301000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=59d91ef301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "\u001b[2m\u001b[36m(pid=78267)\u001b[0m E1105 10:56:05.965483 78267 79388 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=9900bffe504bdba150168bc201000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=50168bc201000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff80993fa801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff56c9ec1501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff091d563401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff75f329e601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff43fb47bd01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffee8852f401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffb2413f7201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8cd168e101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8edbbd3001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff31c3fed901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff51728d3301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffe0497dac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0fae11b201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4e242e9f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4f9bfece01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff0f72e3901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff9d526f0201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff99d0343201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff302122d001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff4100f4fd01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa7ad1db301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffc2621d1401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff257d30801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffffefbd9801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff0aeae6a301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff90aded9101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff58dd50c101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff1e7ae67b01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff3a9488b101000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffa4f7314201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffeca600ef01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff5843697701000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff018c9dac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff2d1a71ea01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffccf343cc01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff10f667b001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffe9f6a7cf01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff452e714401000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff04668d8f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8d06128001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff34cbbac201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff358dd45601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffda2cd21f01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff5cc87e2501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff32335d4e01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff61dc472601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff244a7d1001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff9f3cc57a01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff3166f9e301000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffdd5654aa01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff19fd5b4901000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd784bf0601000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff20d842ad01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffc3083e0c01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff14da135201000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffef1af81501000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffb3cace0801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff702ed69e01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff8f9a5fc701000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd8f83c3801000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffffd989d1f001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7f7c936001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff71ca01c001000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7b2861ac01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff7a508a7a01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task ffffffffffffffff41e0fbff01000000.'\n",
+      "Arguments: ()\n",
+      "--- Logging error ---\n",
+      "Traceback (most recent call last):\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1085, in emit\n",
+      "    self.flush()\n",
+      "  File \"/root/miniconda3/lib/python3.8/logging/__init__.py\", line 1065, in flush\n",
+      "    self.stream.flush()\n",
+      "ValueError: I/O operation on closed file.\n",
+      "Call stack:\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 890, in _bootstrap\n",
+      "    self._bootstrap_inner()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n",
+      "    self.run()\n",
+      "  File \"/root/miniconda3/lib/python3.8/threading.py\", line 870, in run\n",
+      "    self._target(*self._args, **self._kwargs)\n",
+      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1072, in listen_error_messages_raylet\n",
+      "    logger.warning(error_message)\n",
+      "Message: 'A worker died or was killed while executing task fffffffffffffffff392716d01000000.'\n",
+      "Arguments: ()\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204459-3kcee9dt/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204459-3kcee9dt/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 211.84848\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 211.84848\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3517\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708300\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201105_105553-dy15f9rj/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201105_105553-dy15f9rj/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/3kcee9dt\u001b[0m\n",
-      "2020-10-14 20:45:07,613 - wandb.wandb_agent - INFO - Cleaning up finished run: 3kcee9dt\n",
-      "2020-10-14 20:45:10,058 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 20:45:10,059 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta60\n",
-      "2020-10-14 20:45:10,061 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python MTWR.py --instance_path=/JSS/JSS/env/instances/ta60\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33msweet-sweep-3\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/dy15f9rj\u001b[0m\n",
+      "2020-11-05 10:56:17,395 - wandb.wandb_agent - INFO - Cleaning up finished run: dy15f9rj\n",
+      "2020-11-05 10:56:17,733 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-05 10:56:17,733 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta43\n",
+      "2020-11-05 10:56:17,736 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python train.py --instance_path=/JSS/JSS/env/instances/ta43\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.9 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "2020-11-05 10:56:22,754 - wandb.wandb_agent - INFO - Running runs: ['iphvwd93']\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mMTWR\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/po3ygyxo\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/kkype8ue\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_204512-kkype8ue\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mcurious-sweep-4\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/pjuczesa\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/iphvwd93\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201105_105619-iphvwd93\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-05 10:56:23,349\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
+      "== Status ==\n",
+      "Memory usage on this node: 12.7/754.6 GiB\n",
+      "Using FIFO scheduling algorithm.\n",
+      "Resources requested: 80/80 CPUs, 1/1 GPUs, 0.0/555.86 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
+      "Result logdir: /root/ray_results/ppo-jss\n",
+      "Number of trials: 1 (1 RUNNING)\n",
+      "+-------------------------+----------+-------+\n",
+      "| Trial name              | status   | loc   |\n",
+      "|-------------------------+----------+-------|\n",
+      "| PPO_jss_env_8c024_00000 | RUNNING  |       |\n",
+      "+-------------------------+----------+-------+\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 4096\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
-      "2020-10-14 20:45:15,074 - wandb.wandb_agent - INFO - Running runs: ['kkype8ue']\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_204512-kkype8ue/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_204512-kkype8ue/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result 197.64646\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode 197.64646\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep 3735\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step 0\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime 1\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp 1602708313\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:       nb_episodes ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:   avg_best_result ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:      best_episode ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:     best_timestep ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:             _step ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:          _runtime ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m:        _timestamp ‚ñÅ\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mMTWR\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/kkype8ue\u001b[0m\n",
-      "2020-10-14 20:45:20,294 - wandb.wandb_agent - INFO - Cleaning up finished run: kkype8ue\n",
-      "2020-10-14 20:45:20,607 - wandb.wandb_agent - INFO - Agent received command: exit\n",
-      "2020-10-14 20:45:20,607 - wandb.wandb_agent - INFO - Received exit command. Killing runs and quitting.\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Terminating and syncing runs. Press ctrl-c to kill.\n"
+      "\n"
      ]
     }
    ],
    "source": [
-    "!wandb agent po3ygyxo"
+    "!wandb agent pjuczesa"
    ]
   },
   {
diff --git a/JSS/Random.ipynb b/JSS/Random.ipynb
index a16b1ba..30632e8 100644
--- a/JSS/Random.ipynb
+++ b/JSS/Random.ipynb
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": 7,
    "metadata": {},
    "outputs": [
     {
@@ -56,7 +56,7 @@
     "    print(\"I have detected {} CPUs here, so I'm going to create {} actors\".format(mp.cpu_count(), mp.cpu_count() - 1))\n",
     "    os.environ[\"WANDB_API_KEY\"] = '3487a01956bf67cc7882bca2a38f70c8c95f8463'\n",
     "    sweep_config = {\n",
-    "        'program': 'random_loop.py',\n",
+    "        'program': 'CP.py',\n",
     "        'method': 'grid',\n",
     "        'metric': {\n",
     "            'name': 'time_step_min',\n",
@@ -64,9 +64,9 @@
     "        },\n",
     "        'parameters': {\n",
     "            'instance_path': {\n",
-    "                'values': ['/JSS/JSS/env/instances/ta51', '/JSS/JSS/env/instances/ta52', '/JSS/JSS/env/instances/ta53', '/JSS/JSS/env/instances/ta54',\n",
-    "                           '/JSS/JSS/env/instances/ta55', '/JSS/JSS/env/instances/ta56', '/JSS/JSS/env/instances/ta57', '/JSS/JSS/env/instances/ta58',\n",
-    "                           '/JSS/JSS/env/instances/ta59', '/JSS/JSS/env/instances/ta60']\n",
+    "                'values': ['/JSS/JSS/env/instances/ta40', '/JSS/JSS/env/instances/ta41', '/JSS/JSS/env/instances/ta42', '/JSS/JSS/env/instances/ta43', '/JSS/JSS/env/instances/ta44',\n",
+    "                           '/JSS/JSS/env/instances/ta45', '/JSS/JSS/env/instances/ta46', '/JSS/JSS/env/instances/ta47', '/JSS/JSS/env/instances/ta48',\n",
+    "                           '/JSS/JSS/env/instances/ta49', '/JSS/JSS/env/instances/ta50']\n",
     "            }\n",
     "        }\n",
     "    }"
@@ -74,25 +74,25 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 8,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Create sweep with ID: lh9x5rb9\n",
-      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/lh9x5rb9\n"
+      "Create sweep with ID: wnc8ihq1\n",
+      "Sweep URL: https://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\n"
      ]
     }
    ],
    "source": [
-    "sweep_id = wandb.sweep(sweep_config, project=\"RLLIB_SWEEP_2\")"
+    "sweep_id = wandb.sweep(sweep_config, project=\"RLLIB_SWEEP_3\")"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 9,
    "metadata": {},
    "outputs": [
     {
@@ -100,1977 +100,422 @@
      "output_type": "stream",
      "text": [
       "\u001b[34m\u001b[1mwandb\u001b[0m: Starting wandb agent üïµÔ∏è\n",
-      "2020-10-14 18:51:58,915 - wandb.wandb_agent - INFO - Running runs: []\n",
-      "2020-10-14 18:51:59,229 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 18:51:59,229 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta51\n",
-      "2020-10-14 18:51:59,231 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python random_loop.py --instance_path=/JSS/JSS/env/instances/ta51\n",
+      "2020-11-04 21:27:40,508 - wandb.wandb_agent - INFO - Running runs: []\n",
+      "2020-11-04 21:27:40,953 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 21:27:40,953 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta40\n",
+      "2020-11-04 21:27:40,955 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta40\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
-      "2020-10-14 18:52:04,245 - wandb.wandb_agent - INFO - Running runs: ['bgm3l5ts']\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33meffortless-sweep-1\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/lh9x5rb9\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/bgm3l5ts\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_185201-bgm3l5ts\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/h3u61381\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_212741-h3u61381\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "2020-10-14 18:52:04,834\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
-      "== Status ==\n",
-      "Memory usage on this node: 11.7/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+-------+\n",
-      "| Trial name                       | status   | loc   |\n",
-      "|----------------------------------+----------+-------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | RUNNING  |       |\n",
-      "+----------------------------------+----------+-------+\n",
+      "2020-11-04 21:27:45,971 - wandb.wandb_agent - INFO - Running runs: ['h3u61381']\n",
       "\n",
-      "\n",
-      "\u001b[2m\u001b[36m(pid=25130)\u001b[0m 2020-10-14 18:52:07,658\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
-      "Result for RandomMasked_jss_env_5afa5_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-52-11\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 1d2b23a635304ca6bea1e0ffde98d7ee\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 400\n",
-      "  iterations_since_restore: 1\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 72.94000000000001\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.3600000000000003\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 25130\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 3.247757911682129\n",
-      "  time_this_iter_s: 3.247757911682129\n",
-      "  time_total_s: 3.247757911682129\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701531\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 400\n",
-      "  training_iteration: 1\n",
-      "  trial_id: 5afa5_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 21.8/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |   ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | RUNNING  | 172.17.0.4:25130 |      1 |          3.24776 |  400 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_5afa5_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-52-16\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 1d2b23a635304ca6bea1e0ffde98d7ee\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 12000\n",
-      "  iterations_since_restore: 30\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 5.3\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.9\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 25130\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 8.01456618309021\n",
-      "  time_this_iter_s: 0.16585516929626465\n",
-      "  time_total_s: 8.01456618309021\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701536\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 12000\n",
-      "  training_iteration: 30\n",
-      "  trial_id: 5afa5_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 21.9/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | RUNNING  | 172.17.0.4:25130 |     30 |          8.01457 | 12000 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_5afa5_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-52-21\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 1d2b23a635304ca6bea1e0ffde98d7ee\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 23600\n",
-      "  iterations_since_restore: 59\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 25130\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 12.782260656356812\n",
-      "  time_this_iter_s: 0.1621565818786621\n",
-      "  time_total_s: 12.782260656356812\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701541\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 23600\n",
-      "  training_iteration: 59\n",
-      "  trial_id: 5afa5_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | RUNNING  | 172.17.0.4:25130 |     59 |          12.7823 | 23600 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | RUNNING  | 172.17.0.4:25130 |     87 |          17.4055 | 34800 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_5afa5_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-52-26\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 1d2b23a635304ca6bea1e0ffde98d7ee\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 35200\n",
-      "  iterations_since_restore: 88\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 25130\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 17.567854166030884\n",
-      "  time_this_iter_s: 0.16233396530151367\n",
-      "  time_total_s: 17.567854166030884\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701546\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 35200\n",
-      "  training_iteration: 88\n",
-      "  trial_id: 5afa5_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | RUNNING  | 172.17.0.4:25130 |    116 |          22.0842 | 46400 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_5afa5_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-52-31\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 1d2b23a635304ca6bea1e0ffde98d7ee\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 46800\n",
-      "  iterations_since_restore: 117\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 25130\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 22.268078804016113\n",
-      "  time_this_iter_s: 0.18388056755065918\n",
-      "  time_total_s: 22.268078804016113\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701551\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 46800\n",
-      "  training_iteration: 117\n",
-      "  trial_id: 5afa5_00000\n",
-      "  \n",
-      "2020-10-14 18:52:32,975\tERROR worker.py:1018 -- Possible unhandled error from worker: \u001b[36mray::RolloutWorker.par_iter_next_batch()\u001b[39m (pid=25093, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1158, in par_iter_next_batch\n",
-      "    batch.append(self.par_iter_next())\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1152, in par_iter_next\n",
-      "    return next(self.local_it)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 288, in gen_rollouts\n",
-      "    yield self.sample()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 579, in sample\n",
-      "    batches = [self.input_reader.next()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 93, in next\n",
-      "    batches = [self.get_data()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 209, in get_data\n",
-      "    item = next(self.rollout_provider)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 585, in _env_runner\n",
-      "    active_envs, to_eval, outputs = _process_observations(\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 797, in _process_observations\n",
-      "    prep_obs: EnvObsType = _get_or_raise(preprocessors,\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 233, in transform\n",
-      "    self.check_shape(observation)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 61, in check_shape\n",
-      "    raise ValueError(\n",
-      "ValueError: ('Observation outside expected value range', Dict(action_mask:Box(0.0, 1.0, (51,), float32), real_obs:Box(0.0, 1.0, (350,), float64)), {'real_obs': array([0.00000000e+00, 0.00000000e+00, 4.00000000e-01, 2.46153846e-01,\n",
-      "       6.26262626e-01, 5.02564103e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 4.77948718e-01, 4.44444444e-01,\n",
-      "       8.88205128e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.66666667e-01, 6.85128205e-01, 3.73737374e-01, 8.00000000e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.07692308e-01, 3.43434343e-01, 9.21025641e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 7.27272727e-01, 6.00000000e-01, 4.10256410e-01,\n",
-      "       1.21212121e-01, 7.73333333e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.91919192e-01, 7.33333333e-01, 3.82564103e-01, 2.22222222e-01,\n",
-      "       3.95897436e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 5.54871795e-01, 1.31313131e-01, 9.23076923e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 2.72727273e-01, 8.00000000e-01,\n",
-      "       6.23589744e-01, 3.23232323e-01, 6.56410256e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 2.94358974e-01,\n",
-      "       2.02020202e-01, 2.35897436e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 9.33333333e-01, 7.12820513e-01, 4.34343434e-01,\n",
-      "       2.25641026e-04, 0.00000000e+00, 0.00000000e+00, 1.31313131e-01,\n",
-      "       4.00000000e-01, 2.28717949e-01, 7.57575758e-01, 5.10769231e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       4.41025641e-01, 4.54545455e-01, 1.76410256e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.23232323e-01, 6.00000000e-01, 6.53333333e-01,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.00000000e-01, 1.98974359e-01, 2.02020202e-02,\n",
-      "       3.54871795e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 3.25128205e-01, 1.91919192e-01, 3.85641026e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       4.20512821e-01, 3.23232323e-01, 2.42051282e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.78787879e-01, 6.00000000e-01, 5.18974359e-01,\n",
-      "       7.07070707e-02, 1.12820513e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 6.83076923e-01, 2.72727273e-01,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 2.92307692e-01, 2.92929293e-01, 2.56410256e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.00000000e-01,\n",
-      "       5.85641026e-01, 2.32323232e-01, 2.44102564e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 7.33333333e-01, 6.56410256e-01,\n",
-      "       4.24242424e-01, 3.22051282e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 4.48205128e-01, 8.68686869e-01,\n",
-      "       1.76410256e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 5.00512821e-01, 4.94949495e-01, 4.51282051e-03,\n",
-      "       0.00000000e+00, 1.00000000e+00, 0.00000000e+00, 4.00000000e-01,\n",
-      "       3.61025641e-01, 8.08080808e-02, 6.17435897e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.66666667e-01, 5.02564103e-01,\n",
-      "       8.08080808e-01, 1.94871795e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.33333333e-01, 3.64102564e-01, 1.21212121e-01,\n",
-      "       7.97948718e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.33333333e-01, 9.74358974e-02, 3.03030303e-01, 8.41025641e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.41538462e-01, 4.04040404e-01, 3.24102564e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.11111111e-01, 4.66666667e-01, 3.84615385e-01,\n",
-      "       8.18181818e-01, 1.66153846e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,\n",
-      "       2.17435897e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.00000000e+00, 7.37435897e-01, 1.00000000e+00, 1.14256410e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.66666667e-01,\n",
-      "       8.32820513e-01, 3.43434343e-01, 6.56410256e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.04040404e-02, 4.66666667e-01, 4.81025641e-01,\n",
-      "       5.35353535e-01, 1.08717949e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.33333333e-01, 1.91794872e-01, 2.02020202e-02,\n",
-      "       4.10256410e-05, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 3.89743590e-01, 5.85858586e-01, 1.49743590e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       6.70769231e-01, 2.92929293e-01, 3.28205128e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 9.33333333e-01, 7.14871795e-01,\n",
-      "       6.66666667e-01, 5.10769231e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.02020202e-02, 4.66666667e-01, 4.77948718e-01, 6.66666667e-01,\n",
-      "       4.18461538e-03, 0.00000000e+00, 0.00000000e+00, 2.52525253e-01,\n",
-      "       5.33333333e-01, 5.51794872e-01, 3.83838384e-01, 1.70256410e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       3.20000000e-01, 7.27272727e-01, 1.23076923e-02, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.43434343e-01, 6.66666667e-01, 5.40512821e-01,\n",
-      "       2.72727273e-01, 3.01538462e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 5.33333333e-01, 4.94949495e-01,\n",
-      "       7.79487179e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.66666667e-01, 4.68717949e-01, 7.57575758e-01, 3.50769231e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 9.33333333e-01,\n",
-      "       8.01025641e-01, 1.41414141e-01, 1.08717949e-03, 0.00000000e+00,\n",
-      "       1.00000000e+00, 0.00000000e+00, 8.66666667e-01, 7.94871795e-01,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.66666667e-01, 3.54871795e-01, 5.05050505e-02,\n",
-      "       9.02564103e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 6.22564103e-01, 4.54545455e-01, 8.82051282e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.47692308e-01, 4.04040404e-01, 3.07692308e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.66666667e-01, 5.30256410e-01,\n",
-      "       7.07070707e-01, 2.64615385e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.66666667e-01, 2.77948718e-01, 3.93939394e-01,\n",
-      "       1.64102564e-03, 0.00000000e+00]), 'action_mask': array([False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False,  True, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False,  True,\n",
-      "       False, False, False, False, False, False])})\n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | RUNNING  | 172.17.0.4:25130 |    145 |           26.762 | 58000 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_5afa5_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-52-37\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 1d2b23a635304ca6bea1e0ffde98d7ee\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 58800\n",
-      "  iterations_since_restore: 147\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 25130\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 27.082104921340942\n",
-      "  time_this_iter_s: 0.1581122875213623\n",
-      "  time_total_s: 27.082104921340942\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701557\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 58800\n",
-      "  training_iteration: 147\n",
-      "  trial_id: 5afa5_00000\n",
-      "  \n",
-      "2020-10-14 18:52:41,582\tERROR trial_runner.py:567 -- Trial RandomMasked_jss_env_5afa5_00000: Error processing event.\n",
-      "Traceback (most recent call last):\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py\", line 515, in _process_trial\n",
-      "    result = self.trial_executor.fetch_result(trial)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py\", line 488, in fetch_result\n",
-      "    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1428, in get\n",
-      "    raise value.as_instanceof_cause()\n",
-      "ray.exceptions.RayTaskError(ValueError): \u001b[36mray::RandomMasked.train()\u001b[39m (pid=25130, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 516, in train\n",
-      "    raise e\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 505, in train\n",
-      "    result = Trainable.train(self)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py\", line 336, in train\n",
-      "    result = self.step()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py\", line 134, in step\n",
-      "    res = next(self.train_exec_impl)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 756, in __next__\n",
-      "    return next(self.built_iterator)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 551, in base_iterator\n",
-      "    batch = ray.get(obj_ref)\n",
-      "ray.exceptions.RayTaskError(ValueError): \u001b[36mray::RolloutWorker.par_iter_next_batch()\u001b[39m (pid=25093, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1158, in par_iter_next_batch\n",
-      "    batch.append(self.par_iter_next())\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1152, in par_iter_next\n",
-      "    return next(self.local_it)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 288, in gen_rollouts\n",
-      "    yield self.sample()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 579, in sample\n",
-      "    batches = [self.input_reader.next()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 93, in next\n",
-      "    batches = [self.get_data()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 209, in get_data\n",
-      "    item = next(self.rollout_provider)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 585, in _env_runner\n",
-      "    active_envs, to_eval, outputs = _process_observations(\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 797, in _process_observations\n",
-      "    prep_obs: EnvObsType = _get_or_raise(preprocessors,\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 233, in transform\n",
-      "    self.check_shape(observation)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 61, in check_shape\n",
-      "    raise ValueError(\n",
-      "ValueError: ('Observation outside expected value range', Dict(action_mask:Box(0.0, 1.0, (51,), float32), real_obs:Box(0.0, 1.0, (350,), float64)), {'real_obs': array([0.00000000e+00, 0.00000000e+00, 4.00000000e-01, 2.46153846e-01,\n",
-      "       6.26262626e-01, 5.02564103e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 4.77948718e-01, 4.44444444e-01,\n",
-      "       8.88205128e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.66666667e-01, 6.85128205e-01, 3.73737374e-01, 8.00000000e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.07692308e-01, 3.43434343e-01, 9.21025641e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 7.27272727e-01, 6.00000000e-01, 4.10256410e-01,\n",
-      "       1.21212121e-01, 7.73333333e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.91919192e-01, 7.33333333e-01, 3.82564103e-01, 2.22222222e-01,\n",
-      "       3.95897436e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 5.54871795e-01, 1.31313131e-01, 9.23076923e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 2.72727273e-01, 8.00000000e-01,\n",
-      "       6.23589744e-01, 3.23232323e-01, 6.56410256e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 2.94358974e-01,\n",
-      "       2.02020202e-01, 2.35897436e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 9.33333333e-01, 7.12820513e-01, 4.34343434e-01,\n",
-      "       2.25641026e-04, 0.00000000e+00, 0.00000000e+00, 1.31313131e-01,\n",
-      "       4.00000000e-01, 2.28717949e-01, 7.57575758e-01, 5.10769231e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       4.41025641e-01, 4.54545455e-01, 1.76410256e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.23232323e-01, 6.00000000e-01, 6.53333333e-01,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.00000000e-01, 1.98974359e-01, 2.02020202e-02,\n",
-      "       3.54871795e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 3.25128205e-01, 1.91919192e-01, 3.85641026e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       4.20512821e-01, 3.23232323e-01, 2.42051282e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.78787879e-01, 6.00000000e-01, 5.18974359e-01,\n",
-      "       7.07070707e-02, 1.12820513e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 6.83076923e-01, 2.72727273e-01,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 2.92307692e-01, 2.92929293e-01, 2.56410256e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.00000000e-01,\n",
-      "       5.85641026e-01, 2.32323232e-01, 2.44102564e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 7.33333333e-01, 6.56410256e-01,\n",
-      "       4.24242424e-01, 3.22051282e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 4.48205128e-01, 8.68686869e-01,\n",
-      "       1.76410256e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 5.00512821e-01, 4.94949495e-01, 4.51282051e-03,\n",
-      "       0.00000000e+00, 1.00000000e+00, 0.00000000e+00, 4.00000000e-01,\n",
-      "       3.61025641e-01, 8.08080808e-02, 6.17435897e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.66666667e-01, 5.02564103e-01,\n",
-      "       8.08080808e-01, 1.94871795e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.33333333e-01, 3.64102564e-01, 1.21212121e-01,\n",
-      "       7.97948718e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.33333333e-01, 9.74358974e-02, 3.03030303e-01, 8.41025641e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.41538462e-01, 4.04040404e-01, 3.24102564e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.11111111e-01, 4.66666667e-01, 3.84615385e-01,\n",
-      "       8.18181818e-01, 1.66153846e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,\n",
-      "       2.17435897e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.00000000e+00, 7.37435897e-01, 1.00000000e+00, 1.14256410e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.66666667e-01,\n",
-      "       8.32820513e-01, 3.43434343e-01, 6.56410256e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.04040404e-02, 4.66666667e-01, 4.81025641e-01,\n",
-      "       5.35353535e-01, 1.08717949e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.33333333e-01, 1.91794872e-01, 2.02020202e-02,\n",
-      "       4.10256410e-05, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 3.89743590e-01, 5.85858586e-01, 1.49743590e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       6.70769231e-01, 2.92929293e-01, 3.28205128e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 9.33333333e-01, 7.14871795e-01,\n",
-      "       6.66666667e-01, 5.10769231e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.02020202e-02, 4.66666667e-01, 4.77948718e-01, 6.66666667e-01,\n",
-      "       4.18461538e-03, 0.00000000e+00, 0.00000000e+00, 2.52525253e-01,\n",
-      "       5.33333333e-01, 5.51794872e-01, 3.83838384e-01, 1.70256410e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       3.20000000e-01, 7.27272727e-01, 1.23076923e-02, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.43434343e-01, 6.66666667e-01, 5.40512821e-01,\n",
-      "       2.72727273e-01, 3.01538462e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 5.33333333e-01, 4.94949495e-01,\n",
-      "       7.79487179e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.66666667e-01, 4.68717949e-01, 7.57575758e-01, 3.50769231e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 9.33333333e-01,\n",
-      "       8.01025641e-01, 1.41414141e-01, 1.08717949e-03, 0.00000000e+00,\n",
-      "       1.00000000e+00, 0.00000000e+00, 8.66666667e-01, 7.94871795e-01,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.66666667e-01, 3.54871795e-01, 5.05050505e-02,\n",
-      "       9.02564103e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 6.22564103e-01, 4.54545455e-01, 8.82051282e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.47692308e-01, 4.04040404e-01, 3.07692308e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.66666667e-01, 5.30256410e-01,\n",
-      "       7.07070707e-01, 2.64615385e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.66666667e-01, 2.77948718e-01, 3.93939394e-01,\n",
-      "       1.64102564e-03, 0.00000000e+00]), 'action_mask': array([False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False,  True, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False,  True,\n",
-      "       False, False, False, False, False, False])})\n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/557.13 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 ERROR)\n",
-      "+----------------------------------+----------+-------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc   |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+-------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 | ERROR    |       |    172 |          31.1614 | 68800 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+-------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "Number of errored trials: 1\n",
-      "+----------------------------------+--------------+--------------------------------------------------------------------------------------------+\n",
-      "| Trial name                       |   # failures | error file                                                                                 |\n",
-      "|----------------------------------+--------------+--------------------------------------------------------------------------------------------|\n",
-      "| RandomMasked_jss_env_5afa5_00000 |            1 | /root/ray_results/ppo-jss/RandomMasked_jss_env_5afa5_00000_0_2020-10-14_18-52-06/error.txt |\n",
-      "+----------------------------------+--------------+--------------------------------------------------------------------------------------------+\n",
-      "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"random_loop.py\", line 73, in <module>\n",
-      "    rand_func()\n",
-      "  File \"random_loop.py\", line 55, in rand_func\n",
-      "    analysis = tune.run(RandomMaskedTrainer, config=config, stop=stop, name=\"ppo-jss\")\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py\", line 427, in run\n",
-      "    raise TuneError(\"Trials did not complete\", incomplete_trials)\n",
-      "ray.tune.error.TuneError: ('Trials did not complete', [RandomMasked_jss_env_5afa5_00000])\n",
-      "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 24896\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program failed with code 1.  Press ctrl-c to abort syncing.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 32790\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_185201-bgm3l5ts/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_185201-bgm3l5ts/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_212741-h3u61381/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_212741-h3u61381/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 1775.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604525862\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33meffortless-sweep-1\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/bgm3l5ts\u001b[0m\n",
-      "2020-10-14 18:52:51,177 - wandb.wandb_agent - INFO - Cleaning up finished run: bgm3l5ts\n",
-      "2020-10-14 18:52:51,692 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 18:52:51,693 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta52\n",
-      "2020-10-14 18:52:51,700 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python random_loop.py --instance_path=/JSS/JSS/env/instances/ta52\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/h3u61381\u001b[0m\n",
+      "2020-11-04 21:37:51,376 - wandb.wandb_agent - INFO - Cleaning up finished run: h3u61381\n",
+      "2020-11-04 21:37:51,696 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 21:37:51,696 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta41\n",
+      "2020-11-04 21:37:51,698 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta41\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33msuper-sweep-2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/lh9x5rb9\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/ezglujb0\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_185253-ezglujb0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/c18o79jq\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_213752-c18o79jq\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "2020-10-14 18:52:56,719 - wandb.wandb_agent - INFO - Running runs: ['ezglujb0']\n",
-      "2020-10-14 18:52:57,270\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
-      "== Status ==\n",
-      "Memory usage on this node: 11.7/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+-------+\n",
-      "| Trial name                       | status   | loc   |\n",
-      "|----------------------------------+----------+-------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | RUNNING  |       |\n",
-      "+----------------------------------+----------+-------+\n",
-      "\n",
-      "\n",
-      "\u001b[2m\u001b[36m(pid=26894)\u001b[0m 2020-10-14 18:53:00,066\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
-      "Result for RandomMasked_jss_env_7a318_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-53-03\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: a0d7abda875641ee8277cfe989ce99c0\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 400\n",
-      "  iterations_since_restore: 1\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 71.17999999999999\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.3600000000000003\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 26894\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 3.277367115020752\n",
-      "  time_this_iter_s: 3.277367115020752\n",
-      "  time_total_s: 3.277367115020752\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701583\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 400\n",
-      "  training_iteration: 1\n",
-      "  trial_id: 7a318_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 21.8/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |   ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | RUNNING  | 172.17.0.4:26894 |      1 |          3.27737 |  400 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_7a318_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-53-08\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: a0d7abda875641ee8277cfe989ce99c0\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 11600\n",
-      "  iterations_since_restore: 29\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 5.1\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.9\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 26894\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 7.904330253601074\n",
-      "  time_this_iter_s: 0.16050171852111816\n",
-      "  time_total_s: 7.904330253601074\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701588\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 11600\n",
-      "  training_iteration: 29\n",
-      "  trial_id: 7a318_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 21.9/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | RUNNING  | 172.17.0.4:26894 |     29 |          7.90433 | 11600 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
+      "2020-11-04 21:37:56,716 - wandb.wandb_agent - INFO - Running runs: ['c18o79jq']\n",
       "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 33712\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_213752-c18o79jq/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_213752-c18o79jq/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2137.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604526473\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/c18o79jq\u001b[0m\n",
+      "2020-11-04 21:48:02,339 - wandb.wandb_agent - INFO - Cleaning up finished run: c18o79jq\n",
+      "2020-11-04 21:48:02,711 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 21:48:02,712 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta42\n",
+      "2020-11-04 21:48:02,713 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta42\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/sb79yg44\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_214803-sb79yg44\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "Result for RandomMasked_jss_env_7a318_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-53-13\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: a0d7abda875641ee8277cfe989ce99c0\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 22400\n",
-      "  iterations_since_restore: 56\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 26894\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 12.449386596679688\n",
-      "  time_this_iter_s: 0.16517019271850586\n",
-      "  time_total_s: 12.449386596679688\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701593\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 22400\n",
-      "  training_iteration: 56\n",
-      "  trial_id: 7a318_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | RUNNING  | 172.17.0.4:26894 |     56 |          12.4494 | 22400 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_7a318_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-53-18\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: a0d7abda875641ee8277cfe989ce99c0\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 33600\n",
-      "  iterations_since_restore: 84\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 26894\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 17.05783486366272\n",
-      "  time_this_iter_s: 0.1567375659942627\n",
-      "  time_total_s: 17.05783486366272\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701598\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 33600\n",
-      "  training_iteration: 84\n",
-      "  trial_id: 7a318_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | RUNNING  | 172.17.0.4:26894 |     84 |          17.0578 | 33600 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "Result for RandomMasked_jss_env_7a318_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-53-24\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: a0d7abda875641ee8277cfe989ce99c0\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 45200\n",
-      "  iterations_since_restore: 113\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 4.5\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.9\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 26894\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 21.754982709884644\n",
-      "  time_this_iter_s: 0.16276907920837402\n",
-      "  time_total_s: 21.754982709884644\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701604\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 45200\n",
-      "  training_iteration: 113\n",
-      "  trial_id: 7a318_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | RUNNING  | 172.17.0.4:26894 |    113 |           21.755 | 45200 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
-      "\n",
-      "2020-10-14 18:53:25,585\tERROR worker.py:1018 -- Possible unhandled error from worker: \u001b[36mray::RolloutWorker.par_iter_next_batch()\u001b[39m (pid=26854, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1158, in par_iter_next_batch\n",
-      "    batch.append(self.par_iter_next())\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1152, in par_iter_next\n",
-      "    return next(self.local_it)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 288, in gen_rollouts\n",
-      "    yield self.sample()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 579, in sample\n",
-      "    batches = [self.input_reader.next()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 93, in next\n",
-      "    batches = [self.get_data()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 209, in get_data\n",
-      "    item = next(self.rollout_provider)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 585, in _env_runner\n",
-      "    active_envs, to_eval, outputs = _process_observations(\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 797, in _process_observations\n",
-      "    prep_obs: EnvObsType = _get_or_raise(preprocessors,\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 233, in transform\n",
-      "    self.check_shape(observation)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 61, in check_shape\n",
-      "    raise ValueError(\n",
-      "ValueError: ('Observation outside expected value range', Dict(action_mask:Box(0.0, 1.0, (51,), float32), real_obs:Box(0.0, 1.0, (350,), float64)), {'real_obs': array([0.00000000e+00, 0.00000000e+00, 5.33333333e-01, 3.67179487e-01,\n",
-      "       5.05050505e-01, 6.72820513e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.07070707e-02, 4.00000000e-01, 3.89743590e-01, 7.47474747e-01,\n",
-      "       1.20205128e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 7.47692308e-01, 3.43434343e-01, 5.82564103e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.15151515e-01, 5.33333333e-01,\n",
-      "       5.48717949e-01, 6.76767677e-01, 1.37435897e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 7.33333333e-01, 5.56923077e-01,\n",
-      "       1.51515152e-01, 1.12820513e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 2.81025641e-01, 2.42424242e-01,\n",
-      "       1.47692308e-03, 0.00000000e+00, 0.00000000e+00, 7.07070707e-02,\n",
-      "       6.66666667e-01, 5.47692308e-01, 0.00000000e+00, 6.66666667e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 2.66666667e-01,\n",
-      "       1.79487179e-01, 7.17171717e-01, 1.95076923e-02, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 3.72307692e-01,\n",
-      "       1.71717172e-01, 1.12205128e-02, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 9.33333333e-01, 7.12820513e-01, 4.04040404e-02,\n",
-      "       2.58461538e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 3.48717949e-01, 4.34343434e-01, 1.14256410e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       4.75897436e-01, 1.01010101e-01, 5.90769231e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.66666667e-01, 7.82564103e-01,\n",
-      "       6.86868687e-01, 1.25128205e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.06060606e-02, 6.66666667e-01, 5.57948718e-01, 2.62626263e-01,\n",
-      "       5.33333333e-04, 0.00000000e+00, 1.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 4.02051282e-01, 9.69696970e-01, 5.53846154e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       5.22051282e-01, 1.51515152e-01, 1.84615385e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.08080808e-02, 8.00000000e-01, 7.04615385e-01,\n",
-      "       5.65656566e-01, 1.14871795e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 9.33333333e-01, 7.01538462e-01, 6.66666667e-01,\n",
-      "       6.25641026e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 2.92307692e-01, 6.36363636e-01, 1.12410256e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       5.40512821e-01, 1.51515152e-01, 1.43589744e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 7.33333333e-01, 6.56410256e-01,\n",
-      "       3.33333333e-01, 5.57948718e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.86868687e-01, 7.33333333e-01, 5.47692308e-01, 8.58585859e-01,\n",
-      "       1.74358974e-03, 0.00000000e+00, 0.00000000e+00, 2.02020202e-01,\n",
-      "       5.33333333e-01, 4.80000000e-01, 3.63636364e-01, 7.38461538e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       4.86153846e-01, 3.83838384e-01, 6.35897436e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 4.00000000e-01,\n",
-      "       6.26262626e-01, 3.69230769e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 8.72820513e-01, 1.00000000e+00,\n",
-      "       8.20512821e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 4.98461538e-01, 6.76767677e-01, 2.07179487e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 1.51515152e-01, 4.00000000e-01,\n",
-      "       4.74871795e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.13131313e-01, 8.00000000e-01, 6.59487179e-01,\n",
-      "       8.58585859e-01, 1.74358974e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,\n",
-      "       3.07692308e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.66666667e-01, 1.58974359e-01, 3.03030303e-02, 5.21025641e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.00000000e-01,\n",
-      "       3.84615385e-01, 5.65656566e-01, 1.25538462e-02, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 1.00000000e+00, 7.68205128e-01,\n",
-      "       1.00000000e+00, 3.36410256e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 6.26666667e-01, 1.00000000e+00,\n",
-      "       1.24923077e-02, 0.00000000e+00, 0.00000000e+00, 6.06060606e-02,\n",
-      "       5.33333333e-01, 4.31794872e-01, 4.54545455e-01, 9.23076923e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00,\n",
-      "       9.70256410e-01, 1.00000000e+00, 9.84615385e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 3.58974359e-01,\n",
-      "       1.01010101e-02, 8.41025641e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.44444444e-01, 9.33333333e-01, 8.36923077e-01, 4.04040404e-02,\n",
-      "       1.15487179e-02, 0.00000000e+00, 0.00000000e+00, 6.96969697e-01,\n",
-      "       6.00000000e-01, 5.84615385e-01, 2.92929293e-01, 1.07282051e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       4.65641026e-01, 0.00000000e+00, 3.38461538e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 9.33333333e-01, 7.02564103e-01,\n",
-      "       7.07070707e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.66666667e-01, 6.17435897e-01, 1.51515152e-01,\n",
-      "       3.38461538e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 3.81538462e-01, 2.02020202e-02, 4.59487179e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 3.13131313e-01, 5.33333333e-01,\n",
-      "       5.09743590e-01, 1.71717172e-01, 2.93333333e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.66666667e-01, 7.94871795e-01,\n",
-      "       4.94949495e-01, 6.97435897e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 4.62564103e-01, 3.23232323e-01,\n",
-      "       1.43589744e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       9.33333333e-01, 7.80512821e-01, 2.62626263e-01, 3.69230769e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 2.52525253e-01, 9.33333333e-01,\n",
-      "       8.87179487e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 5.10769231e-01,\n",
-      "       6.26262626e-01, 6.40000000e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 5.94871795e-01, 1.11111111e-01,\n",
-      "       2.21538462e-03, 0.00000000e+00]), 'action_mask': array([False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False,  True, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False,  True])})\n",
-      "2020-10-14 18:53:27,586\tERROR worker.py:1018 -- Possible unhandled error from worker: \u001b[36mray::RolloutWorker.par_iter_next_batch()\u001b[39m (pid=26840, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1158, in par_iter_next_batch\n",
-      "    batch.append(self.par_iter_next())\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1152, in par_iter_next\n",
-      "    return next(self.local_it)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 288, in gen_rollouts\n",
-      "    yield self.sample()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 579, in sample\n",
-      "    batches = [self.input_reader.next()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 93, in next\n",
-      "    batches = [self.get_data()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 209, in get_data\n",
-      "    item = next(self.rollout_provider)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 585, in _env_runner\n",
-      "    active_envs, to_eval, outputs = _process_observations(\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 797, in _process_observations\n",
-      "    prep_obs: EnvObsType = _get_or_raise(preprocessors,\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 233, in transform\n",
-      "    self.check_shape(observation)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 61, in check_shape\n",
-      "    raise ValueError(\n",
-      "ValueError: ('Observation outside expected value range', Dict(action_mask:Box(0.0, 1.0, (51,), float32), real_obs:Box(0.0, 1.0, (350,), float64)), {'real_obs': array([0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 3.80512821e-01,\n",
-      "       2.12121212e-01, 3.26153846e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.66666667e-01, 3.96923077e-01, 6.56565657e-01,\n",
-      "       1.82564103e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 6.07179487e-01, 4.84848485e-01, 1.02564103e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.35353535e-01, 4.66666667e-01,\n",
-      "       4.53333333e-01, 1.71717172e-01, 3.48717949e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.44444444e-01, 8.00000000e-01, 6.14358974e-01,\n",
-      "       4.34343434e-01, 8.82051282e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.02020202e-01, 6.66666667e-01, 3.46666667e-01, 2.72727273e-01,\n",
-      "       1.90769231e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.00000000e-01, 3.28205128e-01, 5.35353535e-01, 6.35897436e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.08080808e-02, 5.33333333e-01,\n",
-      "       3.95897436e-01, 1.41414141e-01, 2.87179487e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.06060606e-02, 6.00000000e-01, 3.89743590e-01,\n",
-      "       3.33333333e-01, 4.94358974e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 7.33333333e-01, 5.87692308e-01, 5.15151515e-01,\n",
-      "       1.43589744e-04, 0.00000000e+00, 1.00000000e+00, 0.00000000e+00,\n",
-      "       8.00000000e-01, 5.33333333e-01, 8.48484848e-01, 1.72307692e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       4.75897436e-01, 9.09090909e-02, 6.83076923e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 5.92820513e-01,\n",
-      "       8.08080808e-02, 2.46153846e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.44444444e-01, 5.33333333e-01, 4.10256410e-01, 7.87878788e-01,\n",
-      "       4.51282051e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 5.43589744e-01, 1.61616162e-01, 4.82051282e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       4.24615385e-01, 4.64646465e-01, 5.33333333e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.66666667e-01, 6.08205128e-01,\n",
-      "       6.56565657e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 6.03076923e-01, 1.21212121e-01,\n",
-      "       9.47692308e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.66666667e-01, 1.62051282e-01, 4.34343434e-01, 6.76923077e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       5.01538462e-01, 2.02020202e-01, 1.43589744e-02, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 1.00000000e+00, 8.71794872e-01,\n",
-      "       1.00000000e+00, 1.98974359e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.02020202e-01, 7.33333333e-01, 5.96923077e-01, 1.01010101e-01,\n",
-      "       8.41025641e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.00000000e+00, 7.61025641e-01, 1.00000000e+00, 1.51794872e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       3.95897436e-01, 5.05050505e-02, 6.15384615e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.00000000e-01, 5.81538462e-01,\n",
-      "       6.86868687e-01, 2.03076923e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       9.29292929e-01, 5.33333333e-01, 5.00512821e-01, 6.86868687e-01,\n",
-      "       1.82564103e-03, 0.00000000e+00, 0.00000000e+00, 4.34343434e-01,\n",
-      "       4.66666667e-01, 4.54358974e-01, 2.62626263e-01, 5.33333333e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       4.90256410e-01, 7.77777778e-01, 5.29230769e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.14141414e-01, 8.00000000e-01, 6.49230769e-01,\n",
-      "       1.01010101e-02, 2.05128205e-05, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,\n",
-      "       3.69230769e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 3.24102564e-01, 3.23232323e-01, 1.16923077e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       5.93846154e-01, 6.56565657e-01, 3.13846154e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.00000000e-01, 6.98461538e-01,\n",
-      "       1.71717172e-01, 2.64615385e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.31313131e-01, 8.00000000e-01, 5.05641026e-01, 4.84848485e-01,\n",
-      "       3.44615385e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 3.89743590e-01, 2.62626263e-01, 2.33846154e-03,\n",
-      "       0.00000000e+00, 1.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       3.53846154e-01, 4.04040404e-02, 8.20512821e-05, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.33333333e-01, 4.10256410e-01,\n",
-      "       3.33333333e-01, 8.88205128e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 7.21025641e-01, 6.76767677e-01,\n",
-      "       4.10256410e-05, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.00000000e-01, 3.36410256e-01, 4.04040404e-02, 8.10256410e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.66666667e-01,\n",
-      "       5.74358974e-01, 7.07070707e-02, 1.31282051e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.33333333e-01, 4.35897436e-01,\n",
-      "       2.82828283e-01, 2.37948718e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 5.33333333e-01, 7.77777778e-01,\n",
-      "       1.16923077e-03, 0.00000000e+00, 0.00000000e+00, 6.56565657e-01,\n",
-      "       4.66666667e-01, 2.40000000e-01, 1.81818182e-01, 2.29743590e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.00000000e-01,\n",
-      "       4.27692308e-01, 1.51515152e-01, 8.51282051e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.66666667e-01, 6.10256410e-01,\n",
-      "       1.71717172e-01, 8.20512821e-05, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.22222222e-01, 3.33333333e-01, 2.95384615e-01, 7.87878788e-01,\n",
-      "       3.54871795e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 5.16923077e-01, 3.63636364e-01, 7.79487179e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       6.00000000e-01, 1.31313131e-01, 3.48717949e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.66666667e-01, 6.70769231e-01,\n",
-      "       1.61616162e-01, 2.62564103e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 5.94871795e-01, 2.42424242e-01,\n",
-      "       3.32307692e-03, 0.00000000e+00]), 'action_mask': array([False, False, False, False, False, False, False, False, False,\n",
-      "       False,  True, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False,  True,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False])})\n",
-      "Result for RandomMasked_jss_env_7a318_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-53-29\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: a0d7abda875641ee8277cfe989ce99c0\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 56800\n",
-      "  iterations_since_restore: 142\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 26894\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 26.409894704818726\n",
-      "  time_this_iter_s: 0.16816067695617676\n",
-      "  time_total_s: 26.409894704818726\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701609\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 56800\n",
-      "  training_iteration: 142\n",
-      "  trial_id: 7a318_00000\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | RUNNING  | 172.17.0.4:26894 |    142 |          26.4099 | 56800 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
+      "2020-11-04 21:48:07,725 - wandb.wandb_agent - INFO - Running runs: ['sb79yg44']\n",
       "\n",
-      "2020-10-14 18:53:30,587\tERROR worker.py:1018 -- Possible unhandled error from worker: \u001b[36mray::RolloutWorker.par_iter_next_batch()\u001b[39m (pid=26878, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1158, in par_iter_next_batch\n",
-      "    batch.append(self.par_iter_next())\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1152, in par_iter_next\n",
-      "    return next(self.local_it)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 288, in gen_rollouts\n",
-      "    yield self.sample()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 579, in sample\n",
-      "    batches = [self.input_reader.next()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 93, in next\n",
-      "    batches = [self.get_data()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 209, in get_data\n",
-      "    item = next(self.rollout_provider)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 585, in _env_runner\n",
-      "    active_envs, to_eval, outputs = _process_observations(\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 797, in _process_observations\n",
-      "    prep_obs: EnvObsType = _get_or_raise(preprocessors,\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 233, in transform\n",
-      "    self.check_shape(observation)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 61, in check_shape\n",
-      "    raise ValueError(\n",
-      "ValueError: ('Observation outside expected value range', Dict(action_mask:Box(0.0, 1.0, (51,), float32), real_obs:Box(0.0, 1.0, (350,), float64)), {'real_obs': array([0.00000000e+00, 3.03030303e-01, 4.66666667e-01, 3.36410256e-01,\n",
-      "       6.46464646e-01, 1.31282051e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.66666667e-01, 3.96923077e-01, 0.00000000e+00,\n",
-      "       1.84615385e-04, 0.00000000e+00, 0.00000000e+00, 1.91919192e-01,\n",
-      "       4.66666667e-01, 5.66153846e-01, 2.72727273e-01, 2.78974359e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       6.01025641e-01, 7.77777778e-01, 1.18974359e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 3.20000000e-01,\n",
-      "       7.57575758e-01, 1.38051282e-02, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 5.82564103e-01, 1.00000000e+00,\n",
-      "       6.97435897e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       8.00000000e-01, 5.95897436e-01, 1.61616162e-01, 3.05641026e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       2.87179487e-01, 7.07070707e-02, 3.89743590e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 3.72307692e-01,\n",
-      "       5.25252525e-01, 6.46153846e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.22222222e-01, 6.00000000e-01, 4.82051282e-01, 1.01010101e-02,\n",
-      "       1.57948718e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       8.00000000e-01, 5.33333333e-01, 3.63636364e-01, 1.49743590e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.15151515e-01, 4.66666667e-01,\n",
-      "       3.54871795e-01, 3.43434343e-01, 3.01538462e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.00000000e-01, 7.41538462e-01,\n",
-      "       1.41414141e-01, 2.74871795e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.00000000e-01, 1.98974359e-01, 4.34343434e-01,\n",
-      "       7.67179487e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 5.43589744e-01, 2.02020202e-02, 8.61538462e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       4.24615385e-01, 4.34343434e-01, 2.46153846e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.03030303e-02, 4.66666667e-01, 4.87179487e-01,\n",
-      "       1.01010101e-01, 5.04615385e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 7.33333333e-01, 6.37948718e-01, 1.21212121e-01,\n",
-      "       2.42051282e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.00000000e-01, 9.94871795e-02, 4.04040404e-01, 7.38461538e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 3.13131313e-01, 6.66666667e-01,\n",
-      "       5.08717949e-01, 3.33333333e-01, 2.03076923e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 1.00000000e+00, 8.71794872e-01,\n",
-      "       1.00000000e+00, 1.14871795e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 4.81025641e-01, 6.36363636e-01,\n",
-      "       2.46153846e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.66666667e-01, 5.50769231e-01, 3.63636364e-01, 3.91794872e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 3.23232323e-01, 6.00000000e-01,\n",
-      "       4.53333333e-01, 1.01010101e-01, 2.99487179e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 2.32323232e-01, 6.00000000e-01, 4.78974359e-01,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.33333333e-01, 3.64102564e-01, 4.94949495e-01,\n",
-      "       3.83589744e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 5.04615385e-01, 1.21212121e-01, 9.43589744e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       5.65128205e-01, 5.75757576e-01, 4.92307692e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 7.33333333e-01, 5.50769231e-01,\n",
-      "       3.83838384e-01, 1.92820513e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,\n",
-      "       1.06666667e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 3.82564103e-01, 2.02020202e-01, 5.80512821e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       6.98461538e-01, 6.76767677e-01, 1.06666667e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.00000000e-01, 6.98461538e-01,\n",
-      "       7.27272727e-01, 8.20512821e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 3.65128205e-01, 5.05050505e-02,\n",
-      "       1.88717949e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       8.00000000e-01, 5.88717949e-01, 6.96969697e-01, 7.58974359e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       4.34871795e-01, 1.01010101e-01, 2.13333333e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 5.25252525e-01, 6.66666667e-01, 5.46666667e-01,\n",
-      "       0.00000000e+00, 3.69230769e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       1.51515152e-01, 6.00000000e-01, 6.16410256e-01, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 3.23232323e-01,\n",
-      "       7.33333333e-01, 7.24102564e-01, 8.08080808e-01, 3.05641026e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 1.31313131e-01, 4.66666667e-01,\n",
-      "       3.29230769e-01, 1.11111111e-01, 6.83076923e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.33333333e-01, 4.35897436e-01,\n",
-      "       3.03030303e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 5.84615385e-01, 6.06060606e-02,\n",
-      "       1.78461538e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 3.06666667e-01, 2.12121212e-01, 9.08717949e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       4.44102564e-01, 2.42424242e-01, 2.42051282e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.66666667e-01, 6.10256410e-01,\n",
-      "       3.03030303e-02, 2.52307692e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 6.01025641e-01, 3.13131313e-01,\n",
-      "       2.21538462e-03, 0.00000000e+00, 1.00000000e+00, 0.00000000e+00,\n",
-      "       8.00000000e-01, 6.66666667e-01, 1.01010101e-01, 3.26153846e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.04040404e-02, 6.00000000e-01,\n",
-      "       6.83076923e-01, 6.06060606e-02, 1.23076923e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 5.10769231e-01,\n",
-      "       2.32323232e-01, 3.22051282e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.44444444e-01, 6.66666667e-01, 4.91282051e-01, 1.01010101e-02,\n",
-      "       1.37435897e-03, 0.00000000e+00]), 'action_mask': array([False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False,  True, False, False, False,  True])})\n",
-      "2020-10-14 18:53:33,891\tERROR trial_runner.py:567 -- Trial RandomMasked_jss_env_7a318_00000: Error processing event.\n",
-      "Traceback (most recent call last):\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py\", line 515, in _process_trial\n",
-      "    result = self.trial_executor.fetch_result(trial)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py\", line 488, in fetch_result\n",
-      "    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/worker.py\", line 1428, in get\n",
-      "    raise value.as_instanceof_cause()\n",
-      "ray.exceptions.RayTaskError(ValueError): \u001b[36mray::RandomMasked.train()\u001b[39m (pid=26894, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 516, in train\n",
-      "    raise e\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py\", line 505, in train\n",
-      "    result = Trainable.train(self)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py\", line 336, in train\n",
-      "    result = self.step()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py\", line 134, in step\n",
-      "    res = next(self.train_exec_impl)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 756, in __next__\n",
-      "    return next(self.built_iterator)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 843, in apply_filter\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 783, in apply_foreach\n",
-      "    for item in it:\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 551, in base_iterator\n",
-      "    batch = ray.get(obj_ref)\n",
-      "ray.exceptions.RayTaskError(ValueError): \u001b[36mray::RolloutWorker.par_iter_next_batch()\u001b[39m (pid=26854, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1158, in par_iter_next_batch\n",
-      "    batch.append(self.par_iter_next())\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1152, in par_iter_next\n",
-      "    return next(self.local_it)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 288, in gen_rollouts\n",
-      "    yield self.sample()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 579, in sample\n",
-      "    batches = [self.input_reader.next()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 93, in next\n",
-      "    batches = [self.get_data()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 209, in get_data\n",
-      "    item = next(self.rollout_provider)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 585, in _env_runner\n",
-      "    active_envs, to_eval, outputs = _process_observations(\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 797, in _process_observations\n",
-      "    prep_obs: EnvObsType = _get_or_raise(preprocessors,\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 233, in transform\n",
-      "    self.check_shape(observation)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 61, in check_shape\n",
-      "    raise ValueError(\n",
-      "ValueError: ('Observation outside expected value range', Dict(action_mask:Box(0.0, 1.0, (51,), float32), real_obs:Box(0.0, 1.0, (350,), float64)), {'real_obs': array([0.00000000e+00, 0.00000000e+00, 5.33333333e-01, 3.67179487e-01,\n",
-      "       5.05050505e-01, 6.72820513e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.07070707e-02, 4.00000000e-01, 3.89743590e-01, 7.47474747e-01,\n",
-      "       1.20205128e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.33333333e-01, 7.47692308e-01, 3.43434343e-01, 5.82564103e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.15151515e-01, 5.33333333e-01,\n",
-      "       5.48717949e-01, 6.76767677e-01, 1.37435897e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 7.33333333e-01, 5.56923077e-01,\n",
-      "       1.51515152e-01, 1.12820513e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 2.81025641e-01, 2.42424242e-01,\n",
-      "       1.47692308e-03, 0.00000000e+00, 0.00000000e+00, 7.07070707e-02,\n",
-      "       6.66666667e-01, 5.47692308e-01, 0.00000000e+00, 6.66666667e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 2.66666667e-01,\n",
-      "       1.79487179e-01, 7.17171717e-01, 1.95076923e-02, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 3.72307692e-01,\n",
-      "       1.71717172e-01, 1.12205128e-02, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 9.33333333e-01, 7.12820513e-01, 4.04040404e-02,\n",
-      "       2.58461538e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 3.48717949e-01, 4.34343434e-01, 1.14256410e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       4.75897436e-01, 1.01010101e-01, 5.90769231e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.66666667e-01, 7.82564103e-01,\n",
-      "       6.86868687e-01, 1.25128205e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.06060606e-02, 6.66666667e-01, 5.57948718e-01, 2.62626263e-01,\n",
-      "       5.33333333e-04, 0.00000000e+00, 1.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 4.02051282e-01, 9.69696970e-01, 5.53846154e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       5.22051282e-01, 1.51515152e-01, 1.84615385e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.08080808e-02, 8.00000000e-01, 7.04615385e-01,\n",
-      "       5.65656566e-01, 1.14871795e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 9.33333333e-01, 7.01538462e-01, 6.66666667e-01,\n",
-      "       6.25641026e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 2.92307692e-01, 6.36363636e-01, 1.12410256e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       5.40512821e-01, 1.51515152e-01, 1.43589744e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 7.33333333e-01, 6.56410256e-01,\n",
-      "       3.33333333e-01, 5.57948718e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.86868687e-01, 7.33333333e-01, 5.47692308e-01, 8.58585859e-01,\n",
-      "       1.74358974e-03, 0.00000000e+00, 0.00000000e+00, 2.02020202e-01,\n",
-      "       5.33333333e-01, 4.80000000e-01, 3.63636364e-01, 7.38461538e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.66666667e-01,\n",
-      "       4.86153846e-01, 3.83838384e-01, 6.35897436e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 4.00000000e-01,\n",
-      "       6.26262626e-01, 3.69230769e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 8.72820513e-01, 1.00000000e+00,\n",
-      "       8.20512821e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 4.98461538e-01, 6.76767677e-01, 2.07179487e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 1.51515152e-01, 4.00000000e-01,\n",
-      "       4.74871795e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 3.13131313e-01, 8.00000000e-01, 6.59487179e-01,\n",
-      "       8.58585859e-01, 1.74358974e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,\n",
-      "       3.07692308e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       2.66666667e-01, 1.58974359e-01, 3.03030303e-02, 5.21025641e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.00000000e-01,\n",
-      "       3.84615385e-01, 5.65656566e-01, 1.25538462e-02, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 1.00000000e+00, 7.68205128e-01,\n",
-      "       1.00000000e+00, 3.36410256e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 6.26666667e-01, 1.00000000e+00,\n",
-      "       1.24923077e-02, 0.00000000e+00, 0.00000000e+00, 6.06060606e-02,\n",
-      "       5.33333333e-01, 4.31794872e-01, 4.54545455e-01, 9.23076923e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00,\n",
-      "       9.70256410e-01, 1.00000000e+00, 9.84615385e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 3.58974359e-01,\n",
-      "       1.01010101e-02, 8.41025641e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.44444444e-01, 9.33333333e-01, 8.36923077e-01, 4.04040404e-02,\n",
-      "       1.15487179e-02, 0.00000000e+00, 0.00000000e+00, 6.96969697e-01,\n",
-      "       6.00000000e-01, 5.84615385e-01, 2.92929293e-01, 1.07282051e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       4.65641026e-01, 0.00000000e+00, 3.38461538e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 9.33333333e-01, 7.02564103e-01,\n",
-      "       7.07070707e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.66666667e-01, 6.17435897e-01, 1.51515152e-01,\n",
-      "       3.38461538e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 3.81538462e-01, 2.02020202e-02, 4.59487179e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 3.13131313e-01, 5.33333333e-01,\n",
-      "       5.09743590e-01, 1.71717172e-01, 2.93333333e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.66666667e-01, 7.94871795e-01,\n",
-      "       4.94949495e-01, 6.97435897e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 4.62564103e-01, 3.23232323e-01,\n",
-      "       1.43589744e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       9.33333333e-01, 7.80512821e-01, 2.62626263e-01, 3.69230769e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 2.52525253e-01, 9.33333333e-01,\n",
-      "       8.87179487e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 5.10769231e-01,\n",
-      "       6.26262626e-01, 6.40000000e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 5.94871795e-01, 1.11111111e-01,\n",
-      "       2.21538462e-03, 0.00000000e+00]), 'action_mask': array([False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False,  True, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False,  True])})\n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 ERROR)\n",
-      "+----------------------------------+----------+-------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc   |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+-------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 | ERROR    |       |    171 |          30.8067 | 68400 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+-------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "Number of errored trials: 1\n",
-      "+----------------------------------+--------------+--------------------------------------------------------------------------------------------+\n",
-      "| Trial name                       |   # failures | error file                                                                                 |\n",
-      "|----------------------------------+--------------+--------------------------------------------------------------------------------------------|\n",
-      "| RandomMasked_jss_env_7a318_00000 |            1 | /root/ray_results/ppo-jss/RandomMasked_jss_env_7a318_00000_0_2020-10-14_18-52-58/error.txt |\n",
-      "+----------------------------------+--------------+--------------------------------------------------------------------------------------------+\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 33800\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_214803-sb79yg44/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_214803-sb79yg44/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2071.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604527084\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/sb79yg44\u001b[0m\n",
+      "2020-11-04 21:58:08,292 - wandb.wandb_agent - INFO - Cleaning up finished run: sb79yg44\n",
+      "2020-11-04 21:58:08,653 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 21:58:08,653 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta43\n",
+      "2020-11-04 21:58:08,655 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta43\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/p3hdb6ys\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_215809-p3hdb6ys\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "Traceback (most recent call last):\n",
-      "  File \"random_loop.py\", line 73, in <module>\n",
-      "    rand_func()\n",
-      "  File \"random_loop.py\", line 55, in rand_func\n",
-      "    analysis = tune.run(RandomMaskedTrainer, config=config, stop=stop, name=\"ppo-jss\")\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py\", line 427, in run\n",
-      "    raise TuneError(\"Trials did not complete\", incomplete_trials)\n",
-      "ray.tune.error.TuneError: ('Trials did not complete', [RandomMasked_jss_env_7a318_00000])\n",
+      "2020-11-04 21:58:13,672 - wandb.wandb_agent - INFO - Running runs: ['p3hdb6ys']\n",
       "\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 26647\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Program failed with code 1.  Press ctrl-c to abort syncing.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 33846\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201014_185253-ezglujb0/logs/debug.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201014_185253-ezglujb0/logs/debug-internal.log\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_215809-p3hdb6ys/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_215809-p3hdb6ys/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 1967.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604527690\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33msuper-sweep-2\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/ezglujb0\u001b[0m\n",
-      "2020-10-14 18:53:43,767 - wandb.wandb_agent - INFO - Cleaning up finished run: ezglujb0\n",
-      "2020-10-14 18:53:44,146 - wandb.wandb_agent - INFO - Agent received command: run\n",
-      "2020-10-14 18:53:44,146 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
-      "\tinstance_path: /JSS/JSS/env/instances/ta53\n",
-      "2020-10-14 18:53:44,148 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python random_loop.py --instance_path=/JSS/JSS/env/instances/ta53\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/p3hdb6ys\u001b[0m\n",
+      "2020-11-04 22:08:18,999 - wandb.wandb_agent - INFO - Cleaning up finished run: p3hdb6ys\n",
+      "2020-11-04 22:08:19,334 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 22:08:19,334 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta44\n",
+      "2020-11-04 22:08:19,336 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta44\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mspring-sweep-3\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/sweeps/lh9x5rb9\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_2/runs/gx7ht69p\u001b[0m\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201014_185345-gx7ht69p\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/q6lvwcdf\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_220820-q6lvwcdf\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "2020-10-14 18:53:49,166 - wandb.wandb_agent - INFO - Running runs: ['gx7ht69p']\n",
-      "2020-10-14 18:53:49,662\tINFO services.py:1164 -- View the Ray dashboard at \u001b[1m\u001b[32mhttp://127.0.0.1:8265\u001b[39m\u001b[22m\n",
-      "== Status ==\n",
-      "Memory usage on this node: 11.7/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+-------+\n",
-      "| Trial name                       | status   | loc   |\n",
-      "|----------------------------------+----------+-------|\n",
-      "| RandomMasked_jss_env_99699_00000 | RUNNING  |       |\n",
-      "+----------------------------------+----------+-------+\n",
+      "2020-11-04 22:08:24,353 - wandb.wandb_agent - INFO - Running runs: ['q6lvwcdf']\n",
       "\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 33892\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_220820-q6lvwcdf/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_220820-q6lvwcdf/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2091.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604528301\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/q6lvwcdf\u001b[0m\n",
+      "2020-11-04 22:18:29,584 - wandb.wandb_agent - INFO - Cleaning up finished run: q6lvwcdf\n",
+      "2020-11-04 22:18:29,915 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 22:18:29,916 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta45\n",
+      "2020-11-04 22:18:29,917 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta45\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/60frjwtk\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_221830-60frjwtk\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
-      "\u001b[2m\u001b[36m(pid=28631)\u001b[0m 2020-10-14 18:53:52,367\tINFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.\n",
-      "Result for RandomMasked_jss_env_99699_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-53-56\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 00d9f426bb89434f8ae7ff271eb43732\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 400\n",
-      "  iterations_since_restore: 1\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 68.7\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.3600000000000003\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 28631\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 3.336198329925537\n",
-      "  time_this_iter_s: 3.336198329925537\n",
-      "  time_total_s: 3.336198329925537\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701636\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 400\n",
-      "  training_iteration: 1\n",
-      "  trial_id: '99699_00000'\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 21.8/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |   ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_99699_00000 | RUNNING  | 172.17.0.4:28631 |      1 |           3.3362 |  400 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+------+----------+----------------------+----------------------+--------------------+\n",
-      "\n",
+      "2020-11-04 22:18:34,933 - wandb.wandb_agent - INFO - Running runs: ['60frjwtk']\n",
       "\n",
-      "Result for RandomMasked_jss_env_99699_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-54-01\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 00d9f426bb89434f8ae7ff271eb43732\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 11600\n",
-      "  iterations_since_restore: 29\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 5.2\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.9\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 28631\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 7.95437479019165\n",
-      "  time_this_iter_s: 0.16468524932861328\n",
-      "  time_total_s: 7.95437479019165\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701641\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 11600\n",
-      "  training_iteration: 29\n",
-      "  trial_id: '99699_00000'\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 21.9/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_99699_00000 | RUNNING  | 172.17.0.4:28631 |     29 |          7.95437 | 11600 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 33938\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_221830-60frjwtk/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_221830-60frjwtk/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2032.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604528911\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/60frjwtk\u001b[0m\n",
+      "2020-11-04 22:28:39,901 - wandb.wandb_agent - INFO - Cleaning up finished run: 60frjwtk\n",
+      "2020-11-04 22:28:40,319 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 22:28:40,320 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta46\n",
+      "2020-11-04 22:28:40,321 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta46\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/4w63mxn5\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_222841-4w63mxn5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-04 22:28:45,337 - wandb.wandb_agent - INFO - Running runs: ['4w63mxn5']\n",
       "\n",
-      "Result for RandomMasked_jss_env_99699_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-54-06\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 00d9f426bb89434f8ae7ff271eb43732\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 23200\n",
-      "  iterations_since_restore: 58\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 28631\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 12.706214427947998\n",
-      "  time_this_iter_s: 0.1642756462097168\n",
-      "  time_total_s: 12.706214427947998\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701646\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 23200\n",
-      "  training_iteration: 58\n",
-      "  trial_id: '99699_00000'\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_99699_00000 | RUNNING  | 172.17.0.4:28631 |     58 |          12.7062 | 23200 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 33984\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_222841-4w63mxn5/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_222841-4w63mxn5/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2070.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604529522\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/4w63mxn5\u001b[0m\n",
+      "2020-11-04 22:38:45,728 - wandb.wandb_agent - INFO - Cleaning up finished run: 4w63mxn5\n",
+      "2020-11-04 22:38:46,210 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 22:38:46,210 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta47\n",
+      "2020-11-04 22:38:46,212 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta47\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/qpbtop8x\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_223847-qpbtop8x\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-04 22:38:51,228 - wandb.wandb_agent - INFO - Running runs: ['qpbtop8x']\n",
       "\n",
-      "Result for RandomMasked_jss_env_99699_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-54-11\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 00d9f426bb89434f8ae7ff271eb43732\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 34800\n",
-      "  iterations_since_restore: 87\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 28631\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 17.468780755996704\n",
-      "  time_this_iter_s: 0.15766501426696777\n",
-      "  time_total_s: 17.468780755996704\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701651\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 34800\n",
-      "  training_iteration: 87\n",
-      "  trial_id: '99699_00000'\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_99699_00000 | RUNNING  | 172.17.0.4:28631 |     87 |          17.4688 | 34800 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 34030\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_223847-qpbtop8x/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_223847-qpbtop8x/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 1991.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604530128\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/qpbtop8x\u001b[0m\n",
+      "2020-11-04 22:48:56,548 - wandb.wandb_agent - INFO - Cleaning up finished run: qpbtop8x\n",
+      "2020-11-04 22:48:56,937 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 22:48:56,937 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta48\n",
+      "2020-11-04 22:48:56,939 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta48\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/gsihk78x\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_224857-gsihk78x\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-04 22:49:01,955 - wandb.wandb_agent - INFO - Running runs: ['gsihk78x']\n",
       "\n",
-      "Result for RandomMasked_jss_env_99699_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-54-16\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 00d9f426bb89434f8ae7ff271eb43732\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 46400\n",
-      "  iterations_since_restore: 116\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf:\n",
-      "    cpu_util_percent: 4.3\n",
-      "    gpu_util_percent0: 0.0\n",
-      "    gpu_util_percent1: 0.0\n",
-      "    gpu_util_percent2: 0.0\n",
-      "    ram_util_percent: 2.9\n",
-      "    vram_util_percent0: 0.0\n",
-      "    vram_util_percent1: 0.0\n",
-      "    vram_util_percent2: 0.0\n",
-      "  pid: 28631\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 22.175960779190063\n",
-      "  time_this_iter_s: 0.1871342658996582\n",
-      "  time_total_s: 22.175960779190063\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701656\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 46400\n",
-      "  training_iteration: 116\n",
-      "  trial_id: '99699_00000'\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.0/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_99699_00000 | RUNNING  | 172.17.0.4:28631 |    116 |           22.176 | 46400 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 34076\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_224857-gsihk78x/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_224857-gsihk78x/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2052.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 602\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604530739\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/gsihk78x\u001b[0m\n",
+      "2020-11-04 22:59:07,301 - wandb.wandb_agent - INFO - Cleaning up finished run: gsihk78x\n",
+      "2020-11-04 22:59:07,606 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 22:59:07,606 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta49\n",
+      "2020-11-04 22:59:07,608 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta49\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/pvt5040k\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_225908-pvt5040k\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-04 22:59:12,624 - wandb.wandb_agent - INFO - Running runs: ['pvt5040k']\n",
       "\n",
-      "Result for RandomMasked_jss_env_99699_00000:\n",
-      "  custom_metrics: {}\n",
-      "  date: 2020-10-14_18-54-21\n",
-      "  done: false\n",
-      "  episode_len_mean: .nan\n",
-      "  episode_reward_max: .nan\n",
-      "  episode_reward_mean: .nan\n",
-      "  episode_reward_min: .nan\n",
-      "  episodes_this_iter: 0\n",
-      "  episodes_total: 0\n",
-      "  experiment_id: 00d9f426bb89434f8ae7ff271eb43732\n",
-      "  experiment_tag: '0'\n",
-      "  hostname: f85e62b52919\n",
-      "  info:\n",
-      "    num_steps_sampled: 58000\n",
-      "  iterations_since_restore: 145\n",
-      "  node_ip: 172.17.0.4\n",
-      "  num_healthy_workers: 79\n",
-      "  off_policy_estimator: {}\n",
-      "  perf: {}\n",
-      "  pid: 28631\n",
-      "  policy_reward_max: {}\n",
-      "  policy_reward_mean: {}\n",
-      "  policy_reward_min: {}\n",
-      "  sampler_perf: {}\n",
-      "  time_since_restore: 26.801780700683594\n",
-      "  time_this_iter_s: 0.15772652626037598\n",
-      "  time_total_s: 26.801780700683594\n",
-      "  timers: {}\n",
-      "  timestamp: 1602701661\n",
-      "  timesteps_since_restore: 0\n",
-      "  timesteps_total: 58000\n",
-      "  training_iteration: 145\n",
-      "  trial_id: '99699_00000'\n",
-      "  \n",
-      "== Status ==\n",
-      "Memory usage on this node: 22.1/754.6 GiB\n",
-      "Using FIFO scheduling algorithm.\n",
-      "Resources requested: 80/80 CPUs, 0/3 GPUs, 0.0/557.08 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)\n",
-      "Result logdir: /root/ray_results/ppo-jss\n",
-      "Number of trials: 1 (1 RUNNING)\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
-      "| Trial name                       | status   | loc              |   iter |   total time (s) |    ts |   reward |   episode_reward_max |   episode_reward_min |   episode_len_mean |\n",
-      "|----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------|\n",
-      "| RandomMasked_jss_env_99699_00000 | RUNNING  | 172.17.0.4:28631 |    145 |          26.8018 | 58000 |      nan |                  nan |                  nan |                nan |\n",
-      "+----------------------------------+----------+------------------+--------+------------------+-------+----------+----------------------+----------------------+--------------------+\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 34122\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_225908-pvt5040k/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_225908-pvt5040k/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2072.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604531349\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/pvt5040k\u001b[0m\n",
+      "2020-11-04 23:09:17,980 - wandb.wandb_agent - INFO - Cleaning up finished run: pvt5040k\n",
+      "2020-11-04 23:09:18,328 - wandb.wandb_agent - INFO - Agent received command: run\n",
+      "2020-11-04 23:09:18,328 - wandb.wandb_agent - INFO - Agent starting run with config:\n",
+      "\tinstance_path: /JSS/JSS/env/instances/ta50\n",
+      "2020-11-04 23:09:18,330 - wandb.wandb_agent - INFO - About to run command: /usr/bin/env python CP.py --instance_path=/JSS/JSS/env/instances/ta50\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mingambe\u001b[0m (use `wandb login --relogin` to force relogin)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.8 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.10.5\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33mCP\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: ‚≠êÔ∏è View project at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üßπ View sweep at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/sweeps/wnc8ihq1\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: üöÄ View run at \u001b[34m\u001b[4mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/7oeiazwm\u001b[0m\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in wandb/run-20201104_230919-7oeiazwm\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run `wandb off` to turn off syncing.\n",
       "\n",
+      "2020-11-04 23:09:23,346 - wandb.wandb_agent - INFO - Running runs: ['7oeiazwm']\n",
       "\n",
-      "2020-10-14 18:54:21,879\tERROR worker.py:1018 -- Possible unhandled error from worker: \u001b[36mray::RolloutWorker.par_iter_next_batch()\u001b[39m (pid=28512, ip=172.17.0.4)\n",
-      "  File \"python/ray/_raylet.pyx\", line 484, in ray._raylet.execute_task\n",
-      "  File \"python/ray/_raylet.pyx\", line 438, in ray._raylet.execute_task.function_executor\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1158, in par_iter_next_batch\n",
-      "    batch.append(self.par_iter_next())\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py\", line 1152, in par_iter_next\n",
-      "    return next(self.local_it)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 288, in gen_rollouts\n",
-      "    yield self.sample()\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/rollout_worker.py\", line 579, in sample\n",
-      "    batches = [self.input_reader.next()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 93, in next\n",
-      "    batches = [self.get_data()]\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 209, in get_data\n",
-      "    item = next(self.rollout_provider)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 585, in _env_runner\n",
-      "    active_envs, to_eval, outputs = _process_observations(\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/evaluation/sampler.py\", line 797, in _process_observations\n",
-      "    prep_obs: EnvObsType = _get_or_raise(preprocessors,\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 233, in transform\n",
-      "    self.check_shape(observation)\n",
-      "  File \"/root/miniconda3/lib/python3.8/site-packages/ray/rllib/models/preprocessors.py\", line 61, in check_shape\n",
-      "    raise ValueError(\n",
-      "ValueError: ('Observation outside expected value range', Dict(action_mask:Box(0.0, 1.0, (51,), float32), real_obs:Box(0.0, 1.0, (350,), float64)), {'real_obs': array([0.00000000e+00, 0.00000000e+00, 5.33333333e-01, 3.67179487e-01,\n",
-      "       1.31313131e-01, 1.84615385e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 5.87692308e-01, 2.42424242e-01,\n",
-      "       1.16923077e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       8.66666667e-01, 8.18461538e-01, 1.71717172e-01, 1.84615385e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.56565657e-01, 6.66666667e-01,\n",
-      "       6.98461538e-01, 1.01010101e-02, 9.23076923e-04, 0.00000000e+00,\n",
-      "       1.00000000e+00, 0.00000000e+00, 6.66666667e-01, 4.84102564e-01,\n",
-      "       4.44444444e-01, 1.74358974e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       7.17171717e-01, 6.66666667e-01, 2.94358974e-01, 0.00000000e+00,\n",
-      "       1.02564103e-04, 0.00000000e+00, 0.00000000e+00, 4.04040404e-01,\n",
-      "       6.66666667e-01, 5.13846154e-01, 7.77777778e-01, 1.57948718e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 2.00000000e-01,\n",
-      "       1.30256410e-01, 5.35353535e-01, 7.20000000e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 3.72307692e-01,\n",
-      "       4.54545455e-01, 1.09333333e-02, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 8.00000000e-01, 6.25641026e-01, 5.45454545e-01,\n",
-      "       8.20512821e-05, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.66666667e-01, 2.42051282e-01, 1.61616162e-01, 1.25128205e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       3.11794872e-01, 4.04040404e-02, 1.16923077e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 5.33333333e-01, 4.99487179e-01,\n",
-      "       6.56565657e-01, 8.61538462e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 5.33333333e-01, 3.83589744e-01, 2.22222222e-01,\n",
-      "       5.33333333e-04, 0.00000000e+00, 0.00000000e+00, 2.32323232e-01,\n",
-      "       6.00000000e-01, 4.54358974e-01, 3.13131313e-01, 7.58974359e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.66666667e-01,\n",
-      "       3.66153846e-01, 7.87878788e-01, 5.29230769e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.00000000e-01, 6.55384615e-01,\n",
-      "       0.00000000e+00, 2.66666667e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       8.08080808e-02, 8.00000000e-01, 6.92307692e-01, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 3.06666667e-01, 6.46464646e-01, 3.28205128e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.66666667e-01,\n",
-      "       6.07179487e-01, 3.33333333e-01, 6.15384615e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.66666667e-01, 4.44102564e-01,\n",
-      "       9.09090909e-02, 1.57948718e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       8.08080808e-02, 6.66666667e-02, 8.00000000e-02, 7.07070707e-01,\n",
-      "       8.82051282e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 5.00512821e-01, 4.14141414e-01, 6.76923077e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 6.00000000e-01,\n",
-      "       3.95897436e-01, 1.51515152e-01, 8.41025641e-04, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 9.33333333e-01, 6.40000000e-01,\n",
-      "       7.17171717e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.05050505e-02, 6.66666667e-01, 6.82051282e-01, 5.05050505e-02,\n",
-      "       2.25641026e-04, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 5.04615385e-01, 3.03030303e-02, 9.84615385e-04,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.41538462e-01, 9.79797980e-01, 5.68205128e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 3.33333333e-01, 2.86153846e-01,\n",
-      "       2.72727273e-01, 9.23076923e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.00000000e+00, 1.00000000e+00, 1.00000000e+00,\n",
-      "       1.39487179e-03, 0.00000000e+00, 0.00000000e+00, 5.35353535e-01,\n",
-      "       8.66666667e-01, 5.94871795e-01, 5.45454545e-01, 3.63076923e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.68205128e-01, 6.66666667e-01, 3.69230769e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 2.66666667e-01, 2.67692308e-01,\n",
-      "       7.47474747e-01, 5.21025641e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.00000000e-01, 3.65128205e-01, 1.51515152e-01,\n",
-      "       7.69230769e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.66666667e-01, 4.74871795e-01, 1.21212121e-01, 2.95384615e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.66666667e-01,\n",
-      "       8.50256410e-01, 5.35353535e-01, 4.77948718e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 8.00000000e-01, 6.10256410e-01,\n",
-      "       5.45454545e-01, 6.35897436e-04, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 6.66666667e-01, 6.31794872e-01, 7.07070707e-01,\n",
-      "       7.15897436e-03, 0.00000000e+00, 0.00000000e+00, 5.05050505e-01,\n",
-      "       6.00000000e-01, 6.04102564e-01, 4.04040404e-01, 1.09128205e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 3.03030303e-02, 7.33333333e-01,\n",
-      "       5.03589744e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 1.11111111e-01, 7.33333333e-01, 5.93846154e-01,\n",
-      "       5.55555556e-01, 2.15384615e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 4.66666667e-01, 4.54358974e-01, 4.94949495e-01,\n",
-      "       4.26666667e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       6.00000000e-01, 3.81538462e-01, 1.71717172e-01, 3.26153846e-03,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.33333333e-01,\n",
-      "       5.88717949e-01, 1.71717172e-01, 6.07179487e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 6.00000000e-01, 5.88717949e-01,\n",
-      "       2.92929293e-01, 5.76410256e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       4.84848485e-01, 4.66666667e-01, 3.88717949e-01, 6.36363636e-01,\n",
-      "       1.29230769e-03, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n",
-      "       5.33333333e-01, 5.16923077e-01, 6.06060606e-02, 1.61230769e-02,\n",
-      "       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.33333333e-01,\n",
-      "       5.47692308e-01, 6.16161616e-01, 4.94358974e-03, 0.00000000e+00,\n",
-      "       0.00000000e+00, 0.00000000e+00, 4.00000000e-01, 3.78461538e-01,\n",
-      "       2.52525253e-01, 8.82051282e-03, 0.00000000e+00, 0.00000000e+00,\n",
-      "       0.00000000e+00, 5.33333333e-01, 2.82051282e-01, 6.06060606e-01,\n",
-      "       4.43076923e-03, 0.00000000e+00]), 'action_mask': array([False, False, False, False,  True, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False, False, False, False, False,\n",
-      "       False, False, False, False, False,  True])})\n"
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Waiting for W&B process to finish, PID 34168\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Program ended successfully.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:                                                                                \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find user logs for this run at: wandb/run-20201104_230919-7oeiazwm/logs/debug.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Find internal logs for this run at: wandb/run-20201104_230919-7oeiazwm/logs/debug-internal.log\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run summary:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep 2010.0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step 0\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime 601\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp 1604531960\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Run history:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:   best_timestep ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:           _step ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:        _runtime ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:      _timestamp ‚ñÅ\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced 5 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: \n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Synced \u001b[33mCP\u001b[0m: \u001b[34mhttps://wandb.ai/ingambe/RLLIB_SWEEP_3/runs/7oeiazwm\u001b[0m\n",
+      "2020-11-04 23:19:23,596 - wandb.wandb_agent - INFO - Cleaning up finished run: 7oeiazwm\n",
+      "2020-11-04 23:19:23,944 - wandb.wandb_agent - INFO - Agent received command: exit\n",
+      "2020-11-04 23:19:23,944 - wandb.wandb_agent - INFO - Received exit command. Killing runs and quitting.\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: Terminating and syncing runs. Press ctrl-c to kill.\n"
      ]
     }
    ],
    "source": [
-    "!wandb agent lh9x5rb9"
+    "!wandb agent wnc8ihq1"
    ]
   },
   {
diff --git a/JSS/__pycache__/default_config.cpython-38.pyc b/JSS/__pycache__/default_config.cpython-38.pyc
index 14e0018..8fbfc47 100644
Binary files a/JSS/__pycache__/default_config.cpython-38.pyc and b/JSS/__pycache__/default_config.cpython-38.pyc differ
diff --git a/JSS/default_config.py b/JSS/default_config.py
index 46f4d10..4729210 100644
--- a/JSS/default_config.py
+++ b/JSS/default_config.py
@@ -6,7 +6,7 @@ default_config = {
     'env': 'jss_env',
     'seed': 0,
     'framework': 'torch',
-    'log_level': 'INFO',
+    'log_level': 'WARN',
     'num_gpus': 1,
     'instance_path': '/JSS/JSS/env/instances/ta51',
     'num_envs_per_worker': 2,
diff --git a/JSS/env/__pycache__/JSS.cpython-38.pyc b/JSS/env/__pycache__/JSS.cpython-38.pyc
index b190093..143d813 100644
Binary files a/JSS/env/__pycache__/JSS.cpython-38.pyc and b/JSS/env/__pycache__/JSS.cpython-38.pyc differ
diff --git a/JSS/train.py b/JSS/train.py
index d4ac941..0275259 100644
--- a/JSS/train.py
+++ b/JSS/train.py
@@ -47,10 +47,10 @@ def train_func():
     config.pop('layer_size', None)
     config.pop('layer_nb', None)
 
-    ray.init()
+    ray.init(num_gpus=1)
 
     stop = {
-        "time_total_s": 60 * 60,
+        "time_total_s": 10 * 60,
     }
 
     analysis = tune.run(PPOTrainer, config=config, stop=stop, name="ppo-jss")
diff --git a/JSS/wandb/debug-internal.log b/JSS/wandb/debug-internal.log
index f73d8af..52d23ca 120000
--- a/JSS/wandb/debug-internal.log
+++ b/JSS/wandb/debug-internal.log
@@ -1 +1 @@
-run-20201014_204512-kkype8ue/logs/debug-internal.log
\ No newline at end of file
+run-20201105_105711-vuihfvy5/logs/debug-internal.log
\ No newline at end of file
diff --git a/JSS/wandb/debug.log b/JSS/wandb/debug.log
index db2ed2e..5f061d7 120000
--- a/JSS/wandb/debug.log
+++ b/JSS/wandb/debug.log
@@ -1 +1 @@
-run-20201014_204512-kkype8ue/logs/debug.log
\ No newline at end of file
+run-20201105_105711-vuihfvy5/logs/debug.log
\ No newline at end of file
diff --git a/JSS/wandb/latest-run b/JSS/wandb/latest-run
index f19e5b0..2cd1aab 120000
--- a/JSS/wandb/latest-run
+++ b/JSS/wandb/latest-run
@@ -1 +1 @@
-run-20201014_204512-kkype8ue
\ No newline at end of file
+run-20201105_105711-vuihfvy5
\ No newline at end of file
diff --git a/JSS/wandb/run-20201014_185459-4qedwvw4/logs/debug-internal.log b/JSS/wandb/run-20201014_185459-4qedwvw4/logs/debug-internal.log
index 62aefa0..a469c27 100644
--- a/JSS/wandb/run-20201014_185459-4qedwvw4/logs/debug-internal.log
+++ b/JSS/wandb/run-20201014_185459-4qedwvw4/logs/debug-internal.log
@@ -3791,3 +3791,60 @@
 2020-10-14 20:48:22,755 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
 2020-10-14 20:48:24,674 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
 2020-10-14 20:48:29,293 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:48:33,903 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:48:37,761 DEBUG   HandlerThread:30187 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:48:37,761 DEBUG   SenderThread:30187 [sender.py:send():88] send: request
+2020-10-14 20:48:37,761 DEBUG   SenderThread:30187 [sender.py:send_request():97] send_request: status
+2020-10-14 20:48:37,765 DEBUG   SenderThread:30187 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:48:37,962 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:48:38,519 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:48:43,143 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:48:47,759 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:48:52,385 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:48:52,968 DEBUG   HandlerThread:30187 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:48:52,968 DEBUG   SenderThread:30187 [sender.py:send():88] send: request
+2020-10-14 20:48:52,968 DEBUG   SenderThread:30187 [sender.py:send_request():97] send_request: status
+2020-10-14 20:48:52,975 DEBUG   SenderThread:30187 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:48:53,184 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:48:57,005 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:01,622 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:06,249 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:08,189 DEBUG   HandlerThread:30187 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:08,190 DEBUG   SenderThread:30187 [sender.py:send():88] send: request
+2020-10-14 20:49:08,190 DEBUG   SenderThread:30187 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:08,195 DEBUG   SenderThread:30187 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:08,392 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:10,874 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:15,492 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:20,107 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:23,398 DEBUG   HandlerThread:30187 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:23,398 DEBUG   SenderThread:30187 [sender.py:send():88] send: request
+2020-10-14 20:49:23,398 DEBUG   SenderThread:30187 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:23,403 DEBUG   SenderThread:30187 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:23,595 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:24,725 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:29,333 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:33,953 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:38,566 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:38,601 DEBUG   HandlerThread:30187 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:38,601 DEBUG   SenderThread:30187 [sender.py:send():88] send: request
+2020-10-14 20:49:38,601 DEBUG   SenderThread:30187 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:38,605 DEBUG   SenderThread:30187 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:38,802 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:43,182 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:47,813 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:52,436 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:49:53,808 DEBUG   HandlerThread:30187 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:53,809 DEBUG   SenderThread:30187 [sender.py:send():88] send: request
+2020-10-14 20:49:53,809 DEBUG   SenderThread:30187 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:53,813 DEBUG   SenderThread:30187 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:54,014 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:57,041 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:50:01,665 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:50:06,273 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
+2020-10-14 20:50:09,020 DEBUG   HandlerThread:30187 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:50:09,020 DEBUG   SenderThread:30187 [sender.py:send():88] send: request
+2020-10-14 20:50:09,020 DEBUG   SenderThread:30187 [sender.py:send_request():97] send_request: status
+2020-10-14 20:50:09,024 DEBUG   SenderThread:30187 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:50:09,226 DEBUG   SenderThread:30187 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:50:10,902 DEBUG   SenderThread:30187 [sender.py:send():88] send: stats
diff --git a/JSS/wandb/run-20201014_185459-4qedwvw4/run-4qedwvw4.wandb b/JSS/wandb/run-20201014_185459-4qedwvw4/run-4qedwvw4.wandb
index fe32750..a173876 100644
Binary files a/JSS/wandb/run-20201014_185459-4qedwvw4/run-4qedwvw4.wandb and b/JSS/wandb/run-20201014_185459-4qedwvw4/run-4qedwvw4.wandb differ
diff --git a/JSS/wandb/run-20201014_185623-es6i30gb/logs/debug-internal.log b/JSS/wandb/run-20201014_185623-es6i30gb/logs/debug-internal.log
index 6c28b35..39056d1 100644
--- a/JSS/wandb/run-20201014_185623-es6i30gb/logs/debug-internal.log
+++ b/JSS/wandb/run-20201014_185623-es6i30gb/logs/debug-internal.log
@@ -3766,3 +3766,55 @@
 2020-10-14 20:48:28,206 DEBUG   SenderThread:34843 [sender.py:send_request():97] send_request: status
 2020-10-14 20:48:28,210 DEBUG   SenderThread:34843 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
 2020-10-14 20:48:28,411 DEBUG   SenderThread:34843 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:48:32,759 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:48:37,379 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:48:41,998 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:48:43,417 DEBUG   HandlerThread:34843 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:48:43,417 DEBUG   SenderThread:34843 [sender.py:send():88] send: request
+2020-10-14 20:48:43,418 DEBUG   SenderThread:34843 [sender.py:send_request():97] send_request: status
+2020-10-14 20:48:43,425 DEBUG   SenderThread:34843 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:48:43,622 DEBUG   SenderThread:34843 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:48:46,618 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:48:51,237 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:48:55,878 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:48:58,628 DEBUG   HandlerThread:34843 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:48:58,629 DEBUG   SenderThread:34843 [sender.py:send():88] send: request
+2020-10-14 20:48:58,629 DEBUG   SenderThread:34843 [sender.py:send_request():97] send_request: status
+2020-10-14 20:48:58,634 DEBUG   SenderThread:34843 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:48:58,828 DEBUG   SenderThread:34843 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:00,486 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:05,100 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:09,717 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:13,834 DEBUG   HandlerThread:34843 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:13,834 DEBUG   SenderThread:34843 [sender.py:send():88] send: request
+2020-10-14 20:49:13,835 DEBUG   SenderThread:34843 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:13,839 DEBUG   SenderThread:34843 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:14,032 DEBUG   SenderThread:34843 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:14,334 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:18,948 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:23,561 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:28,192 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:29,038 DEBUG   HandlerThread:34843 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:29,038 DEBUG   SenderThread:34843 [sender.py:send():88] send: request
+2020-10-14 20:49:29,039 DEBUG   SenderThread:34843 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:29,043 DEBUG   SenderThread:34843 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:29,241 DEBUG   SenderThread:34843 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:32,806 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:37,429 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:42,040 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:44,247 DEBUG   HandlerThread:34843 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:44,247 DEBUG   SenderThread:34843 [sender.py:send():88] send: request
+2020-10-14 20:49:44,247 DEBUG   SenderThread:34843 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:44,252 DEBUG   SenderThread:34843 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:44,453 DEBUG   SenderThread:34843 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:49:46,669 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:51,288 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:55,904 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:49:59,459 DEBUG   HandlerThread:34843 [handler.py:handle_request():54] handle_request: status
+2020-10-14 20:49:59,459 DEBUG   SenderThread:34843 [sender.py:send():88] send: request
+2020-10-14 20:49:59,460 DEBUG   SenderThread:34843 [sender.py:send_request():97] send_request: status
+2020-10-14 20:49:59,464 DEBUG   SenderThread:34843 [connectionpool.py:_new_conn():955] Starting new HTTPS connection (1): api.wandb.ai:443
+2020-10-14 20:49:59,667 DEBUG   SenderThread:34843 [connectionpool.py:_make_request():428] https://api.wandb.ai:443 "POST /graphql HTTP/1.1" 200 None
+2020-10-14 20:50:00,513 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:50:05,125 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
+2020-10-14 20:50:09,744 DEBUG   SenderThread:34843 [sender.py:send():88] send: stats
diff --git a/JSS/wandb/run-20201014_185623-es6i30gb/run-es6i30gb.wandb b/JSS/wandb/run-20201014_185623-es6i30gb/run-es6i30gb.wandb
index 6b25ef1..0114685 100644
Binary files a/JSS/wandb/run-20201014_185623-es6i30gb/run-es6i30gb.wandb and b/JSS/wandb/run-20201014_185623-es6i30gb/run-es6i30gb.wandb differ
