2020-11-05 10:16:51,645	INFO services.py:1164 -- View the Ray dashboard at [1m[32mhttp://127.0.0.1:8265[39m[22m
== Status ==
Memory usage on this node: 15.6/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 80/80 CPUs, 1/3 GPUs, 0.0/558.3 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 RUNNING)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_065e8_00000 | RUNNING  |       |
+-------------------------+----------+-------+


[2m[36m(pid=3536)[0m 2020-11-05 10:16:54,490	INFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.
[2m[36m(pid=3475)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3475)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3475)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3475)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3475)[0m *** SIGSEGV (@0x0) received by PID 3475 (TID 0x7fecac65d700) from PID 0; stack trace: ***
[2m[36m(pid=3512)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3512)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3512)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3598)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3598)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3598)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3463)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3463)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3463)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3463)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3463)[0m *** SIGSEGV (@0x0) received by PID 3463 (TID 0x7fe161d1c700) from PID 0; stack trace: ***
[2m[36m(pid=3561)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3561)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3561)[0m *** Aborted at 1604571419 (unix time) try "date -d @1604571419" if you are using GNU date ***
[2m[36m(pid=3561)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3561)[0m *** SIGSEGV (@0x0) received by PID 3561 (TID 0x7f357d9df700) from PID 0; stack trace: ***
[2m[36m(pid=3561)[0m     @     0x7f357d5b8390 (unknown)
[2m[36m(pid=3561)[0m     @     0x7f067d4e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3561)[0m     @     0x7f067cc0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3561)[0m     @     0x7f067cc118f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3561)[0m     @     0x7f067cc11ad3 at::TensorIterator::for_each()
[2m[36m(pid=3561)[0m     @     0x7f067cc11d91 at::TensorIterator::for_each()
[2m[36m(pid=3582)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3582)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3582)[0m *** Aborted at 1604571419 (unix time) try "date -d @1604571419" if you are using GNU date ***
[2m[36m(pid=3582)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3582)[0m *** SIGSEGV (@0x0) received by PID 3582 (TID 0x7f1a48ae7700) from PID 0; stack trace: ***
[2m[36m(pid=3582)[0m     @     0x7f1a486c0390 (unknown)
[2m[36m(pid=3582)[0m     @     0x7eeb4860ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3582)[0m     @     0x7eeb47d397db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3582)[0m     @     0x7eeb47d3c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3582)[0m     @     0x7eeb47d3cad3 at::TensorIterator::for_each()
[2m[36m(pid=3582)[0m     @     0x7eeb47d3cd91 at::TensorIterator::for_each()
[2m[36m(pid=3582)[0m     @     0x7eeb4861fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3497)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3497)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3497)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3497)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3497)[0m *** SIGSEGV (@0x0) received by PID 3497 (TID 0x7f1c54e79700) from PID 0; stack trace: ***
[2m[36m(pid=3539)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3539)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3539)[0m *** Aborted at 1604571419 (unix time) try "date -d @1604571419" if you are using GNU date ***
[2m[36m(pid=3539)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3539)[0m *** SIGSEGV (@0x0) received by PID 3539 (TID 0x7ffaf231c700) from PID 0; stack trace: ***
[2m[36m(pid=3539)[0m     @     0x7ffaf1ef5390 (unknown)
[2m[36m(pid=3539)[0m     @     0x7fcbf1e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3539)[0m     @     0x7fcbf154f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3539)[0m     @     0x7fcbf15528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3539)[0m     @     0x7fcbf1552ad3 at::TensorIterator::for_each()
[2m[36m(pid=3539)[0m     @     0x7fcbf1552d91 at::TensorIterator::for_each()
[2m[36m(pid=3534)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3534)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3534)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3566)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3566)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3566)[0m *** Aborted at 1604571419 (unix time) try "date -d @1604571419" if you are using GNU date ***
[2m[36m(pid=3566)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3566)[0m *** SIGSEGV (@0x0) received by PID 3566 (TID 0x7fdcc35d4700) from PID 0; stack trace: ***
[2m[36m(pid=3566)[0m     @     0x7fdcc31ad390 (unknown)
[2m[36m(pid=3566)[0m     @     0x7fadc3124f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3566)[0m     @     0x7fadc284f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3566)[0m     @     0x7fadc28528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3566)[0m     @     0x7fadc2852ad3 at::TensorIterator::for_each()
[2m[36m(pid=3566)[0m     @     0x7fadc2852d91 at::TensorIterator::for_each()
[2m[36m(pid=3566)[0m     @     0x7fadc3135b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3467)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3467)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3467)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3456)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3456)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3456)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3456)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3456)[0m *** SIGSEGV (@0x0) received by PID 3456 (TID 0x7f4fcb2ef700) from PID 0; stack trace: ***
[2m[36m(pid=3535)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3535)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3535)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3535)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3535)[0m *** SIGSEGV (@0x0) received by PID 3535 (TID 0x7fbf4b3af700) from PID 0; stack trace: ***
[2m[36m(pid=3509)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3509)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3509)[0m *** Aborted at 1604571419 (unix time) try "date -d @1604571419" if you are using GNU date ***
[2m[36m(pid=3509)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3509)[0m *** SIGSEGV (@0x0) received by PID 3509 (TID 0x7f4e6ecc1700) from PID 0; stack trace: ***
[2m[36m(pid=3509)[0m     @     0x7f4e6e89a390 (unknown)
[2m[36m(pid=3509)[0m     @     0x7f1f6e70af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3509)[0m     @     0x7f1f6de357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3509)[0m     @     0x7f1f6de388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3509)[0m     @     0x7f1f6de38ad3 at::TensorIterator::for_each()
[2m[36m(pid=3509)[0m     @     0x7f1f6de38d91 at::TensorIterator::for_each()
[2m[36m(pid=3509)[0m     @     0x7f1f6e71bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3509)[0m     @     0x7f1f6e73ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3533)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3533)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3533)[0m *** Aborted at 1604571419 (unix time) try "date -d @1604571419" if you are using GNU date ***
[2m[36m(pid=3533)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3533)[0m *** SIGSEGV (@0x0) received by PID 3533 (TID 0x7f7a5aaa1700) from PID 0; stack trace: ***
[2m[36m(pid=3533)[0m     @     0x7f7a5a67a390 (unknown)
[2m[36m(pid=3533)[0m     @     0x7f4b5a5a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3533)[0m     @     0x7f4b59ccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3533)[0m     @     0x7f4b59cd28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3533)[0m     @     0x7f4b59cd2ad3 at::TensorIterator::for_each()
[2m[36m(pid=3533)[0m     @     0x7f4b59cd2d91 at::TensorIterator::for_each()
[2m[36m(pid=3533)[0m     @     0x7f4b5a5b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3533)[0m     @     0x7f4b5a5d8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3474)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3474)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3474)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3532)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3532)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3532)[0m *** Aborted at 1604571419 (unix time) try "date -d @1604571419" if you are using GNU date ***
[2m[36m(pid=3532)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3532)[0m *** SIGSEGV (@0x0) received by PID 3532 (TID 0x7fcb050b9700) from PID 0; stack trace: ***
[2m[36m(pid=3532)[0m     @     0x7fcb04c92390 (unknown)
[2m[36m(pid=3532)[0m     @     0x7f9c04a8bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3532)[0m     @     0x7f9c041b67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3532)[0m     @     0x7f9c041b98f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3532)[0m     @     0x7f9c041b9ad3 at::TensorIterator::for_each()
[2m[36m(pid=3532)[0m     @     0x7f9c041b9d91 at::TensorIterator::for_each()
[2m[36m(pid=3532)[0m     @     0x7f9c04a9cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3532)[0m     @     0x7f9c04abfc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3458)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3458)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3458)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3458)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3458)[0m *** SIGSEGV (@0x0) received by PID 3458 (TID 0x7fb5d96ac700) from PID 0; stack trace: ***
[2m[36m(pid=3458)[0m     @     0x7fb5d9285390 (unknown)
[2m[36m(pid=3458)[0m     @     0x7f86d9225f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3458)[0m     @     0x7f86d89507db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3590)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3590)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3590)[0m *** Aborted at 1604571419 (unix time) try "date -d @1604571419" if you are using GNU date ***
[2m[36m(pid=3590)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3590)[0m *** SIGSEGV (@0x0) received by PID 3590 (TID 0x7f0cec157700) from PID 0; stack trace: ***
[2m[36m(pid=3590)[0m     @     0x7f0cebd30390 (unknown)
[2m[36m(pid=3590)[0m     @     0x7eddebbc7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3590)[0m     @     0x7eddeb2f27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3590)[0m     @     0x7eddeb2f58f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3590)[0m     @     0x7eddeb2f5ad3 at::TensorIterator::for_each()
[2m[36m(pid=3590)[0m     @     0x7eddeb2f5d91 at::TensorIterator::for_each()
[2m[36m(pid=3590)[0m     @     0x7eddebbd8b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3590)[0m     @     0x7eddebbfbc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3460)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3460)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3460)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3460)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3460)[0m *** SIGSEGV (@0x0) received by PID 3460 (TID 0x7f2d2803e700) from PID 0; stack trace: ***
[2m[36m(pid=3460)[0m     @     0x7f2d27c17390 (unknown)
[2m[36m(pid=3449)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3449)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3449)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3471)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3471)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3471)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3471)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3471)[0m *** SIGSEGV (@0x0) received by PID 3471 (TID 0x7f96276e9700) from PID 0; stack trace: ***
[2m[36m(pid=3462)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3462)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3462)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3462)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3462)[0m *** SIGSEGV (@0x0) received by PID 3462 (TID 0x7f1e02680700) from PID 0; stack trace: ***
[2m[36m(pid=3462)[0m     @     0x7f1e02259390 (unknown)
[2m[36m(pid=3468)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3468)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3468)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3468)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3468)[0m *** SIGSEGV (@0x0) received by PID 3468 (TID 0x7f7186a78700) from PID 0; stack trace: ***
[2m[36m(pid=3601)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3601)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3601)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3447)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3447)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3447)[0m *** Aborted at 1604571419 (unix time) try "date -d @1604571419" if you are using GNU date ***
[2m[36m(pid=3447)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3447)[0m *** SIGSEGV (@0x0) received by PID 3447 (TID 0x7f64ac9d0700) from PID 0; stack trace: ***
[2m[36m(pid=3447)[0m     @     0x7f64ac5a9390 (unknown)
[2m[36m(pid=3447)[0m     @     0x7f35ac536f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3447)[0m     @     0x7f35abc617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3447)[0m     @     0x7f35abc648f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3447)[0m     @     0x7f35abc64ad3 at::TensorIterator::for_each()
[2m[36m(pid=3447)[0m     @     0x7f35abc64d91 at::TensorIterator::for_each()
[2m[36m(pid=3447)[0m     @     0x7f35ac547b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3447)[0m     @     0x7f35ac56ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3529)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3529)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3529)[0m *** Aborted at 1604571419 (unix time) try "date -d @1604571419" if you are using GNU date ***
[2m[36m(pid=3529)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3529)[0m *** SIGSEGV (@0x0) received by PID 3529 (TID 0x7f429e1c1700) from PID 0; stack trace: ***
[2m[36m(pid=3529)[0m     @     0x7f429dd9a390 (unknown)
[2m[36m(pid=3529)[0m     @     0x7f139dd37f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3529)[0m     @     0x7f139d4627db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3529)[0m     @     0x7f139d4658f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3529)[0m     @     0x7f139d465ad3 at::TensorIterator::for_each()
[2m[36m(pid=3529)[0m     @     0x7f139d465d91 at::TensorIterator::for_each()
[2m[36m(pid=3529)[0m     @     0x7f139dd48b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3529)[0m     @     0x7f139dd6bc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3537)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3537)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3537)[0m *** Aborted at 1604571419 (unix time) try "date -d @1604571419" if you are using GNU date ***
[2m[36m(pid=3537)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3537)[0m *** SIGSEGV (@0x0) received by PID 3537 (TID 0x7fc13f05e700) from PID 0; stack trace: ***
[2m[36m(pid=3537)[0m     @     0x7fc13ec37390 (unknown)
[2m[36m(pid=3537)[0m     @     0x7f923ea21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3537)[0m     @     0x7f923e14c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3537)[0m     @     0x7f923e14f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3537)[0m     @     0x7f923e14fad3 at::TensorIterator::for_each()
[2m[36m(pid=3537)[0m     @     0x7f923e14fd91 at::TensorIterator::for_each()
[2m[36m(pid=3537)[0m     @     0x7f923ea32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3537)[0m     @     0x7f923ea55c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3466)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3466)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3466)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3466)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3466)[0m *** SIGSEGV (@0x0) received by PID 3466 (TID 0x7f22c8064700) from PID 0; stack trace: ***
[2m[36m(pid=3466)[0m     @     0x7f22c7c3d390 (unknown)
[2m[36m(pid=3466)[0m     @     0x7ef3c7af5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3547)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3547)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3547)[0m *** Aborted at 1604571419 (unix time) try "date -d @1604571419" if you are using GNU date ***
[2m[36m(pid=3547)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3547)[0m *** SIGSEGV (@0x0) received by PID 3547 (TID 0x7f3104df9700) from PID 0; stack trace: ***
[2m[36m(pid=3547)[0m     @     0x7f31049d2390 (unknown)
[2m[36m(pid=3547)[0m     @     0x7f0204825f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3547)[0m     @     0x7f0203f507db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3547)[0m     @     0x7f0203f538f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3547)[0m     @     0x7f0203f53ad3 at::TensorIterator::for_each()
[2m[36m(pid=3547)[0m     @     0x7f0203f53d91 at::TensorIterator::for_each()
[2m[36m(pid=3547)[0m     @     0x7f0204836b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3547)[0m     @     0x7f0204859c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3584)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3584)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3584)[0m *** Aborted at 1604571419 (unix time) try "date -d @1604571419" if you are using GNU date ***
[2m[36m(pid=3584)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3584)[0m *** SIGSEGV (@0x0) received by PID 3584 (TID 0x7f973c873700) from PID 0; stack trace: ***
[2m[36m(pid=3584)[0m     @     0x7f973c44c390 (unknown)
[2m[36m(pid=3584)[0m     @     0x7f683c0c0f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3584)[0m     @     0x7f683b7eb7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3584)[0m     @     0x7f683b7ee8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3584)[0m     @     0x7f683b7eead3 at::TensorIterator::for_each()
[2m[36m(pid=3584)[0m     @     0x7f683b7eed91 at::TensorIterator::for_each()
[2m[36m(pid=3584)[0m     @     0x7f683c0d1b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3584)[0m     @     0x7f683c0f4c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3584)[0m     @     0x7f683b596a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3584)[0m     @     0x7f683b594388 at::native::copy_impl()
[2m[36m(pid=3538)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3538)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3538)[0m *** Aborted at 1604571419 (unix time) try "date -d @1604571419" if you are using GNU date ***
[2m[36m(pid=3538)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3538)[0m *** SIGSEGV (@0x0) received by PID 3538 (TID 0x7f98fdf50700) from PID 0; stack trace: ***
[2m[36m(pid=3538)[0m     @     0x7f98fdb29390 (unknown)
[2m[36m(pid=3538)[0m     @     0x7f69fda0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3538)[0m     @     0x7f69fd1357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3538)[0m     @     0x7f69fd1388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3538)[0m     @     0x7f69fd138ad3 at::TensorIterator::for_each()
[2m[36m(pid=3538)[0m     @     0x7f69fd138d91 at::TensorIterator::for_each()
[2m[36m(pid=3538)[0m     @     0x7f69fda1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3538)[0m     @     0x7f69fda3ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3538)[0m     @     0x7f69fcee0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3538)[0m     @     0x7f69fcede388 at::native::copy_impl()
[2m[36m(pid=3553)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3553)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3553)[0m *** Aborted at 1604571419 (unix time) try "date -d @1604571419" if you are using GNU date ***
[2m[36m(pid=3553)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3553)[0m *** SIGSEGV (@0x0) received by PID 3553 (TID 0x7fe4cc677700) from PID 0; stack trace: ***
[2m[36m(pid=3553)[0m     @     0x7fe4cc250390 (unknown)
[2m[36m(pid=3553)[0m     @     0x7fb5cc01cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3553)[0m     @     0x7fb5cb7477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3553)[0m     @     0x7fb5cb74a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3553)[0m     @     0x7fb5cb74aad3 at::TensorIterator::for_each()
[2m[36m(pid=3553)[0m     @     0x7fb5cb74ad91 at::TensorIterator::for_each()
[2m[36m(pid=3553)[0m     @     0x7fb5cc02db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3553)[0m     @     0x7fb5cc050c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3569)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3569)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3569)[0m *** Aborted at 1604571419 (unix time) try "date -d @1604571419" if you are using GNU date ***
[2m[36m(pid=3569)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3569)[0m *** SIGSEGV (@0x0) received by PID 3569 (TID 0x7fcba338a700) from PID 0; stack trace: ***
[2m[36m(pid=3569)[0m     @     0x7fcba2f63390 (unknown)
[2m[36m(pid=3569)[0m     @     0x7f9ca2f13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3569)[0m     @     0x7f9ca263e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3569)[0m     @     0x7f9ca26418f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3569)[0m     @     0x7f9ca2641ad3 at::TensorIterator::for_each()
[2m[36m(pid=3569)[0m     @     0x7f9ca2641d91 at::TensorIterator::for_each()
[2m[36m(pid=3569)[0m     @     0x7f9ca2f24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3569)[0m     @     0x7f9ca2f47c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3526)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3526)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3526)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3526)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3526)[0m *** SIGSEGV (@0x0) received by PID 3526 (TID 0x7f65818e0700) from PID 0; stack trace: ***
[2m[36m(pid=3526)[0m     @     0x7f65814b9390 (unknown)
[2m[36m(pid=3526)[0m     @     0x7f3681476f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3526)[0m     @     0x7f3680ba17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3588)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3588)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3588)[0m *** Aborted at 1604571419 (unix time) try "date -d @1604571419" if you are using GNU date ***
[2m[36m(pid=3588)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3588)[0m *** SIGSEGV (@0x0) received by PID 3588 (TID 0x7f1110897700) from PID 0; stack trace: ***
[2m[36m(pid=3588)[0m     @     0x7f1110470390 (unknown)
[2m[36m(pid=3588)[0m     @     0x7ee2103e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3588)[0m     @     0x7ee20fb0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3588)[0m     @     0x7ee20fb118f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3588)[0m     @     0x7ee20fb11ad3 at::TensorIterator::for_each()
[2m[36m(pid=3588)[0m     @     0x7ee20fb11d91 at::TensorIterator::for_each()
[2m[36m(pid=3588)[0m     @     0x7ee2103f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3588)[0m     @     0x7ee210417c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3588)[0m     @     0x7ee20f8b9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3588)[0m     @     0x7ee20f8b7388 at::native::copy_impl()
[2m[36m(pid=3457)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3457)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3457)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3457)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3457)[0m *** SIGSEGV (@0x0) received by PID 3457 (TID 0x7f80a6b50700) from PID 0; stack trace: ***
[2m[36m(pid=3472)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3472)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3472)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3479)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3479)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3479)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3451)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3451)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3451)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3451)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3451)[0m *** SIGSEGV (@0x0) received by PID 3451 (TID 0x7f66bc0d2700) from PID 0; stack trace: ***
[2m[36m(pid=3465)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3465)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3465)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3465)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3465)[0m *** SIGSEGV (@0x0) received by PID 3465 (TID 0x7f2b31647700) from PID 0; stack trace: ***
[2m[36m(pid=3544)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3544)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3544)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3544)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3544)[0m *** SIGSEGV (@0x0) received by PID 3544 (TID 0x7f33f54d6700) from PID 0; stack trace: ***
[2m[36m(pid=3544)[0m     @     0x7f33f50af390 (unknown)
[2m[36m(pid=3544)[0m     @     0x7f04f5048f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3544)[0m     @     0x7f04f47737db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3559)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3559)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3559)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3506)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3506)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3506)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3506)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3506)[0m *** SIGSEGV (@0x0) received by PID 3506 (TID 0x7f50acf1f700) from PID 0; stack trace: ***
[2m[36m(pid=3500)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3500)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3500)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3500)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3500)[0m *** SIGSEGV (@0x0) received by PID 3500 (TID 0x7f585ec6d700) from PID 0; stack trace: ***
[2m[36m(pid=3500)[0m     @     0x7f585e846390 (unknown)
[2m[36m(pid=3500)[0m     @     0x7f295e7bbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3517)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3517)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3517)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3517)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3517)[0m *** SIGSEGV (@0x0) received by PID 3517 (TID 0x7f1db0f9f700) from PID 0; stack trace: ***
[2m[36m(pid=3517)[0m     @     0x7f1db0b78390 (unknown)
[2m[36m(pid=3580)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3580)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3580)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3580)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3580)[0m *** SIGSEGV (@0x0) received by PID 3580 (TID 0x7f81e7ecf700) from PID 0; stack trace: ***
[2m[36m(pid=3459)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3459)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3459)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3459)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3459)[0m *** SIGSEGV (@0x0) received by PID 3459 (TID 0x7f4c03d61700) from PID 0; stack trace: ***
[2m[36m(pid=3459)[0m     @     0x7f4c0393a390 (unknown)
[2m[36m(pid=3505)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3505)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3505)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3505)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3505)[0m *** SIGSEGV (@0x0) received by PID 3505 (TID 0x7fdc23443700) from PID 0; stack trace: ***
[2m[36m(pid=3505)[0m     @     0x7fdc2301c390 (unknown)
[2m[36m(pid=3505)[0m     @     0x7fad22f13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3505)[0m     @     0x7fad2263e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3505)[0m     @     0x7fad226418f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3448)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3448)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3448)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3448)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3448)[0m *** SIGSEGV (@0x0) received by PID 3448 (TID 0x7fe867bd9700) from PID 0; stack trace: ***
[2m[36m(pid=3448)[0m     @     0x7fe8677b2390 (unknown)
[2m[36m(pid=3448)[0m     @     0x7fb96761ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3448)[0m     @     0x7fb966d4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3520)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3520)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3520)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3520)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3520)[0m *** SIGSEGV (@0x0) received by PID 3520 (TID 0x7fd66c266700) from PID 0; stack trace: ***
[2m[36m(pid=3450)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3450)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3450)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3450)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3450)[0m *** SIGSEGV (@0x0) received by PID 3450 (TID 0x7f17fbbdd700) from PID 0; stack trace: ***
[2m[36m(pid=3450)[0m     @     0x7f17fb7b6390 (unknown)
[2m[36m(pid=3450)[0m     @     0x7ee8fb61ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3570)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3570)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3570)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3470)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3470)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3470)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3550)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3550)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3550)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3550)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3550)[0m *** SIGSEGV (@0x0) received by PID 3550 (TID 0x7f69994c9700) from PID 0; stack trace: ***
[2m[36m(pid=3550)[0m     @     0x7f69990a2390 (unknown)
[2m[36m(pid=3550)[0m     @     0x7f3a99056f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3550)[0m     @     0x7f3a987817db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3522)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3522)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3522)[0m *** Aborted at 1604571419 (unix time) try "date -d @1604571419" if you are using GNU date ***
[2m[36m(pid=3522)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3522)[0m *** SIGSEGV (@0x0) received by PID 3522 (TID 0x7f8b936fb700) from PID 0; stack trace: ***
[2m[36m(pid=3522)[0m     @     0x7f8b932d4390 (unknown)
[2m[36m(pid=3522)[0m     @     0x7f5c93229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3522)[0m     @     0x7f5c929547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3522)[0m     @     0x7f5c929578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3522)[0m     @     0x7f5c92957ad3 at::TensorIterator::for_each()
[2m[36m(pid=3522)[0m     @     0x7f5c92957d91 at::TensorIterator::for_each()
[2m[36m(pid=3522)[0m     @     0x7f5c9323ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3522)[0m     @     0x7f5c9325dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3522)[0m     @     0x7f5c926ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3522)[0m     @     0x7f5c926fd388 at::native::copy_impl()
[2m[36m(pid=3522)[0m     @     0x7f5c926ff5a4 at::native::copy_()
[2m[36m(pid=3478)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3478)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3478)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3478)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3478)[0m *** SIGSEGV (@0x0) received by PID 3478 (TID 0x7f24486d9700) from PID 0; stack trace: ***
[2m[36m(pid=3478)[0m     @     0x7f24482b2390 (unknown)
[2m[36m(pid=3576)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3576)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3576)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3576)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3576)[0m *** SIGSEGV (@0x0) received by PID 3576 (TID 0x7f4ab076e700) from PID 0; stack trace: ***
[2m[36m(pid=3576)[0m     @     0x7f4ab0347390 (unknown)
[2m[36m(pid=3576)[0m     @     0x7f1bb02f3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3576)[0m     @     0x7f1bafa1e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3454)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3454)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3454)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3454)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3454)[0m *** SIGSEGV (@0x0) received by PID 3454 (TID 0x7f3894ea6700) from PID 0; stack trace: ***
[2m[36m(pid=3454)[0m     @     0x7f3894a7f390 (unknown)
[2m[36m(pid=3454)[0m     @     0x7f0994774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3524)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3524)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3524)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3524)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3524)[0m *** SIGSEGV (@0x0) received by PID 3524 (TID 0x7fad4bb8b700) from PID 0; stack trace: ***
[2m[36m(pid=3524)[0m     @     0x7fad4b764390 (unknown)
[2m[36m(pid=3524)[0m     @     0x7f7e4b61ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3524)[0m     @     0x7f7e4ad4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3530)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3530)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3530)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3530)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3530)[0m *** SIGSEGV (@0x0) received by PID 3530 (TID 0x7f686eac9700) from PID 0; stack trace: ***
[2m[36m(pid=3530)[0m     @     0x7f686e6a2390 (unknown)
[2m[36m(pid=3530)[0m     @     0x7f396e5a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3530)[0m     @     0x7f396dccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3508)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3508)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3508)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3508)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3508)[0m *** SIGSEGV (@0x0) received by PID 3508 (TID 0x7f5c68653700) from PID 0; stack trace: ***
[2m[36m(pid=3508)[0m     @     0x7f5c6822c390 (unknown)
[2m[36m(pid=3508)[0m     @     0x7f2d6801cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3508)[0m     @     0x7f2d677477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3469)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3469)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3469)[0m *** Aborted at 1604571419 (unix time) try "date -d @1604571419" if you are using GNU date ***
[2m[36m(pid=3469)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3469)[0m *** SIGSEGV (@0x0) received by PID 3469 (TID 0x7fd12950b700) from PID 0; stack trace: ***
[2m[36m(pid=3469)[0m     @     0x7fd1290e4390 (unknown)
[2m[36m(pid=3469)[0m     @     0x7fa229088f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3469)[0m     @     0x7fa2287b37db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3469)[0m     @     0x7fa2287b68f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3469)[0m     @     0x7fa2287b6ad3 at::TensorIterator::for_each()
[2m[36m(pid=3469)[0m     @     0x7fa2287b6d91 at::TensorIterator::for_each()
[2m[36m(pid=3469)[0m     @     0x7fa229099b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3469)[0m     @     0x7fa2290bcc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3469)[0m     @     0x7fa22855ea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3469)[0m     @     0x7fa22855c388 at::native::copy_impl()
[2m[36m(pid=3515)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3515)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3515)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3515)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3515)[0m *** SIGSEGV (@0x0) received by PID 3515 (TID 0x7f6887b4c700) from PID 0; stack trace: ***
[2m[36m(pid=3452)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3452)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3452)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3452)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3452)[0m *** SIGSEGV (@0x0) received by PID 3452 (TID 0x7fe8ee2e1700) from PID 0; stack trace: ***
[2m[36m(pid=3452)[0m     @     0x7fe8edeba390 (unknown)
[2m[36m(pid=3452)[0m     @     0x7fb9ede24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3452)[0m     @     0x7fb9ed54f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3475)[0m     @     0x7fecac236390 (unknown)
[2m[36m(pid=3475)[0m     @     0x7fbdac101f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3475)[0m     @     0x7fbdab82c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3475)[0m     @     0x7fbdab82f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3512)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3512)[0m *** SIGSEGV (@0x0) received by PID 3512 (TID 0x7f6d05498700) from PID 0; stack trace: ***
[2m[36m(pid=3512)[0m     @     0x7f6d05071390 (unknown)
[2m[36m(pid=3512)[0m     @     0x7f3e04fe3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3512)[0m     @     0x7f3e0470e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3512)[0m     @     0x7f3e047118f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3556)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3556)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3556)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3556)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3556)[0m *** SIGSEGV (@0x0) received by PID 3556 (TID 0x7fc71cd40700) from PID 0; stack trace: ***
[2m[36m(pid=3556)[0m     @     0x7fc71c919390 (unknown)
[2m[36m(pid=3556)[0m     @     0x7f981c774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3556)[0m     @     0x7f981be9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3598)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3598)[0m *** SIGSEGV (@0x0) received by PID 3598 (TID 0x7fd3ae78e700) from PID 0; stack trace: ***
[2m[36m(pid=3598)[0m     @     0x7fd3ae367390 (unknown)
[2m[36m(pid=3598)[0m     @     0x7fa4ae30bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3598)[0m     @     0x7fa4ada367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3598)[0m     @     0x7fa4ada398f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3463)[0m     @     0x7fe1618f5390 (unknown)
[2m[36m(pid=3463)[0m     @     0x7fb2617f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3463)[0m     @     0x7fb260f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3463)[0m     @     0x7fb260f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3463)[0m     @     0x7fb260f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=3461)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3461)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3461)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3461)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3461)[0m *** SIGSEGV (@0x0) received by PID 3461 (TID 0x7faeab9ed700) from PID 0; stack trace: ***
[2m[36m(pid=3461)[0m     @     0x7faeab5c6390 (unknown)
[2m[36m(pid=3461)[0m     @     0x7f7fab43af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3461)[0m     @     0x7f7faab657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3574)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3574)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3574)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3574)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3574)[0m *** SIGSEGV (@0x0) received by PID 3574 (TID 0x7f4eb223d700) from PID 0; stack trace: ***
[2m[36m(pid=3574)[0m     @     0x7f4eb1e16390 (unknown)
[2m[36m(pid=3574)[0m     @     0x7f1fb1d89f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3574)[0m     @     0x7f1fb14b47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3453)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3453)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3453)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3453)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3453)[0m *** SIGSEGV (@0x0) received by PID 3453 (TID 0x7faaa157c700) from PID 0; stack trace: ***
[2m[36m(pid=3528)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3528)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3528)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3528)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3528)[0m *** SIGSEGV (@0x0) received by PID 3528 (TID 0x7f91f1819700) from PID 0; stack trace: ***
[2m[36m(pid=3528)[0m     @     0x7f91f13f2390 (unknown)
[2m[36m(pid=3528)[0m     @     0x7f62f139ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3528)[0m     @     0x7f62f0aca7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3473)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3473)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3473)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3473)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3473)[0m *** SIGSEGV (@0x0) received by PID 3473 (TID 0x7f1e47be7700) from PID 0; stack trace: ***
[2m[36m(pid=3561)[0m     @     0x7f067d4f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3561)[0m     @     0x7f067d517c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3561)[0m     @     0x7f067c9b9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3561)[0m     @     0x7f067c9b7388 at::native::copy_impl()
[2m[36m(pid=3561)[0m     @     0x7f067c9b95a4 at::native::copy_()
[2m[36m(pid=3582)[0m     @     0x7eeb48642c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3582)[0m     @     0x7eeb47ae4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3582)[0m     @     0x7eeb47ae2388 at::native::copy_impl()
[2m[36m(pid=3582)[0m     @     0x7eeb47ae45a4 at::native::copy_()
[2m[36m(pid=3497)[0m     @     0x7f1c54a52390 (unknown)
[2m[36m(pid=3497)[0m     @     0x7eed5495df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3497)[0m     @     0x7eed540887db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3497)[0m     @     0x7eed5408b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3497)[0m     @     0x7eed5408bad3 at::TensorIterator::for_each()
[2m[36m(pid=3539)[0m     @     0x7fcbf1e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3539)[0m     @     0x7fcbf1e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3539)[0m     @     0x7fcbf12faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3539)[0m     @     0x7fcbf12f8388 at::native::copy_impl()
[2m[36m(pid=3539)[0m     @     0x7fcbf12fa5a4 at::native::copy_()
[2m[36m(pid=3534)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3534)[0m *** SIGSEGV (@0x0) received by PID 3534 (TID 0x7f21b4c0e700) from PID 0; stack trace: ***
[2m[36m(pid=3534)[0m     @     0x7f21b47e7390 (unknown)
[2m[36m(pid=3534)[0m     @     0x7ef2b460ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3534)[0m     @     0x7ef2b3d397db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3534)[0m     @     0x7ef2b3d3c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3566)[0m     @     0x7fadc3158c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3566)[0m     @     0x7fadc25faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3566)[0m     @     0x7fadc25f8388 at::native::copy_impl()
[2m[36m(pid=3566)[0m     @     0x7fadc25fa5a4 at::native::copy_()
[2m[36m(pid=3467)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3467)[0m *** SIGSEGV (@0x0) received by PID 3467 (TID 0x7f9dfbb9c700) from PID 0; stack trace: ***
[2m[36m(pid=3467)[0m     @     0x7f9dfb775390 (unknown)
[2m[36m(pid=3467)[0m     @     0x7f6efb61ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3467)[0m     @     0x7f6efad4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3467)[0m     @     0x7f6efad4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3456)[0m     @     0x7f4fcaec8390 (unknown)
[2m[36m(pid=3456)[0m     @     0x7f20cae66f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3456)[0m     @     0x7f20ca5917db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3456)[0m     @     0x7f20ca5948f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3456)[0m     @     0x7f20ca594ad3 at::TensorIterator::for_each()
[2m[36m(pid=3535)[0m     @     0x7fbf4af88390 (unknown)
[2m[36m(pid=3535)[0m     @     0x7f904af13f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3535)[0m     @     0x7f904a63e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3535)[0m     @     0x7f904a6418f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3535)[0m     @     0x7f904a641ad3 at::TensorIterator::for_each()
[2m[36m(pid=3509)[0m     @     0x7f1f6dbe0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3509)[0m     @     0x7f1f6dbde388 at::native::copy_impl()
[2m[36m(pid=3509)[0m     @     0x7f1f6dbe05a4 at::native::copy_()
[2m[36m(pid=3509)[0m     @     0x7f1f6e2cb4f5 at::Tensor::copy_()
[2m[36m(pid=3509)[0m     @     0x7f1f7079e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3533)[0m     @     0x7f4b59a7aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3533)[0m     @     0x7f4b59a78388 at::native::copy_impl()
[2m[36m(pid=3533)[0m     @     0x7f4b59a7a5a4 at::native::copy_()
[2m[36m(pid=3533)[0m     @     0x7f4b5a1654f5 at::Tensor::copy_()
[2m[36m(pid=3533)[0m     @     0x7f4b5c6388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3533)[0m     @     0x7f4b5a1654f5 at::Tensor::copy_()
[2m[36m(pid=3533)[0m     @     0x7f4b6021079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3533)[0m     @     0x5603d3c08fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3533)[0m     @     0x5603d3b63b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3533)[0m     @     0x5603d3beebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3533)[0m     @     0x5603d3befa20 method_vectorcall
[2m[36m(pid=3533)[0m     @     0x5603d3b63bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3533)[0m     @     0x5603d3beebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3533)[0m     @     0x5603d3bef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3533)[0m     @     0x5603d3b64689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3533)[0m     @     0x5603d3beebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3533)[0m     @     0x5603d3bef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3533)[0m     @     0x5603d3b64689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3533)[0m     @     0x5603d3beebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3533)[0m     @     0x5603d3bef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3533)[0m     @     0x5603d3b64689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3533)[0m     @     0x5603d3beebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3533)[0m     @     0x5603d3bef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3533)[0m     @     0x5603d3b64689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3474)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3474)[0m *** SIGSEGV (@0x0) received by PID 3474 (TID 0x7fe5cbbcc700) from PID 0; stack trace: ***
[2m[36m(pid=3474)[0m     @     0x7fe5cb7a5390 (unknown)
[2m[36m(pid=3474)[0m     @     0x7fb6cb61ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3474)[0m     @     0x7fb6cad4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3474)[0m     @     0x7fb6cad4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3474)[0m     @     0x7fb6cad4dad3 at::TensorIterator::for_each()
[2m[36m(pid=3532)[0m     @     0x7f9c03f61a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3532)[0m     @     0x7f9c03f5f388 at::native::copy_impl()
[2m[36m(pid=3532)[0m     @     0x7f9c03f615a4 at::native::copy_()
[2m[36m(pid=3532)[0m     @     0x7f9c0464c4f5 at::Tensor::copy_()
[2m[36m(pid=3532)[0m     @     0x7f9c06b1f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3532)[0m     @     0x7f9c0464c4f5 at::Tensor::copy_()
[2m[36m(pid=3532)[0m     @     0x7f9c0a6f779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3532)[0m     @     0x55898421afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3532)[0m     @     0x558984175b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3532)[0m     @     0x558984200baf _PyEval_EvalCodeWithName
[2m[36m(pid=3532)[0m     @     0x558984201a20 method_vectorcall
[2m[36m(pid=3532)[0m     @     0x558984175bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3532)[0m     @     0x558984200baf _PyEval_EvalCodeWithName
[2m[36m(pid=3532)[0m     @     0x558984201643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3532)[0m     @     0x558984176689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3532)[0m     @     0x558984200baf _PyEval_EvalCodeWithName
[2m[36m(pid=3532)[0m     @     0x558984201643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3458)[0m     @     0x7f86d89538f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3458)[0m     @     0x7f86d8953ad3 at::TensorIterator::for_each()
[2m[36m(pid=3458)[0m     @     0x7f86d8953d91 at::TensorIterator::for_each()
[2m[36m(pid=3458)[0m     @     0x7f86d9236b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3458)[0m     @     0x7f86d9259c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3458)[0m     @     0x7f86d86fba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3590)[0m     @     0x7eddeb09da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3590)[0m     @     0x7eddeb09b388 at::native::copy_impl()
[2m[36m(pid=3590)[0m     @     0x7eddeb09d5a4 at::native::copy_()
[2m[36m(pid=3590)[0m     @     0x7eddeb7884f5 at::Tensor::copy_()
[2m[36m(pid=3590)[0m     @     0x7eddedc5b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3590)[0m     @     0x7eddeb7884f5 at::Tensor::copy_()
[2m[36m(pid=3590)[0m     @     0x7eddf183379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3590)[0m     @     0x55b21f155fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3590)[0m     @     0x55b21f0b0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3590)[0m     @     0x55b21f13bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3590)[0m     @     0x55b21f13ca20 method_vectorcall
[2m[36m(pid=3590)[0m     @     0x55b21f0b0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3590)[0m     @     0x55b21f13bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3590)[0m     @     0x55b21f13c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3590)[0m     @     0x55b21f0b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3590)[0m     @     0x55b21f13bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3590)[0m     @     0x55b21f13c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3590)[0m     @     0x55b21f0b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3590)[0m     @     0x55b21f13bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3590)[0m     @     0x55b21f13c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3590)[0m     @     0x55b21f0b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3590)[0m     @     0x55b21f13bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3590)[0m     @     0x55b21f13c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3590)[0m     @     0x55b21f0b1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3460)[0m     @     0x7efe27af5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3460)[0m     @     0x7efe272207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3460)[0m     @     0x7efe272238f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3460)[0m     @     0x7efe27223ad3 at::TensorIterator::for_each()
[2m[36m(pid=3460)[0m     @     0x7efe27223d91 at::TensorIterator::for_each()
[2m[36m(pid=3460)[0m     @     0x7efe27b06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3460)[0m     @     0x7efe27b29c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3449)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3449)[0m *** SIGSEGV (@0x0) received by PID 3449 (TID 0x7f4adc9bc700) from PID 0; stack trace: ***
[2m[36m(pid=3449)[0m     @     0x7f4adc595390 (unknown)
[2m[36m(pid=3449)[0m     @     0x7f1bdc521f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3449)[0m     @     0x7f1bdbc4c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3449)[0m     @     0x7f1bdbc4f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3502)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3502)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3502)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3502)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3502)[0m *** SIGSEGV (@0x0) received by PID 3502 (TID 0x7f85fafbf700) from PID 0; stack trace: ***
[2m[36m(pid=3502)[0m     @     0x7f85fab98390 (unknown)
[2m[36m(pid=3502)[0m     @     0x7f56fab21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3502)[0m     @     0x7f56fa24c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3502)[0m     @     0x7f56fa24f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3502)[0m     @     0x7f56fa24fad3 at::TensorIterator::for_each()
[2m[36m(pid=3471)[0m     @     0x7f96272c2390 (unknown)
[2m[36m(pid=3471)[0m     @     0x7f6727229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3471)[0m     @     0x7f67269547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3471)[0m     @     0x7f67269578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3471)[0m     @     0x7f6726957ad3 at::TensorIterator::for_each()
[2m[36m(pid=3471)[0m     @     0x7f6726957d91 at::TensorIterator::for_each()
[2m[36m(pid=3471)[0m     @     0x7f672723ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3471)[0m     @     0x7f672725dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3462)[0m     @     0x7eef0213af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3462)[0m     @     0x7eef018657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3462)[0m     @     0x7eef018688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3462)[0m     @     0x7eef01868ad3 at::TensorIterator::for_each()
[2m[36m(pid=3462)[0m     @     0x7eef01868d91 at::TensorIterator::for_each()
[2m[36m(pid=3462)[0m     @     0x7eef0214bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3462)[0m     @     0x7eef0216ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3468)[0m     @     0x7f7186651390 (unknown)
[2m[36m(pid=3468)[0m     @     0x7f42864f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3468)[0m     @     0x7f4285c247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3468)[0m     @     0x7f4285c278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3468)[0m     @     0x7f4285c27ad3 at::TensorIterator::for_each()
[2m[36m(pid=3468)[0m     @     0x7f4285c27d91 at::TensorIterator::for_each()
[2m[36m(pid=3468)[0m     @     0x7f428650ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3601)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3601)[0m *** SIGSEGV (@0x0) received by PID 3601 (TID 0x7f1b35d70700) from PID 0; stack trace: ***
[2m[36m(pid=3601)[0m     @     0x7f1b35949390 (unknown)
[2m[36m(pid=3601)[0m     @     0x7eec357f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3601)[0m     @     0x7eec34f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3601)[0m     @     0x7eec34f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3601)[0m     @     0x7eec34f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=3447)[0m     @     0x7f35aba0ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3447)[0m     @     0x7f35aba0a388 at::native::copy_impl()
[2m[36m(pid=3447)[0m     @     0x7f35aba0c5a4 at::native::copy_()
[2m[36m(pid=3447)[0m     @     0x7f35ac0f74f5 at::Tensor::copy_()
[2m[36m(pid=3447)[0m     @     0x7f35ae5ca8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3447)[0m     @     0x7f35ac0f74f5 at::Tensor::copy_()
[2m[36m(pid=3529)[0m     @     0x7f139d20da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3529)[0m     @     0x7f139d20b388 at::native::copy_impl()
[2m[36m(pid=3529)[0m     @     0x7f139d20d5a4 at::native::copy_()
[2m[36m(pid=3529)[0m     @     0x7f139d8f84f5 at::Tensor::copy_()
[2m[36m(pid=3529)[0m     @     0x7f139fdcb8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3529)[0m     @     0x7f139d8f84f5 at::Tensor::copy_()
2020-11-05 10:17:00,114	WARNING worker.py:945 -- The driver may not be able to keep up with the stdout/stderr of the workers. To avoid forwarding logs to the driver, use 'ray.init(log_to_driver=False)'.
[2m[36m(pid=3537)[0m     @     0x7f923def7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3537)[0m     @     0x7f923def5388 at::native::copy_impl()
[2m[36m(pid=3537)[0m     @     0x7f923def75a4 at::native::copy_()
[2m[36m(pid=3537)[0m     @     0x7f923e5e24f5 at::Tensor::copy_()
[2m[36m(pid=3537)[0m     @     0x7f9240ab58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3537)[0m     @     0x7f923e5e24f5 at::Tensor::copy_()
[2m[36m(pid=3466)[0m     @     0x7ef3c72207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3466)[0m     @     0x7ef3c72238f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3466)[0m     @     0x7ef3c7223ad3 at::TensorIterator::for_each()
[2m[36m(pid=3466)[0m     @     0x7ef3c7223d91 at::TensorIterator::for_each()
[2m[36m(pid=3466)[0m     @     0x7ef3c7b06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3466)[0m     @     0x7ef3c7b29c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3547)[0m     @     0x7f0203cfba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3547)[0m     @     0x7f0203cf9388 at::native::copy_impl()
[2m[36m(pid=3547)[0m     @     0x7f0203cfb5a4 at::native::copy_()
[2m[36m(pid=3547)[0m     @     0x7f02043e64f5 at::Tensor::copy_()
[2m[36m(pid=3547)[0m     @     0x7f02068b98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3547)[0m     @     0x7f02043e64f5 at::Tensor::copy_()
[2m[36m(pid=3584)[0m     @     0x7f683b5965a4 at::native::copy_()
[2m[36m(pid=3584)[0m     @     0x7f683bc814f5 at::Tensor::copy_()
[2m[36m(pid=3584)[0m     @     0x7f683e1548de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3584)[0m     @     0x7f683bc814f5 at::Tensor::copy_()
[2m[36m(pid=3584)[0m     @     0x7f6841d2c79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3584)[0m     @     0x55b878866fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3584)[0m     @     0x55b8787c1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3584)[0m     @     0x55b87884cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3584)[0m     @     0x55b87884da20 method_vectorcall
[2m[36m(pid=3584)[0m     @     0x55b8787c1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3584)[0m     @     0x55b87884cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3584)[0m     @     0x55b87884d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3584)[0m     @     0x55b8787c2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3584)[0m     @     0x55b87884cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3584)[0m     @     0x55b87884d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3584)[0m     @     0x55b8787c2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3584)[0m     @     0x55b87884cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3584)[0m     @     0x55b87884d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3584)[0m     @     0x55b8787c2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3584)[0m     @     0x55b87884cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3584)[0m     @     0x55b87884d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3584)[0m     @     0x55b8787c2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3538)[0m     @     0x7f69fcee05a4 at::native::copy_()
[2m[36m(pid=3538)[0m     @     0x7f69fd5cb4f5 at::Tensor::copy_()
[2m[36m(pid=3538)[0m     @     0x7f69ffa9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3538)[0m     @     0x7f69fd5cb4f5 at::Tensor::copy_()
[2m[36m(pid=3538)[0m     @     0x7f6a0367679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3538)[0m     @     0x5629f42a2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3538)[0m     @     0x5629f41fdb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3538)[0m     @     0x5629f4288baf _PyEval_EvalCodeWithName
[2m[36m(pid=3538)[0m     @     0x5629f4289a20 method_vectorcall
[2m[36m(pid=3538)[0m     @     0x5629f41fdbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3538)[0m     @     0x5629f4288baf _PyEval_EvalCodeWithName
[2m[36m(pid=3538)[0m     @     0x5629f4289643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3538)[0m     @     0x5629f41fe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3538)[0m     @     0x5629f4288baf _PyEval_EvalCodeWithName
[2m[36m(pid=3538)[0m     @     0x5629f4289643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3538)[0m     @     0x5629f41fe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3538)[0m     @     0x5629f4288baf _PyEval_EvalCodeWithName
[2m[36m(pid=3538)[0m     @     0x5629f4289643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3538)[0m     @     0x5629f41fe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3538)[0m     @     0x5629f4288baf _PyEval_EvalCodeWithName
[2m[36m(pid=3538)[0m     @     0x5629f4289643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3538)[0m     @     0x5629f41fe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3553)[0m     @     0x7fb5cb4f2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3553)[0m     @     0x7fb5cb4f0388 at::native::copy_impl()
[2m[36m(pid=3553)[0m     @     0x7fb5cb4f25a4 at::native::copy_()
[2m[36m(pid=3553)[0m     @     0x7fb5cbbdd4f5 at::Tensor::copy_()
[2m[36m(pid=3553)[0m     @     0x7fb5ce0b08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3553)[0m     @     0x7fb5cbbdd4f5 at::Tensor::copy_()
[2m[36m(pid=3553)[0m     @     0x7fb5d1c8879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3553)[0m     @     0x555f9b94ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3553)[0m     @     0x555f9b8aab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3553)[0m     @     0x555f9b935baf _PyEval_EvalCodeWithName
[2m[36m(pid=3553)[0m     @     0x555f9b936a20 method_vectorcall
[2m[36m(pid=3553)[0m     @     0x555f9b8aabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3553)[0m     @     0x555f9b935baf _PyEval_EvalCodeWithName
[2m[36m(pid=3569)[0m     @     0x7f9ca23e9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3569)[0m     @     0x7f9ca23e7388 at::native::copy_impl()
[2m[36m(pid=3569)[0m     @     0x7f9ca23e95a4 at::native::copy_()
[2m[36m(pid=3569)[0m     @     0x7f9ca2ad44f5 at::Tensor::copy_()
[2m[36m(pid=3569)[0m     @     0x7f9ca4fa78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3526)[0m     @     0x7f3680ba48f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3526)[0m     @     0x7f3680ba4ad3 at::TensorIterator::for_each()
[2m[36m(pid=3526)[0m     @     0x7f3680ba4d91 at::TensorIterator::for_each()
[2m[36m(pid=3526)[0m     @     0x7f3681487b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3526)[0m     @     0x7f36814aac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3526)[0m     @     0x7f368094ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3588)[0m     @     0x7ee20f8b95a4 at::native::copy_()
[2m[36m(pid=3588)[0m     @     0x7ee20ffa44f5 at::Tensor::copy_()
[2m[36m(pid=3588)[0m     @     0x7ee2124778de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3588)[0m     @     0x7ee20ffa44f5 at::Tensor::copy_()
[2m[36m(pid=3588)[0m     @     0x7ee21604f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3588)[0m     @     0x556e1ef25fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3588)[0m     @     0x556e1ee80b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3588)[0m     @     0x556e1ef0bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3588)[0m     @     0x556e1ef0ca20 method_vectorcall
[2m[36m(pid=3588)[0m     @     0x556e1ee80bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3588)[0m     @     0x556e1ef0bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3588)[0m     @     0x556e1ef0c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3588)[0m     @     0x556e1ee81689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3588)[0m     @     0x556e1ef0bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3588)[0m     @     0x556e1ef0c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3588)[0m     @     0x556e1ee81689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3588)[0m     @     0x556e1ef0bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3588)[0m     @     0x556e1ef0c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3588)[0m     @     0x556e1ee81689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3588)[0m     @     0x556e1ef0bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3588)[0m     @     0x556e1ef0c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3588)[0m     @     0x556e1ee81689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3457)[0m     @     0x7f80a6729390 (unknown)
[2m[36m(pid=3457)[0m     @     0x7f51a6193f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3457)[0m     @     0x7f51a58be7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3457)[0m     @     0x7f51a58c18f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3457)[0m     @     0x7f51a58c1ad3 at::TensorIterator::for_each()
[2m[36m(pid=3457)[0m     @     0x7f51a58c1d91 at::TensorIterator::for_each()
[2m[36m(pid=3457)[0m     @     0x7f51a61a4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3472)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3472)[0m *** SIGSEGV (@0x0) received by PID 3472 (TID 0x7fa03bd0c700) from PID 0; stack trace: ***
[2m[36m(pid=3472)[0m     @     0x7fa03b8e5390 (unknown)
[2m[36m(pid=3472)[0m     @     0x7f713b89ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3472)[0m     @     0x7f713afc97db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3472)[0m     @     0x7f713afcc8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3472)[0m     @     0x7f713afccad3 at::TensorIterator::for_each()
[2m[36m(pid=3525)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3525)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3525)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3525)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3525)[0m *** SIGSEGV (@0x0) received by PID 3525 (TID 0x7f8361c83700) from PID 0; stack trace: ***
[2m[36m(pid=3525)[0m     @     0x7f836185c390 (unknown)
[2m[36m(pid=3525)[0m     @     0x7f54617f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3525)[0m     @     0x7f5460f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3525)[0m     @     0x7f5460f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3525)[0m     @     0x7f5460f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=3479)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3479)[0m *** SIGSEGV (@0x0) received by PID 3479 (TID 0x7f755d901700) from PID 0; stack trace: ***
[2m[36m(pid=3479)[0m     @     0x7f755d4da390 (unknown)
[2m[36m(pid=3479)[0m     @     0x7f465d476f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3479)[0m     @     0x7f465cba17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3479)[0m     @     0x7f465cba48f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3479)[0m     @     0x7f465cba4ad3 at::TensorIterator::for_each()
[2m[36m(pid=3451)[0m     @     0x7f66bbcab390 (unknown)
[2m[36m(pid=3451)[0m     @     0x7f37bbaf5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3451)[0m     @     0x7f37bb2207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3451)[0m     @     0x7f37bb2238f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3451)[0m     @     0x7f37bb223ad3 at::TensorIterator::for_each()
[2m[36m(pid=3451)[0m     @     0x7f37bb223d91 at::TensorIterator::for_each()
[2m[36m(pid=3531)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3531)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3531)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3531)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3531)[0m *** SIGSEGV (@0x0) received by PID 3531 (TID 0x7f50ec23a700) from PID 0; stack trace: ***
[2m[36m(pid=3465)[0m     @     0x7f2b31220390 (unknown)
[2m[36m(pid=3465)[0m     @     0x7efc310b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3465)[0m     @     0x7efc307e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3465)[0m     @     0x7efc307e38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3465)[0m     @     0x7efc307e3ad3 at::TensorIterator::for_each()
[2m[36m(pid=3465)[0m     @     0x7efc307e3d91 at::TensorIterator::for_each()
[2m[36m(pid=3465)[0m     @     0x7efc310c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3544)[0m     @     0x7f04f47768f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3544)[0m     @     0x7f04f4776ad3 at::TensorIterator::for_each()
[2m[36m(pid=3544)[0m     @     0x7f04f4776d91 at::TensorIterator::for_each()
[2m[36m(pid=3544)[0m     @     0x7f04f5059b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3544)[0m     @     0x7f04f507cc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3544)[0m     @     0x7f04f451ea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3559)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3559)[0m *** SIGSEGV (@0x0) received by PID 3559 (TID 0x7f830812d700) from PID 0; stack trace: ***
[2m[36m(pid=3559)[0m     @     0x7f8307d06390 (unknown)
[2m[36m(pid=3559)[0m     @     0x7f5407af5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3559)[0m     @     0x7f54072207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3559)[0m     @     0x7f54072238f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3541)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3541)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3541)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3541)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3541)[0m *** SIGSEGV (@0x0) received by PID 3541 (TID 0x7f1a09317700) from PID 0; stack trace: ***
[2m[36m(pid=3541)[0m     @     0x7f1a08ef0390 (unknown)
[2m[36m(pid=3541)[0m     @     0x7eeb08b85f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3541)[0m     @     0x7eeb082b07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3506)[0m     @     0x7f50acaf8390 (unknown)
[2m[36m(pid=3506)[0m     @     0x7f21ac9e8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3506)[0m     @     0x7f21ac1137db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3506)[0m     @     0x7f21ac1168f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3506)[0m     @     0x7f21ac116ad3 at::TensorIterator::for_each()
[2m[36m(pid=3506)[0m     @     0x7f21ac116d91 at::TensorIterator::for_each()
[2m[36m(pid=3500)[0m     @     0x7f295dee67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3500)[0m     @     0x7f295dee98f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3500)[0m     @     0x7f295dee9ad3 at::TensorIterator::for_each()
[2m[36m(pid=3500)[0m     @     0x7f295dee9d91 at::TensorIterator::for_each()
[2m[36m(pid=3500)[0m     @     0x7f295e7ccb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3483)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3483)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3483)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3483)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3483)[0m *** SIGSEGV (@0x0) received by PID 3483 (TID 0x7f9791603700) from PID 0; stack trace: ***
[2m[36m(pid=3483)[0m     @     0x7f97911dc390 (unknown)
[2m[36m(pid=3483)[0m     @     0x7f6891166f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3517)[0m     @     0x7eeeb09e8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3517)[0m     @     0x7eeeb01137db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3517)[0m     @     0x7eeeb01168f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3517)[0m     @     0x7eeeb0116ad3 at::TensorIterator::for_each()
[2m[36m(pid=3517)[0m     @     0x7eeeb0116d91 at::TensorIterator::for_each()
[2m[36m(pid=3580)[0m     @     0x7f81e7aa8390 (unknown)
[2m[36m(pid=3580)[0m     @     0x7f52e7a23f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3580)[0m     @     0x7f52e714e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3580)[0m     @     0x7f52e71518f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3580)[0m     @     0x7f52e7151ad3 at::TensorIterator::for_each()
[2m[36m(pid=3459)[0m     @     0x7f1d038def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3459)[0m     @     0x7f1d030097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3459)[0m     @     0x7f1d0300c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3459)[0m     @     0x7f1d0300cad3 at::TensorIterator::for_each()
[2m[36m(pid=3505)[0m     @     0x7fad22641ad3 at::TensorIterator::for_each()
[2m[36m(pid=3505)[0m     @     0x7fad22641d91 at::TensorIterator::for_each()
[2m[36m(pid=3505)[0m     @     0x7fad22f24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3505)[0m     @     0x7fad22f47c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3505)[0m     @     0x7fad223e9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3448)[0m     @     0x7fb966d4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3448)[0m     @     0x7fb966d4dad3 at::TensorIterator::for_each()
[2m[36m(pid=3448)[0m     @     0x7fb966d4dd91 at::TensorIterator::for_each()
[2m[36m(pid=3448)[0m     @     0x7fb967630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3448)[0m     @     0x7fb967653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3520)[0m     @     0x7fd66be3f390 (unknown)
[2m[36m(pid=3520)[0m     @     0x7fa76bddef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3520)[0m     @     0x7fa76b5097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3520)[0m     @     0x7fa76b50c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3520)[0m     @     0x7fa76b50cad3 at::TensorIterator::for_each()
[2m[36m(pid=3578)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3578)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3578)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3578)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3578)[0m *** SIGSEGV (@0x0) received by PID 3578 (TID 0x7f2f2956e700) from PID 0; stack trace: ***
[2m[36m(pid=3578)[0m     @     0x7f2f29147390 (unknown)
[2m[36m(pid=3450)[0m     @     0x7ee8fad4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3450)[0m     @     0x7ee8fad4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3450)[0m     @     0x7ee8fad4dad3 at::TensorIterator::for_each()
[2m[36m(pid=3450)[0m     @     0x7ee8fad4dd91 at::TensorIterator::for_each()
[2m[36m(pid=3450)[0m     @     0x7ee8fb630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3570)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3570)[0m *** SIGSEGV (@0x0) received by PID 3570 (TID 0x7f15a3af8700) from PID 0; stack trace: ***
[2m[36m(pid=3570)[0m     @     0x7f15a36d1390 (unknown)
[2m[36m(pid=3570)[0m     @     0x7ee6a361ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3570)[0m     @     0x7ee6a2d4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3570)[0m     @     0x7ee6a2d4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3570)[0m     @     0x7ee6a2d4dad3 at::TensorIterator::for_each()
[2m[36m(pid=3470)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3470)[0m *** SIGSEGV (@0x0) received by PID 3470 (TID 0x7fdf56410700) from PID 0; stack trace: ***
[2m[36m(pid=3470)[0m     @     0x7fdf55fe9390 (unknown)
[2m[36m(pid=3470)[0m     @     0x7fb055e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3470)[0m     @     0x7fb05554f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3550)[0m     @     0x7f3a987848f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3550)[0m     @     0x7f3a98784ad3 at::TensorIterator::for_each()
[2m[36m(pid=3550)[0m     @     0x7f3a98784d91 at::TensorIterator::for_each()
[2m[36m(pid=3550)[0m     @     0x7f3a99067b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3522)[0m     @     0x7f5c92dea4f5 at::Tensor::copy_()
[2m[36m(pid=3522)[0m     @     0x7f5c952bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3522)[0m     @     0x7f5c92dea4f5 at::Tensor::copy_()
[2m[36m(pid=3522)[0m     @     0x7f5c98e9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3522)[0m     @     0x560d944bdfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3522)[0m     @     0x560d94418b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3522)[0m     @     0x560d944a3baf _PyEval_EvalCodeWithName
[2m[36m(pid=3522)[0m     @     0x560d944a4a20 method_vectorcall
[2m[36m(pid=3522)[0m     @     0x560d94418bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3522)[0m     @     0x560d944a3baf _PyEval_EvalCodeWithName
[2m[36m(pid=3522)[0m     @     0x560d944a4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3522)[0m     @     0x560d94419689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3522)[0m     @     0x560d944a3baf _PyEval_EvalCodeWithName
[2m[36m(pid=3522)[0m     @     0x560d944a4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3522)[0m     @     0x560d94419689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3522)[0m     @     0x560d944a3baf _PyEval_EvalCodeWithName
[2m[36m(pid=3522)[0m     @     0x560d944a4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3522)[0m     @     0x560d94419689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3522)[0m     @     0x560d944a3baf _PyEval_EvalCodeWithName
[2m[36m(pid=3522)[0m     @     0x560d944a4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3522)[0m     @     0x560d94419689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3478)[0m     @     0x7ef548250f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3478)[0m     @     0x7ef54797b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3478)[0m     @     0x7ef54797e8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3478)[0m     @     0x7ef54797ead3 at::TensorIterator::for_each()
[2m[36m(pid=3478)[0m     @     0x7ef54797ed91 at::TensorIterator::for_each()
[2m[36m(pid=3576)[0m     @     0x7f1bafa218f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3576)[0m     @     0x7f1bafa21ad3 at::TensorIterator::for_each()
[2m[36m(pid=3576)[0m     @     0x7f1bafa21d91 at::TensorIterator::for_each()
[2m[36m(pid=3576)[0m     @     0x7f1bb0304b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3576)[0m     @     0x7f1bb0327c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3576)[0m     @     0x7f1baf7c9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3454)[0m     @     0x7f0993e9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3454)[0m     @     0x7f0993ea28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3454)[0m     @     0x7f0993ea2ad3 at::TensorIterator::for_each()
[2m[36m(pid=3454)[0m     @     0x7f0993ea2d91 at::TensorIterator::for_each()
[2m[36m(pid=3454)[0m     @     0x7f0994785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3454)[0m     @     0x7f09947a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3524)[0m     @     0x7f7e4ad4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3524)[0m     @     0x7f7e4ad4dad3 at::TensorIterator::for_each()
[2m[36m(pid=3530)[0m     @     0x7f396dcd28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3530)[0m     @     0x7f396dcd2ad3 at::TensorIterator::for_each()
[2m[36m(pid=3530)[0m     @     0x7f396dcd2d91 at::TensorIterator::for_each()
[2m[36m(pid=3530)[0m     @     0x7f396e5b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3530)[0m     @     0x7f396e5d8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3530)[0m     @     0x7f396da7aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3530)[0m     @     0x7f396da78388 at::native::copy_impl()
[2m[36m(pid=3508)[0m     @     0x7f2d6774a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3508)[0m     @     0x7f2d6774aad3 at::TensorIterator::for_each()
[2m[36m(pid=3508)[0m     @     0x7f2d6774ad91 at::TensorIterator::for_each()
[2m[36m(pid=3508)[0m     @     0x7f2d6802db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3508)[0m     @     0x7f2d68050c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3508)[0m     @     0x7f2d674f2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3508)[0m     @     0x7f2d674f0388 at::native::copy_impl()
[2m[36m(pid=3469)[0m     @     0x7fa22855e5a4 at::native::copy_()
[2m[36m(pid=3469)[0m     @     0x7fa228c494f5 at::Tensor::copy_()
[2m[36m(pid=3469)[0m     @     0x7fa22b11c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3469)[0m     @     0x7fa228c494f5 at::Tensor::copy_()
[2m[36m(pid=3469)[0m     @     0x7fa22ecf479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3469)[0m     @     0x55c4a4341fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3469)[0m     @     0x55c4a429cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3469)[0m     @     0x55c4a4327baf _PyEval_EvalCodeWithName
[2m[36m(pid=3469)[0m     @     0x55c4a4328a20 method_vectorcall
[2m[36m(pid=3469)[0m     @     0x55c4a429cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3469)[0m     @     0x55c4a4327baf _PyEval_EvalCodeWithName
[2m[36m(pid=3469)[0m     @     0x55c4a4328643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3469)[0m     @     0x55c4a429d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3469)[0m     @     0x55c4a4327baf _PyEval_EvalCodeWithName
[2m[36m(pid=3469)[0m     @     0x55c4a4328643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3469)[0m     @     0x55c4a429d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3469)[0m     @     0x55c4a4327baf _PyEval_EvalCodeWithName
[2m[36m(pid=3469)[0m     @     0x55c4a4328643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3469)[0m     @     0x55c4a429d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3469)[0m     @     0x55c4a4327baf _PyEval_EvalCodeWithName
[2m[36m(pid=3469)[0m     @     0x55c4a4328643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3469)[0m     @     0x55c4a429d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3515)[0m     @     0x7f6887725390 (unknown)
[2m[36m(pid=3515)[0m     @     0x7f39876aef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3515)[0m     @     0x7f3986dd97db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3515)[0m     @     0x7f3986ddc8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3515)[0m     @     0x7f3986ddcad3 at::TensorIterator::for_each()
[2m[36m(pid=3452)[0m     @     0x7fb9ed5528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3452)[0m     @     0x7fb9ed552ad3 at::TensorIterator::for_each()
[2m[36m(pid=3452)[0m     @     0x7fb9ed552d91 at::TensorIterator::for_each()
[2m[36m(pid=3452)[0m     @     0x7fb9ede35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3452)[0m     @     0x7fb9ede58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3452)[0m     @     0x7fb9ed2faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3452)[0m     @     0x7fb9ed2f8388 at::native::copy_impl()
[2m[36m(pid=3475)[0m     @     0x7fbdab82fad3 at::TensorIterator::for_each()
[2m[36m(pid=3475)[0m     @     0x7fbdab82fd91 at::TensorIterator::for_each()
[2m[36m(pid=3475)[0m     @     0x7fbdac112b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3475)[0m     @     0x7fbdac135c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3475)[0m     @     0x7fbdab5d7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3475)[0m     @     0x7fbdab5d5388 at::native::copy_impl()
[2m[36m(pid=3475)[0m     @     0x7fbdab5d75a4 at::native::copy_()
[2m[36m(pid=3512)[0m     @     0x7f3e04711ad3 at::TensorIterator::for_each()
[2m[36m(pid=3512)[0m     @     0x7f3e04711d91 at::TensorIterator::for_each()
[2m[36m(pid=3512)[0m     @     0x7f3e04ff4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3512)[0m     @     0x7f3e05017c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3512)[0m     @     0x7f3e044b9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3512)[0m     @     0x7f3e044b7388 at::native::copy_impl()
[2m[36m(pid=3512)[0m     @     0x7f3e044b95a4 at::native::copy_()
[2m[36m(pid=3556)[0m     @     0x7f981bea28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3556)[0m     @     0x7f981bea2ad3 at::TensorIterator::for_each()
[2m[36m(pid=3556)[0m     @     0x7f981bea2d91 at::TensorIterator::for_each()
[2m[36m(pid=3556)[0m     @     0x7f981c785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3556)[0m     @     0x7f981c7a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3556)[0m     @     0x7f981bc4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3556)[0m     @     0x7f981bc48388 at::native::copy_impl()
[2m[36m(pid=3598)[0m     @     0x7fa4ada39ad3 at::TensorIterator::for_each()
[2m[36m(pid=3598)[0m     @     0x7fa4ada39d91 at::TensorIterator::for_each()
[2m[36m(pid=3598)[0m     @     0x7fa4ae31cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3598)[0m     @     0x7fa4ae33fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3598)[0m     @     0x7fa4ad7e1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3598)[0m     @     0x7fa4ad7df388 at::native::copy_impl()
[2m[36m(pid=3598)[0m     @     0x7fa4ad7e15a4 at::native::copy_()
[2m[36m(pid=3527)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3527)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3527)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3527)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3527)[0m *** SIGSEGV (@0x0) received by PID 3527 (TID 0x7fe1ffd72700) from PID 0; stack trace: ***
[2m[36m(pid=3527)[0m     @     0x7fe1ff94b390 (unknown)
[2m[36m(pid=3527)[0m     @     0x7fb2ff751f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3527)[0m     @     0x7fb2fee7c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3463)[0m     @     0x7fb260f27d91 at::TensorIterator::for_each()
[2m[36m(pid=3463)[0m     @     0x7fb26180ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3463)[0m     @     0x7fb26182dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3463)[0m     @     0x7fb260ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3463)[0m     @     0x7fb260ccd388 at::native::copy_impl()
[2m[36m(pid=3463)[0m     @     0x7fb260ccf5a4 at::native::copy_()
[2m[36m(pid=3510)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=3510)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=3510)[0m *** Aborted at 1604571420 (unix time) try "date -d @1604571420" if you are using GNU date ***
[2m[36m(pid=3510)[0m PC: @                0x0 (unknown)
[2m[36m(pid=3510)[0m *** SIGSEGV (@0x0) received by PID 3510 (TID 0x7fa963bee700) from PID 0; stack trace: ***
[2m[36m(pid=3510)[0m     @     0x7fa9637c7390 (unknown)
[2m[36m(pid=3510)[0m     @     0x7f7a6361ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3510)[0m     @     0x7f7a62d4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3510)[0m     @     0x7f7a62d4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3461)[0m     @     0x7f7faab688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3461)[0m     @     0x7f7faab68ad3 at::TensorIterator::for_each()
[2m[36m(pid=3461)[0m     @     0x7f7faab68d91 at::TensorIterator::for_each()
[2m[36m(pid=3461)[0m     @     0x7f7fab44bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3461)[0m     @     0x7f7fab46ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3574)[0m     @     0x7f1fb14b78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3453)[0m     @     0x7faaa1155390 (unknown)
[2m[36m(pid=3453)[0m     @     0x7f7ba10f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3453)[0m     @     0x7f7ba08247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3453)[0m     @     0x7f7ba08278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3453)[0m     @     0x7f7ba0827ad3 at::TensorIterator::for_each()
[2m[36m(pid=3528)[0m     @     0x7f62f0acd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3528)[0m     @     0x7f62f0acdad3 at::TensorIterator::for_each()
[2m[36m(pid=3528)[0m     @     0x7f62f0acdd91 at::TensorIterator::for_each()
[2m[36m(pid=3528)[0m     @     0x7f62f13b0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3528)[0m     @     0x7f62f13d3c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3473)[0m     @     0x7f1e477c0390 (unknown)
[2m[36m(pid=3473)[0m     @     0x7eef4761ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3473)[0m     @     0x7eef46d4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3561)[0m     @     0x7f067d0a44f5 at::Tensor::copy_()
[2m[36m(pid=3561)[0m     @     0x7f067f5778de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3561)[0m     @     0x7f067d0a44f5 at::Tensor::copy_()
[2m[36m(pid=3561)[0m     @     0x7f068314f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3561)[0m     @     0x559c8bf30fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3561)[0m     @     0x559c8be8bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3561)[0m     @     0x559c8bf16baf _PyEval_EvalCodeWithName
[2m[36m(pid=3561)[0m     @     0x559c8bf17a20 method_vectorcall
[2m[36m(pid=3561)[0m     @     0x559c8be8bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3561)[0m     @     0x559c8bf16baf _PyEval_EvalCodeWithName
[2m[36m(pid=3561)[0m     @     0x559c8bf17643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3561)[0m     @     0x559c8be8c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3561)[0m     @     0x559c8bf16baf _PyEval_EvalCodeWithName
[2m[36m(pid=3561)[0m     @     0x559c8bf17643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3561)[0m     @     0x559c8be8c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3561)[0m     @     0x559c8bf16baf _PyEval_EvalCodeWithName
[2m[36m(pid=3561)[0m     @     0x559c8bf17643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3561)[0m     @     0x559c8be8c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3561)[0m     @     0x559c8bf16baf _PyEval_EvalCodeWithName
[2m[36m(pid=3561)[0m     @     0x559c8bf17643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3561)[0m     @     0x559c8be8c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3582)[0m     @     0x7eeb481cf4f5 at::Tensor::copy_()
[2m[36m(pid=3582)[0m     @     0x7eeb4a6a28de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3582)[0m     @     0x7eeb481cf4f5 at::Tensor::copy_()
[2m[36m(pid=3582)[0m     @     0x7eeb4e27a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3582)[0m     @     0x561977938fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3582)[0m     @     0x561977893b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3582)[0m     @     0x56197791ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3582)[0m     @     0x56197791fa20 method_vectorcall
[2m[36m(pid=3582)[0m     @     0x561977893bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3582)[0m     @     0x56197791ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3582)[0m     @     0x56197791f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3582)[0m     @     0x561977894689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3582)[0m     @     0x56197791ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3582)[0m     @     0x56197791f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3582)[0m     @     0x561977894689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3582)[0m     @     0x56197791ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3582)[0m     @     0x56197791f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3582)[0m     @     0x561977894689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3582)[0m     @     0x56197791ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3582)[0m     @     0x56197791f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3582)[0m     @     0x561977894689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3497)[0m     @     0x7eed5408bd91 at::TensorIterator::for_each()
[2m[36m(pid=3497)[0m     @     0x7eed5496eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3497)[0m     @     0x7eed54991c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3497)[0m     @     0x7eed53e33a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3497)[0m     @     0x7eed53e31388 at::native::copy_impl()
[2m[36m(pid=3497)[0m     @     0x7eed53e335a4 at::native::copy_()
[2m[36m(pid=3539)[0m     @     0x7fcbf19e54f5 at::Tensor::copy_()
[2m[36m(pid=3539)[0m     @     0x7fcbf3eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3539)[0m     @     0x7fcbf19e54f5 at::Tensor::copy_()
[2m[36m(pid=3539)[0m     @     0x7fcbf7a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3539)[0m     @     0x55b1319b1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3539)[0m     @     0x55b13190cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3539)[0m     @     0x55b131997baf _PyEval_EvalCodeWithName
[2m[36m(pid=3539)[0m     @     0x55b131998a20 method_vectorcall
[2m[36m(pid=3539)[0m     @     0x55b13190cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3539)[0m     @     0x55b131997baf _PyEval_EvalCodeWithName
[2m[36m(pid=3539)[0m     @     0x55b131998643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3539)[0m     @     0x55b13190d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3539)[0m     @     0x55b131997baf _PyEval_EvalCodeWithName
[2m[36m(pid=3539)[0m     @     0x55b131998643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3539)[0m     @     0x55b13190d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3539)[0m     @     0x55b131997baf _PyEval_EvalCodeWithName
[2m[36m(pid=3539)[0m     @     0x55b131998643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3539)[0m     @     0x55b13190d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3539)[0m     @     0x55b131997baf _PyEval_EvalCodeWithName
[2m[36m(pid=3539)[0m     @     0x55b131998643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3539)[0m     @     0x55b13190d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3534)[0m     @     0x7ef2b3d3cad3 at::TensorIterator::for_each()
[2m[36m(pid=3534)[0m     @     0x7ef2b3d3cd91 at::TensorIterator::for_each()
[2m[36m(pid=3534)[0m     @     0x7ef2b461fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3534)[0m     @     0x7ef2b4642c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3534)[0m     @     0x7ef2b3ae4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3534)[0m     @     0x7ef2b3ae2388 at::native::copy_impl()
[2m[36m(pid=3566)[0m     @     0x7fadc2ce54f5 at::Tensor::copy_()
[2m[36m(pid=3566)[0m     @     0x7fadc51b88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3566)[0m     @     0x7fadc2ce54f5 at::Tensor::copy_()
[2m[36m(pid=3566)[0m     @     0x7fadc8d9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3566)[0m     @     0x55e304218fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3566)[0m     @     0x55e304173b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3566)[0m     @     0x55e3041febaf _PyEval_EvalCodeWithName
[2m[36m(pid=3566)[0m     @     0x55e3041ffa20 method_vectorcall
[2m[36m(pid=3566)[0m     @     0x55e304173bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3566)[0m     @     0x55e3041febaf _PyEval_EvalCodeWithName
[2m[36m(pid=3566)[0m     @     0x55e3041ff643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3566)[0m     @     0x55e304174689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3566)[0m     @     0x55e3041febaf _PyEval_EvalCodeWithName
[2m[36m(pid=3566)[0m     @     0x55e3041ff643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3566)[0m     @     0x55e304174689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3566)[0m     @     0x55e3041febaf _PyEval_EvalCodeWithName
[2m[36m(pid=3566)[0m     @     0x55e3041ff643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3566)[0m     @     0x55e304174689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3566)[0m     @     0x55e3041febaf _PyEval_EvalCodeWithName
[2m[36m(pid=3566)[0m     @     0x55e3041ff643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3566)[0m     @     0x55e304174689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3467)[0m     @     0x7f6efad4dad3 at::TensorIterator::for_each()
[2m[36m(pid=3467)[0m     @     0x7f6efad4dd91 at::TensorIterator::for_each()
[2m[36m(pid=3467)[0m     @     0x7f6efb630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3467)[0m     @     0x7f6efb653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3467)[0m     @     0x7f6efaaf5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3467)[0m     @     0x7f6efaaf3388 at::native::copy_impl()
[2m[36m(pid=3467)[0m     @     0x7f6efaaf55a4 at::native::copy_()
[2m[36m(pid=3456)[0m     @     0x7f20ca594d91 at::TensorIterator::for_each()
[2m[36m(pid=3456)[0m     @     0x7f20cae77b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3456)[0m     @     0x7f20cae9ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3456)[0m     @     0x7f20ca33ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3456)[0m     @     0x7f20ca33a388 at::native::copy_impl()
[2m[36m(pid=3456)[0m     @     0x7f20ca33c5a4 at::native::copy_()
[2m[36m(pid=3535)[0m     @     0x7f904a641d91 at::TensorIterator::for_each()
[2m[36m(pid=3535)[0m     @     0x7f904af24b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3535)[0m     @     0x7f904af47c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3535)[0m     @     0x7f904a3e9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3535)[0m     @     0x7f904a3e7388 at::native::copy_impl()
[2m[36m(pid=3535)[0m     @     0x7f904a3e95a4 at::native::copy_()
[2m[36m(pid=3509)[0m     @     0x7f1f6e2cb4f5 at::Tensor::copy_()
[2m[36m(pid=3509)[0m     @     0x7f1f7437679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3509)[0m     @     0x5570db549fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3509)[0m     @     0x5570db4a4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3509)[0m     @     0x5570db52fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3509)[0m     @     0x5570db530a20 method_vectorcall
[2m[36m(pid=3509)[0m     @     0x5570db4a4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3509)[0m     @     0x5570db52fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3509)[0m     @     0x5570db530643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3509)[0m     @     0x5570db4a5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3509)[0m     @     0x5570db52fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3509)[0m     @     0x5570db530643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3509)[0m     @     0x5570db4a5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3509)[0m     @     0x5570db52fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3509)[0m     @     0x5570db530643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3509)[0m     @     0x5570db4a5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3509)[0m     @     0x5570db52fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3509)[0m     @     0x5570db530643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3509)[0m     @     0x5570db4a5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3474)[0m     @     0x7fb6cad4dd91 at::TensorIterator::for_each()
[2m[36m(pid=3474)[0m     @     0x7fb6cb630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3474)[0m     @     0x7fb6cb653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3474)[0m     @     0x7fb6caaf5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3474)[0m     @     0x7fb6caaf3388 at::native::copy_impl()
[2m[36m(pid=3532)[0m     @     0x558984176689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3532)[0m     @     0x558984200baf _PyEval_EvalCodeWithName
[2m[36m(pid=3532)[0m     @     0x558984201643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3532)[0m     @     0x558984176689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3532)[0m     @     0x558984200baf _PyEval_EvalCodeWithName
[2m[36m(pid=3532)[0m     @     0x558984201643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3532)[0m     @     0x558984176689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3458)[0m     @     0x7f86d86f9388 at::native::copy_impl()
[2m[36m(pid=3458)[0m     @     0x7f86d86fb5a4 at::native::copy_()
[2m[36m(pid=3458)[0m     @     0x7f86d8de64f5 at::Tensor::copy_()
[2m[36m(pid=3460)[0m     @     0x7efe26fcba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3460)[0m     @     0x7efe26fc9388 at::native::copy_impl()
[2m[36m(pid=3460)[0m     @     0x7efe26fcb5a4 at::native::copy_()
[2m[36m(pid=3460)[0m     @     0x7efe276b64f5 at::Tensor::copy_()
[2m[36m(pid=3449)[0m     @     0x7f1bdbc4fad3 at::TensorIterator::for_each()
[2m[36m(pid=3502)[0m     @     0x7f56fa24fd91 at::TensorIterator::for_each()
[2m[36m(pid=3502)[0m     @     0x7f56fab32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3502)[0m     @     0x7f56fab55c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3502)[0m     @     0x7f56f9ff7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3471)[0m     @     0x7f67266ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3471)[0m     @     0x7f67266fd388 at::native::copy_impl()
[2m[36m(pid=3471)[0m     @     0x7f67266ff5a4 at::native::copy_()
[2m[36m(pid=3471)[0m     @     0x7f6726dea4f5 at::Tensor::copy_()
[2m[36m(pid=3462)[0m     @     0x7eef01610a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3462)[0m     @     0x7eef0160e388 at::native::copy_impl()
[2m[36m(pid=3462)[0m     @     0x7eef016105a4 at::native::copy_()
[2m[36m(pid=3462)[0m     @     0x7eef01cfb4f5 at::Tensor::copy_()
[2m[36m(pid=3468)[0m     @     0x7f428652dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3468)[0m     @     0x7f42859cfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3468)[0m     @     0x7f42859cd388 at::native::copy_impl()
[2m[36m(pid=3468)[0m     @     0x7f42859cf5a4 at::native::copy_()
[2m[36m(pid=3601)[0m     @     0x7eec34f27d91 at::TensorIterator::for_each()
[2m[36m(pid=3601)[0m     @     0x7eec3580ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3601)[0m     @     0x7eec3582dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3601)[0m     @     0x7eec34ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3601)[0m     @     0x7eec34ccd388 at::native::copy_impl()
[2m[36m(pid=3447)[0m     @     0x7f35b21a279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3447)[0m     @     0x55de99457fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3447)[0m     @     0x55de993b2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3447)[0m     @     0x55de9943dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3447)[0m     @     0x55de9943ea20 method_vectorcall
[2m[36m(pid=3447)[0m     @     0x55de993b2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3447)[0m     @     0x55de9943dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3447)[0m     @     0x55de9943e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3447)[0m     @     0x55de993b3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3447)[0m     @     0x55de9943dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3447)[0m     @     0x55de9943e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3447)[0m     @     0x55de993b3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3447)[0m     @     0x55de9943dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3447)[0m     @     0x55de9943e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3447)[0m     @     0x55de993b3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3447)[0m     @     0x55de9943dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3447)[0m     @     0x55de9943e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3447)[0m     @     0x55de993b3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3529)[0m     @     0x7f13a39a379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3529)[0m     @     0x555c3108dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3529)[0m     @     0x555c30fe8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3529)[0m     @     0x555c31073baf _PyEval_EvalCodeWithName
[2m[36m(pid=3529)[0m     @     0x555c31074a20 method_vectorcall
[2m[36m(pid=3529)[0m     @     0x555c30fe8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3529)[0m     @     0x555c31073baf _PyEval_EvalCodeWithName
[2m[36m(pid=3529)[0m     @     0x555c31074643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3529)[0m     @     0x555c30fe9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3529)[0m     @     0x555c31073baf _PyEval_EvalCodeWithName
[2m[36m(pid=3529)[0m     @     0x555c31074643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3529)[0m     @     0x555c30fe9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3529)[0m     @     0x555c31073baf _PyEval_EvalCodeWithName
[2m[36m(pid=3529)[0m     @     0x555c31074643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3529)[0m     @     0x555c30fe9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3529)[0m     @     0x555c31073baf _PyEval_EvalCodeWithName
[2m[36m(pid=3529)[0m     @     0x555c31074643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3529)[0m     @     0x555c30fe9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3537)[0m     @     0x7f924468d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3537)[0m     @     0x564cafb6afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3537)[0m     @     0x564cafac5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3537)[0m     @     0x564cafb50baf _PyEval_EvalCodeWithName
[2m[36m(pid=3537)[0m     @     0x564cafb51a20 method_vectorcall
[2m[36m(pid=3537)[0m     @     0x564cafac5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3537)[0m     @     0x564cafb50baf _PyEval_EvalCodeWithName
[2m[36m(pid=3537)[0m     @     0x564cafb51643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3537)[0m     @     0x564cafac6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3537)[0m     @     0x564cafb50baf _PyEval_EvalCodeWithName
[2m[36m(pid=3537)[0m     @     0x564cafb51643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3537)[0m     @     0x564cafac6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3537)[0m     @     0x564cafb50baf _PyEval_EvalCodeWithName
[2m[36m(pid=3537)[0m     @     0x564cafb51643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3537)[0m     @     0x564cafac6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3537)[0m     @     0x564cafb50baf _PyEval_EvalCodeWithName
[2m[36m(pid=3537)[0m     @     0x564cafb51643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3537)[0m     @     0x564cafac6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3466)[0m     @     0x7ef3c6fcba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3466)[0m     @     0x7ef3c6fc9388 at::native::copy_impl()
[2m[36m(pid=3466)[0m     @     0x7ef3c6fcb5a4 at::native::copy_()
[2m[36m(pid=3466)[0m     @     0x7ef3c76b64f5 at::Tensor::copy_()
[2m[36m(pid=3547)[0m     @     0x7f020a49179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3547)[0m     @     0x555f6f232fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3547)[0m     @     0x555f6f18db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3547)[0m     @     0x555f6f218baf _PyEval_EvalCodeWithName
[2m[36m(pid=3547)[0m     @     0x555f6f219a20 method_vectorcall
[2m[36m(pid=3547)[0m     @     0x555f6f18dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3547)[0m     @     0x555f6f218baf _PyEval_EvalCodeWithName
[2m[36m(pid=3547)[0m     @     0x555f6f219643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3547)[0m     @     0x555f6f18e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3547)[0m     @     0x555f6f218baf _PyEval_EvalCodeWithName
[2m[36m(pid=3547)[0m     @     0x555f6f219643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3547)[0m     @     0x555f6f18e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3547)[0m     @     0x555f6f218baf _PyEval_EvalCodeWithName
[2m[36m(pid=3547)[0m     @     0x555f6f219643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3547)[0m     @     0x555f6f18e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3547)[0m     @     0x555f6f218baf _PyEval_EvalCodeWithName
[2m[36m(pid=3547)[0m     @     0x555f6f219643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3547)[0m     @     0x555f6f18e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3553)[0m     @     0x555f9b936643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3553)[0m     @     0x555f9b8ab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3553)[0m     @     0x555f9b935baf _PyEval_EvalCodeWithName
[2m[36m(pid=3553)[0m     @     0x555f9b936643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3553)[0m     @     0x555f9b8ab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3553)[0m     @     0x555f9b935baf _PyEval_EvalCodeWithName
[2m[36m(pid=3553)[0m     @     0x555f9b936643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3553)[0m     @     0x555f9b8ab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3553)[0m     @     0x555f9b935baf _PyEval_EvalCodeWithName
[2m[36m(pid=3553)[0m     @     0x555f9b936643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3553)[0m     @     0x555f9b8ab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3569)[0m     @     0x7f9ca2ad44f5 at::Tensor::copy_()
[2m[36m(pid=3569)[0m     @     0x7f9ca8b7f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3569)[0m     @     0x55bc803e2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3569)[0m     @     0x55bc8033db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3569)[0m     @     0x55bc803c8baf _PyEval_EvalCodeWithName
[2m[36m(pid=3569)[0m     @     0x55bc803c9a20 method_vectorcall
[2m[36m(pid=3569)[0m     @     0x55bc8033dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3569)[0m     @     0x55bc803c8baf _PyEval_EvalCodeWithName
[2m[36m(pid=3569)[0m     @     0x55bc803c9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3569)[0m     @     0x55bc8033e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3569)[0m     @     0x55bc803c8baf _PyEval_EvalCodeWithName
[2m[36m(pid=3569)[0m     @     0x55bc803c9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3569)[0m     @     0x55bc8033e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3569)[0m     @     0x55bc803c8baf _PyEval_EvalCodeWithName
[2m[36m(pid=3569)[0m     @     0x55bc803c9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3569)[0m     @     0x55bc8033e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3569)[0m     @     0x55bc803c8baf _PyEval_EvalCodeWithName
[2m[36m(pid=3569)[0m     @     0x55bc803c9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3569)[0m     @     0x55bc8033e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3526)[0m     @     0x7f368094a388 at::native::copy_impl()
[2m[36m(pid=3526)[0m     @     0x7f368094c5a4 at::native::copy_()
[2m[36m(pid=3526)[0m     @     0x7f36810374f5 at::Tensor::copy_()
[2m[36m(pid=3457)[0m     @     0x7f51a61c7c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3457)[0m     @     0x7f51a5669a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3457)[0m     @     0x7f51a5667388 at::native::copy_impl()
[2m[36m(pid=3472)[0m     @     0x7f713afccd91 at::TensorIterator::for_each()
[2m[36m(pid=3472)[0m     @     0x7f713b8afb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3472)[0m     @     0x7f713b8d2c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3472)[0m     @     0x7f713ad74a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3472)[0m     @     0x7f713ad72388 at::native::copy_impl()
[2m[36m(pid=3525)[0m     @     0x7f5460f27d91 at::TensorIterator::for_each()
[2m[36m(pid=3525)[0m     @     0x7f546180ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3525)[0m     @     0x7f546182dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3525)[0m     @     0x7f5460ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3479)[0m     @     0x7f465cba4d91 at::TensorIterator::for_each()
[2m[36m(pid=3479)[0m     @     0x7f465d487b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3479)[0m     @     0x7f465d4aac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3479)[0m     @     0x7f465c94ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3479)[0m     @     0x7f465c94a388 at::native::copy_impl()
[2m[36m(pid=3451)[0m     @     0x7f37bbb06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3451)[0m     @     0x7f37bbb29c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3451)[0m     @     0x7f37bafcba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3451)[0m     @     0x7f37bafc9388 at::native::copy_impl()
[2m[36m(pid=3451)[0m     @     0x7f37bafcb5a4 at::native::copy_()
[2m[36m(pid=3531)[0m     @     0x7f50ebe13390 (unknown)
[2m[36m(pid=3531)[0m     @     0x7f21ebd9ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3531)[0m     @     0x7f21eb4c97db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3531)[0m     @     0x7f21eb4cc8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3465)[0m     @     0x7efc310e9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3465)[0m     @     0x7efc3058ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3465)[0m     @     0x7efc30589388 at::native::copy_impl()
[2m[36m(pid=3465)[0m     @     0x7efc3058b5a4 at::native::copy_()
[2m[36m(pid=3544)[0m     @     0x7f04f451c388 at::native::copy_impl()
[2m[36m(pid=3544)[0m     @     0x7f04f451e5a4 at::native::copy_()
[2m[36m(pid=3544)[0m     @     0x7f04f4c094f5 at::Tensor::copy_()
[2m[36m(pid=3559)[0m     @     0x7f5407223ad3 at::TensorIterator::for_each()
[2m[36m(pid=3559)[0m     @     0x7f5407223d91 at::TensorIterator::for_each()
[2m[36m(pid=3559)[0m     @     0x7f5407b06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3559)[0m     @     0x7f5407b29c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3541)[0m     @     0x7eeb082b38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3506)[0m     @     0x7f21ac9f9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3506)[0m     @     0x7f21aca1cc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3506)[0m     @     0x7f21abebea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3506)[0m     @     0x7f21abebc388 at::native::copy_impl()
[2m[36m(pid=3506)[0m     @     0x7f21abebe5a4 at::native::copy_()
[2m[36m(pid=3506)[0m     @     0x7f21ac5a94f5 at::Tensor::copy_()
[2m[36m(pid=3500)[0m     @     0x7f295e7efc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3500)[0m     @     0x7f295dc91a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3500)[0m     @     0x7f295dc8f388 at::native::copy_impl()
[2m[36m(pid=3500)[0m     @     0x7f295dc915a4 at::native::copy_()
[2m[36m(pid=3500)[0m     @     0x7f295e37c4f5 at::Tensor::copy_()
[2m[36m(pid=3500)[0m     @     0x7f296084f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3483)[0m     @     0x7f68908917db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3483)[0m     @     0x7f68908948f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3483)[0m     @     0x7f6890894ad3 at::TensorIterator::for_each()
[2m[36m(pid=3517)[0m     @     0x7eeeb09f9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3517)[0m     @     0x7eeeb0a1cc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3517)[0m     @     0x7eeeafebea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3517)[0m     @     0x7eeeafebc388 at::native::copy_impl()
[2m[36m(pid=3517)[0m     @     0x7eeeafebe5a4 at::native::copy_()
[2m[36m(pid=3580)[0m     @     0x7f52e7151d91 at::TensorIterator::for_each()
[2m[36m(pid=3580)[0m     @     0x7f52e7a34b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3580)[0m     @     0x7f52e7a57c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3580)[0m     @     0x7f52e6ef9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3580)[0m     @     0x7f52e6ef7388 at::native::copy_impl()
[2m[36m(pid=3580)[0m     @     0x7f52e6ef95a4 at::native::copy_()
[2m[36m(pid=3459)[0m     @     0x7f1d0300cd91 at::TensorIterator::for_each()
[2m[36m(pid=3459)[0m     @     0x7f1d038efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3459)[0m     @     0x7f1d03912c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3459)[0m     @     0x7f1d02db4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3459)[0m     @     0x7f1d02db2388 at::native::copy_impl()
[2m[36m(pid=3505)[0m     @     0x7fad223e7388 at::native::copy_impl()
[2m[36m(pid=3505)[0m     @     0x7fad223e95a4 at::native::copy_()
[2m[36m(pid=3505)[0m     @     0x7fad22ad44f5 at::Tensor::copy_()
[2m[36m(pid=3505)[0m     @     0x7fad24fa78de torch::autograd::VariableType::(anonymous namespace)::copy_()
2020-11-05 10:17:00,150	WARNING worker.py:945 -- The driver may not be able to keep up with the stdout/stderr of the workers. To avoid forwarding logs to the driver, use 'ray.init(log_to_driver=False)'.
[2m[36m(pid=3448)[0m     @     0x7fb966af5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3448)[0m     @     0x7fb966af3388 at::native::copy_impl()
[2m[36m(pid=3448)[0m     @     0x7fb966af55a4 at::native::copy_()
[2m[36m(pid=3448)[0m     @     0x7fb9671e04f5 at::Tensor::copy_()
[2m[36m(pid=3578)[0m     @     0x7f00290b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=3578)[0m     @     0x7f00287e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=3450)[0m     @     0x7ee8fb653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3450)[0m     @     0x7ee8faaf5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3450)[0m     @     0x7ee8faaf3388 at::native::copy_impl()
[2m[36m(pid=3450)[0m     @     0x7ee8faaf55a4 at::native::copy_()
[2m[36m(pid=3570)[0m     @     0x7ee6a2d4dd91 at::TensorIterator::for_each()
[2m[36m(pid=3570)[0m     @     0x7ee6a3630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3570)[0m     @     0x7ee6a3653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3570)[0m     @     0x7ee6a2af5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3570)[0m     @     0x7ee6a2af3388 at::native::copy_impl()
[2m[36m(pid=3470)[0m     @     0x7fb0555528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3470)[0m     @     0x7fb055552ad3 at::TensorIterator::for_each()
[2m[36m(pid=3550)[0m     @     0x7f3a9908ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3550)[0m     @     0x7f3a9852ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3550)[0m     @     0x7f3a9852a388 at::native::copy_impl()
[2m[36m(pid=3550)[0m     @     0x7f3a9852c5a4 at::native::copy_()
[2m[36m(pid=3550)[0m     @     0x7f3a98c174f5 at::Tensor::copy_()
[2m[36m(pid=3550)[0m     @     0x7f3a9b0ea8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3576)[0m     @     0x7f1baf7c7388 at::native::copy_impl()
[2m[36m(pid=3576)[0m     @     0x7f1baf7c95a4 at::native::copy_()
[2m[36m(pid=3576)[0m     @     0x7f1bafeb44f5 at::Tensor::copy_()
[2m[36m(pid=3454)[0m     @     0x7f0993c4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3454)[0m     @     0x7f0993c48388 at::native::copy_impl()
[2m[36m(pid=3454)[0m     @     0x7f0993c4a5a4 at::native::copy_()
[2m[36m(pid=3524)[0m     @     0x7f7e4ad4dd91 at::TensorIterator::for_each()
[2m[36m(pid=3524)[0m     @     0x7f7e4b630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3524)[0m     @     0x7f7e4b653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3524)[0m     @     0x7f7e4aaf5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3530)[0m     @     0x7f396da7a5a4 at::native::copy_()
[2m[36m(pid=3530)[0m     @     0x7f396e1654f5 at::Tensor::copy_()
[2m[36m(pid=3508)[0m     @     0x7f2d674f25a4 at::native::copy_()
[2m[36m(pid=3508)[0m     @     0x7f2d67bdd4f5 at::Tensor::copy_()
[2m[36m(pid=3515)[0m     @     0x7f3986ddcd91 at::TensorIterator::for_each()
[2m[36m(pid=3515)[0m     @     0x7f39876bfb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3515)[0m     @     0x7f39876e2c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3452)[0m     @     0x7fb9ed2fa5a4 at::native::copy_()
[2m[36m(pid=3452)[0m     @     0x7fb9ed9e54f5 at::Tensor::copy_()
[2m[36m(pid=3475)[0m     @     0x7fbdabcc24f5 at::Tensor::copy_()
[2m[36m(pid=3475)[0m     @     0x7fbdae1958de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3512)[0m     @     0x7f3e04ba44f5 at::Tensor::copy_()
[2m[36m(pid=3512)[0m     @     0x7f3e070778de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3556)[0m     @     0x7f981bc4a5a4 at::native::copy_()
[2m[36m(pid=3556)[0m     @     0x7f981c3354f5 at::Tensor::copy_()
[2m[36m(pid=3598)[0m     @     0x7fa4adecc4f5 at::Tensor::copy_()
[2m[36m(pid=3598)[0m     @     0x7fa4b039f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3527)[0m     @     0x7fb2fee7f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3463)[0m     @     0x7fb2613ba4f5 at::Tensor::copy_()
[2m[36m(pid=3463)[0m     @     0x7fb26388d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3463)[0m     @     0x7fb2613ba4f5 at::Tensor::copy_()
[2m[36m(pid=3463)[0m     @     0x7fb26746579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3463)[0m     @     0x5654ea5bbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3463)[0m     @     0x5654ea516b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3463)[0m     @     0x5654ea5a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=3463)[0m     @     0x5654ea5a2a20 method_vectorcall
[2m[36m(pid=3463)[0m     @     0x5654ea516bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3510)[0m     @     0x7f7a62d4dad3 at::TensorIterator::for_each()
[2m[36m(pid=3510)[0m     @     0x7f7a62d4dd91 at::TensorIterator::for_each()
[2m[36m(pid=3510)[0m     @     0x7f7a63630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3510)[0m     @     0x7f7a63653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3461)[0m     @     0x7f7faa910a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3461)[0m     @     0x7f7faa90e388 at::native::copy_impl()
[2m[36m(pid=3461)[0m     @     0x7f7faa9105a4 at::native::copy_()
[2m[36m(pid=3461)[0m     @     0x7f7faaffb4f5 at::Tensor::copy_()
[2m[36m(pid=3574)[0m     @     0x7f1fb14b7ad3 at::TensorIterator::for_each()
[2m[36m(pid=3453)[0m     @     0x7f7ba0827d91 at::TensorIterator::for_each()
[2m[36m(pid=3453)[0m     @     0x7f7ba110ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3453)[0m     @     0x7f7ba112dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3453)[0m     @     0x7f7ba05cfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3453)[0m     @     0x7f7ba05cd388 at::native::copy_impl()
[2m[36m(pid=3528)[0m     @     0x7f62f0875a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3528)[0m     @     0x7f62f0873388 at::native::copy_impl()
[2m[36m(pid=3528)[0m     @     0x7f62f08755a4 at::native::copy_()
[2m[36m(pid=3528)[0m     @     0x7f62f0f604f5 at::Tensor::copy_()
[2m[36m(pid=3473)[0m     @     0x7eef46d4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3473)[0m     @     0x7eef46d4dad3 at::TensorIterator::for_each()
[2m[36m(pid=3497)[0m     @     0x7eed5451e4f5 at::Tensor::copy_()
[2m[36m(pid=3497)[0m     @     0x7eed569f18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3497)[0m     @     0x7eed5451e4f5 at::Tensor::copy_()
[2m[36m(pid=3497)[0m     @     0x7eed5a5c979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3497)[0m     @     0x55e2dc91afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3497)[0m     @     0x55e2dc875b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3497)[0m     @     0x55e2dc900baf _PyEval_EvalCodeWithName
[2m[36m(pid=3497)[0m     @     0x55e2dc901a20 method_vectorcall
[2m[36m(pid=3497)[0m     @     0x55e2dc875bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3497)[0m     @     0x55e2dc900baf _PyEval_EvalCodeWithName
[2m[36m(pid=3497)[0m     @     0x55e2dc901643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3497)[0m     @     0x55e2dc876689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3497)[0m     @     0x55e2dc900baf _PyEval_EvalCodeWithName
[2m[36m(pid=3497)[0m     @     0x55e2dc901643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3497)[0m     @     0x55e2dc876689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3497)[0m     @     0x55e2dc900baf _PyEval_EvalCodeWithName
[2m[36m(pid=3497)[0m     @     0x55e2dc901643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3497)[0m     @     0x55e2dc876689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3497)[0m     @     0x55e2dc900baf _PyEval_EvalCodeWithName
[2m[36m(pid=3497)[0m     @     0x55e2dc901643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3497)[0m     @     0x55e2dc876689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3534)[0m     @     0x7ef2b3ae45a4 at::native::copy_()
[2m[36m(pid=3534)[0m     @     0x7ef2b41cf4f5 at::Tensor::copy_()
[2m[36m(pid=3534)[0m     @     0x7ef2b66a28de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3467)[0m     @     0x7f6efb1e04f5 at::Tensor::copy_()
[2m[36m(pid=3467)[0m     @     0x7f6efd6b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3467)[0m     @     0x7f6efb1e04f5 at::Tensor::copy_()
[2m[36m(pid=3467)[0m     @     0x7f6f0128b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3467)[0m     @     0x55e9f3183fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3467)[0m     @     0x55e9f30deb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3467)[0m     @     0x55e9f3169baf _PyEval_EvalCodeWithName
[2m[36m(pid=3467)[0m     @     0x55e9f316aa20 method_vectorcall
[2m[36m(pid=3467)[0m     @     0x55e9f30debfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3467)[0m     @     0x55e9f3169baf _PyEval_EvalCodeWithName
[2m[36m(pid=3467)[0m     @     0x55e9f316a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3467)[0m     @     0x55e9f30df689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3467)[0m     @     0x55e9f3169baf _PyEval_EvalCodeWithName
[2m[36m(pid=3467)[0m     @     0x55e9f316a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3467)[0m     @     0x55e9f30df689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3456)[0m     @     0x7f20caa274f5 at::Tensor::copy_()
[2m[36m(pid=3456)[0m     @     0x7f20ccefa8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3456)[0m     @     0x7f20caa274f5 at::Tensor::copy_()
[2m[36m(pid=3456)[0m     @     0x7f20d0ad279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3456)[0m     @     0x55a146f9bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3456)[0m     @     0x55a146ef6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3456)[0m     @     0x55a146f81baf _PyEval_EvalCodeWithName
[2m[36m(pid=3456)[0m     @     0x55a146f82a20 method_vectorcall
[2m[36m(pid=3456)[0m     @     0x55a146ef6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3456)[0m     @     0x55a146f81baf _PyEval_EvalCodeWithName
[2m[36m(pid=3456)[0m     @     0x55a146f82643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3456)[0m     @     0x55a146ef7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3456)[0m     @     0x55a146f81baf _PyEval_EvalCodeWithName
[2m[36m(pid=3456)[0m     @     0x55a146f82643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3456)[0m     @     0x55a146ef7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3456)[0m     @     0x55a146f81baf _PyEval_EvalCodeWithName
[2m[36m(pid=3456)[0m     @     0x55a146f82643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3456)[0m     @     0x55a146ef7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3456)[0m     @     0x55a146f81baf _PyEval_EvalCodeWithName
[2m[36m(pid=3456)[0m     @     0x55a146f82643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3456)[0m     @     0x55a146ef7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3535)[0m     @     0x7f904aad44f5 at::Tensor::copy_()
[2m[36m(pid=3535)[0m     @     0x7f904cfa78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3535)[0m     @     0x7f904aad44f5 at::Tensor::copy_()
[2m[36m(pid=3535)[0m     @     0x7f9050b7f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3535)[0m     @     0x55a795ea6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3535)[0m     @     0x55a795e01b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3535)[0m     @     0x55a795e8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3535)[0m     @     0x55a795e8da20 method_vectorcall
[2m[36m(pid=3535)[0m     @     0x55a795e01bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3535)[0m     @     0x55a795e8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3535)[0m     @     0x55a795e8d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3535)[0m     @     0x55a795e02689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3535)[0m     @     0x55a795e8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3535)[0m     @     0x55a795e8d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3535)[0m     @     0x55a795e02689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3535)[0m     @     0x55a795e8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3535)[0m     @     0x55a795e8d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3474)[0m     @     0x7fb6caaf55a4 at::native::copy_()
[2m[36m(pid=3474)[0m     @     0x7fb6cb1e04f5 at::Tensor::copy_()
[2m[36m(pid=3474)[0m     @     0x7fb6cd6b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3458)[0m     @     0x7f86db2b98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3458)[0m     @     0x7f86d8de64f5 at::Tensor::copy_()
[2m[36m(pid=3458)[0m     @     0x7f86dee9179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3458)[0m     @     0x559a40d2dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3458)[0m     @     0x559a40c88b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3458)[0m     @     0x559a40d13baf _PyEval_EvalCodeWithName
[2m[36m(pid=3458)[0m     @     0x559a40d14a20 method_vectorcall
[2m[36m(pid=3458)[0m     @     0x559a40c88bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3458)[0m     @     0x559a40d13baf _PyEval_EvalCodeWithName
[2m[36m(pid=3458)[0m     @     0x559a40d14643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3458)[0m     @     0x559a40c89689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3458)[0m     @     0x559a40d13baf _PyEval_EvalCodeWithName
[2m[36m(pid=3458)[0m     @     0x559a40d14643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3458)[0m     @     0x559a40c89689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3458)[0m     @     0x559a40d13baf _PyEval_EvalCodeWithName
[2m[36m(pid=3458)[0m     @     0x559a40d14643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3458)[0m     @     0x559a40c89689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3458)[0m     @     0x559a40d13baf _PyEval_EvalCodeWithName
[2m[36m(pid=3458)[0m     @     0x559a40d14643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3458)[0m     @     0x559a40c89689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3460)[0m     @     0x7efe29b898de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3460)[0m     @     0x7efe276b64f5 at::Tensor::copy_()
[2m[36m(pid=3460)[0m     @     0x7efe2d76179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3460)[0m     @     0x555fc8a8ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3460)[0m     @     0x555fc89eab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3460)[0m     @     0x555fc8a75baf _PyEval_EvalCodeWithName
[2m[36m(pid=3460)[0m     @     0x555fc8a76a20 method_vectorcall
[2m[36m(pid=3460)[0m     @     0x555fc89eabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3460)[0m     @     0x555fc8a75baf _PyEval_EvalCodeWithName
[2m[36m(pid=3460)[0m     @     0x555fc8a76643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3460)[0m     @     0x555fc89eb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3460)[0m     @     0x555fc8a75baf _PyEval_EvalCodeWithName
[2m[36m(pid=3460)[0m     @     0x555fc8a76643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3460)[0m     @     0x555fc89eb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3460)[0m     @     0x555fc8a75baf _PyEval_EvalCodeWithName
[2m[36m(pid=3460)[0m     @     0x555fc8a76643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3460)[0m     @     0x555fc89eb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3460)[0m     @     0x555fc8a75baf _PyEval_EvalCodeWithName
[2m[36m(pid=3460)[0m     @     0x555fc8a76643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3460)[0m     @     0x555fc89eb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3449)[0m     @     0x7f1bdbc4fd91 at::TensorIterator::for_each()
[2m[36m(pid=3449)[0m     @     0x7f1bdc532b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3449)[0m     @     0x7f1bdc555c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3449)[0m     @     0x7f1bdb9f7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3502)[0m     @     0x7f56f9ff5388 at::native::copy_impl()
[2m[36m(pid=3502)[0m     @     0x7f56f9ff75a4 at::native::copy_()
[2m[36m(pid=3502)[0m     @     0x7f56fa6e24f5 at::Tensor::copy_()
[2m[36m(pid=3502)[0m     @     0x7f56fcbb58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3471)[0m     @     0x7f67292bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3471)[0m     @     0x7f6726dea4f5 at::Tensor::copy_()
[2m[36m(pid=3471)[0m     @     0x7f672ce9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3471)[0m     @     0x562d4d852fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3471)[0m     @     0x562d4d7adb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3471)[0m     @     0x562d4d838baf _PyEval_EvalCodeWithName
[2m[36m(pid=3471)[0m     @     0x562d4d839a20 method_vectorcall
[2m[36m(pid=3471)[0m     @     0x562d4d7adbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3471)[0m     @     0x562d4d838baf _PyEval_EvalCodeWithName
[2m[36m(pid=3471)[0m     @     0x562d4d839643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3471)[0m     @     0x562d4d7ae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3471)[0m     @     0x562d4d838baf _PyEval_EvalCodeWithName
[2m[36m(pid=3471)[0m     @     0x562d4d839643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3471)[0m     @     0x562d4d7ae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3471)[0m     @     0x562d4d838baf _PyEval_EvalCodeWithName
[2m[36m(pid=3471)[0m     @     0x562d4d839643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3471)[0m     @     0x562d4d7ae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3471)[0m     @     0x562d4d838baf _PyEval_EvalCodeWithName
[2m[36m(pid=3471)[0m     @     0x562d4d839643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3471)[0m     @     0x562d4d7ae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3462)[0m     @     0x7eef041ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3468)[0m     @     0x7f42860ba4f5 at::Tensor::copy_()
[2m[36m(pid=3468)[0m     @     0x7f428858d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3468)[0m     @     0x7f42860ba4f5 at::Tensor::copy_()
[2m[36m(pid=3468)[0m     @     0x7f428c16579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3468)[0m     @     0x5622a35b5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3468)[0m     @     0x5622a3510b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3468)[0m     @     0x5622a359bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3468)[0m     @     0x5622a359ca20 method_vectorcall
[2m[36m(pid=3601)[0m     @     0x7eec34ccf5a4 at::native::copy_()
[2m[36m(pid=3601)[0m     @     0x7eec353ba4f5 at::Tensor::copy_()
[2m[36m(pid=3601)[0m     @     0x7eec3788d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3466)[0m     @     0x7ef3c9b898de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3466)[0m     @     0x7ef3c76b64f5 at::Tensor::copy_()
[2m[36m(pid=3466)[0m     @     0x7ef3cd76179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3466)[0m     @     0x562a46bcdfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3466)[0m     @     0x562a46b28b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3466)[0m     @     0x562a46bb3baf _PyEval_EvalCodeWithName
[2m[36m(pid=3466)[0m     @     0x562a46bb4a20 method_vectorcall
[2m[36m(pid=3466)[0m     @     0x562a46b28bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3466)[0m     @     0x562a46bb3baf _PyEval_EvalCodeWithName
[2m[36m(pid=3466)[0m     @     0x562a46bb4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3466)[0m     @     0x562a46b29689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3466)[0m     @     0x562a46bb3baf _PyEval_EvalCodeWithName
[2m[36m(pid=3466)[0m     @     0x562a46bb4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3466)[0m     @     0x562a46b29689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3466)[0m     @     0x562a46bb3baf _PyEval_EvalCodeWithName
[2m[36m(pid=3466)[0m     @     0x562a46bb4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3466)[0m     @     0x562a46b29689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3466)[0m     @     0x562a46bb3baf _PyEval_EvalCodeWithName
[2m[36m(pid=3466)[0m     @     0x562a46bb4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3466)[0m     @     0x562a46b29689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3526)[0m     @     0x7f368350a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3526)[0m     @     0x7f36810374f5 at::Tensor::copy_()
[2m[36m(pid=3526)[0m     @     0x7f36870e279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3526)[0m     @     0x557b73233fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3526)[0m     @     0x557b7318eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3526)[0m     @     0x557b73219baf _PyEval_EvalCodeWithName
[2m[36m(pid=3526)[0m     @     0x557b7321aa20 method_vectorcall
[2m[36m(pid=3526)[0m     @     0x557b7318ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3526)[0m     @     0x557b73219baf _PyEval_EvalCodeWithName
[2m[36m(pid=3526)[0m     @     0x557b7321a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3526)[0m     @     0x557b7318f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3526)[0m     @     0x557b73219baf _PyEval_EvalCodeWithName
[2m[36m(pid=3526)[0m     @     0x557b7321a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3526)[0m     @     0x557b7318f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3526)[0m     @     0x557b73219baf _PyEval_EvalCodeWithName
[2m[36m(pid=3526)[0m     @     0x557b7321a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3526)[0m     @     0x557b7318f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3526)[0m     @     0x557b73219baf _PyEval_EvalCodeWithName
[2m[36m(pid=3526)[0m     @     0x557b7321a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3526)[0m     @     0x557b7318f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3472)[0m     @     0x7f713ad745a4 at::native::copy_()
[2m[36m(pid=3472)[0m     @     0x7f713b45f4f5 at::Tensor::copy_()
[2m[36m(pid=3472)[0m     @     0x7f713d9328de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3472)[0m     @     0x7f713b45f4f5 at::Tensor::copy_()
[2m[36m(pid=3472)[0m     @     0x7f714150a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3472)[0m     @     0x5647a6d97fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3472)[0m     @     0x5647a6cf2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3472)[0m     @     0x5647a6d7dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3472)[0m     @     0x5647a6d7ea20 method_vectorcall
[2m[36m(pid=3472)[0m     @     0x5647a6cf2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3472)[0m     @     0x5647a6d7dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3472)[0m     @     0x5647a6d7e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3472)[0m     @     0x5647a6cf3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3472)[0m     @     0x5647a6d7dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3472)[0m     @     0x5647a6d7e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3472)[0m     @     0x5647a6cf3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3472)[0m     @     0x5647a6d7dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3472)[0m     @     0x5647a6d7e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3472)[0m     @     0x5647a6cf3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3472)[0m     @     0x5647a6d7dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3472)[0m     @     0x5647a6d7e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3472)[0m     @     0x5647a6cf3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3525)[0m     @     0x7f5460ccd388 at::native::copy_impl()
[2m[36m(pid=3525)[0m     @     0x7f5460ccf5a4 at::native::copy_()
[2m[36m(pid=3479)[0m     @     0x7f465c94c5a4 at::native::copy_()
[2m[36m(pid=3479)[0m     @     0x7f465d0374f5 at::Tensor::copy_()
[2m[36m(pid=3479)[0m     @     0x7f465f50a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3451)[0m     @     0x7f37bb6b64f5 at::Tensor::copy_()
[2m[36m(pid=3451)[0m     @     0x7f37bdb898de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3451)[0m     @     0x7f37bb6b64f5 at::Tensor::copy_()
[2m[36m(pid=3451)[0m     @     0x7f37c176179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3451)[0m     @     0x5635b0585fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3451)[0m     @     0x5635b04e0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3451)[0m     @     0x5635b056bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3451)[0m     @     0x5635b056ca20 method_vectorcall
[2m[36m(pid=3451)[0m     @     0x5635b04e0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3451)[0m     @     0x5635b056bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3451)[0m     @     0x5635b056c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3451)[0m     @     0x5635b04e1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3451)[0m     @     0x5635b056bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3451)[0m     @     0x5635b056c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3531)[0m     @     0x7f21eb4ccad3 at::TensorIterator::for_each()
[2m[36m(pid=3465)[0m     @     0x7efc30c764f5 at::Tensor::copy_()
[2m[36m(pid=3465)[0m     @     0x7efc331498de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3465)[0m     @     0x7efc30c764f5 at::Tensor::copy_()
[2m[36m(pid=3544)[0m     @     0x7f04f70dc8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3544)[0m     @     0x7f04f4c094f5 at::Tensor::copy_()
[2m[36m(pid=3544)[0m     @     0x7f04facb479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3544)[0m     @     0x5562273f6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3544)[0m     @     0x556227351b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3544)[0m     @     0x5562273dcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3544)[0m     @     0x5562273dda20 method_vectorcall
[2m[36m(pid=3544)[0m     @     0x556227351bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3544)[0m     @     0x5562273dcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3544)[0m     @     0x5562273dd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3544)[0m     @     0x556227352689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3544)[0m     @     0x5562273dcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3544)[0m     @     0x5562273dd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3544)[0m     @     0x556227352689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3544)[0m     @     0x5562273dcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3544)[0m     @     0x5562273dd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3544)[0m     @     0x556227352689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3544)[0m     @     0x5562273dcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3544)[0m     @     0x5562273dd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3544)[0m     @     0x556227352689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3559)[0m     @     0x7f5406fcba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3559)[0m     @     0x7f5406fc9388 at::native::copy_impl()
[2m[36m(pid=3541)[0m     @     0x7eeb082b3ad3 at::TensorIterator::for_each()
[2m[36m(pid=3506)[0m     @     0x7f21aea7c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3506)[0m     @     0x7f21ac5a94f5 at::Tensor::copy_()
[2m[36m(pid=3506)[0m     @     0x7f21b265479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3506)[0m     @     0x562ade0b3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3506)[0m     @     0x562ade00eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3506)[0m     @     0x562ade099baf _PyEval_EvalCodeWithName
[2m[36m(pid=3506)[0m     @     0x562ade09aa20 method_vectorcall
[2m[36m(pid=3506)[0m     @     0x562ade00ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3506)[0m     @     0x562ade099baf _PyEval_EvalCodeWithName
[2m[36m(pid=3506)[0m     @     0x562ade09a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3506)[0m     @     0x562ade00f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3506)[0m     @     0x562ade099baf _PyEval_EvalCodeWithName
[2m[36m(pid=3506)[0m     @     0x562ade09a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3506)[0m     @     0x562ade00f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3506)[0m     @     0x562ade099baf _PyEval_EvalCodeWithName
[2m[36m(pid=3506)[0m     @     0x562ade09a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3506)[0m     @     0x562ade00f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3506)[0m     @     0x562ade099baf _PyEval_EvalCodeWithName
[2m[36m(pid=3506)[0m     @     0x562ade09a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3506)[0m     @     0x562ade00f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3500)[0m     @     0x7f295e37c4f5 at::Tensor::copy_()
[2m[36m(pid=3500)[0m     @     0x7f296442779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3500)[0m     @     0x5600be44afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3500)[0m     @     0x5600be3a5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3500)[0m     @     0x5600be430baf _PyEval_EvalCodeWithName
[2m[36m(pid=3500)[0m     @     0x5600be431a20 method_vectorcall
[2m[36m(pid=3500)[0m     @     0x5600be3a5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3500)[0m     @     0x5600be430baf _PyEval_EvalCodeWithName
[2m[36m(pid=3500)[0m     @     0x5600be431643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3500)[0m     @     0x5600be3a6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3500)[0m     @     0x5600be430baf _PyEval_EvalCodeWithName
[2m[36m(pid=3500)[0m     @     0x5600be431643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3500)[0m     @     0x5600be3a6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3500)[0m     @     0x5600be430baf _PyEval_EvalCodeWithName
[2m[36m(pid=3500)[0m     @     0x5600be431643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3500)[0m     @     0x5600be3a6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3500)[0m     @     0x5600be430baf _PyEval_EvalCodeWithName
[2m[36m(pid=3500)[0m     @     0x5600be431643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3500)[0m     @     0x5600be3a6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3483)[0m     @     0x7f6890894d91 at::TensorIterator::for_each()
[2m[36m(pid=3483)[0m     @     0x7f6891177b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3483)[0m     @     0x7f689119ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3483)[0m     @     0x7f689063ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3517)[0m     @     0x7eeeb05a94f5 at::Tensor::copy_()
[2m[36m(pid=3517)[0m     @     0x7eeeb2a7c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3517)[0m     @     0x7eeeb05a94f5 at::Tensor::copy_()
[2m[36m(pid=3580)[0m     @     0x7f52e75e44f5 at::Tensor::copy_()
[2m[36m(pid=3580)[0m     @     0x7f52e9ab78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3459)[0m     @     0x7f1d02db45a4 at::native::copy_()
[2m[36m(pid=3459)[0m     @     0x7f1d0349f4f5 at::Tensor::copy_()
[2m[36m(pid=3459)[0m     @     0x7f1d059728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3505)[0m     @     0x7fad22ad44f5 at::Tensor::copy_()
[2m[36m(pid=3505)[0m     @     0x7fad28b7f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3505)[0m     @     0x55abc341afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3505)[0m     @     0x55abc3375b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3505)[0m     @     0x55abc3400baf _PyEval_EvalCodeWithName
[2m[36m(pid=3505)[0m     @     0x55abc3401a20 method_vectorcall
[2m[36m(pid=3505)[0m     @     0x55abc3375bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3505)[0m     @     0x55abc3400baf _PyEval_EvalCodeWithName
[2m[36m(pid=3505)[0m     @     0x55abc3401643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3505)[0m     @     0x55abc3376689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3505)[0m     @     0x55abc3400baf _PyEval_EvalCodeWithName
[2m[36m(pid=3505)[0m     @     0x55abc3401643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3505)[0m     @     0x55abc3376689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3505)[0m     @     0x55abc3400baf _PyEval_EvalCodeWithName
[2m[36m(pid=3505)[0m     @     0x55abc3401643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3505)[0m     @     0x55abc3376689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3505)[0m     @     0x55abc3400baf _PyEval_EvalCodeWithName
[2m[36m(pid=3505)[0m     @     0x55abc3401643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3505)[0m     @     0x55abc3376689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3448)[0m     @     0x7fb9696b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3448)[0m     @     0x7fb9671e04f5 at::Tensor::copy_()
[2m[36m(pid=3448)[0m     @     0x7fb96d28b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3448)[0m     @     0x561c4d62efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3448)[0m     @     0x561c4d589b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3448)[0m     @     0x561c4d614baf _PyEval_EvalCodeWithName
[2m[36m(pid=3448)[0m     @     0x561c4d615a20 method_vectorcall
[2m[36m(pid=3448)[0m     @     0x561c4d589bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3448)[0m     @     0x561c4d614baf _PyEval_EvalCodeWithName
[2m[36m(pid=3448)[0m     @     0x561c4d615643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3448)[0m     @     0x561c4d58a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3448)[0m     @     0x561c4d614baf _PyEval_EvalCodeWithName
[2m[36m(pid=3448)[0m     @     0x561c4d615643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3448)[0m     @     0x561c4d58a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3520)[0m     @     0x7fa76b50cd91 at::TensorIterator::for_each()
[2m[36m(pid=3520)[0m     @     0x7fa76bdefb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3578)[0m     @     0x7f00287e38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=3450)[0m     @     0x7ee8fb1e04f5 at::Tensor::copy_()
[2m[36m(pid=3450)[0m     @     0x7ee8fd6b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3450)[0m     @     0x7ee8fb1e04f5 at::Tensor::copy_()
[2m[36m(pid=3450)[0m     @     0x7ee90128b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3450)[0m     @     0x558deb76dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3450)[0m     @     0x558deb6c8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3450)[0m     @     0x558deb753baf _PyEval_EvalCodeWithName
[2m[36m(pid=3450)[0m     @     0x558deb754a20 method_vectorcall
[2m[36m(pid=3450)[0m     @     0x558deb6c8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3450)[0m     @     0x558deb753baf _PyEval_EvalCodeWithName
[2m[36m(pid=3450)[0m     @     0x558deb754643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3450)[0m     @     0x558deb6c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3450)[0m     @     0x558deb753baf _PyEval_EvalCodeWithName
[2m[36m(pid=3450)[0m     @     0x558deb754643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3450)[0m     @     0x558deb6c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3450)[0m     @     0x558deb753baf _PyEval_EvalCodeWithName
[2m[36m(pid=3450)[0m     @     0x558deb754643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3450)[0m     @     0x558deb6c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3570)[0m     @     0x7ee6a2af55a4 at::native::copy_()
[2m[36m(pid=3570)[0m     @     0x7ee6a31e04f5 at::Tensor::copy_()
[2m[36m(pid=3570)[0m     @     0x7ee6a56b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3470)[0m     @     0x7fb055552d91 at::TensorIterator::for_each()
[2m[36m(pid=3470)[0m     @     0x7fb055e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3470)[0m     @     0x7fb055e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3470)[0m     @     0x7fb0552faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3470)[0m     @     0x7fb0552f8388 at::native::copy_impl()
[2m[36m(pid=3470)[0m     @     0x7fb0552fa5a4 at::native::copy_()
[2m[36m(pid=3550)[0m     @     0x7f3a98c174f5 at::Tensor::copy_()
[2m[36m(pid=3550)[0m     @     0x7f3a9ecc279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3550)[0m     @     0x557950737fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3550)[0m     @     0x557950692b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3550)[0m     @     0x55795071dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3550)[0m     @     0x55795071ea20 method_vectorcall
[2m[36m(pid=3550)[0m     @     0x557950692bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3550)[0m     @     0x55795071dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3550)[0m     @     0x55795071e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3550)[0m     @     0x557950693689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3550)[0m     @     0x55795071dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3550)[0m     @     0x55795071e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3550)[0m     @     0x557950693689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3550)[0m     @     0x55795071dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3550)[0m     @     0x55795071e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3550)[0m     @     0x557950693689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3550)[0m     @     0x55795071dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3550)[0m     @     0x55795071e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3550)[0m     @     0x557950693689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3478)[0m     @     0x7ef548261b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3478)[0m     @     0x7ef548284c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3478)[0m     @     0x7ef547726a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3478)[0m     @     0x7ef547724388 at::native::copy_impl()
[2m[36m(pid=3576)[0m     @     0x7f1bb23878de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3576)[0m     @     0x7f1bafeb44f5 at::Tensor::copy_()
[2m[36m(pid=3576)[0m     @     0x7f1bb5f5f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3576)[0m     @     0x5633b85a8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3576)[0m     @     0x5633b8503b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3576)[0m     @     0x5633b858ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3576)[0m     @     0x5633b858fa20 method_vectorcall
[2m[36m(pid=3576)[0m     @     0x5633b8503bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3576)[0m     @     0x5633b858ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3576)[0m     @     0x5633b858f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3576)[0m     @     0x5633b8504689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3576)[0m     @     0x5633b858ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3576)[0m     @     0x5633b858f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3576)[0m     @     0x5633b8504689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3576)[0m     @     0x5633b858ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3576)[0m     @     0x5633b858f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3576)[0m     @     0x5633b8504689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3576)[0m     @     0x5633b858ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3576)[0m     @     0x5633b858f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3576)[0m     @     0x5633b8504689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3454)[0m     @     0x7f09943354f5 at::Tensor::copy_()
[2m[36m(pid=3454)[0m     @     0x7f09968088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3524)[0m     @     0x7f7e4aaf3388 at::native::copy_impl()
[2m[36m(pid=3524)[0m     @     0x7f7e4aaf55a4 at::native::copy_()
[2m[36m(pid=3524)[0m     @     0x7f7e4b1e04f5 at::Tensor::copy_()
[2m[36m(pid=3524)[0m     @     0x7f7e4d6b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3530)[0m     @     0x7f39706388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3530)[0m     @     0x7f396e1654f5 at::Tensor::copy_()
[2m[36m(pid=3530)[0m     @     0x7f397421079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3530)[0m     @     0x5567f9ee6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3530)[0m     @     0x5567f9e41b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3530)[0m     @     0x5567f9eccbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3530)[0m     @     0x5567f9ecda20 method_vectorcall
[2m[36m(pid=3530)[0m     @     0x5567f9e41bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3530)[0m     @     0x5567f9eccbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3530)[0m     @     0x5567f9ecd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3530)[0m     @     0x5567f9e42689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3530)[0m     @     0x5567f9eccbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3530)[0m     @     0x5567f9ecd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3530)[0m     @     0x5567f9e42689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3530)[0m     @     0x5567f9eccbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3530)[0m     @     0x5567f9ecd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3530)[0m     @     0x5567f9e42689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3530)[0m     @     0x5567f9eccbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3530)[0m     @     0x5567f9ecd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3530)[0m     @     0x5567f9e42689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3508)[0m     @     0x7f2d6a0b08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3508)[0m     @     0x7f2d67bdd4f5 at::Tensor::copy_()
[2m[36m(pid=3508)[0m     @     0x7f2d6dc8879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3508)[0m     @     0x558c65d6dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3508)[0m     @     0x558c65cc8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3508)[0m     @     0x558c65d53baf _PyEval_EvalCodeWithName
[2m[36m(pid=3508)[0m     @     0x558c65d54a20 method_vectorcall
[2m[36m(pid=3508)[0m     @     0x558c65cc8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3508)[0m     @     0x558c65d53baf _PyEval_EvalCodeWithName
[2m[36m(pid=3508)[0m     @     0x558c65d54643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3508)[0m     @     0x558c65cc9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3508)[0m     @     0x558c65d53baf _PyEval_EvalCodeWithName
[2m[36m(pid=3508)[0m     @     0x558c65d54643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3508)[0m     @     0x558c65cc9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3508)[0m     @     0x558c65d53baf _PyEval_EvalCodeWithName
[2m[36m(pid=3508)[0m     @     0x558c65d54643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3508)[0m     @     0x558c65cc9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3508)[0m     @     0x558c65d53baf _PyEval_EvalCodeWithName
[2m[36m(pid=3508)[0m     @     0x558c65d54643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3508)[0m     @     0x558c65cc9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3515)[0m     @     0x7f3986b84a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3515)[0m     @     0x7f3986b82388 at::native::copy_impl()
[2m[36m(pid=3452)[0m     @     0x7fb9efeb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3452)[0m     @     0x7fb9ed9e54f5 at::Tensor::copy_()
[2m[36m(pid=3452)[0m     @     0x7fb9f3a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3452)[0m     @     0x55583b4e8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3452)[0m     @     0x55583b443b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3452)[0m     @     0x55583b4cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3452)[0m     @     0x55583b4cfa20 method_vectorcall
[2m[36m(pid=3452)[0m     @     0x55583b443bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3452)[0m     @     0x55583b4cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3452)[0m     @     0x55583b4cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3452)[0m     @     0x55583b444689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3452)[0m     @     0x55583b4cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3452)[0m     @     0x55583b4cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3452)[0m     @     0x55583b444689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3452)[0m     @     0x55583b4cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3452)[0m     @     0x55583b4cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3452)[0m     @     0x55583b444689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3452)[0m     @     0x55583b4cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3452)[0m     @     0x55583b4cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3452)[0m     @     0x55583b444689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3475)[0m     @     0x7fbdabcc24f5 at::Tensor::copy_()
[2m[36m(pid=3475)[0m     @     0x7fbdb1d6d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3475)[0m     @     0x560e9fc56fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3475)[0m     @     0x560e9fbb1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3475)[0m     @     0x560e9fc3cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3475)[0m     @     0x560e9fc3da20 method_vectorcall
[2m[36m(pid=3475)[0m     @     0x560e9fbb1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3475)[0m     @     0x560e9fc3cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3475)[0m     @     0x560e9fc3d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3475)[0m     @     0x560e9fbb2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3475)[0m     @     0x560e9fc3cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3475)[0m     @     0x560e9fc3d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3475)[0m     @     0x560e9fbb2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3475)[0m     @     0x560e9fc3cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3475)[0m     @     0x560e9fc3d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3475)[0m     @     0x560e9fbb2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3475)[0m     @     0x560e9fc3cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3475)[0m     @     0x560e9fc3d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3475)[0m     @     0x560e9fbb2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3512)[0m     @     0x7f3e04ba44f5 at::Tensor::copy_()
[2m[36m(pid=3512)[0m     @     0x7f3e0ac4f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3512)[0m     @     0x557947298fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3512)[0m     @     0x5579471f3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3512)[0m     @     0x55794727ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3512)[0m     @     0x55794727fa20 method_vectorcall
[2m[36m(pid=3512)[0m     @     0x5579471f3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3512)[0m     @     0x55794727ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3512)[0m     @     0x55794727f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3512)[0m     @     0x5579471f4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3512)[0m     @     0x55794727ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3512)[0m     @     0x55794727f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3512)[0m     @     0x5579471f4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3512)[0m     @     0x55794727ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3512)[0m     @     0x55794727f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3512)[0m     @     0x5579471f4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3512)[0m     @     0x55794727ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3512)[0m     @     0x55794727f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3512)[0m     @     0x5579471f4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3556)[0m     @     0x7f981e8088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3556)[0m     @     0x7f981c3354f5 at::Tensor::copy_()
[2m[36m(pid=3556)[0m     @     0x7f98223e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3556)[0m     @     0x55afa9a86fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3556)[0m     @     0x55afa99e1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3556)[0m     @     0x55afa9a6cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3556)[0m     @     0x55afa9a6da20 method_vectorcall
[2m[36m(pid=3556)[0m     @     0x55afa99e1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3556)[0m     @     0x55afa9a6cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3556)[0m     @     0x55afa9a6d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3556)[0m     @     0x55afa99e2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3556)[0m     @     0x55afa9a6cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3556)[0m     @     0x55afa9a6d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3556)[0m     @     0x55afa99e2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3556)[0m     @     0x55afa9a6cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3556)[0m     @     0x55afa9a6d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3556)[0m     @     0x55afa99e2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3556)[0m     @     0x55afa9a6cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3556)[0m     @     0x55afa9a6d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3556)[0m     @     0x55afa99e2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3598)[0m     @     0x7fa4adecc4f5 at::Tensor::copy_()
[2m[36m(pid=3598)[0m     @     0x7fa4b3f7779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3598)[0m     @     0x55b92e4c7fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3598)[0m     @     0x55b92e422b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3598)[0m     @     0x55b92e4adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3598)[0m     @     0x55b92e4aea20 method_vectorcall
[2m[36m(pid=3598)[0m     @     0x55b92e422bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3598)[0m     @     0x55b92e4adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3598)[0m     @     0x55b92e4ae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3598)[0m     @     0x55b92e423689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3598)[0m     @     0x55b92e4adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3598)[0m     @     0x55b92e4ae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3598)[0m     @     0x55b92e423689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3598)[0m     @     0x55b92e4adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3598)[0m     @     0x55b92e4ae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3598)[0m     @     0x55b92e423689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3598)[0m     @     0x55b92e4adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3598)[0m     @     0x55b92e4ae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3598)[0m     @     0x55b92e423689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3527)[0m     @     0x7fb2fee7fad3 at::TensorIterator::for_each()
[2m[36m(pid=3527)[0m     @     0x7fb2fee7fd91 at::TensorIterator::for_each()
[2m[36m(pid=3527)[0m     @     0x7fb2ff762b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3527)[0m     @     0x7fb2ff785c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3463)[0m     @     0x5654ea5a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=3463)[0m     @     0x5654ea5a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3463)[0m     @     0x5654ea517689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3463)[0m     @     0x5654ea5a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=3463)[0m     @     0x5654ea5a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3463)[0m     @     0x5654ea517689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3463)[0m     @     0x5654ea5a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=3463)[0m     @     0x5654ea5a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3463)[0m     @     0x5654ea517689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3463)[0m     @     0x5654ea5a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=3463)[0m     @     0x5654ea5a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3463)[0m     @     0x5654ea517689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3510)[0m     @     0x7f7a62af5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3510)[0m     @     0x7f7a62af3388 at::native::copy_impl()
[2m[36m(pid=3510)[0m     @     0x7f7a62af55a4 at::native::copy_()
[2m[36m(pid=3461)[0m     @     0x7f7fad4ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3461)[0m     @     0x7f7faaffb4f5 at::Tensor::copy_()
[2m[36m(pid=3461)[0m     @     0x7f7fb10a679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3461)[0m     @     0x563df5477fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3461)[0m     @     0x563df53d2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3461)[0m     @     0x563df545dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3461)[0m     @     0x563df545ea20 method_vectorcall
[2m[36m(pid=3461)[0m     @     0x563df53d2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3461)[0m     @     0x563df545dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3461)[0m     @     0x563df545e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3461)[0m     @     0x563df53d3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3461)[0m     @     0x563df545dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3461)[0m     @     0x563df545e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3461)[0m     @     0x563df53d3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3461)[0m     @     0x563df545dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3461)[0m     @     0x563df545e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3461)[0m     @     0x563df53d3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3461)[0m     @     0x563df545dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3461)[0m     @     0x563df545e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3574)[0m     @     0x7f1fb14b7d91 at::TensorIterator::for_each()
[2m[36m(pid=3574)[0m     @     0x7f1fb1d9ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3574)[0m     @     0x7f1fb1dbdc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3574)[0m     @     0x7f1fb125fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3453)[0m     @     0x7f7ba05cf5a4 at::native::copy_()
[2m[36m(pid=3453)[0m     @     0x7f7ba0cba4f5 at::Tensor::copy_()
[2m[36m(pid=3453)[0m     @     0x7f7ba318d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3528)[0m     @     0x7f62f34338de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3528)[0m     @     0x7f62f0f604f5 at::Tensor::copy_()
[2m[36m(pid=3528)[0m     @     0x7f62f700b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3528)[0m     @     0x555d5b1adfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3528)[0m     @     0x555d5b108b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3528)[0m     @     0x555d5b193baf _PyEval_EvalCodeWithName
[2m[36m(pid=3528)[0m     @     0x555d5b194a20 method_vectorcall
[2m[36m(pid=3528)[0m     @     0x555d5b108bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3528)[0m     @     0x555d5b193baf _PyEval_EvalCodeWithName
[2m[36m(pid=3528)[0m     @     0x555d5b194643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3528)[0m     @     0x555d5b109689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3528)[0m     @     0x555d5b193baf _PyEval_EvalCodeWithName
[2m[36m(pid=3528)[0m     @     0x555d5b194643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3473)[0m     @     0x7eef46d4dd91 at::TensorIterator::for_each()
[2m[36m(pid=3473)[0m     @     0x7eef47630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3473)[0m     @     0x7eef47653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3534)[0m     @     0x7ef2b41cf4f5 at::Tensor::copy_()
[2m[36m(pid=3534)[0m     @     0x7ef2ba27a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3534)[0m     @     0x55ab92174fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3534)[0m     @     0x55ab920cfb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3534)[0m     @     0x55ab9215abaf _PyEval_EvalCodeWithName
[2m[36m(pid=3534)[0m     @     0x55ab9215ba20 method_vectorcall
[2m[36m(pid=3534)[0m     @     0x55ab920cfbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3467)[0m     @     0x55e9f3169baf _PyEval_EvalCodeWithName
[2m[36m(pid=3467)[0m     @     0x55e9f316a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3467)[0m     @     0x55e9f30df689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3467)[0m     @     0x55e9f3169baf _PyEval_EvalCodeWithName
[2m[36m(pid=3467)[0m     @     0x55e9f316a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3467)[0m     @     0x55e9f30df689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3535)[0m     @     0x55a795e02689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3535)[0m     @     0x55a795e8cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3535)[0m     @     0x55a795e8d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3535)[0m     @     0x55a795e02689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3474)[0m     @     0x7fb6cb1e04f5 at::Tensor::copy_()
[2m[36m(pid=3474)[0m     @     0x7fb6d128b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3474)[0m     @     0x557ba7a4cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3474)[0m     @     0x557ba79a7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3474)[0m     @     0x557ba7a32baf _PyEval_EvalCodeWithName
[2m[36m(pid=3474)[0m     @     0x557ba7a33a20 method_vectorcall
[2m[36m(pid=3474)[0m     @     0x557ba79a7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3474)[0m     @     0x557ba7a32baf _PyEval_EvalCodeWithName
[2m[36m(pid=3474)[0m     @     0x557ba7a33643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3474)[0m     @     0x557ba79a8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3474)[0m     @     0x557ba7a32baf _PyEval_EvalCodeWithName
[2m[36m(pid=3474)[0m     @     0x557ba7a33643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3474)[0m     @     0x557ba79a8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3474)[0m     @     0x557ba7a32baf _PyEval_EvalCodeWithName
[2m[36m(pid=3474)[0m     @     0x557ba7a33643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3474)[0m     @     0x557ba79a8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3474)[0m     @     0x557ba7a32baf _PyEval_EvalCodeWithName
[2m[36m(pid=3474)[0m     @     0x557ba7a33643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3474)[0m     @     0x557ba79a8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3449)[0m     @     0x7f1bdb9f5388 at::native::copy_impl()
[2m[36m(pid=3502)[0m     @     0x7f56fa6e24f5 at::Tensor::copy_()
[2m[36m(pid=3502)[0m     @     0x7f570078d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3502)[0m     @     0x55e97f3affd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3502)[0m     @     0x55e97f30ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3502)[0m     @     0x55e97f395baf _PyEval_EvalCodeWithName
[2m[36m(pid=3502)[0m     @     0x55e97f396a20 method_vectorcall
[2m[36m(pid=3502)[0m     @     0x55e97f30abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3502)[0m     @     0x55e97f395baf _PyEval_EvalCodeWithName
[2m[36m(pid=3502)[0m     @     0x55e97f396643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3502)[0m     @     0x55e97f30b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3502)[0m     @     0x55e97f395baf _PyEval_EvalCodeWithName
[2m[36m(pid=3502)[0m     @     0x55e97f396643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3502)[0m     @     0x55e97f30b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3502)[0m     @     0x55e97f395baf _PyEval_EvalCodeWithName
[2m[36m(pid=3502)[0m     @     0x55e97f396643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3502)[0m     @     0x55e97f30b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3502)[0m     @     0x55e97f395baf _PyEval_EvalCodeWithName
[2m[36m(pid=3502)[0m     @     0x55e97f396643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3502)[0m     @     0x55e97f30b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3462)[0m     @     0x7eef01cfb4f5 at::Tensor::copy_()
[2m[36m(pid=3462)[0m     @     0x7eef07da679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3462)[0m     @     0x558f93d97fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3462)[0m     @     0x558f93cf2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3462)[0m     @     0x558f93d7dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3462)[0m     @     0x558f93d7ea20 method_vectorcall
[2m[36m(pid=3462)[0m     @     0x558f93cf2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3462)[0m     @     0x558f93d7dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3462)[0m     @     0x558f93d7e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3462)[0m     @     0x558f93cf3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3462)[0m     @     0x558f93d7dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3462)[0m     @     0x558f93d7e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3462)[0m     @     0x558f93cf3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3462)[0m     @     0x558f93d7dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3462)[0m     @     0x558f93d7e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3462)[0m     @     0x558f93cf3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3462)[0m     @     0x558f93d7dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3462)[0m     @     0x558f93d7e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3462)[0m     @     0x558f93cf3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3468)[0m     @     0x5622a3510bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3468)[0m     @     0x5622a359bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3468)[0m     @     0x5622a359c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3468)[0m     @     0x5622a3511689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3468)[0m     @     0x5622a359bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3468)[0m     @     0x5622a359c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3468)[0m     @     0x5622a3511689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3468)[0m     @     0x5622a359bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3468)[0m     @     0x5622a359c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3468)[0m     @     0x5622a3511689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3468)[0m     @     0x5622a359bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3468)[0m     @     0x5622a359c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3468)[0m     @     0x5622a3511689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3601)[0m     @     0x7eec353ba4f5 at::Tensor::copy_()
[2m[36m(pid=3601)[0m     @     0x7eec3b46579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3601)[0m     @     0x563e750abfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3601)[0m     @     0x563e75006b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3601)[0m     @     0x563e75091baf _PyEval_EvalCodeWithName
[2m[36m(pid=3601)[0m     @     0x563e75092a20 method_vectorcall
[2m[36m(pid=3601)[0m     @     0x563e75006bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3601)[0m     @     0x563e75091baf _PyEval_EvalCodeWithName
[2m[36m(pid=3601)[0m     @     0x563e75092643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3601)[0m     @     0x563e75007689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3601)[0m     @     0x563e75091baf _PyEval_EvalCodeWithName
[2m[36m(pid=3601)[0m     @     0x563e75092643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3601)[0m     @     0x563e75007689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3601)[0m     @     0x563e75091baf _PyEval_EvalCodeWithName
[2m[36m(pid=3601)[0m     @     0x563e75092643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3601)[0m     @     0x563e75007689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3601)[0m     @     0x563e75091baf _PyEval_EvalCodeWithName
[2m[36m(pid=3601)[0m     @     0x563e75092643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3601)[0m     @     0x563e75007689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3525)[0m     @     0x7f54613ba4f5 at::Tensor::copy_()
[2m[36m(pid=3525)[0m     @     0x7f546388d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3525)[0m     @     0x7f54613ba4f5 at::Tensor::copy_()
[2m[36m(pid=3525)[0m     @     0x7f546746579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3525)[0m     @     0x55bb434f2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3525)[0m     @     0x55bb4344db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3479)[0m     @     0x7f465d0374f5 at::Tensor::copy_()
[2m[36m(pid=3479)[0m     @     0x7f46630e279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3479)[0m     @     0x55ab13cc5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3479)[0m     @     0x55ab13c20b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3479)[0m     @     0x55ab13cabbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3479)[0m     @     0x55ab13caca20 method_vectorcall
[2m[36m(pid=3479)[0m     @     0x55ab13c20bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3479)[0m     @     0x55ab13cabbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3479)[0m     @     0x55ab13cac643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3479)[0m     @     0x55ab13c21689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3479)[0m     @     0x55ab13cabbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3479)[0m     @     0x55ab13cac643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3479)[0m     @     0x55ab13c21689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3479)[0m     @     0x55ab13cabbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3479)[0m     @     0x55ab13cac643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3479)[0m     @     0x55ab13c21689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3479)[0m     @     0x55ab13cabbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3479)[0m     @     0x55ab13cac643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3479)[0m     @     0x55ab13c21689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3451)[0m     @     0x5635b04e1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3451)[0m     @     0x5635b056bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3451)[0m     @     0x5635b056c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3451)[0m     @     0x5635b04e1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3451)[0m     @     0x5635b056bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3451)[0m     @     0x5635b056c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3451)[0m     @     0x5635b04e1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3531)[0m     @     0x7f21eb4ccd91 at::TensorIterator::for_each()
[2m[36m(pid=3531)[0m     @     0x7f21ebdafb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3531)[0m     @     0x7f21ebdd2c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3531)[0m     @     0x7f21eb274a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3531)[0m     @     0x7f21eb272388 at::native::copy_impl()
[2m[36m(pid=3465)[0m     @     0x7efc36d2179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3465)[0m     @     0x564d36537fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3465)[0m     @     0x564d36492b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3465)[0m     @     0x564d3651dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3465)[0m     @     0x564d3651ea20 method_vectorcall
[2m[36m(pid=3465)[0m     @     0x564d36492bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3465)[0m     @     0x564d3651dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3465)[0m     @     0x564d3651e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3465)[0m     @     0x564d36493689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3465)[0m     @     0x564d3651dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3465)[0m     @     0x564d3651e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3465)[0m     @     0x564d36493689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3465)[0m     @     0x564d3651dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3465)[0m     @     0x564d3651e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3465)[0m     @     0x564d36493689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3465)[0m     @     0x564d3651dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3465)[0m     @     0x564d3651e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3465)[0m     @     0x564d36493689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3559)[0m     @     0x7f5406fcb5a4 at::native::copy_()
[2m[36m(pid=3559)[0m     @     0x7f54076b64f5 at::Tensor::copy_()
[2m[36m(pid=3559)[0m     @     0x7f5409b898de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3559)[0m     @     0x7f54076b64f5 at::Tensor::copy_()
[2m[36m(pid=3483)[0m     @     0x7f689063a388 at::native::copy_impl()
[2m[36m(pid=3483)[0m     @     0x7f689063c5a4 at::native::copy_()
[2m[36m(pid=3483)[0m     @     0x7f6890d274f5 at::Tensor::copy_()
[2m[36m(pid=3483)[0m     @     0x7f68931fa8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3517)[0m     @     0x7eeeb665479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3517)[0m     @     0x562087789fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3517)[0m     @     0x5620876e4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3517)[0m     @     0x56208776fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3517)[0m     @     0x562087770a20 method_vectorcall
[2m[36m(pid=3517)[0m     @     0x5620876e4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3517)[0m     @     0x56208776fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3517)[0m     @     0x562087770643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3517)[0m     @     0x5620876e5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3517)[0m     @     0x56208776fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3517)[0m     @     0x562087770643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3517)[0m     @     0x5620876e5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3517)[0m     @     0x56208776fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3517)[0m     @     0x562087770643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3517)[0m     @     0x5620876e5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3517)[0m     @     0x56208776fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3517)[0m     @     0x562087770643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3517)[0m     @     0x5620876e5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3580)[0m     @     0x7f52e75e44f5 at::Tensor::copy_()
[2m[36m(pid=3580)[0m     @     0x7f52ed68f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3580)[0m     @     0x56438c938fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3580)[0m     @     0x56438c893b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3580)[0m     @     0x56438c91ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3580)[0m     @     0x56438c91fa20 method_vectorcall
[2m[36m(pid=3580)[0m     @     0x56438c893bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3580)[0m     @     0x56438c91ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3580)[0m     @     0x56438c91f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3580)[0m     @     0x56438c894689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3580)[0m     @     0x56438c91ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3580)[0m     @     0x56438c91f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3580)[0m     @     0x56438c894689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3580)[0m     @     0x56438c91ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3580)[0m     @     0x56438c91f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3580)[0m     @     0x56438c894689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3580)[0m     @     0x56438c91ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3580)[0m     @     0x56438c91f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3580)[0m     @     0x56438c894689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3459)[0m     @     0x7f1d0349f4f5 at::Tensor::copy_()
[2m[36m(pid=3459)[0m     @     0x7f1d0954a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3459)[0m     @     0x5622cf6c8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3459)[0m     @     0x5622cf623b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3459)[0m     @     0x5622cf6aebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3459)[0m     @     0x5622cf6afa20 method_vectorcall
[2m[36m(pid=3459)[0m     @     0x5622cf623bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3459)[0m     @     0x5622cf6aebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3459)[0m     @     0x5622cf6af643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3459)[0m     @     0x5622cf624689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3459)[0m     @     0x5622cf6aebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3459)[0m     @     0x5622cf6af643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3459)[0m     @     0x5622cf624689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3459)[0m     @     0x5622cf6aebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3459)[0m     @     0x5622cf6af643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3459)[0m     @     0x5622cf624689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3459)[0m     @     0x5622cf6aebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3459)[0m     @     0x5622cf6af643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3459)[0m     @     0x5622cf624689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3448)[0m     @     0x561c4d614baf _PyEval_EvalCodeWithName
[2m[36m(pid=3448)[0m     @     0x561c4d615643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3448)[0m     @     0x561c4d58a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3448)[0m     @     0x561c4d614baf _PyEval_EvalCodeWithName
[2m[36m(pid=3448)[0m     @     0x561c4d615643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3448)[0m     @     0x561c4d58a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3520)[0m     @     0x7fa76be12c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3450)[0m     @     0x558deb753baf _PyEval_EvalCodeWithName
[2m[36m(pid=3450)[0m     @     0x558deb754643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3450)[0m     @     0x558deb6c9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3570)[0m     @     0x7ee6a31e04f5 at::Tensor::copy_()
[2m[36m(pid=3570)[0m     @     0x7ee6a928b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3570)[0m     @     0x55ee945b4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3570)[0m     @     0x55ee9450fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3570)[0m     @     0x55ee9459abaf _PyEval_EvalCodeWithName
[2m[36m(pid=3570)[0m     @     0x55ee9459ba20 method_vectorcall
[2m[36m(pid=3570)[0m     @     0x55ee9450fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3570)[0m     @     0x55ee9459abaf _PyEval_EvalCodeWithName
[2m[36m(pid=3570)[0m     @     0x55ee9459b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3570)[0m     @     0x55ee94510689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3570)[0m     @     0x55ee9459abaf _PyEval_EvalCodeWithName
[2m[36m(pid=3570)[0m     @     0x55ee9459b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3570)[0m     @     0x55ee94510689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3570)[0m     @     0x55ee9459abaf _PyEval_EvalCodeWithName
[2m[36m(pid=3570)[0m     @     0x55ee9459b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3570)[0m     @     0x55ee94510689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3570)[0m     @     0x55ee9459abaf _PyEval_EvalCodeWithName
[2m[36m(pid=3570)[0m     @     0x55ee9459b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3570)[0m     @     0x55ee94510689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3470)[0m     @     0x7fb0559e54f5 at::Tensor::copy_()
[2m[36m(pid=3470)[0m     @     0x7fb057eb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3478)[0m     @     0x7ef5477265a4 at::native::copy_()
[2m[36m(pid=3454)[0m     @     0x7f09943354f5 at::Tensor::copy_()
[2m[36m(pid=3454)[0m     @     0x7f099a3e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3454)[0m     @     0x55ff70d81fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3454)[0m     @     0x55ff70cdcb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3454)[0m     @     0x55ff70d67baf _PyEval_EvalCodeWithName
[2m[36m(pid=3454)[0m     @     0x55ff70d68a20 method_vectorcall
[2m[36m(pid=3454)[0m     @     0x55ff70cdcbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3454)[0m     @     0x55ff70d67baf _PyEval_EvalCodeWithName
[2m[36m(pid=3454)[0m     @     0x55ff70d68643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3454)[0m     @     0x55ff70cdd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3454)[0m     @     0x55ff70d67baf _PyEval_EvalCodeWithName
[2m[36m(pid=3454)[0m     @     0x55ff70d68643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3454)[0m     @     0x55ff70cdd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3454)[0m     @     0x55ff70d67baf _PyEval_EvalCodeWithName
[2m[36m(pid=3454)[0m     @     0x55ff70d68643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3454)[0m     @     0x55ff70cdd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3454)[0m     @     0x55ff70d67baf _PyEval_EvalCodeWithName
[2m[36m(pid=3454)[0m     @     0x55ff70d68643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3454)[0m     @     0x55ff70cdd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3524)[0m     @     0x7f7e4b1e04f5 at::Tensor::copy_()
[2m[36m(pid=3524)[0m     @     0x7f7e5128b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3524)[0m     @     0x55d38f728fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3524)[0m     @     0x55d38f683b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3524)[0m     @     0x55d38f70ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3524)[0m     @     0x55d38f70fa20 method_vectorcall
[2m[36m(pid=3524)[0m     @     0x55d38f683bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3524)[0m     @     0x55d38f70ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3524)[0m     @     0x55d38f70f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3524)[0m     @     0x55d38f684689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3524)[0m     @     0x55d38f70ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3524)[0m     @     0x55d38f70f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3524)[0m     @     0x55d38f684689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3524)[0m     @     0x55d38f70ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3524)[0m     @     0x55d38f70f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3524)[0m     @     0x55d38f684689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3515)[0m     @     0x7f3986b845a4 at::native::copy_()
[2m[36m(pid=3527)[0m     @     0x7fb2fec27a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3527)[0m     @     0x7fb2fec25388 at::native::copy_impl()
[2m[36m(pid=3527)[0m     @     0x7fb2fec275a4 at::native::copy_()
[2m[36m(pid=3510)[0m     @     0x7f7a631e04f5 at::Tensor::copy_()
[2m[36m(pid=3510)[0m     @     0x7f7a656b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3510)[0m     @     0x7f7a631e04f5 at::Tensor::copy_()
[2m[36m(pid=3510)[0m     @     0x7f7a6928b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3510)[0m     @     0x5652e3decfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3510)[0m     @     0x5652e3d47b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3510)[0m     @     0x5652e3dd2baf _PyEval_EvalCodeWithName
[2m[36m(pid=3510)[0m     @     0x5652e3dd3a20 method_vectorcall
[2m[36m(pid=3510)[0m     @     0x5652e3d47bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3461)[0m     @     0x563df53d3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3574)[0m     @     0x7f1fb125d388 at::native::copy_impl()
[2m[36m(pid=3574)[0m     @     0x7f1fb125f5a4 at::native::copy_()
[2m[36m(pid=3574)[0m     @     0x7f1fb194a4f5 at::Tensor::copy_()
[2m[36m(pid=3453)[0m     @     0x7f7ba0cba4f5 at::Tensor::copy_()
[2m[36m(pid=3453)[0m     @     0x7f7ba6d6579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3453)[0m     @     0x562b2f17dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3453)[0m     @     0x562b2f0d8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3453)[0m     @     0x562b2f163baf _PyEval_EvalCodeWithName
[2m[36m(pid=3453)[0m     @     0x562b2f164a20 method_vectorcall
[2m[36m(pid=3453)[0m     @     0x562b2f0d8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3453)[0m     @     0x562b2f163baf _PyEval_EvalCodeWithName
[2m[36m(pid=3453)[0m     @     0x562b2f164643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3453)[0m     @     0x562b2f0d9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3453)[0m     @     0x562b2f163baf _PyEval_EvalCodeWithName
[2m[36m(pid=3453)[0m     @     0x562b2f164643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3453)[0m     @     0x562b2f0d9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3453)[0m     @     0x562b2f163baf _PyEval_EvalCodeWithName
[2m[36m(pid=3453)[0m     @     0x562b2f164643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3453)[0m     @     0x562b2f0d9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3453)[0m     @     0x562b2f163baf _PyEval_EvalCodeWithName
[2m[36m(pid=3453)[0m     @     0x562b2f164643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3453)[0m     @     0x562b2f0d9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3528)[0m     @     0x555d5b109689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3528)[0m     @     0x555d5b193baf _PyEval_EvalCodeWithName
[2m[36m(pid=3528)[0m     @     0x555d5b194643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3528)[0m     @     0x555d5b109689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3528)[0m     @     0x555d5b193baf _PyEval_EvalCodeWithName
[2m[36m(pid=3528)[0m     @     0x555d5b194643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3528)[0m     @     0x555d5b109689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3473)[0m     @     0x7eef46af5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3473)[0m     @     0x7eef46af3388 at::native::copy_impl()
[2m[36m(pid=3473)[0m     @     0x7eef46af55a4 at::native::copy_()
[2m[36m(pid=3534)[0m     @     0x55ab9215abaf _PyEval_EvalCodeWithName
[2m[36m(pid=3534)[0m     @     0x55ab9215b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3534)[0m     @     0x55ab920d0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3534)[0m     @     0x55ab9215abaf _PyEval_EvalCodeWithName
[2m[36m(pid=3534)[0m     @     0x55ab9215b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3534)[0m     @     0x55ab920d0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3534)[0m     @     0x55ab9215abaf _PyEval_EvalCodeWithName
[2m[36m(pid=3534)[0m     @     0x55ab9215b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3534)[0m     @     0x55ab920d0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3534)[0m     @     0x55ab9215abaf _PyEval_EvalCodeWithName
[2m[36m(pid=3534)[0m     @     0x55ab9215b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3534)[0m     @     0x55ab920d0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3449)[0m     @     0x7f1bdb9f75a4 at::native::copy_()
[2m[36m(pid=3449)[0m     @     0x7f1bdc0e24f5 at::Tensor::copy_()
[2m[36m(pid=3457)[0m     @     0x7f51a56695a4 at::native::copy_()
[2m[36m(pid=3457)[0m     @     0x7f51a5d544f5 at::Tensor::copy_()
[2m[36m(pid=3457)[0m     @     0x7f51a82278de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3525)[0m     @     0x55bb434d8baf _PyEval_EvalCodeWithName
[2m[36m(pid=3525)[0m     @     0x55bb434d9a20 method_vectorcall
[2m[36m(pid=3525)[0m     @     0x55bb4344dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3525)[0m     @     0x55bb434d8baf _PyEval_EvalCodeWithName
[2m[36m(pid=3525)[0m     @     0x55bb434d9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3525)[0m     @     0x55bb4344e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3525)[0m     @     0x55bb434d8baf _PyEval_EvalCodeWithName
[2m[36m(pid=3525)[0m     @     0x55bb434d9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3525)[0m     @     0x55bb4344e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3525)[0m     @     0x55bb434d8baf _PyEval_EvalCodeWithName
[2m[36m(pid=3525)[0m     @     0x55bb434d9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3525)[0m     @     0x55bb4344e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3525)[0m     @     0x55bb434d8baf _PyEval_EvalCodeWithName
[2m[36m(pid=3525)[0m     @     0x55bb434d9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3525)[0m     @     0x55bb4344e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3531)[0m     @     0x7f21eb2745a4 at::native::copy_()
[2m[36m(pid=3559)[0m     @     0x7f540d76179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3559)[0m     @     0x55647b6c7fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3559)[0m     @     0x55647b622b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3559)[0m     @     0x55647b6adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3559)[0m     @     0x55647b6aea20 method_vectorcall
[2m[36m(pid=3559)[0m     @     0x55647b622bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3559)[0m     @     0x55647b6adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3559)[0m     @     0x55647b6ae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3559)[0m     @     0x55647b623689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3559)[0m     @     0x55647b6adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3559)[0m     @     0x55647b6ae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3559)[0m     @     0x55647b623689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3559)[0m     @     0x55647b6adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3559)[0m     @     0x55647b6ae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3559)[0m     @     0x55647b623689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3559)[0m     @     0x55647b6adbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3559)[0m     @     0x55647b6ae643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3559)[0m     @     0x55647b623689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3541)[0m     @     0x7eeb082b3d91 at::TensorIterator::for_each()
[2m[36m(pid=3541)[0m     @     0x7eeb08b96b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3541)[0m     @     0x7eeb08bb9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3541)[0m     @     0x7eeb0805ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3483)[0m     @     0x7f6890d274f5 at::Tensor::copy_()
[2m[36m(pid=3483)[0m     @     0x7f6896dd279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3483)[0m     @     0x56249adf6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3483)[0m     @     0x56249ad51b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3483)[0m     @     0x56249addcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3483)[0m     @     0x56249addda20 method_vectorcall
[2m[36m(pid=3483)[0m     @     0x56249ad51bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3483)[0m     @     0x56249addcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3483)[0m     @     0x56249addd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3483)[0m     @     0x56249ad52689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3483)[0m     @     0x56249addcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3483)[0m     @     0x56249addd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3483)[0m     @     0x56249ad52689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3483)[0m     @     0x56249addcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3483)[0m     @     0x56249addd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3483)[0m     @     0x56249ad52689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3483)[0m     @     0x56249addcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3483)[0m     @     0x56249addd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3483)[0m     @     0x56249ad52689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3520)[0m     @     0x7fa76b2b4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3520)[0m     @     0x7fa76b2b2388 at::native::copy_impl()
[2m[36m(pid=3520)[0m     @     0x7fa76b2b45a4 at::native::copy_()
[2m[36m(pid=3520)[0m     @     0x7fa76b99f4f5 at::Tensor::copy_()
[2m[36m(pid=3578)[0m     @     0x7f00287e3ad3 at::TensorIterator::for_each()
[2m[36m(pid=3578)[0m     @     0x7f00287e3d91 at::TensorIterator::for_each()
[2m[36m(pid=3470)[0m     @     0x7fb0559e54f5 at::Tensor::copy_()
[2m[36m(pid=3470)[0m     @     0x7fb05ba9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3470)[0m     @     0x562ff8fe7fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3470)[0m     @     0x562ff8f42b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3470)[0m     @     0x562ff8fcdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3470)[0m     @     0x562ff8fcea20 method_vectorcall
[2m[36m(pid=3470)[0m     @     0x562ff8f42bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3470)[0m     @     0x562ff8fcdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3470)[0m     @     0x562ff8fce643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3470)[0m     @     0x562ff8f43689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3470)[0m     @     0x562ff8fcdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3470)[0m     @     0x562ff8fce643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3470)[0m     @     0x562ff8f43689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3470)[0m     @     0x562ff8fcdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3470)[0m     @     0x562ff8fce643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3470)[0m     @     0x562ff8f43689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3470)[0m     @     0x562ff8fcdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=3470)[0m     @     0x562ff8fce643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3470)[0m     @     0x562ff8f43689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3478)[0m     @     0x7ef547e114f5 at::Tensor::copy_()
[2m[36m(pid=3478)[0m     @     0x7ef54a2e48de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3478)[0m     @     0x7ef547e114f5 at::Tensor::copy_()
[2m[36m(pid=3478)[0m     @     0x7ef54debc79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3478)[0m     @     0x555731d23fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3478)[0m     @     0x555731c7eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3478)[0m     @     0x555731d09baf _PyEval_EvalCodeWithName
[2m[36m(pid=3478)[0m     @     0x555731d0aa20 method_vectorcall
[2m[36m(pid=3478)[0m     @     0x555731c7ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3478)[0m     @     0x555731d09baf _PyEval_EvalCodeWithName
[2m[36m(pid=3478)[0m     @     0x555731d0a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3478)[0m     @     0x555731c7f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3478)[0m     @     0x555731d09baf _PyEval_EvalCodeWithName
[2m[36m(pid=3478)[0m     @     0x555731d0a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3478)[0m     @     0x555731c7f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3478)[0m     @     0x555731d09baf _PyEval_EvalCodeWithName
[2m[36m(pid=3478)[0m     @     0x555731d0a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3478)[0m     @     0x555731c7f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3478)[0m     @     0x555731d09baf _PyEval_EvalCodeWithName
[2m[36m(pid=3478)[0m     @     0x555731d0a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3478)[0m     @     0x555731c7f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3524)[0m     @     0x55d38f70ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3524)[0m     @     0x55d38f70f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3524)[0m     @     0x55d38f684689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3515)[0m     @     0x7f398726f4f5 at::Tensor::copy_()
[2m[36m(pid=3515)[0m     @     0x7f39897428de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3515)[0m     @     0x7f398726f4f5 at::Tensor::copy_()
[2m[36m(pid=3515)[0m     @     0x7f398d31a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3515)[0m     @     0x55d766fd2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3515)[0m     @     0x55d766f2db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3515)[0m     @     0x55d766fb8baf _PyEval_EvalCodeWithName
[2m[36m(pid=3515)[0m     @     0x55d766fb9a20 method_vectorcall
[2m[36m(pid=3515)[0m     @     0x55d766f2dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3515)[0m     @     0x55d766fb8baf _PyEval_EvalCodeWithName
[2m[36m(pid=3515)[0m     @     0x55d766fb9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3515)[0m     @     0x55d766f2e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3515)[0m     @     0x55d766fb8baf _PyEval_EvalCodeWithName
[2m[36m(pid=3527)[0m     @     0x7fb2ff3124f5 at::Tensor::copy_()
[2m[36m(pid=3527)[0m     @     0x7fb3017e58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3510)[0m     @     0x5652e3dd2baf _PyEval_EvalCodeWithName
[2m[36m(pid=3510)[0m     @     0x5652e3dd3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3510)[0m     @     0x5652e3d48689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3510)[0m     @     0x5652e3dd2baf _PyEval_EvalCodeWithName
[2m[36m(pid=3510)[0m     @     0x5652e3dd3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3510)[0m     @     0x5652e3d48689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3510)[0m     @     0x5652e3dd2baf _PyEval_EvalCodeWithName
[2m[36m(pid=3510)[0m     @     0x5652e3dd3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3510)[0m     @     0x5652e3d48689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3510)[0m     @     0x5652e3dd2baf _PyEval_EvalCodeWithName
[2m[36m(pid=3510)[0m     @     0x5652e3dd3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3510)[0m     @     0x5652e3d48689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3574)[0m     @     0x7f1fb3e1d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3574)[0m     @     0x7f1fb194a4f5 at::Tensor::copy_()
[2m[36m(pid=3574)[0m     @     0x7f1fb79f579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3574)[0m     @     0x559899c6ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3473)[0m     @     0x7eef471e04f5 at::Tensor::copy_()
[2m[36m(pid=3473)[0m     @     0x7eef496b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3449)[0m     @     0x7f1bde5b58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3449)[0m     @     0x7f1bdc0e24f5 at::Tensor::copy_()
[2m[36m(pid=3449)[0m     @     0x7f1be218d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3449)[0m     @     0x5579726d4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3449)[0m     @     0x55797262fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3449)[0m     @     0x5579726babaf _PyEval_EvalCodeWithName
[2m[36m(pid=3449)[0m     @     0x5579726bba20 method_vectorcall
[2m[36m(pid=3449)[0m     @     0x55797262fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3449)[0m     @     0x5579726babaf _PyEval_EvalCodeWithName
[2m[36m(pid=3449)[0m     @     0x5579726bb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3449)[0m     @     0x557972630689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3449)[0m     @     0x5579726babaf _PyEval_EvalCodeWithName
[2m[36m(pid=3449)[0m     @     0x5579726bb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3449)[0m     @     0x557972630689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3449)[0m     @     0x5579726babaf _PyEval_EvalCodeWithName
[2m[36m(pid=3449)[0m     @     0x5579726bb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3449)[0m     @     0x557972630689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3449)[0m     @     0x5579726babaf _PyEval_EvalCodeWithName
[2m[36m(pid=3449)[0m     @     0x5579726bb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3449)[0m     @     0x557972630689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3457)[0m     @     0x7f51a5d544f5 at::Tensor::copy_()
[2m[36m(pid=3457)[0m     @     0x7f51abdff79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3457)[0m     @     0x55ff66943fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3457)[0m     @     0x55ff6689eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3457)[0m     @     0x55ff66929baf _PyEval_EvalCodeWithName
[2m[36m(pid=3457)[0m     @     0x55ff6692aa20 method_vectorcall
[2m[36m(pid=3457)[0m     @     0x55ff6689ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3457)[0m     @     0x55ff66929baf _PyEval_EvalCodeWithName
[2m[36m(pid=3457)[0m     @     0x55ff6692a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3457)[0m     @     0x55ff6689f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3457)[0m     @     0x55ff66929baf _PyEval_EvalCodeWithName
[2m[36m(pid=3457)[0m     @     0x55ff6692a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3457)[0m     @     0x55ff6689f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3457)[0m     @     0x55ff66929baf _PyEval_EvalCodeWithName
[2m[36m(pid=3457)[0m     @     0x55ff6692a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3457)[0m     @     0x55ff6689f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3457)[0m     @     0x55ff66929baf _PyEval_EvalCodeWithName
[2m[36m(pid=3457)[0m     @     0x55ff6692a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3457)[0m     @     0x55ff6689f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3531)[0m     @     0x7f21eb95f4f5 at::Tensor::copy_()
[2m[36m(pid=3531)[0m     @     0x7f21ede328de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3531)[0m     @     0x7f21eb95f4f5 at::Tensor::copy_()
[2m[36m(pid=3531)[0m     @     0x7f21f1a0a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3531)[0m     @     0x5589213cefd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3531)[0m     @     0x558921329b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3531)[0m     @     0x5589213b4baf _PyEval_EvalCodeWithName
[2m[36m(pid=3531)[0m     @     0x5589213b5a20 method_vectorcall
[2m[36m(pid=3531)[0m     @     0x558921329bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3531)[0m     @     0x5589213b4baf _PyEval_EvalCodeWithName
[2m[36m(pid=3531)[0m     @     0x5589213b5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3531)[0m     @     0x55892132a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3531)[0m     @     0x5589213b4baf _PyEval_EvalCodeWithName
[2m[36m(pid=3531)[0m     @     0x5589213b5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3531)[0m     @     0x55892132a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3531)[0m     @     0x5589213b4baf _PyEval_EvalCodeWithName
[2m[36m(pid=3531)[0m     @     0x5589213b5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3531)[0m     @     0x55892132a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3531)[0m     @     0x5589213b4baf _PyEval_EvalCodeWithName
[2m[36m(pid=3531)[0m     @     0x5589213b5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3531)[0m     @     0x55892132a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3541)[0m     @     0x7eeb08059388 at::native::copy_impl()
[2m[36m(pid=3541)[0m     @     0x7eeb0805b5a4 at::native::copy_()
[2m[36m(pid=3520)[0m     @     0x7fa76de728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3520)[0m     @     0x7fa76b99f4f5 at::Tensor::copy_()
[2m[36m(pid=3578)[0m     @     0x7f00290c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=3578)[0m     @     0x7f00290e9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=3578)[0m     @     0x7f002858ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=3515)[0m     @     0x55d766fb9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3515)[0m     @     0x55d766f2e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3515)[0m     @     0x55d766fb8baf _PyEval_EvalCodeWithName
[2m[36m(pid=3515)[0m     @     0x55d766fb9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3515)[0m     @     0x55d766f2e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3515)[0m     @     0x55d766fb8baf _PyEval_EvalCodeWithName
[2m[36m(pid=3515)[0m     @     0x55d766fb9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3515)[0m     @     0x55d766f2e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3527)[0m     @     0x7fb2ff3124f5 at::Tensor::copy_()
[2m[36m(pid=3527)[0m     @     0x7fb3053bd79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3527)[0m     @     0x561800088fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3527)[0m     @     0x5617fffe3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3527)[0m     @     0x56180006ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3527)[0m     @     0x56180006fa20 method_vectorcall
[2m[36m(pid=3527)[0m     @     0x5617fffe3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3527)[0m     @     0x56180006ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3527)[0m     @     0x56180006f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3527)[0m     @     0x5617fffe4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3527)[0m     @     0x56180006ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3527)[0m     @     0x56180006f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3527)[0m     @     0x5617fffe4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3527)[0m     @     0x56180006ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3527)[0m     @     0x56180006f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3527)[0m     @     0x5617fffe4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3527)[0m     @     0x56180006ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3527)[0m     @     0x56180006f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3527)[0m     @     0x5617fffe4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3574)[0m     @     0x559899bcab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3574)[0m     @     0x559899c55baf _PyEval_EvalCodeWithName
[2m[36m(pid=3574)[0m     @     0x559899c56a20 method_vectorcall
[2m[36m(pid=3574)[0m     @     0x559899bcabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3574)[0m     @     0x559899c55baf _PyEval_EvalCodeWithName
[2m[36m(pid=3574)[0m     @     0x559899c56643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3574)[0m     @     0x559899bcb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3574)[0m     @     0x559899c55baf _PyEval_EvalCodeWithName
[2m[36m(pid=3574)[0m     @     0x559899c56643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3574)[0m     @     0x559899bcb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3574)[0m     @     0x559899c55baf _PyEval_EvalCodeWithName
[2m[36m(pid=3574)[0m     @     0x559899c56643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3574)[0m     @     0x559899bcb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3574)[0m     @     0x559899c55baf _PyEval_EvalCodeWithName
[2m[36m(pid=3574)[0m     @     0x559899c56643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3574)[0m     @     0x559899bcb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3473)[0m     @     0x7eef471e04f5 at::Tensor::copy_()
[2m[36m(pid=3473)[0m     @     0x7eef4d28b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3473)[0m     @     0x557e7a49bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3473)[0m     @     0x557e7a3f6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3473)[0m     @     0x557e7a481baf _PyEval_EvalCodeWithName
[2m[36m(pid=3473)[0m     @     0x557e7a482a20 method_vectorcall
[2m[36m(pid=3473)[0m     @     0x557e7a3f6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3473)[0m     @     0x557e7a481baf _PyEval_EvalCodeWithName
[2m[36m(pid=3473)[0m     @     0x557e7a482643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3473)[0m     @     0x557e7a3f7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3473)[0m     @     0x557e7a481baf _PyEval_EvalCodeWithName
[2m[36m(pid=3473)[0m     @     0x557e7a482643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3473)[0m     @     0x557e7a3f7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3473)[0m     @     0x557e7a481baf _PyEval_EvalCodeWithName
[2m[36m(pid=3473)[0m     @     0x557e7a482643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3473)[0m     @     0x557e7a3f7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3473)[0m     @     0x557e7a481baf _PyEval_EvalCodeWithName
[2m[36m(pid=3473)[0m     @     0x557e7a482643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3473)[0m     @     0x557e7a3f7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3541)[0m     @     0x7eeb087464f5 at::Tensor::copy_()
[2m[36m(pid=3541)[0m     @     0x7eeb0ac198de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=3541)[0m     @     0x7eeb087464f5 at::Tensor::copy_()
[2m[36m(pid=3520)[0m     @     0x7fa771a4a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3520)[0m     @     0x558349c3bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3520)[0m     @     0x558349b96b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3520)[0m     @     0x558349c21baf _PyEval_EvalCodeWithName
[2m[36m(pid=3520)[0m     @     0x558349c22a20 method_vectorcall
[2m[36m(pid=3520)[0m     @     0x558349b96bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3520)[0m     @     0x558349c21baf _PyEval_EvalCodeWithName
[2m[36m(pid=3520)[0m     @     0x558349c22643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3520)[0m     @     0x558349b97689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3520)[0m     @     0x558349c21baf _PyEval_EvalCodeWithName
[2m[36m(pid=3520)[0m     @     0x558349c22643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3520)[0m     @     0x558349b97689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3520)[0m     @     0x558349c21baf _PyEval_EvalCodeWithName
[2m[36m(pid=3520)[0m     @     0x558349c22643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3520)[0m     @     0x558349b97689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3520)[0m     @     0x558349c21baf _PyEval_EvalCodeWithName
[2m[36m(pid=3520)[0m     @     0x558349c22643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3520)[0m     @     0x558349b97689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3578)[0m     @     0x7f0028589388 at::native::copy_impl()
2020-11-05 10:17:00,306	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff43fb47bd01000000.
2020-11-05 10:17:00,313	ERROR trial_runner.py:567 -- Trial PPO_jss_env_065e8_00000: Error processing event.
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py", line 515, in _process_trial
    result = self.trial_executor.fetch_result(trial)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py", line 488, in fetch_result
    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/worker.py", line 1428, in get
    raise value.as_instanceof_cause()
ray.exceptions.RayTaskError: [36mray::PPO.train()[39m (pid=3536, ip=172.17.0.4)
  File "python/ray/_raylet.pyx", line 484, in ray._raylet.execute_task
  File "python/ray/_raylet.pyx", line 438, in ray._raylet.execute_task.function_executor
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 516, in train
    raise e
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 505, in train
    result = Trainable.train(self)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py", line 336, in train
    result = self.step()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py", line 134, in step
    res = next(self.train_exec_impl)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 756, in __next__
    return next(self.built_iterator)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 876, in apply_flatten
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 828, in add_wait_hooks
    item = next(it)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 466, in base_iterator
    actor_set.init_actors()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 1238, in init_actors
    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
2020-11-05 10:17:00,324	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff091d563401000000.
[2m[36m(pid=3541)[0m     @     0x7eeb0e7f179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=3541)[0m     @     0x55aa655e8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=3541)[0m     @     0x55aa65543b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3541)[0m     @     0x55aa655cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3541)[0m     @     0x55aa655cfa20 method_vectorcall
[2m[36m(pid=3541)[0m     @     0x55aa65543bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3541)[0m     @     0x55aa655cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3541)[0m     @     0x55aa655cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3541)[0m     @     0x55aa65544689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3541)[0m     @     0x55aa655cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3541)[0m     @     0x55aa655cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3541)[0m     @     0x55aa65544689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3541)[0m     @     0x55aa655cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3541)[0m     @     0x55aa655cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3541)[0m     @     0x55aa65544689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3541)[0m     @     0x55aa655cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=3541)[0m     @     0x55aa655cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=3541)[0m     @     0x55aa65544689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=3536)[0m E1105 10:17:00.279695  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=1e9c16c25b494a4a43fb47bd01000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=43fb47bd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}
[2m[36m(pid=3536)[0m E1105 10:17:00.279886  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=61afdfe40390d0a343fb47bd01000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=43fb47bd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}
[2m[36m(pid=3578)[0m     @     0x7f002858b5a4 at::native::copy_()
[2m[36m(pid=3536)[0m E1105 10:17:00.317281  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=1f6f5417a7b065f9091d563401000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=091d563401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}
[2m[36m(pid=3536)[0m E1105 10:17:00.317414  3536  4667 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=e76b5820fbdeb0f2091d563401000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=091d563401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}
[2m[36m(pid=3536)[0m E1105 10:17:00.318681  3536  4667 task_manager.cc:323] Task failed: IOError: cancelling all pending tasks of dead actor: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=stop, function_hash=}, task_id=10a4a4113c6c36ea43fb47bd01000000, task_name=RolloutWorker.stop(), job_id=01000000, num_args=0, num_returns=2, actor_task_spec={actor_id=43fb47bd01000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=2}
2020-11-05 10:17:00,335	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff8168b55d01000000.
== Status ==
Memory usage on this node: 26.6/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/558.3 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_065e8_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_065e8_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_065e8_00000_0_2020-11-05_10-16-52/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

== Status ==
Memory usage on this node: 26.3/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/3 GPUs, 0.0/558.3 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_065e8_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_065e8_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_065e8_00000_0_2020-11-05_10-16-52/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

2020-11-05 10:17:00,346	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff821ddf4301000000.
2020-11-05 10:17:00,346	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff31c3fed901000000.
Traceback (most recent call last):
  File "train.py", line 74, in <module>
    train_func()
  File "train.py", line 56, in train_func
    analysis = tune.run(PPOTrainer, config=config, stop=stop, name="ppo-jss")
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py", line 427, in run
    raise TuneError("Trials did not complete", incomplete_trials)
ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_065e8_00000])
[2m[36m(pid=3578)[0m     @     0x7f0028c764f5 at::Tensor::copy_()
[2m[36m(pid=3578)[0m     @     0x7f002b1498de torch::autograd::VariableType::(anonymous namespace)::copy_()