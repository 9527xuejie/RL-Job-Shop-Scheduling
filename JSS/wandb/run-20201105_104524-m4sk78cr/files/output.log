2020-11-05 10:45:28,209	INFO services.py:1164 -- View the Ray dashboard at [1m[32mhttp://127.0.0.1:8265[39m[22m
== Status ==
Memory usage on this node: 12.7/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 80/80 CPUs, 1/1 GPUs, 0.0/558.01 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 RUNNING)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_0580d_00000 | RUNNING  |       |
+-------------------------+----------+-------+


[2m[36m(pid=49025)[0m 2020-11-05 10:45:30,950	INFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.
[2m[36m(pid=49025)[0m /root/miniconda3/lib/python3.8/site-packages/torch/cuda/__init__.py:125: UserWarning: 
[2m[36m(pid=49025)[0m GeForce RTX 2080 Ti with CUDA capability sm_75 is not compatible with the current PyTorch installation.
[2m[36m(pid=49025)[0m The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 compute_37.
[2m[36m(pid=49025)[0m If you want to use the GeForce RTX 2080 Ti GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/
[2m[36m(pid=49025)[0m 
[2m[36m(pid=49025)[0m   warnings.warn(incompatible_device_warn.format(device_name, capability, " ".join(arch_list), device_name))
[2m[36m(pid=49007)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=49007)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=49007)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=49007)[0m PC: @                0x0 (unknown)
[2m[36m(pid=49007)[0m *** SIGSEGV (@0x0) received by PID 49007 (TID 0x7f6c68ba4700) from PID 0; stack trace: ***
[2m[36m(pid=49013)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=49013)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=49013)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=49013)[0m PC: @                0x0 (unknown)
[2m[36m(pid=49013)[0m *** SIGSEGV (@0x0) received by PID 49013 (TID 0x7f57e700c700) from PID 0; stack trace: ***
[2m[36m(pid=49002)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=49002)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=49002)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=49002)[0m PC: @                0x0 (unknown)
[2m[36m(pid=49002)[0m *** SIGSEGV (@0x0) received by PID 49002 (TID 0x7f4be5a2d700) from PID 0; stack trace: ***
[2m[36m(pid=49002)[0m     @     0x7f4be5606390 (unknown)
[2m[36m(pid=49002)[0m     @     0x7f1ce55a4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48959)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48959)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48959)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48959)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48994)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48994)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48994)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48994)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48994)[0m *** SIGSEGV (@0x0) received by PID 48994 (TID 0x7fbd17bfc700) from PID 0; stack trace: ***
[2m[36m(pid=49004)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=49004)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=49004)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=49004)[0m PC: @                0x0 (unknown)
[2m[36m(pid=49004)[0m *** SIGSEGV (@0x0) received by PID 49004 (TID 0x7fc1a6942700) from PID 0; stack trace: ***
[2m[36m(pid=49004)[0m     @     0x7fc1a651b390 (unknown)
[2m[36m(pid=49004)[0m     @     0x7f92a6494f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=49004)[0m     @     0x7f92a5bbf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48961)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48961)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48961)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48961)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48961)[0m *** SIGSEGV (@0x0) received by PID 48961 (TID 0x7fe6ac947700) from PID 0; stack trace: ***
[2m[36m(pid=48991)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48991)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48991)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48951)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48951)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48951)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48951)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48951)[0m *** SIGSEGV (@0x0) received by PID 48951 (TID 0x7f6e2e6cb700) from PID 0; stack trace: ***
[2m[36m(pid=49006)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=49006)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=49006)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48956)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48956)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48956)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48996)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48996)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48996)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48996)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48996)[0m *** SIGSEGV (@0x0) received by PID 48996 (TID 0x7f890bd25700) from PID 0; stack trace: ***
[2m[36m(pid=48975)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48975)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48975)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=49011)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=49011)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=49011)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=49011)[0m PC: @                0x0 (unknown)
[2m[36m(pid=49011)[0m *** SIGSEGV (@0x0) received by PID 49011 (TID 0x7f96e3c3c700) from PID 0; stack trace: ***
[2m[36m(pid=48967)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48967)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48967)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48963)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48963)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48963)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48963)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48963)[0m *** SIGSEGV (@0x0) received by PID 48963 (TID 0x7ffa616d7700) from PID 0; stack trace: ***
[2m[36m(pid=48992)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48992)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48992)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48992)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48992)[0m *** SIGSEGV (@0x0) received by PID 48992 (TID 0x7f1d4c965700) from PID 0; stack trace: ***
[2m[36m(pid=49009)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=49009)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=49009)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=49009)[0m PC: @                0x0 (unknown)
[2m[36m(pid=49009)[0m *** SIGSEGV (@0x0) received by PID 49009 (TID 0x7f2c23e63700) from PID 0; stack trace: ***
[2m[36m(pid=48915)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48915)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48915)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48915)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48915)[0m *** SIGSEGV (@0x0) received by PID 48915 (TID 0x7f3362dd8700) from PID 0; stack trace: ***
[2m[36m(pid=48945)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48945)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48945)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48945)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48945)[0m *** SIGSEGV (@0x0) received by PID 48945 (TID 0x7fb79cd30700) from PID 0; stack trace: ***
[2m[36m(pid=48945)[0m     @     0x7fb79c909390 (unknown)
[2m[36m(pid=48945)[0m     @     0x7f889c77cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48945)[0m     @     0x7f889bea77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48973)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48973)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48973)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48973)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48973)[0m *** SIGSEGV (@0x0) received by PID 48973 (TID 0x7fabc1a48700) from PID 0; stack trace: ***
[2m[36m(pid=48973)[0m     @     0x7fabc1621390 (unknown)
[2m[36m(pid=48973)[0m     @     0x7f7cc15bff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48973)[0m     @     0x7f7cc0cea7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48892)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48892)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48892)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48892)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48892)[0m *** SIGSEGV (@0x0) received by PID 48892 (TID 0x7f1d08250700) from PID 0; stack trace: ***
[2m[36m(pid=48892)[0m     @     0x7f1d07e29390 (unknown)
[2m[36m(pid=48892)[0m     @     0x7eee07de4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48892)[0m     @     0x7eee0750f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48962)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48962)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48962)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48962)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48962)[0m *** SIGSEGV (@0x0) received by PID 48962 (TID 0x7f820cc7a700) from PID 0; stack trace: ***
[2m[36m(pid=48962)[0m     @     0x7f820c853390 (unknown)
[2m[36m(pid=48962)[0m     @     0x7f530c60ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48962)[0m     @     0x7f530bd397db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48993)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48993)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48993)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48993)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48954)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48954)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48954)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48954)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48954)[0m *** SIGSEGV (@0x0) received by PID 48954 (TID 0x7f32d9f6f700) from PID 0; stack trace: ***
[2m[36m(pid=48954)[0m     @     0x7f32d9b48390 (unknown)
[2m[36m(pid=48954)[0m     @     0x7f03d9a0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48954)[0m     @     0x7f03d91357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48895)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48895)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48895)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48895)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48895)[0m *** SIGSEGV (@0x0) received by PID 48895 (TID 0x7f25f921e700) from PID 0; stack trace: ***
[2m[36m(pid=48895)[0m     @     0x7f25f8df7390 (unknown)
[2m[36m(pid=48895)[0m     @     0x7ef6f8d80f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48895)[0m     @     0x7ef6f84ab7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=49007)[0m     @     0x7f6c6877d390 (unknown)
[2m[36m(pid=49007)[0m     @     0x7f3d6860ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=49007)[0m     @     0x7f3d67d397db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=49007)[0m     @     0x7f3d67d3c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=49007)[0m     @     0x7f3d67d3cad3 at::TensorIterator::for_each()
[2m[36m(pid=49007)[0m     @     0x7f3d67d3cd91 at::TensorIterator::for_each()
[2m[36m(pid=49007)[0m     @     0x7f3d6861fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=49007)[0m     @     0x7f3d68642c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=49007)[0m     @     0x7f3d67ae4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=49007)[0m     @     0x7f3d67ae2388 at::native::copy_impl()
[2m[36m(pid=49007)[0m     @     0x7f3d67ae45a4 at::native::copy_()
[2m[36m(pid=49007)[0m     @     0x7f3d681cf4f5 at::Tensor::copy_()
[2m[36m(pid=49007)[0m     @     0x7f3d6a6a28de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=49007)[0m     @     0x7f3d681cf4f5 at::Tensor::copy_()
[2m[36m(pid=49007)[0m     @     0x7f3d6e27a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=49007)[0m     @     0x55ee6c8a1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=49007)[0m     @     0x55ee6c7fcb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49007)[0m     @     0x55ee6c887baf _PyEval_EvalCodeWithName
[2m[36m(pid=49007)[0m     @     0x55ee6c888a20 method_vectorcall
[2m[36m(pid=49007)[0m     @     0x55ee6c7fcbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49007)[0m     @     0x55ee6c887baf _PyEval_EvalCodeWithName
[2m[36m(pid=49007)[0m     @     0x55ee6c888643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49007)[0m     @     0x55ee6c7fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49007)[0m     @     0x55ee6c887baf _PyEval_EvalCodeWithName
[2m[36m(pid=49007)[0m     @     0x55ee6c888643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49007)[0m     @     0x55ee6c7fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49007)[0m     @     0x55ee6c887baf _PyEval_EvalCodeWithName
[2m[36m(pid=49007)[0m     @     0x55ee6c888643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49007)[0m     @     0x55ee6c7fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49007)[0m     @     0x55ee6c887baf _PyEval_EvalCodeWithName
[2m[36m(pid=49007)[0m     @     0x55ee6c888643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49007)[0m     @     0x55ee6c7fd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49013)[0m     @     0x7f57e6be5390 (unknown)
[2m[36m(pid=49013)[0m     @     0x7f28e6b8ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=49013)[0m     @     0x7f28e62b97db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=49013)[0m     @     0x7f28e62bc8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=49013)[0m     @     0x7f28e62bcad3 at::TensorIterator::for_each()
[2m[36m(pid=49013)[0m     @     0x7f28e62bcd91 at::TensorIterator::for_each()
[2m[36m(pid=49013)[0m     @     0x7f28e6b9fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=49013)[0m     @     0x7f28e6bc2c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=49013)[0m     @     0x7f28e6064a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=49013)[0m     @     0x7f28e6062388 at::native::copy_impl()
[2m[36m(pid=49013)[0m     @     0x7f28e60645a4 at::native::copy_()
[2m[36m(pid=49013)[0m     @     0x7f28e674f4f5 at::Tensor::copy_()
[2m[36m(pid=49013)[0m     @     0x7f28e8c228de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=49013)[0m     @     0x7f28e674f4f5 at::Tensor::copy_()
[2m[36m(pid=49002)[0m     @     0x7f1ce4ccf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=49002)[0m     @     0x7f1ce4cd28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=49002)[0m     @     0x7f1ce4cd2ad3 at::TensorIterator::for_each()
[2m[36m(pid=49002)[0m     @     0x7f1ce4cd2d91 at::TensorIterator::for_each()
[2m[36m(pid=49002)[0m     @     0x7f1ce55b5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=49002)[0m     @     0x7f1ce55d8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=49002)[0m     @     0x7f1ce4a7aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=49002)[0m     @     0x7f1ce4a78388 at::native::copy_impl()
[2m[36m(pid=49002)[0m     @     0x7f1ce4a7a5a4 at::native::copy_()
[2m[36m(pid=49002)[0m     @     0x7f1ce51654f5 at::Tensor::copy_()
[2m[36m(pid=49002)[0m     @     0x7f1ce76388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48959)[0m *** SIGSEGV (@0x0) received by PID 48959 (TID 0x7f4614e0f700) from PID 0; stack trace: ***
[2m[36m(pid=48959)[0m     @     0x7f46149e8390 (unknown)
[2m[36m(pid=48959)[0m     @     0x7f1714774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48959)[0m     @     0x7f1713e9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48959)[0m     @     0x7f1713ea28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48959)[0m     @     0x7f1713ea2ad3 at::TensorIterator::for_each()
[2m[36m(pid=48959)[0m     @     0x7f1713ea2d91 at::TensorIterator::for_each()
[2m[36m(pid=48959)[0m     @     0x7f1714785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48959)[0m     @     0x7f17147a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48959)[0m     @     0x7f1713c4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48959)[0m     @     0x7f1713c48388 at::native::copy_impl()
[2m[36m(pid=48959)[0m     @     0x7f1713c4a5a4 at::native::copy_()
[2m[36m(pid=48959)[0m     @     0x7f17143354f5 at::Tensor::copy_()
[2m[36m(pid=48959)[0m     @     0x7f17168088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48959)[0m     @     0x7f17143354f5 at::Tensor::copy_()
[2m[36m(pid=48959)[0m     @     0x7f171a3e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48959)[0m     @     0x555b5a859fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48959)[0m     @     0x555b5a7b4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48959)[0m     @     0x555b5a83fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48959)[0m     @     0x555b5a840a20 method_vectorcall
[2m[36m(pid=48959)[0m     @     0x555b5a7b4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48959)[0m     @     0x555b5a83fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48959)[0m     @     0x555b5a840643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48959)[0m     @     0x555b5a7b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48959)[0m     @     0x555b5a83fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48959)[0m     @     0x555b5a840643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48994)[0m     @     0x7fbd177d5390 (unknown)
[2m[36m(pid=48994)[0m     @     0x7f8e1761ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48994)[0m     @     0x7f8e16d4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48994)[0m     @     0x7f8e16d4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48994)[0m     @     0x7f8e16d4dad3 at::TensorIterator::for_each()
[2m[36m(pid=48994)[0m     @     0x7f8e16d4dd91 at::TensorIterator::for_each()
[2m[36m(pid=48994)[0m     @     0x7f8e17630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48994)[0m     @     0x7f8e17653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48994)[0m     @     0x7f8e16af5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48994)[0m     @     0x7f8e16af3388 at::native::copy_impl()
[2m[36m(pid=48994)[0m     @     0x7f8e16af55a4 at::native::copy_()
[2m[36m(pid=48994)[0m     @     0x7f8e171e04f5 at::Tensor::copy_()
[2m[36m(pid=48994)[0m     @     0x7f8e196b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48994)[0m     @     0x7f8e171e04f5 at::Tensor::copy_()
[2m[36m(pid=48994)[0m     @     0x7f8e1d28b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48994)[0m     @     0x562e1af9bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48994)[0m     @     0x562e1aef6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48994)[0m     @     0x562e1af81baf _PyEval_EvalCodeWithName
[2m[36m(pid=48994)[0m     @     0x562e1af82a20 method_vectorcall
[2m[36m(pid=48994)[0m     @     0x562e1aef6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48994)[0m     @     0x562e1af81baf _PyEval_EvalCodeWithName
[2m[36m(pid=48994)[0m     @     0x562e1af82643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48994)[0m     @     0x562e1aef7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48994)[0m     @     0x562e1af81baf _PyEval_EvalCodeWithName
[2m[36m(pid=48994)[0m     @     0x562e1af82643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48994)[0m     @     0x562e1aef7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48994)[0m     @     0x562e1af81baf _PyEval_EvalCodeWithName
[2m[36m(pid=48994)[0m     @     0x562e1af82643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48994)[0m     @     0x562e1aef7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48994)[0m     @     0x562e1af81baf _PyEval_EvalCodeWithName
[2m[36m(pid=48994)[0m     @     0x562e1af82643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48994)[0m     @     0x562e1aef7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49004)[0m     @     0x7f92a5bc28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=49004)[0m     @     0x7f92a5bc2ad3 at::TensorIterator::for_each()
[2m[36m(pid=49004)[0m     @     0x7f92a5bc2d91 at::TensorIterator::for_each()
[2m[36m(pid=49004)[0m     @     0x7f92a64a5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=49004)[0m     @     0x7f92a64c8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=49004)[0m     @     0x7f92a596aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=49004)[0m     @     0x7f92a5968388 at::native::copy_impl()
[2m[36m(pid=49004)[0m     @     0x7f92a596a5a4 at::native::copy_()
[2m[36m(pid=49004)[0m     @     0x7f92a60554f5 at::Tensor::copy_()
[2m[36m(pid=49004)[0m     @     0x7f92a85288de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=49004)[0m     @     0x7f92a60554f5 at::Tensor::copy_()
[2m[36m(pid=49004)[0m     @     0x7f92ac10079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=49004)[0m     @     0x562af6bc6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=49004)[0m     @     0x562af6b21b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49004)[0m     @     0x562af6bacbaf _PyEval_EvalCodeWithName
[2m[36m(pid=49004)[0m     @     0x562af6bada20 method_vectorcall
[2m[36m(pid=49004)[0m     @     0x562af6b21bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49004)[0m     @     0x562af6bacbaf _PyEval_EvalCodeWithName
[2m[36m(pid=49004)[0m     @     0x562af6bad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49004)[0m     @     0x562af6b22689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49004)[0m     @     0x562af6bacbaf _PyEval_EvalCodeWithName
[2m[36m(pid=49004)[0m     @     0x562af6bad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49004)[0m     @     0x562af6b22689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49004)[0m     @     0x562af6bacbaf _PyEval_EvalCodeWithName
[2m[36m(pid=49004)[0m     @     0x562af6bad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49004)[0m     @     0x562af6b22689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49004)[0m     @     0x562af6bacbaf _PyEval_EvalCodeWithName
[2m[36m(pid=49004)[0m     @     0x562af6bad643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49004)[0m     @     0x562af6b22689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48921)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48921)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48921)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48921)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48921)[0m *** SIGSEGV (@0x0) received by PID 48921 (TID 0x7fb45a158700) from PID 0; stack trace: ***
[2m[36m(pid=48921)[0m     @     0x7fb459d31390 (unknown)
[2m[36m(pid=48921)[0m     @     0x7f8559c0df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48921)[0m     @     0x7f85593387db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48921)[0m     @     0x7f855933b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48885)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48885)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48885)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48885)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48885)[0m *** SIGSEGV (@0x0) received by PID 48885 (TID 0x7fab4fbe5700) from PID 0; stack trace: ***
[2m[36m(pid=48885)[0m     @     0x7fab4f7be390 (unknown)
[2m[36m(pid=48885)[0m     @     0x7f7c4f61ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48885)[0m     @     0x7f7c4ed4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48957)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48957)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48957)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48957)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48957)[0m *** SIGSEGV (@0x0) received by PID 48957 (TID 0x7f09f8089700) from PID 0; stack trace: ***
[2m[36m(pid=48957)[0m     @     0x7f09f7c62390 (unknown)
[2m[36m(pid=48957)[0m     @     0x7edaf7af5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48957)[0m     @     0x7edaf72207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48891)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48891)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48891)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48891)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48891)[0m *** SIGSEGV (@0x0) received by PID 48891 (TID 0x7fd3b870c700) from PID 0; stack trace: ***
[2m[36m(pid=48891)[0m     @     0x7fd3b82e5390 (unknown)
[2m[36m(pid=48891)[0m     @     0x7fa4b80c0f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48891)[0m     @     0x7fa4b77eb7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48891)[0m     @     0x7fa4b77ee8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48898)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48898)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48898)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48898)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48898)[0m *** SIGSEGV (@0x0) received by PID 48898 (TID 0x7f17970db700) from PID 0; stack trace: ***
[2m[36m(pid=48898)[0m     @     0x7f1796cb4390 (unknown)
[2m[36m(pid=48898)[0m     @     0x7ee896a21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48898)[0m     @     0x7ee89614c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48883)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48883)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48883)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48883)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48883)[0m *** SIGSEGV (@0x0) received by PID 48883 (TID 0x7f22d8250700) from PID 0; stack trace: ***
[2m[36m(pid=48883)[0m     @     0x7f22d7e29390 (unknown)
[2m[36m(pid=48883)[0m     @     0x7ef3d7ddef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48883)[0m     @     0x7ef3d75097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48883)[0m     @     0x7ef3d750c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48883)[0m     @     0x7ef3d750cad3 at::TensorIterator::for_each()
[2m[36m(pid=49012)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=49012)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=49012)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=49012)[0m PC: @                0x0 (unknown)
[2m[36m(pid=49012)[0m *** SIGSEGV (@0x0) received by PID 49012 (TID 0x7f4154f9b700) from PID 0; stack trace: ***
[2m[36m(pid=49012)[0m     @     0x7f4154b74390 (unknown)
[2m[36m(pid=49012)[0m     @     0x7f1254b24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=49012)[0m     @     0x7f125424f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48961)[0m     @     0x7fe6ac520390 (unknown)
[2m[36m(pid=48961)[0m     @     0x7fb7ac136f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48961)[0m     @     0x7fb7ab8617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48961)[0m     @     0x7fb7ab8648f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48961)[0m     @     0x7fb7ab864ad3 at::TensorIterator::for_each()
[2m[36m(pid=48961)[0m     @     0x7fb7ab864d91 at::TensorIterator::for_each()
[2m[36m(pid=48961)[0m     @     0x7fb7ac147b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48961)[0m     @     0x7fb7ac16ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48961)[0m     @     0x7fb7ab60ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48961)[0m     @     0x7fb7ab60a388 at::native::copy_impl()
[2m[36m(pid=48961)[0m     @     0x7fb7ab60c5a4 at::native::copy_()
[2m[36m(pid=48961)[0m     @     0x7fb7abcf74f5 at::Tensor::copy_()
[2m[36m(pid=48961)[0m     @     0x7fb7ae1ca8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48961)[0m     @     0x7fb7abcf74f5 at::Tensor::copy_()
[2m[36m(pid=48961)[0m     @     0x7fb7b1da279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48961)[0m     @     0x55dfcc1befd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48961)[0m     @     0x55dfcc119b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48961)[0m     @     0x55dfcc1a4baf _PyEval_EvalCodeWithName
[2m[36m(pid=48961)[0m     @     0x55dfcc1a5a20 method_vectorcall
[2m[36m(pid=48961)[0m     @     0x55dfcc119bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48961)[0m     @     0x55dfcc1a4baf _PyEval_EvalCodeWithName
[2m[36m(pid=48961)[0m     @     0x55dfcc1a5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48961)[0m     @     0x55dfcc11a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48961)[0m     @     0x55dfcc1a4baf _PyEval_EvalCodeWithName
[2m[36m(pid=48961)[0m     @     0x55dfcc1a5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48961)[0m     @     0x55dfcc11a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48961)[0m     @     0x55dfcc1a4baf _PyEval_EvalCodeWithName
[2m[36m(pid=48961)[0m     @     0x55dfcc1a5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48961)[0m     @     0x55dfcc11a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48961)[0m     @     0x55dfcc1a4baf _PyEval_EvalCodeWithName
[2m[36m(pid=48961)[0m     @     0x55dfcc1a5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48961)[0m     @     0x55dfcc11a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48991)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48991)[0m *** SIGSEGV (@0x0) received by PID 48991 (TID 0x7f9a29cc7700) from PID 0; stack trace: ***
[2m[36m(pid=48991)[0m     @     0x7f9a298a0390 (unknown)
[2m[36m(pid=48991)[0m     @     0x7f6b297f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48991)[0m     @     0x7f6b28f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48991)[0m     @     0x7f6b28f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48991)[0m     @     0x7f6b28f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=48991)[0m     @     0x7f6b28f27d91 at::TensorIterator::for_each()
[2m[36m(pid=48991)[0m     @     0x7f6b2980ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48991)[0m     @     0x7f6b2982dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48991)[0m     @     0x7f6b28ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48991)[0m     @     0x7f6b28ccd388 at::native::copy_impl()
[2m[36m(pid=48991)[0m     @     0x7f6b28ccf5a4 at::native::copy_()
[2m[36m(pid=48991)[0m     @     0x7f6b293ba4f5 at::Tensor::copy_()
[2m[36m(pid=48991)[0m     @     0x7f6b2b88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48991)[0m     @     0x7f6b293ba4f5 at::Tensor::copy_()
[2m[36m(pid=48991)[0m     @     0x7f6b2f46579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48991)[0m     @     0x55ea6db82fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48991)[0m     @     0x55ea6daddb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48991)[0m     @     0x55ea6db68baf _PyEval_EvalCodeWithName
[2m[36m(pid=48991)[0m     @     0x55ea6db69a20 method_vectorcall
[2m[36m(pid=48951)[0m     @     0x7f6e2e2a4390 (unknown)
[2m[36m(pid=48951)[0m     @     0x7f3f2e239f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48951)[0m     @     0x7f3f2d9647db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48951)[0m     @     0x7f3f2d9678f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48951)[0m     @     0x7f3f2d967ad3 at::TensorIterator::for_each()
[2m[36m(pid=48951)[0m     @     0x7f3f2d967d91 at::TensorIterator::for_each()
[2m[36m(pid=48951)[0m     @     0x7f3f2e24ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48951)[0m     @     0x7f3f2e26dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48951)[0m     @     0x7f3f2d70fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48951)[0m     @     0x7f3f2d70d388 at::native::copy_impl()
[2m[36m(pid=48951)[0m     @     0x7f3f2d70f5a4 at::native::copy_()
[2m[36m(pid=48951)[0m     @     0x7f3f2ddfa4f5 at::Tensor::copy_()
[2m[36m(pid=48951)[0m     @     0x7f3f302cd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=49006)[0m PC: @                0x0 (unknown)
[2m[36m(pid=49006)[0m *** SIGSEGV (@0x0) received by PID 49006 (TID 0x7f5d78eba700) from PID 0; stack trace: ***
[2m[36m(pid=49006)[0m     @     0x7f5d78a93390 (unknown)
[2m[36m(pid=49006)[0m     @     0x7f2e789e8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=49006)[0m     @     0x7f2e781137db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=49006)[0m     @     0x7f2e781168f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=49006)[0m     @     0x7f2e78116ad3 at::TensorIterator::for_each()
[2m[36m(pid=49006)[0m     @     0x7f2e78116d91 at::TensorIterator::for_each()
[2m[36m(pid=49006)[0m     @     0x7f2e789f9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=49006)[0m     @     0x7f2e78a1cc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=49006)[0m     @     0x7f2e77ebea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=49006)[0m     @     0x7f2e77ebc388 at::native::copy_impl()
[2m[36m(pid=49006)[0m     @     0x7f2e77ebe5a4 at::native::copy_()
[2m[36m(pid=48956)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48956)[0m *** SIGSEGV (@0x0) received by PID 48956 (TID 0x7f246b88d700) from PID 0; stack trace: ***
[2m[36m(pid=48956)[0m     @     0x7f246b466390 (unknown)
[2m[36m(pid=48956)[0m     @     0x7ef56b398f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48956)[0m     @     0x7ef56aac37db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48956)[0m     @     0x7ef56aac68f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48956)[0m     @     0x7ef56aac6ad3 at::TensorIterator::for_each()
[2m[36m(pid=48956)[0m     @     0x7ef56aac6d91 at::TensorIterator::for_each()
[2m[36m(pid=48956)[0m     @     0x7ef56b3a9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48956)[0m     @     0x7ef56b3ccc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48956)[0m     @     0x7ef56a86ea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48956)[0m     @     0x7ef56a86c388 at::native::copy_impl()
[2m[36m(pid=48956)[0m     @     0x7ef56a86e5a4 at::native::copy_()
[2m[36m(pid=48956)[0m     @     0x7ef56af594f5 at::Tensor::copy_()
[2m[36m(pid=48956)[0m     @     0x7ef56d42c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48956)[0m     @     0x7ef56af594f5 at::Tensor::copy_()
[2m[36m(pid=48996)[0m     @     0x7f890b8fe390 (unknown)
[2m[36m(pid=48996)[0m     @     0x7f5a0b89ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48996)[0m     @     0x7f5a0afc97db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48996)[0m     @     0x7f5a0afcc8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48996)[0m     @     0x7f5a0afccad3 at::TensorIterator::for_each()
[2m[36m(pid=48996)[0m     @     0x7f5a0afccd91 at::TensorIterator::for_each()
[2m[36m(pid=48996)[0m     @     0x7f5a0b8afb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48996)[0m     @     0x7f5a0b8d2c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48996)[0m     @     0x7f5a0ad74a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48996)[0m     @     0x7f5a0ad72388 at::native::copy_impl()
[2m[36m(pid=48996)[0m     @     0x7f5a0ad745a4 at::native::copy_()
[2m[36m(pid=48996)[0m     @     0x7f5a0b45f4f5 at::Tensor::copy_()
[2m[36m(pid=48996)[0m     @     0x7f5a0d9328de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48996)[0m     @     0x7f5a0b45f4f5 at::Tensor::copy_()
[2m[36m(pid=48996)[0m     @     0x7f5a1150a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48996)[0m     @     0x5571a04e0fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48996)[0m     @     0x5571a043bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48996)[0m     @     0x5571a04c6baf _PyEval_EvalCodeWithName
[2m[36m(pid=48996)[0m     @     0x5571a04c7a20 method_vectorcall
[2m[36m(pid=48996)[0m     @     0x5571a043bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48996)[0m     @     0x5571a04c6baf _PyEval_EvalCodeWithName
[2m[36m(pid=48996)[0m     @     0x5571a04c7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48996)[0m     @     0x5571a043c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48996)[0m     @     0x5571a04c6baf _PyEval_EvalCodeWithName
[2m[36m(pid=48996)[0m     @     0x5571a04c7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48996)[0m     @     0x5571a043c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48996)[0m     @     0x5571a04c6baf _PyEval_EvalCodeWithName
[2m[36m(pid=48996)[0m     @     0x5571a04c7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48996)[0m     @     0x5571a043c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48996)[0m     @     0x5571a04c6baf _PyEval_EvalCodeWithName
[2m[36m(pid=48996)[0m     @     0x5571a04c7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48996)[0m     @     0x5571a043c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48975)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48975)[0m *** SIGSEGV (@0x0) received by PID 48975 (TID 0x7f4496701700) from PID 0; stack trace: ***
[2m[36m(pid=48975)[0m     @     0x7f44962da390 (unknown)
[2m[36m(pid=48975)[0m     @     0x7f1596279f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48975)[0m     @     0x7f15959a47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48975)[0m     @     0x7f15959a78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48975)[0m     @     0x7f15959a7ad3 at::TensorIterator::for_each()
[2m[36m(pid=48975)[0m     @     0x7f15959a7d91 at::TensorIterator::for_each()
[2m[36m(pid=48975)[0m     @     0x7f159628ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48975)[0m     @     0x7f15962adc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48975)[0m     @     0x7f159574fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48975)[0m     @     0x7f159574d388 at::native::copy_impl()
[2m[36m(pid=48975)[0m     @     0x7f159574f5a4 at::native::copy_()
[2m[36m(pid=48975)[0m     @     0x7f1595e3a4f5 at::Tensor::copy_()
[2m[36m(pid=48975)[0m     @     0x7f159830d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48897)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48897)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48897)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48897)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48897)[0m *** SIGSEGV (@0x0) received by PID 48897 (TID 0x7f3175f46700) from PID 0; stack trace: ***
[2m[36m(pid=48897)[0m     @     0x7f3175b1f390 (unknown)
[2m[36m(pid=48897)[0m     @     0x7f0275a0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48897)[0m     @     0x7f02751357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48897)[0m     @     0x7f02751388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48908)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48908)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48908)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48908)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48908)[0m *** SIGSEGV (@0x0) received by PID 48908 (TID 0x7fbba78e0700) from PID 0; stack trace: ***
[2m[36m(pid=48908)[0m     @     0x7fbba74b9390 (unknown)
[2m[36m(pid=48908)[0m     @     0x7f8ca7229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48908)[0m     @     0x7f8ca69547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48908)[0m     @     0x7f8ca69578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48968)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48968)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48968)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48968)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48968)[0m *** SIGSEGV (@0x0) received by PID 48968 (TID 0x7fa55ceb0700) from PID 0; stack trace: ***
[2m[36m(pid=48968)[0m     @     0x7fa55ca89390 (unknown)
[2m[36m(pid=48968)[0m     @     0x7f765c9e8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48968)[0m     @     0x7f765c1137db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48968)[0m     @     0x7f765c1168f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48968)[0m     @     0x7f765c116ad3 at::TensorIterator::for_each()
[2m[36m(pid=48968)[0m     @     0x7f765c116d91 at::TensorIterator::for_each()
[2m[36m(pid=48968)[0m     @     0x7f765c9f9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=49015)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=49015)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=49015)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=49015)[0m PC: @                0x0 (unknown)
[2m[36m(pid=49015)[0m *** SIGSEGV (@0x0) received by PID 49015 (TID 0x7fc41efc4700) from PID 0; stack trace: ***
[2m[36m(pid=49015)[0m     @     0x7fc41eb9d390 (unknown)
[2m[36m(pid=49015)[0m     @     0x7f951ea21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=49015)[0m     @     0x7f951e14c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=49015)[0m     @     0x7f951e14f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48984)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48984)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48984)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48984)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48984)[0m *** SIGSEGV (@0x0) received by PID 48984 (TID 0x7f6636ae1700) from PID 0; stack trace: ***
[2m[36m(pid=48984)[0m     @     0x7f66366ba390 (unknown)
[2m[36m(pid=48984)[0m     @     0x7f37364f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48984)[0m     @     0x7f3735c247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48984)[0m     @     0x7f3735c278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48984)[0m     @     0x7f3735c27ad3 at::TensorIterator::for_each()
[2m[36m(pid=49011)[0m     @     0x7f96e3815390 (unknown)
[2m[36m(pid=49011)[0m     @     0x7f67e37a9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=49011)[0m     @     0x7f67e2ed47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=49011)[0m     @     0x7f67e2ed78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=49011)[0m     @     0x7f67e2ed7ad3 at::TensorIterator::for_each()
[2m[36m(pid=49011)[0m     @     0x7f67e2ed7d91 at::TensorIterator::for_each()
[2m[36m(pid=49011)[0m     @     0x7f67e37bab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=49011)[0m     @     0x7f67e37ddc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=49011)[0m     @     0x7f67e2c7fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=49011)[0m     @     0x7f67e2c7d388 at::native::copy_impl()
[2m[36m(pid=49011)[0m     @     0x7f67e2c7f5a4 at::native::copy_()
[2m[36m(pid=49011)[0m     @     0x7f67e336a4f5 at::Tensor::copy_()
[2m[36m(pid=49011)[0m     @     0x7f67e583d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=49011)[0m     @     0x7f67e336a4f5 at::Tensor::copy_()
[2m[36m(pid=49011)[0m     @     0x7f67e941579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=49011)[0m     @     0x5564a6d8efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=49011)[0m     @     0x5564a6ce9b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49011)[0m     @     0x5564a6d74baf _PyEval_EvalCodeWithName
[2m[36m(pid=49011)[0m     @     0x5564a6d75a20 method_vectorcall
[2m[36m(pid=49011)[0m     @     0x5564a6ce9bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49011)[0m     @     0x5564a6d74baf _PyEval_EvalCodeWithName
[2m[36m(pid=49011)[0m     @     0x5564a6d75643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49011)[0m     @     0x5564a6cea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48967)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48967)[0m *** SIGSEGV (@0x0) received by PID 48967 (TID 0x7f03b320d700) from PID 0; stack trace: ***
[2m[36m(pid=48967)[0m     @     0x7f03b2de6390 (unknown)
[2m[36m(pid=48967)[0m     @     0x7ed4b2d83f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48967)[0m     @     0x7ed4b24ae7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48967)[0m     @     0x7ed4b24b18f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48967)[0m     @     0x7ed4b24b1ad3 at::TensorIterator::for_each()
[2m[36m(pid=48967)[0m     @     0x7ed4b24b1d91 at::TensorIterator::for_each()
[2m[36m(pid=48967)[0m     @     0x7ed4b2d94b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48967)[0m     @     0x7ed4b2db7c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48967)[0m     @     0x7ed4b2259a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48967)[0m     @     0x7ed4b2257388 at::native::copy_impl()
[2m[36m(pid=48967)[0m     @     0x7ed4b22595a4 at::native::copy_()
[2m[36m(pid=49018)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=49018)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=49018)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=49018)[0m PC: @                0x0 (unknown)
[2m[36m(pid=49018)[0m *** SIGSEGV (@0x0) received by PID 49018 (TID 0x7fd23e0c1700) from PID 0; stack trace: ***
[2m[36m(pid=49018)[0m     @     0x7fd23dc9a390 (unknown)
[2m[36m(pid=49018)[0m     @     0x7fa33dc51f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=49018)[0m     @     0x7fa33d37c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=49018)[0m     @     0x7fa33d37f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=49018)[0m     @     0x7fa33d37fad3 at::TensorIterator::for_each()
[2m[36m(pid=48963)[0m     @     0x7ffa612b0390 (unknown)
[2m[36m(pid=48963)[0m     @     0x7fcb6124af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48963)[0m     @     0x7fcb609757db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48963)[0m     @     0x7fcb609788f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48963)[0m     @     0x7fcb60978ad3 at::TensorIterator::for_each()
[2m[36m(pid=48963)[0m     @     0x7fcb60978d91 at::TensorIterator::for_each()
[2m[36m(pid=48963)[0m     @     0x7fcb6125bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48963)[0m     @     0x7fcb6127ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48963)[0m     @     0x7fcb60720a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48963)[0m     @     0x7fcb6071e388 at::native::copy_impl()
[2m[36m(pid=48963)[0m     @     0x7fcb607205a4 at::native::copy_()
[2m[36m(pid=48963)[0m     @     0x7fcb60e0b4f5 at::Tensor::copy_()
[2m[36m(pid=48963)[0m     @     0x7fcb632de8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48963)[0m     @     0x7fcb60e0b4f5 at::Tensor::copy_()
[2m[36m(pid=48963)[0m     @     0x7fcb66eb679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48963)[0m     @     0x55de7d8e8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48963)[0m     @     0x55de7d843b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48963)[0m     @     0x55de7d8cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48963)[0m     @     0x55de7d8cfa20 method_vectorcall
[2m[36m(pid=48963)[0m     @     0x55de7d843bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48963)[0m     @     0x55de7d8cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48963)[0m     @     0x55de7d8cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48963)[0m     @     0x55de7d844689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48963)[0m     @     0x55de7d8cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48963)[0m     @     0x55de7d8cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48992)[0m     @     0x7f1d4c53e390 (unknown)
[2m[36m(pid=48992)[0m     @     0x7eee4c4d9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48992)[0m     @     0x7eee4bc047db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48992)[0m     @     0x7eee4bc078f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48992)[0m     @     0x7eee4bc07ad3 at::TensorIterator::for_each()
[2m[36m(pid=48992)[0m     @     0x7eee4bc07d91 at::TensorIterator::for_each()
[2m[36m(pid=48992)[0m     @     0x7eee4c4eab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48992)[0m     @     0x7eee4c50dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48992)[0m     @     0x7eee4b9afa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48992)[0m     @     0x7eee4b9ad388 at::native::copy_impl()
[2m[36m(pid=48992)[0m     @     0x7eee4b9af5a4 at::native::copy_()
[2m[36m(pid=48992)[0m     @     0x7eee4c09a4f5 at::Tensor::copy_()
[2m[36m(pid=48992)[0m     @     0x7eee4e56d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48958)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48958)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48958)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48958)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48958)[0m *** SIGSEGV (@0x0) received by PID 48958 (TID 0x7fede6a27700) from PID 0; stack trace: ***
[2m[36m(pid=48958)[0m     @     0x7fede6600390 (unknown)
[2m[36m(pid=48958)[0m     @     0x7fbee6577f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48958)[0m     @     0x7fbee5ca27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48958)[0m     @     0x7fbee5ca58f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48950)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48950)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48950)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48950)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48950)[0m *** SIGSEGV (@0x0) received by PID 48950 (TID 0x7feb45602700) from PID 0; stack trace: ***
[2m[36m(pid=48950)[0m     @     0x7feb451db390 (unknown)
[2m[36m(pid=48950)[0m     @     0x7fbc45166f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48950)[0m     @     0x7fbc448917db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48950)[0m     @     0x7fbc448948f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48969)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48969)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48969)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48969)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48969)[0m *** SIGSEGV (@0x0) received by PID 48969 (TID 0x7f9e506d2700) from PID 0; stack trace: ***
[2m[36m(pid=48969)[0m     @     0x7f9e502ab390 (unknown)
[2m[36m(pid=48969)[0m     @     0x7f6f50250f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48969)[0m     @     0x7f6f4f97b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48969)[0m     @     0x7f6f4f97e8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48969)[0m     @     0x7f6f4f97ead3 at::TensorIterator::for_each()
[2m[36m(pid=48972)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48972)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48972)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48972)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48972)[0m *** SIGSEGV (@0x0) received by PID 48972 (TID 0x7fd51f13c700) from PID 0; stack trace: ***
[2m[36m(pid=48972)[0m     @     0x7fd51ed15390 (unknown)
[2m[36m(pid=48972)[0m     @     0x7fa61ec8ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48972)[0m     @     0x7fa61e3ba7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48972)[0m     @     0x7fa61e3bd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48972)[0m     @     0x7fa61e3bdad3 at::TensorIterator::for_each()
[2m[36m(pid=49008)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=49008)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=49008)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=49008)[0m PC: @                0x0 (unknown)
[2m[36m(pid=49008)[0m *** SIGSEGV (@0x0) received by PID 49008 (TID 0x7f7c44ed0700) from PID 0; stack trace: ***
[2m[36m(pid=49008)[0m     @     0x7f7c44aa9390 (unknown)
[2m[36m(pid=49008)[0m     @     0x7f4d44a36f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=49008)[0m     @     0x7f4d441617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=49008)[0m     @     0x7f4d441648f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=49008)[0m     @     0x7f4d44164ad3 at::TensorIterator::for_each()
[2m[36m(pid=49008)[0m     @     0x7f4d44164d91 at::TensorIterator::for_each()
[2m[36m(pid=49008)[0m     @     0x7f4d44a47b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=49009)[0m     @     0x7f2c23a3c390 (unknown)
[2m[36m(pid=49009)[0m     @     0x7efd23751f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=49009)[0m     @     0x7efd22e7c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=49009)[0m     @     0x7efd22e7f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=49009)[0m     @     0x7efd22e7fad3 at::TensorIterator::for_each()
[2m[36m(pid=49009)[0m     @     0x7efd22e7fd91 at::TensorIterator::for_each()
[2m[36m(pid=49009)[0m     @     0x7efd23762b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=49009)[0m     @     0x7efd23785c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=49009)[0m     @     0x7efd22c27a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=49009)[0m     @     0x7efd22c25388 at::native::copy_impl()
[2m[36m(pid=49009)[0m     @     0x7efd22c275a4 at::native::copy_()
[2m[36m(pid=49009)[0m     @     0x7efd233124f5 at::Tensor::copy_()
[2m[36m(pid=49009)[0m     @     0x7efd257e58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=49009)[0m     @     0x7efd233124f5 at::Tensor::copy_()
[2m[36m(pid=49009)[0m     @     0x7efd293bd79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=49009)[0m     @     0x55617f1c2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=49009)[0m     @     0x55617f11db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49009)[0m     @     0x55617f1a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=49009)[0m     @     0x55617f1a9a20 method_vectorcall
[2m[36m(pid=49009)[0m     @     0x55617f11dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49009)[0m     @     0x55617f1a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=49009)[0m     @     0x55617f1a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49009)[0m     @     0x55617f11e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49009)[0m     @     0x55617f1a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=49009)[0m     @     0x55617f1a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49009)[0m     @     0x55617f11e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49009)[0m     @     0x55617f1a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=49009)[0m     @     0x55617f1a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49009)[0m     @     0x55617f11e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49009)[0m     @     0x55617f1a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=49009)[0m     @     0x55617f1a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49009)[0m     @     0x55617f11e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48988)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48988)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48988)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48988)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48988)[0m *** SIGSEGV (@0x0) received by PID 48988 (TID 0x7fe596110700) from PID 0; stack trace: ***
[2m[36m(pid=48988)[0m     @     0x7fe595ce9390 (unknown)
[2m[36m(pid=48988)[0m     @     0x7fb695c0df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48988)[0m     @     0x7fb6953387db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48988)[0m     @     0x7fb69533b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48988)[0m     @     0x7fb69533bad3 at::TensorIterator::for_each()
[2m[36m(pid=48988)[0m     @     0x7fb69533bd91 at::TensorIterator::for_each()
[2m[36m(pid=48965)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48965)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48965)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48965)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48965)[0m *** SIGSEGV (@0x0) received by PID 48965 (TID 0x7fe80c9ea700) from PID 0; stack trace: ***
[2m[36m(pid=48965)[0m     @     0x7fe80c5c3390 (unknown)
[2m[36m(pid=48965)[0m     @     0x7fb90c536f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48965)[0m     @     0x7fb90bc617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48965)[0m     @     0x7fb90bc648f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48965)[0m     @     0x7fb90bc64ad3 at::TensorIterator::for_each()
[2m[36m(pid=48882)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48882)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48882)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48882)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48882)[0m *** SIGSEGV (@0x0) received by PID 48882 (TID 0x7ff7adf9e700) from PID 0; stack trace: ***
[2m[36m(pid=48882)[0m     @     0x7ff7adb77390 (unknown)
[2m[36m(pid=48882)[0m     @     0x7fc8ada0af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48882)[0m     @     0x7fc8ad1357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48882)[0m     @     0x7fc8ad1388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48882)[0m     @     0x7fc8ad138ad3 at::TensorIterator::for_each()
[2m[36m(pid=48906)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48906)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48906)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48906)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48906)[0m *** SIGSEGV (@0x0) received by PID 48906 (TID 0x7f1b26033700) from PID 0; stack trace: ***
[2m[36m(pid=48906)[0m     @     0x7f1b25c0c390 (unknown)
[2m[36m(pid=48906)[0m     @     0x7eec25b9ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48906)[0m     @     0x7eec252ca7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48906)[0m     @     0x7eec252cd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48906)[0m     @     0x7eec252cdad3 at::TensorIterator::for_each()
[2m[36m(pid=48913)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48913)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48913)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48913)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48913)[0m *** SIGSEGV (@0x0) received by PID 48913 (TID 0x7f5b71d1e700) from PID 0; stack trace: ***
[2m[36m(pid=48913)[0m     @     0x7f5b718f7390 (unknown)
[2m[36m(pid=48913)[0m     @     0x7f2c717f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48913)[0m     @     0x7f2c70f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48948)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48948)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48948)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48948)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48948)[0m *** SIGSEGV (@0x0) received by PID 48948 (TID 0x7f0d7b69d700) from PID 0; stack trace: ***
[2m[36m(pid=48948)[0m     @     0x7f0d7b276390 (unknown)
[2m[36m(pid=48948)[0m     @     0x7ede7b1fcf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48948)[0m     @     0x7ede7a9277db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48916)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48916)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48916)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48916)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48916)[0m *** SIGSEGV (@0x0) received by PID 48916 (TID 0x7fbd97b0f700) from PID 0; stack trace: ***
[2m[36m(pid=48916)[0m     @     0x7fbd976e8390 (unknown)
[2m[36m(pid=48916)[0m     @     0x7f8e9761ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48916)[0m     @     0x7f8e96d4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48916)[0m     @     0x7f8e96d4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48896)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48896)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48896)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48896)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48896)[0m *** SIGSEGV (@0x0) received by PID 48896 (TID 0x7f7864139700) from PID 0; stack trace: ***
[2m[36m(pid=48896)[0m     @     0x7f7863d12390 (unknown)
[2m[36m(pid=48896)[0m     @     0x7f4963ca8f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48896)[0m     @     0x7f49633d37db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48896)[0m     @     0x7f49633d68f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48920)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48920)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48920)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48920)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48920)[0m *** SIGSEGV (@0x0) received by PID 48920 (TID 0x7fa905757700) from PID 0; stack trace: ***
[2m[36m(pid=48920)[0m     @     0x7fa905330390 (unknown)
[2m[36m(pid=48920)[0m     @     0x7f7a0528af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48920)[0m     @     0x7f7a049b57db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48953)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48953)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48953)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48953)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48953)[0m *** SIGSEGV (@0x0) received by PID 48953 (TID 0x7fe124776700) from PID 0; stack trace: ***
[2m[36m(pid=48953)[0m     @     0x7fe12434f390 (unknown)
[2m[36m(pid=48953)[0m     @     0x7fb224290f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48953)[0m     @     0x7fb2239bb7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48953)[0m     @     0x7fb2239be8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48953)[0m     @     0x7fb2239bead3 at::TensorIterator::for_each()
[2m[36m(pid=48884)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48884)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48884)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48884)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48884)[0m *** SIGSEGV (@0x0) received by PID 48884 (TID 0x7f57a7b16700) from PID 0; stack trace: ***
[2m[36m(pid=48884)[0m     @     0x7f57a76ef390 (unknown)
[2m[36m(pid=48884)[0m     @     0x7f28a7681f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48884)[0m     @     0x7f28a6dac7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48884)[0m     @     0x7f28a6daf8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48960)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48960)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48960)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48960)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48960)[0m *** SIGSEGV (@0x0) received by PID 48960 (TID 0x7fda97618700) from PID 0; stack trace: ***
[2m[36m(pid=48960)[0m     @     0x7fda971f1390 (unknown)
[2m[36m(pid=48960)[0m     @     0x7fab97124f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48960)[0m     @     0x7fab9684f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48960)[0m     @     0x7fab968528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48960)[0m     @     0x7fab96852ad3 at::TensorIterator::for_each()
[2m[36m(pid=48900)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48900)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48900)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48900)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48900)[0m *** SIGSEGV (@0x0) received by PID 48900 (TID 0x7fd405990700) from PID 0; stack trace: ***
[2m[36m(pid=48900)[0m     @     0x7fd405569390 (unknown)
[2m[36m(pid=48942)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48942)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48942)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48942)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48942)[0m *** SIGSEGV (@0x0) received by PID 48942 (TID 0x7fdeffd34700) from PID 0; stack trace: ***
[2m[36m(pid=48942)[0m     @     0x7fdeff90d390 (unknown)
[2m[36m(pid=48942)[0m     @     0x7fafff89ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48942)[0m     @     0x7faffefc97db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48952)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48952)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48952)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48952)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48952)[0m *** SIGSEGV (@0x0) received by PID 48952 (TID 0x7faac21a0700) from PID 0; stack trace: ***
[2m[36m(pid=48952)[0m     @     0x7faac1d79390 (unknown)
[2m[36m(pid=48952)[0m     @     0x7f7bc1d12f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48952)[0m     @     0x7f7bc143d7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48901)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48901)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48901)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48901)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48901)[0m *** SIGSEGV (@0x0) received by PID 48901 (TID 0x7f60b59dc700) from PID 0; stack trace: ***
[2m[36m(pid=48901)[0m     @     0x7f60b55b5390 (unknown)
[2m[36m(pid=48901)[0m     @     0x7f31b54e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48901)[0m     @     0x7f31b4c0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48901)[0m     @     0x7f31b4c118f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48901)[0m     @     0x7f31b4c11ad3 at::TensorIterator::for_each()
[2m[36m(pid=48966)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48966)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48966)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48966)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48966)[0m *** SIGSEGV (@0x0) received by PID 48966 (TID 0x7f95a6cbe700) from PID 0; stack trace: ***
[2m[36m(pid=48966)[0m     @     0x7f95a6897390 (unknown)
[2m[36m(pid=48966)[0m     @     0x7f66a67bbf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48966)[0m     @     0x7f66a5ee67db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48966)[0m     @     0x7f66a5ee98f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48966)[0m     @     0x7f66a5ee9ad3 at::TensorIterator::for_each()
[2m[36m(pid=48924)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48924)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48924)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48924)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48924)[0m *** SIGSEGV (@0x0) received by PID 48924 (TID 0x7f465bc47700) from PID 0; stack trace: ***
[2m[36m(pid=48924)[0m     @     0x7f465b820390 (unknown)
[2m[36m(pid=48924)[0m     @     0x7f175b7a9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48924)[0m     @     0x7f175aed47db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48924)[0m     @     0x7f175aed78f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48924)[0m     @     0x7f175aed7ad3 at::TensorIterator::for_each()
[2m[36m(pid=48914)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48914)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48914)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48914)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48914)[0m *** SIGSEGV (@0x0) received by PID 48914 (TID 0x7f9e73b82700) from PID 0; stack trace: ***
[2m[36m(pid=48914)[0m     @     0x7f9e7375b390 (unknown)
[2m[36m(pid=48914)[0m     @     0x7f6f7361ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48914)[0m     @     0x7f6f72d4a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48914)[0m     @     0x7f6f72d4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48914)[0m     @     0x7f6f72d4dad3 at::TensorIterator::for_each()
[2m[36m(pid=48887)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48887)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48887)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48887)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48887)[0m *** SIGSEGV (@0x0) received by PID 48887 (TID 0x7f9b45896700) from PID 0; stack trace: ***
[2m[36m(pid=48887)[0m     @     0x7f9b4546f390 (unknown)
[2m[36m(pid=48887)[0m     @     0x7f6c453ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48887)[0m     @     0x7f6c44af77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48887)[0m     @     0x7f6c44afa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48887)[0m     @     0x7f6c44afaad3 at::TensorIterator::for_each()
[2m[36m(pid=48887)[0m     @     0x7f6c44afad91 at::TensorIterator::for_each()
[2m[36m(pid=48887)[0m     @     0x7f6c453ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48889)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48889)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48889)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48889)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48889)[0m *** SIGSEGV (@0x0) received by PID 48889 (TID 0x7f0482cb2700) from PID 0; stack trace: ***
[2m[36m(pid=48889)[0m     @     0x7f048288b390 (unknown)
[2m[36m(pid=48889)[0m     @     0x7ed58270af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48889)[0m     @     0x7ed581e357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48889)[0m     @     0x7ed581e388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48889)[0m     @     0x7ed581e38ad3 at::TensorIterator::for_each()
[2m[36m(pid=48881)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48881)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48881)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48881)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48881)[0m *** SIGSEGV (@0x0) received by PID 48881 (TID 0x7f10cdf68700) from PID 0; stack trace: ***
[2m[36m(pid=48881)[0m     @     0x7f10cdb41390 (unknown)
[2m[36m(pid=48881)[0m     @     0x7ee1cdad0f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48881)[0m     @     0x7ee1cd1fb7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48881)[0m     @     0x7ee1cd1fe8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48881)[0m     @     0x7ee1cd1fead3 at::TensorIterator::for_each()
[2m[36m(pid=48947)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48947)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48947)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48947)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48947)[0m *** SIGSEGV (@0x0) received by PID 48947 (TID 0x7ff0e044a700) from PID 0; stack trace: ***
[2m[36m(pid=48947)[0m     @     0x7ff0e0023390 (unknown)
[2m[36m(pid=48947)[0m     @     0x7fc1dfe0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48947)[0m     @     0x7fc1df5367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48947)[0m     @     0x7fc1df5398f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48947)[0m     @     0x7fc1df539ad3 at::TensorIterator::for_each()
[2m[36m(pid=48890)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48890)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48890)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48890)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48890)[0m *** SIGSEGV (@0x0) received by PID 48890 (TID 0x7f4d880bd700) from PID 0; stack trace: ***
[2m[36m(pid=48890)[0m     @     0x7f4d87c96390 (unknown)
[2m[36m(pid=48890)[0m     @     0x7f1e879c5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48890)[0m     @     0x7f1e870f07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48890)[0m     @     0x7f1e870f38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48890)[0m     @     0x7f1e870f3ad3 at::TensorIterator::for_each()
[2m[36m(pid=48890)[0m     @     0x7f1e870f3d91 at::TensorIterator::for_each()
[2m[36m(pid=48902)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48902)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48902)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48902)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48902)[0m *** SIGSEGV (@0x0) received by PID 48902 (TID 0x7faaa4b10700) from PID 0; stack trace: ***
[2m[36m(pid=48902)[0m     @     0x7faaa46e9390 (unknown)
[2m[36m(pid=48902)[0m     @     0x7f7ba469ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48902)[0m     @     0x7f7ba3dca7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48902)[0m     @     0x7f7ba3dcd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48902)[0m     @     0x7f7ba3dcdad3 at::TensorIterator::for_each()
[2m[36m(pid=48943)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48943)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48943)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48943)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48943)[0m *** SIGSEGV (@0x0) received by PID 48943 (TID 0x7f4e64b1d700) from PID 0; stack trace: ***
[2m[36m(pid=48943)[0m     @     0x7f4e646f6390 (unknown)
[2m[36m(pid=48943)[0m     @     0x7f1f6460ef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48943)[0m     @     0x7f1f63d397db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48943)[0m     @     0x7f1f63d3c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48943)[0m     @     0x7f1f63d3cad3 at::TensorIterator::for_each()
[2m[36m(pid=48999)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48999)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48999)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48999)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48999)[0m *** SIGSEGV (@0x0) received by PID 48999 (TID 0x7fab8dd83700) from PID 0; stack trace: ***
[2m[36m(pid=48999)[0m     @     0x7fab8d95c390 (unknown)
[2m[36m(pid=48999)[0m     @     0x7f7c8d7f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48999)[0m     @     0x7f7c8cf247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48909)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48909)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48909)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48909)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48909)[0m *** SIGSEGV (@0x0) received by PID 48909 (TID 0x7f09b9655700) from PID 0; stack trace: ***
[2m[36m(pid=48909)[0m     @     0x7f09b922e390 (unknown)
[2m[36m(pid=48909)[0m     @     0x7edab90b5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48909)[0m     @     0x7edab87e07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48909)[0m     @     0x7edab87e38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48909)[0m     @     0x7edab87e3ad3 at::TensorIterator::for_each()
[2m[36m(pid=48909)[0m     @     0x7edab87e3d91 at::TensorIterator::for_each()
[2m[36m(pid=48909)[0m     @     0x7edab90c6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48909)[0m     @     0x7edab90e9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48981)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48981)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48981)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48981)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48981)[0m *** SIGSEGV (@0x0) received by PID 48981 (TID 0x7f0b38e22700) from PID 0; stack trace: ***
[2m[36m(pid=48981)[0m     @     0x7f0b389fb390 (unknown)
[2m[36m(pid=48981)[0m     @     0x7edc38774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48981)[0m     @     0x7edc37e9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48981)[0m     @     0x7edc37ea28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48981)[0m     @     0x7edc37ea2ad3 at::TensorIterator::for_each()
[2m[36m(pid=48981)[0m     @     0x7edc37ea2d91 at::TensorIterator::for_each()
[2m[36m(pid=48981)[0m     @     0x7edc38785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48981)[0m     @     0x7edc387a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48981)[0m     @     0x7edc37c4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48981)[0m     @     0x7edc37c48388 at::native::copy_impl()
[2m[36m(pid=48979)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48979)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48979)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48979)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48979)[0m *** SIGSEGV (@0x0) received by PID 48979 (TID 0x7fb966eed700) from PID 0; stack trace: ***
[2m[36m(pid=48979)[0m     @     0x7fb966ac6390 (unknown)
[2m[36m(pid=48979)[0m     @     0x7f8a66a64f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48979)[0m     @     0x7f8a6618f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48979)[0m     @     0x7f8a661928f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48979)[0m     @     0x7f8a66192ad3 at::TensorIterator::for_each()
[2m[36m(pid=48979)[0m     @     0x7f8a66192d91 at::TensorIterator::for_each()
[2m[36m(pid=48979)[0m     @     0x7f8a66a75b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48979)[0m     @     0x7f8a66a98c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48964)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48964)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48964)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48964)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48964)[0m *** SIGSEGV (@0x0) received by PID 48964 (TID 0x7f96a4038700) from PID 0; stack trace: ***
[2m[36m(pid=48964)[0m     @     0x7f96a3c11390 (unknown)
[2m[36m(pid=48964)[0m     @     0x7f67a39c5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48964)[0m     @     0x7f67a30f07db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48964)[0m     @     0x7f67a30f38f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48964)[0m     @     0x7f67a30f3ad3 at::TensorIterator::for_each()
[2m[36m(pid=48899)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48899)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48899)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48899)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48899)[0m *** SIGSEGV (@0x0) received by PID 48899 (TID 0x7f915085c700) from PID 0; stack trace: ***
[2m[36m(pid=48899)[0m     @     0x7f9150435390 (unknown)
[2m[36m(pid=48899)[0m     @     0x7f6250304f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48899)[0m     @     0x7f624fa2f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48899)[0m     @     0x7f624fa328f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48899)[0m     @     0x7f624fa32ad3 at::TensorIterator::for_each()
[2m[36m(pid=48899)[0m     @     0x7f624fa32d91 at::TensorIterator::for_each()
[2m[36m(pid=48899)[0m     @     0x7f6250315b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48899)[0m     @     0x7f6250338c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48886)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48886)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48886)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48886)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48886)[0m *** SIGSEGV (@0x0) received by PID 48886 (TID 0x7f5cb361e700) from PID 0; stack trace: ***
[2m[36m(pid=48886)[0m     @     0x7f5cb31f7390 (unknown)
[2m[36m(pid=48886)[0m     @     0x7f2db3124f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48886)[0m     @     0x7f2db284f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48886)[0m     @     0x7f2db28528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48886)[0m     @     0x7f2db2852ad3 at::TensorIterator::for_each()
[2m[36m(pid=48886)[0m     @     0x7f2db2852d91 at::TensorIterator::for_each()
[2m[36m(pid=48886)[0m     @     0x7f2db3135b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48894)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48894)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48894)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48894)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48894)[0m *** SIGSEGV (@0x0) received by PID 48894 (TID 0x7ff7233a4700) from PID 0; stack trace: ***
[2m[36m(pid=48894)[0m     @     0x7ff722f7d390 (unknown)
[2m[36m(pid=48894)[0m     @     0x7fc822ee6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48894)[0m     @     0x7fc8226117db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48894)[0m     @     0x7fc8226148f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48894)[0m     @     0x7fc822614ad3 at::TensorIterator::for_each()
[2m[36m(pid=48915)[0m     @     0x7f33629b1390 (unknown)
[2m[36m(pid=48915)[0m     @     0x7f046270af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48915)[0m     @     0x7f0461e357db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48915)[0m     @     0x7f0461e388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48915)[0m     @     0x7f0461e38ad3 at::TensorIterator::for_each()
[2m[36m(pid=48945)[0m     @     0x7f889beaa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48945)[0m     @     0x7f889beaaad3 at::TensorIterator::for_each()
[2m[36m(pid=48945)[0m     @     0x7f889beaad91 at::TensorIterator::for_each()
[2m[36m(pid=48945)[0m     @     0x7f889c78db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48973)[0m     @     0x7f7cc0ced8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48973)[0m     @     0x7f7cc0cedad3 at::TensorIterator::for_each()
[2m[36m(pid=48973)[0m     @     0x7f7cc0cedd91 at::TensorIterator::for_each()
[2m[36m(pid=48892)[0m     @     0x7eee075128f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48892)[0m     @     0x7eee07512ad3 at::TensorIterator::for_each()
[2m[36m(pid=48892)[0m     @     0x7eee07512d91 at::TensorIterator::for_each()
[2m[36m(pid=48962)[0m     @     0x7f530bd3c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48962)[0m     @     0x7f530bd3cad3 at::TensorIterator::for_each()
[2m[36m(pid=48962)[0m     @     0x7f530bd3cd91 at::TensorIterator::for_each()
[2m[36m(pid=48993)[0m *** SIGSEGV (@0x0) received by PID 48993 (TID 0x7f19844e4700) from PID 0; stack trace: ***
[2m[36m(pid=48993)[0m     @     0x7f19840bd390 (unknown)
[2m[36m(pid=48993)[0m     @     0x7eea8401cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48993)[0m     @     0x7eea837477db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48993)[0m     @     0x7eea8374a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48954)[0m     @     0x7f03d91388f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48954)[0m     @     0x7f03d9138ad3 at::TensorIterator::for_each()
[2m[36m(pid=48955)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=48955)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=48955)[0m *** Aborted at 1604573136 (unix time) try "date -d @1604573136" if you are using GNU date ***
[2m[36m(pid=48955)[0m PC: @                0x0 (unknown)
[2m[36m(pid=48955)[0m *** SIGSEGV (@0x0) received by PID 48955 (TID 0x7f8274985700) from PID 0; stack trace: ***
[2m[36m(pid=48955)[0m     @     0x7f827455e390 (unknown)
[2m[36m(pid=48955)[0m     @     0x7f5374339f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48955)[0m     @     0x7f5373a647db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48895)[0m     @     0x7ef6f84ae8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48895)[0m     @     0x7ef6f84aead3 at::TensorIterator::for_each()
[2m[36m(pid=49013)[0m     @     0x7f28ec7fa79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=49013)[0m     @     0x55b75acc0fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=49013)[0m     @     0x55b75ac1bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49013)[0m     @     0x55b75aca6baf _PyEval_EvalCodeWithName
[2m[36m(pid=49013)[0m     @     0x55b75aca7a20 method_vectorcall
[2m[36m(pid=49013)[0m     @     0x55b75ac1bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49013)[0m     @     0x55b75aca6baf _PyEval_EvalCodeWithName
[2m[36m(pid=49013)[0m     @     0x55b75aca7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49013)[0m     @     0x55b75ac1c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49013)[0m     @     0x55b75aca6baf _PyEval_EvalCodeWithName
[2m[36m(pid=49013)[0m     @     0x55b75aca7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49013)[0m     @     0x55b75ac1c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49013)[0m     @     0x55b75aca6baf _PyEval_EvalCodeWithName
[2m[36m(pid=49013)[0m     @     0x55b75aca7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49013)[0m     @     0x55b75ac1c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49013)[0m     @     0x55b75aca6baf _PyEval_EvalCodeWithName
[2m[36m(pid=49013)[0m     @     0x55b75aca7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49013)[0m     @     0x55b75ac1c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49002)[0m     @     0x7f1ce51654f5 at::Tensor::copy_()
[2m[36m(pid=49002)[0m     @     0x7f1ceb21079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=49002)[0m     @     0x56262e129fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=49002)[0m     @     0x56262e084b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49002)[0m     @     0x56262e10fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=49002)[0m     @     0x56262e110a20 method_vectorcall
[2m[36m(pid=49002)[0m     @     0x56262e084bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49002)[0m     @     0x56262e10fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=49002)[0m     @     0x56262e110643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49002)[0m     @     0x56262e085689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49002)[0m     @     0x56262e10fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=49002)[0m     @     0x56262e110643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49002)[0m     @     0x56262e085689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49002)[0m     @     0x56262e10fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=49002)[0m     @     0x56262e110643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49002)[0m     @     0x56262e085689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49002)[0m     @     0x56262e10fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=49002)[0m     @     0x56262e110643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49002)[0m     @     0x56262e085689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48959)[0m     @     0x555b5a7b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48959)[0m     @     0x555b5a83fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48959)[0m     @     0x555b5a840643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48959)[0m     @     0x555b5a7b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48959)[0m     @     0x555b5a83fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48959)[0m     @     0x555b5a840643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48959)[0m     @     0x555b5a7b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48921)[0m     @     0x7f855933bad3 at::TensorIterator::for_each()
[2m[36m(pid=48921)[0m     @     0x7f855933bd91 at::TensorIterator::for_each()
[2m[36m(pid=48921)[0m     @     0x7f8559c1eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48885)[0m     @     0x7f7c4ed4d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48885)[0m     @     0x7f7c4ed4dad3 at::TensorIterator::for_each()
[2m[36m(pid=48885)[0m     @     0x7f7c4ed4dd91 at::TensorIterator::for_each()
[2m[36m(pid=48957)[0m     @     0x7edaf72238f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48957)[0m     @     0x7edaf7223ad3 at::TensorIterator::for_each()
[2m[36m(pid=48957)[0m     @     0x7edaf7223d91 at::TensorIterator::for_each()
[2m[36m(pid=48891)[0m     @     0x7fa4b77eead3 at::TensorIterator::for_each()
[2m[36m(pid=48891)[0m     @     0x7fa4b77eed91 at::TensorIterator::for_each()
[2m[36m(pid=48891)[0m     @     0x7fa4b80d1b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48891)[0m     @     0x7fa4b80f4c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48898)[0m     @     0x7ee89614f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48898)[0m     @     0x7ee89614fad3 at::TensorIterator::for_each()
[2m[36m(pid=48883)[0m     @     0x7ef3d750cd91 at::TensorIterator::for_each()
[2m[36m(pid=48883)[0m     @     0x7ef3d7defb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48883)[0m     @     0x7ef3d7e12c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48883)[0m     @     0x7ef3d72b4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=49012)[0m     @     0x7f12542528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=49012)[0m     @     0x7f1254252ad3 at::TensorIterator::for_each()
[2m[36m(pid=49012)[0m     @     0x7f1254252d91 at::TensorIterator::for_each()
[2m[36m(pid=48991)[0m     @     0x55ea6daddbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48991)[0m     @     0x55ea6db68baf _PyEval_EvalCodeWithName
[2m[36m(pid=48991)[0m     @     0x55ea6db69643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48991)[0m     @     0x55ea6dade689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48991)[0m     @     0x55ea6db68baf _PyEval_EvalCodeWithName
[2m[36m(pid=48991)[0m     @     0x55ea6db69643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48991)[0m     @     0x55ea6dade689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48991)[0m     @     0x55ea6db68baf _PyEval_EvalCodeWithName
[2m[36m(pid=48991)[0m     @     0x55ea6db69643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48991)[0m     @     0x55ea6dade689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48991)[0m     @     0x55ea6db68baf _PyEval_EvalCodeWithName
[2m[36m(pid=48991)[0m     @     0x55ea6db69643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48991)[0m     @     0x55ea6dade689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48951)[0m     @     0x7f3f2ddfa4f5 at::Tensor::copy_()
[2m[36m(pid=48951)[0m     @     0x7f3f33ea579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48951)[0m     @     0x5647c0359fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48951)[0m     @     0x5647c02b4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48951)[0m     @     0x5647c033fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48951)[0m     @     0x5647c0340a20 method_vectorcall
[2m[36m(pid=48951)[0m     @     0x5647c02b4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48951)[0m     @     0x5647c033fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48951)[0m     @     0x5647c0340643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48951)[0m     @     0x5647c02b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48951)[0m     @     0x5647c033fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48951)[0m     @     0x5647c0340643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48951)[0m     @     0x5647c02b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48951)[0m     @     0x5647c033fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48951)[0m     @     0x5647c0340643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48951)[0m     @     0x5647c02b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48951)[0m     @     0x5647c033fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48951)[0m     @     0x5647c0340643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48951)[0m     @     0x5647c02b5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49006)[0m     @     0x7f2e785a94f5 at::Tensor::copy_()
[2m[36m(pid=49006)[0m     @     0x7f2e7aa7c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=49006)[0m     @     0x7f2e785a94f5 at::Tensor::copy_()
[2m[36m(pid=49006)[0m     @     0x7f2e7e65479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=49006)[0m     @     0x56393e282fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=49006)[0m     @     0x56393e1ddb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49006)[0m     @     0x56393e268baf _PyEval_EvalCodeWithName
[2m[36m(pid=49006)[0m     @     0x56393e269a20 method_vectorcall
[2m[36m(pid=49006)[0m     @     0x56393e1ddbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49006)[0m     @     0x56393e268baf _PyEval_EvalCodeWithName
[2m[36m(pid=49006)[0m     @     0x56393e269643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49006)[0m     @     0x56393e1de689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49006)[0m     @     0x56393e268baf _PyEval_EvalCodeWithName
[2m[36m(pid=49006)[0m     @     0x56393e269643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49006)[0m     @     0x56393e1de689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49006)[0m     @     0x56393e268baf _PyEval_EvalCodeWithName
[2m[36m(pid=49006)[0m     @     0x56393e269643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49006)[0m     @     0x56393e1de689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49006)[0m     @     0x56393e268baf _PyEval_EvalCodeWithName
[2m[36m(pid=49006)[0m     @     0x56393e269643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49006)[0m     @     0x56393e1de689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48956)[0m     @     0x7ef57100479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48956)[0m     @     0x55c3778fbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48956)[0m     @     0x55c377856b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48956)[0m     @     0x55c3778e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=48956)[0m     @     0x55c3778e2a20 method_vectorcall
[2m[36m(pid=48956)[0m     @     0x55c377856bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48956)[0m     @     0x55c3778e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=48956)[0m     @     0x55c3778e2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48956)[0m     @     0x55c377857689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48956)[0m     @     0x55c3778e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=48956)[0m     @     0x55c3778e2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48956)[0m     @     0x55c377857689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48956)[0m     @     0x55c3778e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=48956)[0m     @     0x55c3778e2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48956)[0m     @     0x55c377857689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48956)[0m     @     0x55c3778e1baf _PyEval_EvalCodeWithName
[2m[36m(pid=48956)[0m     @     0x55c3778e2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48956)[0m     @     0x55c377857689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48975)[0m     @     0x7f1595e3a4f5 at::Tensor::copy_()
[2m[36m(pid=48975)[0m     @     0x7f159bee579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48975)[0m     @     0x558477c3cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48975)[0m     @     0x558477b97b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48975)[0m     @     0x558477c22baf _PyEval_EvalCodeWithName
[2m[36m(pid=48975)[0m     @     0x558477c23a20 method_vectorcall
[2m[36m(pid=48975)[0m     @     0x558477b97bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48975)[0m     @     0x558477c22baf _PyEval_EvalCodeWithName
[2m[36m(pid=48975)[0m     @     0x558477c23643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48975)[0m     @     0x558477b98689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48975)[0m     @     0x558477c22baf _PyEval_EvalCodeWithName
[2m[36m(pid=48975)[0m     @     0x558477c23643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48975)[0m     @     0x558477b98689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48975)[0m     @     0x558477c22baf _PyEval_EvalCodeWithName
[2m[36m(pid=48975)[0m     @     0x558477c23643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48975)[0m     @     0x558477b98689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48975)[0m     @     0x558477c22baf _PyEval_EvalCodeWithName
[2m[36m(pid=48975)[0m     @     0x558477c23643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48975)[0m     @     0x558477b98689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48897)[0m     @     0x7f0275138ad3 at::TensorIterator::for_each()
[2m[36m(pid=48897)[0m     @     0x7f0275138d91 at::TensorIterator::for_each()
[2m[36m(pid=48897)[0m     @     0x7f0275a1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48897)[0m     @     0x7f0275a3ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48908)[0m     @     0x7f8ca6957ad3 at::TensorIterator::for_each()
[2m[36m(pid=48908)[0m     @     0x7f8ca6957d91 at::TensorIterator::for_each()
[2m[36m(pid=48908)[0m     @     0x7f8ca723ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48908)[0m     @     0x7f8ca725dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48908)[0m     @     0x7f8ca66ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48968)[0m     @     0x7f765ca1cc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48968)[0m     @     0x7f765bebea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48968)[0m     @     0x7f765bebc388 at::native::copy_impl()
[2m[36m(pid=48968)[0m     @     0x7f765bebe5a4 at::native::copy_()
[2m[36m(pid=49015)[0m     @     0x7f951e14fad3 at::TensorIterator::for_each()
[2m[36m(pid=49015)[0m     @     0x7f951e14fd91 at::TensorIterator::for_each()
[2m[36m(pid=49015)[0m     @     0x7f951ea32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=49015)[0m     @     0x7f951ea55c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=49015)[0m     @     0x7f951def7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48984)[0m     @     0x7f3735c27d91 at::TensorIterator::for_each()
[2m[36m(pid=48984)[0m     @     0x7f373650ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48984)[0m     @     0x7f373652dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48984)[0m     @     0x7f37359cfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48984)[0m     @     0x7f37359cd388 at::native::copy_impl()
[2m[36m(pid=49011)[0m     @     0x5564a6d74baf _PyEval_EvalCodeWithName
[2m[36m(pid=49011)[0m     @     0x5564a6d75643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49011)[0m     @     0x5564a6cea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49011)[0m     @     0x5564a6d74baf _PyEval_EvalCodeWithName
[2m[36m(pid=49011)[0m     @     0x5564a6d75643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49011)[0m     @     0x5564a6cea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49011)[0m     @     0x5564a6d74baf _PyEval_EvalCodeWithName
[2m[36m(pid=49011)[0m     @     0x5564a6d75643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49011)[0m     @     0x5564a6cea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48967)[0m     @     0x7ed4b29444f5 at::Tensor::copy_()
[2m[36m(pid=48967)[0m     @     0x7ed4b4e178de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48967)[0m     @     0x7ed4b29444f5 at::Tensor::copy_()
[2m[36m(pid=48967)[0m     @     0x7ed4b89ef79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48967)[0m     @     0x55dd8b4a4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48967)[0m     @     0x55dd8b3ffb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48967)[0m     @     0x55dd8b48abaf _PyEval_EvalCodeWithName
[2m[36m(pid=48967)[0m     @     0x55dd8b48ba20 method_vectorcall
[2m[36m(pid=48967)[0m     @     0x55dd8b3ffbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48967)[0m     @     0x55dd8b48abaf _PyEval_EvalCodeWithName
[2m[36m(pid=48967)[0m     @     0x55dd8b48b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48967)[0m     @     0x55dd8b400689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48967)[0m     @     0x55dd8b48abaf _PyEval_EvalCodeWithName
[2m[36m(pid=48967)[0m     @     0x55dd8b48b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48967)[0m     @     0x55dd8b400689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48967)[0m     @     0x55dd8b48abaf _PyEval_EvalCodeWithName
[2m[36m(pid=48967)[0m     @     0x55dd8b48b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48967)[0m     @     0x55dd8b400689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48967)[0m     @     0x55dd8b48abaf _PyEval_EvalCodeWithName
[2m[36m(pid=48967)[0m     @     0x55dd8b48b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48967)[0m     @     0x55dd8b400689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49018)[0m     @     0x7fa33d37fd91 at::TensorIterator::for_each()
[2m[36m(pid=49018)[0m     @     0x7fa33dc62b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=49018)[0m     @     0x7fa33dc85c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=49018)[0m     @     0x7fa33d127a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=49018)[0m     @     0x7fa33d125388 at::native::copy_impl()
[2m[36m(pid=48963)[0m     @     0x55de7d844689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48963)[0m     @     0x55de7d8cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48963)[0m     @     0x55de7d8cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48963)[0m     @     0x55de7d844689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48963)[0m     @     0x55de7d8cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48963)[0m     @     0x55de7d8cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48963)[0m     @     0x55de7d844689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48992)[0m     @     0x7eee4c09a4f5 at::Tensor::copy_()
[2m[36m(pid=48992)[0m     @     0x7eee5214579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48992)[0m     @     0x563cf4528fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48992)[0m     @     0x563cf4483b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48992)[0m     @     0x563cf450ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48992)[0m     @     0x563cf450fa20 method_vectorcall
[2m[36m(pid=48992)[0m     @     0x563cf4483bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48992)[0m     @     0x563cf450ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48992)[0m     @     0x563cf450f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48992)[0m     @     0x563cf4484689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48992)[0m     @     0x563cf450ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48992)[0m     @     0x563cf450f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48992)[0m     @     0x563cf4484689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48992)[0m     @     0x563cf450ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48992)[0m     @     0x563cf450f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48992)[0m     @     0x563cf4484689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48992)[0m     @     0x563cf450ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48992)[0m     @     0x563cf450f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48992)[0m     @     0x563cf4484689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48958)[0m     @     0x7fbee5ca5ad3 at::TensorIterator::for_each()
[2m[36m(pid=48958)[0m     @     0x7fbee5ca5d91 at::TensorIterator::for_each()
[2m[36m(pid=48958)[0m     @     0x7fbee6588b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48958)[0m     @     0x7fbee65abc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48958)[0m     @     0x7fbee5a4da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48950)[0m     @     0x7fbc44894ad3 at::TensorIterator::for_each()
[2m[36m(pid=48950)[0m     @     0x7fbc44894d91 at::TensorIterator::for_each()
[2m[36m(pid=48950)[0m     @     0x7fbc45177b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48950)[0m     @     0x7fbc4519ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48950)[0m     @     0x7fbc4463ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48950)[0m     @     0x7fbc4463a388 at::native::copy_impl()
[2m[36m(pid=48969)[0m     @     0x7f6f4f97ed91 at::TensorIterator::for_each()
[2m[36m(pid=48969)[0m     @     0x7f6f50261b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48969)[0m     @     0x7f6f50284c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48969)[0m     @     0x7f6f4f726a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48969)[0m     @     0x7f6f4f724388 at::native::copy_impl()
[2m[36m(pid=48972)[0m     @     0x7fa61e3bdd91 at::TensorIterator::for_each()
[2m[36m(pid=48972)[0m     @     0x7fa61eca0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48972)[0m     @     0x7fa61ecc3c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48972)[0m     @     0x7fa61e165a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48972)[0m     @     0x7fa61e163388 at::native::copy_impl()
[2m[36m(pid=48972)[0m     @     0x7fa61e1655a4 at::native::copy_()
[2m[36m(pid=49008)[0m     @     0x7f4d44a6ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=49008)[0m     @     0x7f4d43f0ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=49008)[0m     @     0x7f4d43f0a388 at::native::copy_impl()
[2m[36m(pid=49008)[0m     @     0x7f4d43f0c5a4 at::native::copy_()
[2m[36m(pid=49008)[0m     @     0x7f4d445f74f5 at::Tensor::copy_()
[2m[36m(pid=49008)[0m     @     0x7f4d46aca8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48988)[0m     @     0x7fb695c1eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48988)[0m     @     0x7fb695c41c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48988)[0m     @     0x7fb6950e3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48988)[0m     @     0x7fb6950e1388 at::native::copy_impl()
[2m[36m(pid=48988)[0m     @     0x7fb6950e35a4 at::native::copy_()
[2m[36m(pid=48965)[0m     @     0x7fb90bc64d91 at::TensorIterator::for_each()
[2m[36m(pid=48965)[0m     @     0x7fb90c547b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48965)[0m     @     0x7fb90c56ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48965)[0m     @     0x7fb90ba0ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48965)[0m     @     0x7fb90ba0a388 at::native::copy_impl()
[2m[36m(pid=48965)[0m     @     0x7fb90ba0c5a4 at::native::copy_()
[2m[36m(pid=48882)[0m     @     0x7fc8ad138d91 at::TensorIterator::for_each()
[2m[36m(pid=48882)[0m     @     0x7fc8ada1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48882)[0m     @     0x7fc8ada3ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48882)[0m     @     0x7fc8acee0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48882)[0m     @     0x7fc8acede388 at::native::copy_impl()
[2m[36m(pid=48906)[0m     @     0x7eec252cdd91 at::TensorIterator::for_each()
[2m[36m(pid=48906)[0m     @     0x7eec25bb0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48906)[0m     @     0x7eec25bd3c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48906)[0m     @     0x7eec25075a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48906)[0m     @     0x7eec25073388 at::native::copy_impl()
[2m[36m(pid=48913)[0m     @     0x7f2c70f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48913)[0m     @     0x7f2c70f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=48913)[0m     @     0x7f2c70f27d91 at::TensorIterator::for_each()
[2m[36m(pid=48948)[0m     @     0x7ede7a92a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48948)[0m     @     0x7ede7a92aad3 at::TensorIterator::for_each()
[2m[36m(pid=48916)[0m     @     0x7f8e96d4dad3 at::TensorIterator::for_each()
[2m[36m(pid=48916)[0m     @     0x7f8e96d4dd91 at::TensorIterator::for_each()
[2m[36m(pid=48916)[0m     @     0x7f8e97630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48916)[0m     @     0x7f8e97653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48916)[0m     @     0x7f8e96af5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48916)[0m     @     0x7f8e96af3388 at::native::copy_impl()
[2m[36m(pid=48896)[0m     @     0x7f49633d6ad3 at::TensorIterator::for_each()
[2m[36m(pid=48896)[0m     @     0x7f49633d6d91 at::TensorIterator::for_each()
[2m[36m(pid=48896)[0m     @     0x7f4963cb9b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48896)[0m     @     0x7f4963cdcc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48896)[0m     @     0x7f496317ea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48920)[0m     @     0x7f7a049b88f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48920)[0m     @     0x7f7a049b8ad3 at::TensorIterator::for_each()
[2m[36m(pid=48920)[0m     @     0x7f7a049b8d91 at::TensorIterator::for_each()
[2m[36m(pid=48920)[0m     @     0x7f7a0529bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48920)[0m     @     0x7f7a052bec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48953)[0m     @     0x7fb2239bed91 at::TensorIterator::for_each()
[2m[36m(pid=48953)[0m     @     0x7fb2242a1b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48953)[0m     @     0x7fb2242c4c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48953)[0m     @     0x7fb223766a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48953)[0m     @     0x7fb223764388 at::native::copy_impl()
[2m[36m(pid=48953)[0m     @     0x7fb2237665a4 at::native::copy_()
[2m[36m(pid=48884)[0m     @     0x7f28a6dafad3 at::TensorIterator::for_each()
[2m[36m(pid=48884)[0m     @     0x7f28a6dafd91 at::TensorIterator::for_each()
[2m[36m(pid=48884)[0m     @     0x7f28a7692b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48884)[0m     @     0x7f28a76b5c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48884)[0m     @     0x7f28a6b57a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48960)[0m     @     0x7fab96852d91 at::TensorIterator::for_each()
[2m[36m(pid=48960)[0m     @     0x7fab97135b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48960)[0m     @     0x7fab97158c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48960)[0m     @     0x7fab965faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48942)[0m     @     0x7faffefcc8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48942)[0m     @     0x7faffefccad3 at::TensorIterator::for_each()
[2m[36m(pid=48901)[0m     @     0x7f31b4c11d91 at::TensorIterator::for_each()
[2m[36m(pid=48901)[0m     @     0x7f31b54f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48901)[0m     @     0x7f31b5517c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48966)[0m     @     0x7f66a5ee9d91 at::TensorIterator::for_each()
[2m[36m(pid=48966)[0m     @     0x7f66a67ccb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48966)[0m     @     0x7f66a67efc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48966)[0m     @     0x7f66a5c91a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48966)[0m     @     0x7f66a5c8f388 at::native::copy_impl()
[2m[36m(pid=48924)[0m     @     0x7f175aed7d91 at::TensorIterator::for_each()
[2m[36m(pid=48924)[0m     @     0x7f175b7bab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48924)[0m     @     0x7f175b7ddc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48924)[0m     @     0x7f175ac7fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48924)[0m     @     0x7f175ac7d388 at::native::copy_impl()
[2m[36m(pid=48914)[0m     @     0x7f6f72d4dd91 at::TensorIterator::for_each()
[2m[36m(pid=48914)[0m     @     0x7f6f73630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48914)[0m     @     0x7f6f73653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48914)[0m     @     0x7f6f72af5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48914)[0m     @     0x7f6f72af3388 at::native::copy_impl()
[2m[36m(pid=48887)[0m     @     0x7f6c45400c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48887)[0m     @     0x7f6c448a2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48887)[0m     @     0x7f6c448a0388 at::native::copy_impl()
[2m[36m(pid=48887)[0m     @     0x7f6c448a25a4 at::native::copy_()
[2m[36m(pid=48889)[0m     @     0x7ed581e38d91 at::TensorIterator::for_each()
[2m[36m(pid=48889)[0m     @     0x7ed58271bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48889)[0m     @     0x7ed58273ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48889)[0m     @     0x7ed581be0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48889)[0m     @     0x7ed581bde388 at::native::copy_impl()
[2m[36m(pid=48881)[0m     @     0x7ee1cd1fed91 at::TensorIterator::for_each()
[2m[36m(pid=48881)[0m     @     0x7ee1cdae1b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48881)[0m     @     0x7ee1cdb04c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48881)[0m     @     0x7ee1ccfa6a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48881)[0m     @     0x7ee1ccfa4388 at::native::copy_impl()
[2m[36m(pid=48947)[0m     @     0x7fc1df539d91 at::TensorIterator::for_each()
[2m[36m(pid=48947)[0m     @     0x7fc1dfe1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48947)[0m     @     0x7fc1dfe3fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48947)[0m     @     0x7fc1df2e1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48890)[0m     @     0x7f1e879d6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48890)[0m     @     0x7f1e879f9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48890)[0m     @     0x7f1e86e9ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48890)[0m     @     0x7f1e86e99388 at::native::copy_impl()
[2m[36m(pid=48890)[0m     @     0x7f1e86e9b5a4 at::native::copy_()
[2m[36m(pid=48902)[0m     @     0x7f7ba3dcdd91 at::TensorIterator::for_each()
[2m[36m(pid=48902)[0m     @     0x7f7ba46b0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48902)[0m     @     0x7f7ba46d3c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48902)[0m     @     0x7f7ba3b75a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48943)[0m     @     0x7f1f63d3cd91 at::TensorIterator::for_each()
[2m[36m(pid=48943)[0m     @     0x7f1f6461fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48943)[0m     @     0x7f1f64642c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48943)[0m     @     0x7f1f63ae4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48943)[0m     @     0x7f1f63ae2388 at::native::copy_impl()
[2m[36m(pid=48999)[0m     @     0x7f7c8cf278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48999)[0m     @     0x7f7c8cf27ad3 at::TensorIterator::for_each()
[2m[36m(pid=48909)[0m     @     0x7edab858ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48909)[0m     @     0x7edab8589388 at::native::copy_impl()
[2m[36m(pid=48909)[0m     @     0x7edab858b5a4 at::native::copy_()
[2m[36m(pid=48909)[0m     @     0x7edab8c764f5 at::Tensor::copy_()
[2m[36m(pid=48981)[0m     @     0x7edc37c4a5a4 at::native::copy_()
[2m[36m(pid=48981)[0m     @     0x7edc383354f5 at::Tensor::copy_()
[2m[36m(pid=48981)[0m     @     0x7edc3a8088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48981)[0m     @     0x7edc383354f5 at::Tensor::copy_()
[2m[36m(pid=48979)[0m     @     0x7f8a65f3aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48979)[0m     @     0x7f8a65f38388 at::native::copy_impl()
[2m[36m(pid=48979)[0m     @     0x7f8a65f3a5a4 at::native::copy_()
[2m[36m(pid=48979)[0m     @     0x7f8a666254f5 at::Tensor::copy_()
[2m[36m(pid=48979)[0m     @     0x7f8a68af88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48964)[0m     @     0x7f67a30f3d91 at::TensorIterator::for_each()
[2m[36m(pid=48964)[0m     @     0x7f67a39d6b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48964)[0m     @     0x7f67a39f9c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48964)[0m     @     0x7f67a2e9ba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48964)[0m     @     0x7f67a2e99388 at::native::copy_impl()
[2m[36m(pid=48964)[0m     @     0x7f67a2e9b5a4 at::native::copy_()
[2m[36m(pid=48899)[0m     @     0x7f624f7daa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48899)[0m     @     0x7f624f7d8388 at::native::copy_impl()
[2m[36m(pid=48899)[0m     @     0x7f624f7da5a4 at::native::copy_()
[2m[36m(pid=48899)[0m     @     0x7f624fec54f5 at::Tensor::copy_()
[2m[36m(pid=48886)[0m     @     0x7f2db3158c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48886)[0m     @     0x7f2db25faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48886)[0m     @     0x7f2db25f8388 at::native::copy_impl()
[2m[36m(pid=48886)[0m     @     0x7f2db25fa5a4 at::native::copy_()
[2m[36m(pid=48886)[0m     @     0x7f2db2ce54f5 at::Tensor::copy_()
[2m[36m(pid=48894)[0m     @     0x7fc822614d91 at::TensorIterator::for_each()
[2m[36m(pid=48894)[0m     @     0x7fc822ef7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48894)[0m     @     0x7fc822f1ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48894)[0m     @     0x7fc8223bca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48894)[0m     @     0x7fc8223ba388 at::native::copy_impl()
[2m[36m(pid=48894)[0m     @     0x7fc8223bc5a4 at::native::copy_()
[2m[36m(pid=48915)[0m     @     0x7f0461e38d91 at::TensorIterator::for_each()
[2m[36m(pid=48915)[0m     @     0x7f046271bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48915)[0m     @     0x7f046273ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48915)[0m     @     0x7f0461be0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48915)[0m     @     0x7f0461bde388 at::native::copy_impl()
[2m[36m(pid=48915)[0m     @     0x7f0461be05a4 at::native::copy_()
[2m[36m(pid=48945)[0m     @     0x7f889c7b0c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48945)[0m     @     0x7f889bc52a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48945)[0m     @     0x7f889bc50388 at::native::copy_impl()
[2m[36m(pid=48945)[0m     @     0x7f889bc525a4 at::native::copy_()
[2m[36m(pid=48945)[0m     @     0x7f889c33d4f5 at::Tensor::copy_()
[2m[36m(pid=48973)[0m     @     0x7f7cc15d0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48973)[0m     @     0x7f7cc15f3c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48973)[0m     @     0x7f7cc0a95a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48973)[0m     @     0x7f7cc0a93388 at::native::copy_impl()
[2m[36m(pid=48973)[0m     @     0x7f7cc0a955a4 at::native::copy_()
[2m[36m(pid=48973)[0m     @     0x7f7cc11804f5 at::Tensor::copy_()
[2m[36m(pid=48892)[0m     @     0x7eee07df5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48892)[0m     @     0x7eee07e18c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48892)[0m     @     0x7eee072baa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48892)[0m     @     0x7eee072b8388 at::native::copy_impl()
[2m[36m(pid=48892)[0m     @     0x7eee072ba5a4 at::native::copy_()
[2m[36m(pid=48962)[0m     @     0x7f530c61fb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48962)[0m     @     0x7f530c642c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48962)[0m     @     0x7f530bae4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48962)[0m     @     0x7f530bae2388 at::native::copy_impl()
[2m[36m(pid=48962)[0m     @     0x7f530bae45a4 at::native::copy_()
[2m[36m(pid=48993)[0m     @     0x7eea8374aad3 at::TensorIterator::for_each()
[2m[36m(pid=48993)[0m     @     0x7eea8374ad91 at::TensorIterator::for_each()
[2m[36m(pid=48993)[0m     @     0x7eea8402db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48993)[0m     @     0x7eea84050c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48954)[0m     @     0x7f03d9138d91 at::TensorIterator::for_each()
[2m[36m(pid=48954)[0m     @     0x7f03d9a1bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48954)[0m     @     0x7f03d9a3ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48954)[0m     @     0x7f03d8ee0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48954)[0m     @     0x7f03d8ede388 at::native::copy_impl()
[2m[36m(pid=48955)[0m     @     0x7f5373a678f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48955)[0m     @     0x7f5373a67ad3 at::TensorIterator::for_each()
[2m[36m(pid=48955)[0m     @     0x7f5373a67d91 at::TensorIterator::for_each()
[2m[36m(pid=48955)[0m     @     0x7f537434ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48955)[0m     @     0x7f537436dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48895)[0m     @     0x7ef6f84aed91 at::TensorIterator::for_each()
[2m[36m(pid=48895)[0m     @     0x7ef6f8d91b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48895)[0m     @     0x7ef6f8db4c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48895)[0m     @     0x7ef6f8256a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48895)[0m     @     0x7ef6f8254388 at::native::copy_impl()
[2m[36m(pid=48921)[0m     @     0x7f8559c41c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48921)[0m     @     0x7f85590e3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48921)[0m     @     0x7f85590e1388 at::native::copy_impl()
[2m[36m(pid=48921)[0m     @     0x7f85590e35a4 at::native::copy_()
[2m[36m(pid=48921)[0m     @     0x7f85597ce4f5 at::Tensor::copy_()
[2m[36m(pid=48885)[0m     @     0x7f7c4f630b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48885)[0m     @     0x7f7c4f653c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48885)[0m     @     0x7f7c4eaf5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48885)[0m     @     0x7f7c4eaf3388 at::native::copy_impl()
[2m[36m(pid=48885)[0m     @     0x7f7c4eaf55a4 at::native::copy_()
[2m[36m(pid=48957)[0m     @     0x7edaf7b06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48957)[0m     @     0x7edaf7b29c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48957)[0m     @     0x7edaf6fcba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48957)[0m     @     0x7edaf6fc9388 at::native::copy_impl()
[2m[36m(pid=48957)[0m     @     0x7edaf6fcb5a4 at::native::copy_()
[2m[36m(pid=48957)[0m     @     0x7edaf76b64f5 at::Tensor::copy_()
[2m[36m(pid=48891)[0m     @     0x7fa4b7596a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48891)[0m     @     0x7fa4b7594388 at::native::copy_impl()
[2m[36m(pid=48891)[0m     @     0x7fa4b75965a4 at::native::copy_()
[2m[36m(pid=48891)[0m     @     0x7fa4b7c814f5 at::Tensor::copy_()
[2m[36m(pid=48891)[0m     @     0x7fa4ba1548de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48898)[0m     @     0x7ee89614fd91 at::TensorIterator::for_each()
[2m[36m(pid=48898)[0m     @     0x7ee896a32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48898)[0m     @     0x7ee896a55c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48898)[0m     @     0x7ee895ef7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48898)[0m     @     0x7ee895ef5388 at::native::copy_impl()
[2m[36m(pid=48898)[0m     @     0x7ee895ef75a4 at::native::copy_()
[2m[36m(pid=48883)[0m     @     0x7ef3d72b2388 at::native::copy_impl()
[2m[36m(pid=48883)[0m     @     0x7ef3d72b45a4 at::native::copy_()
[2m[36m(pid=48883)[0m     @     0x7ef3d799f4f5 at::Tensor::copy_()
[2m[36m(pid=48883)[0m     @     0x7ef3d9e728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=49012)[0m     @     0x7f1254b35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=49012)[0m     @     0x7f1254b58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=49012)[0m     @     0x7f1253ffaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=49012)[0m     @     0x7f1253ff8388 at::native::copy_impl()
[2m[36m(pid=49012)[0m     @     0x7f1253ffa5a4 at::native::copy_()
[2m[36m(pid=48897)[0m     @     0x7f0274ee0a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48897)[0m     @     0x7f0274ede388 at::native::copy_impl()
[2m[36m(pid=48897)[0m     @     0x7f0274ee05a4 at::native::copy_()
[2m[36m(pid=48908)[0m     @     0x7f8ca66fd388 at::native::copy_impl()
[2m[36m(pid=48908)[0m     @     0x7f8ca66ff5a4 at::native::copy_()
[2m[36m(pid=48908)[0m     @     0x7f8ca6dea4f5 at::Tensor::copy_()
[2m[36m(pid=48968)[0m     @     0x7f765c5a94f5 at::Tensor::copy_()
[2m[36m(pid=48968)[0m     @     0x7f765ea7c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48968)[0m     @     0x7f765c5a94f5 at::Tensor::copy_()
[2m[36m(pid=48968)[0m     @     0x7f766265479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48968)[0m     @     0x55bc1fc10fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48968)[0m     @     0x55bc1fb6bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48968)[0m     @     0x55bc1fbf6baf _PyEval_EvalCodeWithName
[2m[36m(pid=48968)[0m     @     0x55bc1fbf7a20 method_vectorcall
[2m[36m(pid=48968)[0m     @     0x55bc1fb6bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48968)[0m     @     0x55bc1fbf6baf _PyEval_EvalCodeWithName
[2m[36m(pid=48968)[0m     @     0x55bc1fbf7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48968)[0m     @     0x55bc1fb6c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48968)[0m     @     0x55bc1fbf6baf _PyEval_EvalCodeWithName
[2m[36m(pid=48968)[0m     @     0x55bc1fbf7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48968)[0m     @     0x55bc1fb6c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48968)[0m     @     0x55bc1fbf6baf _PyEval_EvalCodeWithName
[2m[36m(pid=48968)[0m     @     0x55bc1fbf7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48968)[0m     @     0x55bc1fb6c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48968)[0m     @     0x55bc1fbf6baf _PyEval_EvalCodeWithName
[2m[36m(pid=48968)[0m     @     0x55bc1fbf7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48968)[0m     @     0x55bc1fb6c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49015)[0m     @     0x7f951def5388 at::native::copy_impl()
[2m[36m(pid=49015)[0m     @     0x7f951def75a4 at::native::copy_()
[2m[36m(pid=49015)[0m     @     0x7f951e5e24f5 at::Tensor::copy_()
[2m[36m(pid=48984)[0m     @     0x7f37359cf5a4 at::native::copy_()
[2m[36m(pid=48984)[0m     @     0x7f37360ba4f5 at::Tensor::copy_()
[2m[36m(pid=48984)[0m     @     0x7f373858d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=49018)[0m     @     0x7fa33d1275a4 at::native::copy_()
[2m[36m(pid=49018)[0m     @     0x7fa33d8124f5 at::Tensor::copy_()
[2m[36m(pid=49018)[0m     @     0x7fa33fce58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48958)[0m     @     0x7fbee5a4b388 at::native::copy_impl()
[2m[36m(pid=48958)[0m     @     0x7fbee5a4d5a4 at::native::copy_()
[2m[36m(pid=48958)[0m     @     0x7fbee61384f5 at::Tensor::copy_()
[2m[36m(pid=48950)[0m     @     0x7fbc4463c5a4 at::native::copy_()
[2m[36m(pid=48950)[0m     @     0x7fbc44d274f5 at::Tensor::copy_()
[2m[36m(pid=48969)[0m     @     0x7f6f4f7265a4 at::native::copy_()
[2m[36m(pid=48969)[0m     @     0x7f6f4fe114f5 at::Tensor::copy_()
[2m[36m(pid=48969)[0m     @     0x7f6f522e48de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48972)[0m     @     0x7fa61e8504f5 at::Tensor::copy_()
[2m[36m(pid=48972)[0m     @     0x7fa620d238de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=49008)[0m     @     0x7f4d445f74f5 at::Tensor::copy_()
[2m[36m(pid=49008)[0m     @     0x7f4d4a6a279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=49008)[0m     @     0x55acdfa54fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=49008)[0m     @     0x55acdf9afb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49008)[0m     @     0x55acdfa3abaf _PyEval_EvalCodeWithName
[2m[36m(pid=49008)[0m     @     0x55acdfa3ba20 method_vectorcall
[2m[36m(pid=49008)[0m     @     0x55acdf9afbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49008)[0m     @     0x55acdfa3abaf _PyEval_EvalCodeWithName
[2m[36m(pid=49008)[0m     @     0x55acdfa3b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49008)[0m     @     0x55acdf9b0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49008)[0m     @     0x55acdfa3abaf _PyEval_EvalCodeWithName
[2m[36m(pid=49008)[0m     @     0x55acdfa3b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49008)[0m     @     0x55acdf9b0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49008)[0m     @     0x55acdfa3abaf _PyEval_EvalCodeWithName
[2m[36m(pid=49008)[0m     @     0x55acdfa3b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49008)[0m     @     0x55acdf9b0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49008)[0m     @     0x55acdfa3abaf _PyEval_EvalCodeWithName
[2m[36m(pid=49008)[0m     @     0x55acdfa3b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49008)[0m     @     0x55acdf9b0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48988)[0m     @     0x7fb6957ce4f5 at::Tensor::copy_()
[2m[36m(pid=48988)[0m     @     0x7fb697ca18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48988)[0m     @     0x7fb6957ce4f5 at::Tensor::copy_()
[2m[36m(pid=48988)[0m     @     0x7fb69b87979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48988)[0m     @     0x555a14d1dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48988)[0m     @     0x555a14c78b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48988)[0m     @     0x555a14d03baf _PyEval_EvalCodeWithName
[2m[36m(pid=48988)[0m     @     0x555a14d04a20 method_vectorcall
[2m[36m(pid=48988)[0m     @     0x555a14c78bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48988)[0m     @     0x555a14d03baf _PyEval_EvalCodeWithName
[2m[36m(pid=48988)[0m     @     0x555a14d04643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48988)[0m     @     0x555a14c79689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48988)[0m     @     0x555a14d03baf _PyEval_EvalCodeWithName
[2m[36m(pid=48988)[0m     @     0x555a14d04643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48988)[0m     @     0x555a14c79689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48965)[0m     @     0x7fb90c0f74f5 at::Tensor::copy_()
[2m[36m(pid=48965)[0m     @     0x7fb90e5ca8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48882)[0m     @     0x7fc8acee05a4 at::native::copy_()
[2m[36m(pid=48882)[0m     @     0x7fc8ad5cb4f5 at::Tensor::copy_()
[2m[36m(pid=48882)[0m     @     0x7fc8afa9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48906)[0m     @     0x7eec250755a4 at::native::copy_()
[2m[36m(pid=48906)[0m     @     0x7eec257604f5 at::Tensor::copy_()
[2m[36m(pid=48906)[0m     @     0x7eec27c338de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48913)[0m     @     0x7f2c7180ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48913)[0m     @     0x7f2c7182dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48913)[0m     @     0x7f2c70ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48913)[0m     @     0x7f2c70ccd388 at::native::copy_impl()
[2m[36m(pid=48948)[0m     @     0x7ede7a92ad91 at::TensorIterator::for_each()
[2m[36m(pid=48948)[0m     @     0x7ede7b20db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48948)[0m     @     0x7ede7b230c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48948)[0m     @     0x7ede7a6d2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48948)[0m     @     0x7ede7a6d0388 at::native::copy_impl()
[2m[36m(pid=48916)[0m     @     0x7f8e96af55a4 at::native::copy_()
[2m[36m(pid=48916)[0m     @     0x7f8e971e04f5 at::Tensor::copy_()
[2m[36m(pid=48896)[0m     @     0x7f496317c388 at::native::copy_impl()
[2m[36m(pid=48896)[0m     @     0x7f496317e5a4 at::native::copy_()
[2m[36m(pid=48896)[0m     @     0x7f49638694f5 at::Tensor::copy_()
[2m[36m(pid=48920)[0m     @     0x7f7a04760a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48920)[0m     @     0x7f7a0475e388 at::native::copy_impl()
[2m[36m(pid=48920)[0m     @     0x7f7a047605a4 at::native::copy_()
[2m[36m(pid=48920)[0m     @     0x7f7a04e4b4f5 at::Tensor::copy_()
[2m[36m(pid=48953)[0m     @     0x7fb223e514f5 at::Tensor::copy_()
[2m[36m(pid=48953)[0m     @     0x7fb2263248de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48884)[0m     @     0x7f28a6b55388 at::native::copy_impl()
[2m[36m(pid=48884)[0m     @     0x7f28a6b575a4 at::native::copy_()
[2m[36m(pid=48960)[0m     @     0x7fab965f8388 at::native::copy_impl()
[2m[36m(pid=48960)[0m     @     0x7fab965fa5a4 at::native::copy_()
[2m[36m(pid=48960)[0m     @     0x7fab96ce54f5 at::Tensor::copy_()
[2m[36m(pid=48960)[0m     @     0x7fab991b88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48960)[0m     @     0x7fab96ce54f5 at::Tensor::copy_()
[2m[36m(pid=48900)[0m     @     0x7fa5054e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=48900)[0m     @     0x7fa504c0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=48900)[0m     @     0x7fa504c118f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48942)[0m     @     0x7faffefccd91 at::TensorIterator::for_each()
[2m[36m(pid=48942)[0m     @     0x7fafff8afb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48942)[0m     @     0x7fafff8d2c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48942)[0m     @     0x7faffed74a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48942)[0m     @     0x7faffed72388 at::native::copy_impl()
[2m[36m(pid=48942)[0m     @     0x7faffed745a4 at::native::copy_()
[2m[36m(pid=48952)[0m     @     0x7f7bc14408f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=48901)[0m     @     0x7f31b49b9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48901)[0m     @     0x7f31b49b7388 at::native::copy_impl()
[2m[36m(pid=48901)[0m     @     0x7f31b49b95a4 at::native::copy_()
[2m[36m(pid=48901)[0m     @     0x7f31b50a44f5 at::Tensor::copy_()
[2m[36m(pid=48901)[0m     @     0x7f31b75778de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48966)[0m     @     0x7f66a5c915a4 at::native::copy_()
[2m[36m(pid=48966)[0m     @     0x7f66a637c4f5 at::Tensor::copy_()
[2m[36m(pid=48966)[0m     @     0x7f66a884f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48966)[0m     @     0x7f66a637c4f5 at::Tensor::copy_()
[2m[36m(pid=48966)[0m     @     0x7f66ac42779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48966)[0m     @     0x55b3e33adfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48966)[0m     @     0x55b3e3308b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48966)[0m     @     0x55b3e3393baf _PyEval_EvalCodeWithName
[2m[36m(pid=48966)[0m     @     0x55b3e3394a20 method_vectorcall
[2m[36m(pid=48966)[0m     @     0x55b3e3308bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48966)[0m     @     0x55b3e3393baf _PyEval_EvalCodeWithName
[2m[36m(pid=48966)[0m     @     0x55b3e3394643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48966)[0m     @     0x55b3e3309689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48966)[0m     @     0x55b3e3393baf _PyEval_EvalCodeWithName
[2m[36m(pid=48924)[0m     @     0x7f175ac7f5a4 at::native::copy_()
[2m[36m(pid=48924)[0m     @     0x7f175b36a4f5 at::Tensor::copy_()
[2m[36m(pid=48924)[0m     @     0x7f175d83d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48924)[0m     @     0x7f175b36a4f5 at::Tensor::copy_()
[2m[36m(pid=48914)[0m     @     0x7f6f72af55a4 at::native::copy_()
[2m[36m(pid=48914)[0m     @     0x7f6f731e04f5 at::Tensor::copy_()
[2m[36m(pid=48914)[0m     @     0x7f6f756b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48914)[0m     @     0x7f6f731e04f5 at::Tensor::copy_()
[2m[36m(pid=48887)[0m     @     0x7f6c44f8d4f5 at::Tensor::copy_()
[2m[36m(pid=48887)[0m     @     0x7f6c474608de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48887)[0m     @     0x7f6c44f8d4f5 at::Tensor::copy_()
[2m[36m(pid=48887)[0m     @     0x7f6c4b03879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48887)[0m     @     0x55e2b4f26fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48887)[0m     @     0x55e2b4e81b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48887)[0m     @     0x55e2b4f0cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48887)[0m     @     0x55e2b4f0da20 method_vectorcall
[2m[36m(pid=48887)[0m     @     0x55e2b4e81bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48887)[0m     @     0x55e2b4f0cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48887)[0m     @     0x55e2b4f0d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48887)[0m     @     0x55e2b4e82689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48887)[0m     @     0x55e2b4f0cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48887)[0m     @     0x55e2b4f0d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48887)[0m     @     0x55e2b4e82689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48887)[0m     @     0x55e2b4f0cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48887)[0m     @     0x55e2b4f0d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48887)[0m     @     0x55e2b4e82689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48887)[0m     @     0x55e2b4f0cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48887)[0m     @     0x55e2b4f0d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48887)[0m     @     0x55e2b4e82689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48889)[0m     @     0x7ed581be05a4 at::native::copy_()
[2m[36m(pid=48889)[0m     @     0x7ed5822cb4f5 at::Tensor::copy_()
[2m[36m(pid=48889)[0m     @     0x7ed58479e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48889)[0m     @     0x7ed5822cb4f5 at::Tensor::copy_()
[2m[36m(pid=48889)[0m     @     0x7ed58837679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48889)[0m     @     0x557698a20fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48889)[0m     @     0x55769897bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48889)[0m     @     0x557698a06baf _PyEval_EvalCodeWithName
[2m[36m(pid=48889)[0m     @     0x557698a07a20 method_vectorcall
[2m[36m(pid=48889)[0m     @     0x55769897bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48889)[0m     @     0x557698a06baf _PyEval_EvalCodeWithName
[2m[36m(pid=48889)[0m     @     0x557698a07643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48889)[0m     @     0x55769897c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48889)[0m     @     0x557698a06baf _PyEval_EvalCodeWithName
[2m[36m(pid=48889)[0m     @     0x557698a07643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48889)[0m     @     0x55769897c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48889)[0m     @     0x557698a06baf _PyEval_EvalCodeWithName
[2m[36m(pid=48889)[0m     @     0x557698a07643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48889)[0m     @     0x55769897c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48889)[0m     @     0x557698a06baf _PyEval_EvalCodeWithName
[2m[36m(pid=48889)[0m     @     0x557698a07643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48889)[0m     @     0x55769897c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48881)[0m     @     0x7ee1ccfa65a4 at::native::copy_()
[2m[36m(pid=48881)[0m     @     0x7ee1cd6914f5 at::Tensor::copy_()
[2m[36m(pid=48881)[0m     @     0x7ee1cfb648de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48881)[0m     @     0x7ee1cd6914f5 at::Tensor::copy_()
[2m[36m(pid=48881)[0m     @     0x7ee1d373c79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48881)[0m     @     0x55da20e02fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48881)[0m     @     0x55da20d5db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48881)[0m     @     0x55da20de8baf _PyEval_EvalCodeWithName
[2m[36m(pid=48881)[0m     @     0x55da20de9a20 method_vectorcall
[2m[36m(pid=48881)[0m     @     0x55da20d5dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48881)[0m     @     0x55da20de8baf _PyEval_EvalCodeWithName
[2m[36m(pid=48947)[0m     @     0x7fc1df2df388 at::native::copy_impl()
[2m[36m(pid=48947)[0m     @     0x7fc1df2e15a4 at::native::copy_()
[2m[36m(pid=48947)[0m     @     0x7fc1df9cc4f5 at::Tensor::copy_()
[2m[36m(pid=48947)[0m     @     0x7fc1e1e9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48890)[0m     @     0x7f1e875864f5 at::Tensor::copy_()
[2m[36m(pid=48890)[0m     @     0x7f1e89a598de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48890)[0m     @     0x7f1e875864f5 at::Tensor::copy_()
[2m[36m(pid=48890)[0m     @     0x7f1e8d63179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48890)[0m     @     0x55ab9c21bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48890)[0m     @     0x55ab9c176b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48890)[0m     @     0x55ab9c201baf _PyEval_EvalCodeWithName
[2m[36m(pid=48890)[0m     @     0x55ab9c202a20 method_vectorcall
[2m[36m(pid=48890)[0m     @     0x55ab9c176bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48890)[0m     @     0x55ab9c201baf _PyEval_EvalCodeWithName
[2m[36m(pid=48890)[0m     @     0x55ab9c202643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48890)[0m     @     0x55ab9c177689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48890)[0m     @     0x55ab9c201baf _PyEval_EvalCodeWithName
[2m[36m(pid=48890)[0m     @     0x55ab9c202643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48890)[0m     @     0x55ab9c177689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48890)[0m     @     0x55ab9c201baf _PyEval_EvalCodeWithName
[2m[36m(pid=48890)[0m     @     0x55ab9c202643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48890)[0m     @     0x55ab9c177689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48890)[0m     @     0x55ab9c201baf _PyEval_EvalCodeWithName
[2m[36m(pid=48890)[0m     @     0x55ab9c202643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48890)[0m     @     0x55ab9c177689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48902)[0m     @     0x7f7ba3b73388 at::native::copy_impl()
[2m[36m(pid=48902)[0m     @     0x7f7ba3b755a4 at::native::copy_()
[2m[36m(pid=48902)[0m     @     0x7f7ba42604f5 at::Tensor::copy_()
[2m[36m(pid=48902)[0m     @     0x7f7ba67338de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48902)[0m     @     0x7f7ba42604f5 at::Tensor::copy_()
[2m[36m(pid=48943)[0m     @     0x7f1f63ae45a4 at::native::copy_()
[2m[36m(pid=48943)[0m     @     0x7f1f641cf4f5 at::Tensor::copy_()
[2m[36m(pid=48943)[0m     @     0x7f1f666a28de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48943)[0m     @     0x7f1f641cf4f5 at::Tensor::copy_()
[2m[36m(pid=48999)[0m     @     0x7f7c8cf27d91 at::TensorIterator::for_each()
[2m[36m(pid=48999)[0m     @     0x7f7c8d80ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48999)[0m     @     0x7f7c8d82dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48999)[0m     @     0x7f7c8cccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48999)[0m     @     0x7f7c8cccd388 at::native::copy_impl()
[2m[36m(pid=48909)[0m     @     0x7edabb1498de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48909)[0m     @     0x7edab8c764f5 at::Tensor::copy_()
[2m[36m(pid=48909)[0m     @     0x7edabed2179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48909)[0m     @     0x56287ee70fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48909)[0m     @     0x56287edcbb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48909)[0m     @     0x56287ee56baf _PyEval_EvalCodeWithName
[2m[36m(pid=48909)[0m     @     0x56287ee57a20 method_vectorcall
[2m[36m(pid=48909)[0m     @     0x56287edcbbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48909)[0m     @     0x56287ee56baf _PyEval_EvalCodeWithName
[2m[36m(pid=48909)[0m     @     0x56287ee57643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48909)[0m     @     0x56287edcc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48909)[0m     @     0x56287ee56baf _PyEval_EvalCodeWithName
[2m[36m(pid=48909)[0m     @     0x56287ee57643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48909)[0m     @     0x56287edcc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48909)[0m     @     0x56287ee56baf _PyEval_EvalCodeWithName
[2m[36m(pid=48909)[0m     @     0x56287ee57643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48909)[0m     @     0x56287edcc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48909)[0m     @     0x56287ee56baf _PyEval_EvalCodeWithName
[2m[36m(pid=48909)[0m     @     0x56287ee57643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48909)[0m     @     0x56287edcc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48981)[0m     @     0x7edc3e3e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48981)[0m     @     0x55d1eccadfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48981)[0m     @     0x55d1ecc08b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48981)[0m     @     0x55d1ecc93baf _PyEval_EvalCodeWithName
[2m[36m(pid=48981)[0m     @     0x55d1ecc94a20 method_vectorcall
[2m[36m(pid=48981)[0m     @     0x55d1ecc08bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48981)[0m     @     0x55d1ecc93baf _PyEval_EvalCodeWithName
[2m[36m(pid=48981)[0m     @     0x55d1ecc94643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48981)[0m     @     0x55d1ecc09689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48981)[0m     @     0x55d1ecc93baf _PyEval_EvalCodeWithName
[2m[36m(pid=48981)[0m     @     0x55d1ecc94643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48981)[0m     @     0x55d1ecc09689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48981)[0m     @     0x55d1ecc93baf _PyEval_EvalCodeWithName
[2m[36m(pid=48981)[0m     @     0x55d1ecc94643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48981)[0m     @     0x55d1ecc09689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48981)[0m     @     0x55d1ecc93baf _PyEval_EvalCodeWithName
[2m[36m(pid=48981)[0m     @     0x55d1ecc94643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48981)[0m     @     0x55d1ecc09689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48979)[0m     @     0x7f8a666254f5 at::Tensor::copy_()
[2m[36m(pid=48979)[0m     @     0x7f8a6c6d079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48979)[0m     @     0x557c6d37afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48979)[0m     @     0x557c6d2d5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48979)[0m     @     0x557c6d360baf _PyEval_EvalCodeWithName
[2m[36m(pid=48979)[0m     @     0x557c6d361a20 method_vectorcall
[2m[36m(pid=48979)[0m     @     0x557c6d2d5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48979)[0m     @     0x557c6d360baf _PyEval_EvalCodeWithName
[2m[36m(pid=48979)[0m     @     0x557c6d361643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48979)[0m     @     0x557c6d2d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48979)[0m     @     0x557c6d360baf _PyEval_EvalCodeWithName
[2m[36m(pid=48979)[0m     @     0x557c6d361643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48979)[0m     @     0x557c6d2d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48979)[0m     @     0x557c6d360baf _PyEval_EvalCodeWithName
[2m[36m(pid=48979)[0m     @     0x557c6d361643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48979)[0m     @     0x557c6d2d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48979)[0m     @     0x557c6d360baf _PyEval_EvalCodeWithName
[2m[36m(pid=48979)[0m     @     0x557c6d361643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48979)[0m     @     0x557c6d2d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48964)[0m     @     0x7f67a35864f5 at::Tensor::copy_()
[2m[36m(pid=48964)[0m     @     0x7f67a5a598de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48964)[0m     @     0x7f67a35864f5 at::Tensor::copy_()
[2m[36m(pid=48899)[0m     @     0x7f62523988de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48899)[0m     @     0x7f624fec54f5 at::Tensor::copy_()
[2m[36m(pid=48899)[0m     @     0x7f6255f7079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48899)[0m     @     0x561d6cc66fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48899)[0m     @     0x561d6cbc1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48899)[0m     @     0x561d6cc4cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48899)[0m     @     0x561d6cc4da20 method_vectorcall
[2m[36m(pid=48899)[0m     @     0x561d6cbc1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48899)[0m     @     0x561d6cc4cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48899)[0m     @     0x561d6cc4d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48899)[0m     @     0x561d6cbc2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48899)[0m     @     0x561d6cc4cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48899)[0m     @     0x561d6cc4d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48899)[0m     @     0x561d6cbc2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48899)[0m     @     0x561d6cc4cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48899)[0m     @     0x561d6cc4d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48899)[0m     @     0x561d6cbc2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48899)[0m     @     0x561d6cc4cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48899)[0m     @     0x561d6cc4d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48899)[0m     @     0x561d6cbc2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48886)[0m     @     0x7f2db51b88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48886)[0m     @     0x7f2db2ce54f5 at::Tensor::copy_()
[2m[36m(pid=48886)[0m     @     0x7f2db8d9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48886)[0m     @     0x55847caf3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48886)[0m     @     0x55847ca4eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48886)[0m     @     0x55847cad9baf _PyEval_EvalCodeWithName
[2m[36m(pid=48886)[0m     @     0x55847cadaa20 method_vectorcall
[2m[36m(pid=48886)[0m     @     0x55847ca4ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48886)[0m     @     0x55847cad9baf _PyEval_EvalCodeWithName
[2m[36m(pid=48886)[0m     @     0x55847cada643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48886)[0m     @     0x55847ca4f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48886)[0m     @     0x55847cad9baf _PyEval_EvalCodeWithName
[2m[36m(pid=48886)[0m     @     0x55847cada643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48886)[0m     @     0x55847ca4f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48886)[0m     @     0x55847cad9baf _PyEval_EvalCodeWithName
[2m[36m(pid=48886)[0m     @     0x55847cada643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48886)[0m     @     0x55847ca4f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48886)[0m     @     0x55847cad9baf _PyEval_EvalCodeWithName
[2m[36m(pid=48886)[0m     @     0x55847cada643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48886)[0m     @     0x55847ca4f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48894)[0m     @     0x7fc822aa74f5 at::Tensor::copy_()
[2m[36m(pid=48894)[0m     @     0x7fc824f7a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48915)[0m     @     0x7f04622cb4f5 at::Tensor::copy_()
[2m[36m(pid=48915)[0m     @     0x7f046479e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48915)[0m     @     0x7f04622cb4f5 at::Tensor::copy_()
[2m[36m(pid=48915)[0m     @     0x7f046837679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48915)[0m     @     0x55a87394ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48915)[0m     @     0x55a8738aab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48915)[0m     @     0x55a873935baf _PyEval_EvalCodeWithName
[2m[36m(pid=48915)[0m     @     0x55a873936a20 method_vectorcall
[2m[36m(pid=48915)[0m     @     0x55a8738aabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48915)[0m     @     0x55a873935baf _PyEval_EvalCodeWithName
[2m[36m(pid=48915)[0m     @     0x55a873936643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48915)[0m     @     0x55a8738ab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48915)[0m     @     0x55a873935baf _PyEval_EvalCodeWithName
[2m[36m(pid=48915)[0m     @     0x55a873936643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48945)[0m     @     0x7f889e8108de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48945)[0m     @     0x7f889c33d4f5 at::Tensor::copy_()
[2m[36m(pid=48973)[0m     @     0x7f7cc36538de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48973)[0m     @     0x7f7cc11804f5 at::Tensor::copy_()
[2m[36m(pid=48973)[0m     @     0x7f7cc722b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48973)[0m     @     0x55df9e9a4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48973)[0m     @     0x55df9e8ffb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48973)[0m     @     0x55df9e98abaf _PyEval_EvalCodeWithName
[2m[36m(pid=48973)[0m     @     0x55df9e98ba20 method_vectorcall
[2m[36m(pid=48973)[0m     @     0x55df9e8ffbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48973)[0m     @     0x55df9e98abaf _PyEval_EvalCodeWithName
[2m[36m(pid=48973)[0m     @     0x55df9e98b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48973)[0m     @     0x55df9e900689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48973)[0m     @     0x55df9e98abaf _PyEval_EvalCodeWithName
[2m[36m(pid=48973)[0m     @     0x55df9e98b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48973)[0m     @     0x55df9e900689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48973)[0m     @     0x55df9e98abaf _PyEval_EvalCodeWithName
[2m[36m(pid=48973)[0m     @     0x55df9e98b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48973)[0m     @     0x55df9e900689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48973)[0m     @     0x55df9e98abaf _PyEval_EvalCodeWithName
[2m[36m(pid=48973)[0m     @     0x55df9e98b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48973)[0m     @     0x55df9e900689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48892)[0m     @     0x7eee079a54f5 at::Tensor::copy_()
[2m[36m(pid=48892)[0m     @     0x7eee09e788de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48892)[0m     @     0x7eee079a54f5 at::Tensor::copy_()
[2m[36m(pid=48892)[0m     @     0x7eee0da5079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48892)[0m     @     0x5580f4760fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48892)[0m     @     0x5580f46bbb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48892)[0m     @     0x5580f4746baf _PyEval_EvalCodeWithName
[2m[36m(pid=48892)[0m     @     0x5580f4747a20 method_vectorcall
[2m[36m(pid=48892)[0m     @     0x5580f46bbbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48892)[0m     @     0x5580f4746baf _PyEval_EvalCodeWithName
[2m[36m(pid=48892)[0m     @     0x5580f4747643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48892)[0m     @     0x5580f46bc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48892)[0m     @     0x5580f4746baf _PyEval_EvalCodeWithName
[2m[36m(pid=48892)[0m     @     0x5580f4747643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48892)[0m     @     0x5580f46bc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48962)[0m     @     0x7f530c1cf4f5 at::Tensor::copy_()
[2m[36m(pid=48962)[0m     @     0x7f530e6a28de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48962)[0m     @     0x7f530c1cf4f5 at::Tensor::copy_()
[2m[36m(pid=48962)[0m     @     0x7f531227a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48962)[0m     @     0x5619bd658fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48962)[0m     @     0x5619bd5b3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48962)[0m     @     0x5619bd63ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48962)[0m     @     0x5619bd63fa20 method_vectorcall
[2m[36m(pid=48962)[0m     @     0x5619bd5b3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48962)[0m     @     0x5619bd63ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48962)[0m     @     0x5619bd63f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48962)[0m     @     0x5619bd5b4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48962)[0m     @     0x5619bd63ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48962)[0m     @     0x5619bd63f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48962)[0m     @     0x5619bd5b4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48962)[0m     @     0x5619bd63ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48962)[0m     @     0x5619bd63f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48962)[0m     @     0x5619bd5b4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48962)[0m     @     0x5619bd63ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48962)[0m     @     0x5619bd63f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48962)[0m     @     0x5619bd5b4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48993)[0m     @     0x7eea834f2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48993)[0m     @     0x7eea834f0388 at::native::copy_impl()
[2m[36m(pid=48993)[0m     @     0x7eea834f25a4 at::native::copy_()
[2m[36m(pid=48993)[0m     @     0x7eea83bdd4f5 at::Tensor::copy_()
[2m[36m(pid=48954)[0m     @     0x7f03d8ee05a4 at::native::copy_()
[2m[36m(pid=48954)[0m     @     0x7f03d95cb4f5 at::Tensor::copy_()
[2m[36m(pid=48954)[0m     @     0x7f03dba9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48955)[0m     @     0x7f537380fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48955)[0m     @     0x7f537380d388 at::native::copy_impl()
[2m[36m(pid=48955)[0m     @     0x7f537380f5a4 at::native::copy_()
[2m[36m(pid=48895)[0m     @     0x7ef6f82565a4 at::native::copy_()
[2m[36m(pid=48895)[0m     @     0x7ef6f89414f5 at::Tensor::copy_()
[2m[36m(pid=48895)[0m     @     0x7ef6fae148de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48921)[0m     @     0x7f855bca18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48921)[0m     @     0x7f85597ce4f5 at::Tensor::copy_()
[2m[36m(pid=48921)[0m     @     0x7f855f87979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48921)[0m     @     0x56038ff58fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48921)[0m     @     0x56038feb3b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48921)[0m     @     0x56038ff3ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48921)[0m     @     0x56038ff3fa20 method_vectorcall
[2m[36m(pid=48921)[0m     @     0x56038feb3bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48921)[0m     @     0x56038ff3ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48921)[0m     @     0x56038ff3f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48921)[0m     @     0x56038feb4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48921)[0m     @     0x56038ff3ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48921)[0m     @     0x56038ff3f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48921)[0m     @     0x56038feb4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48921)[0m     @     0x56038ff3ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48921)[0m     @     0x56038ff3f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48921)[0m     @     0x56038feb4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48921)[0m     @     0x56038ff3ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48921)[0m     @     0x56038ff3f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48921)[0m     @     0x56038feb4689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48885)[0m     @     0x7f7c4f1e04f5 at::Tensor::copy_()
[2m[36m(pid=48885)[0m     @     0x7f7c516b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48885)[0m     @     0x7f7c4f1e04f5 at::Tensor::copy_()
[2m[36m(pid=48885)[0m     @     0x7f7c5528b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48885)[0m     @     0x55eb35f4efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48885)[0m     @     0x55eb35ea9b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48885)[0m     @     0x55eb35f34baf _PyEval_EvalCodeWithName
[2m[36m(pid=48885)[0m     @     0x55eb35f35a20 method_vectorcall
[2m[36m(pid=48885)[0m     @     0x55eb35ea9bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48885)[0m     @     0x55eb35f34baf _PyEval_EvalCodeWithName
[2m[36m(pid=48885)[0m     @     0x55eb35f35643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48885)[0m     @     0x55eb35eaa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48885)[0m     @     0x55eb35f34baf _PyEval_EvalCodeWithName
[2m[36m(pid=48885)[0m     @     0x55eb35f35643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48885)[0m     @     0x55eb35eaa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48885)[0m     @     0x55eb35f34baf _PyEval_EvalCodeWithName
[2m[36m(pid=48885)[0m     @     0x55eb35f35643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48885)[0m     @     0x55eb35eaa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48885)[0m     @     0x55eb35f34baf _PyEval_EvalCodeWithName
[2m[36m(pid=48885)[0m     @     0x55eb35f35643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48885)[0m     @     0x55eb35eaa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48957)[0m     @     0x7edaf9b898de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48957)[0m     @     0x7edaf76b64f5 at::Tensor::copy_()
[2m[36m(pid=48957)[0m     @     0x7edafd76179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48957)[0m     @     0x5594bb4b3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48957)[0m     @     0x5594bb40eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48957)[0m     @     0x5594bb499baf _PyEval_EvalCodeWithName
[2m[36m(pid=48957)[0m     @     0x5594bb49aa20 method_vectorcall
[2m[36m(pid=48957)[0m     @     0x5594bb40ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48957)[0m     @     0x5594bb499baf _PyEval_EvalCodeWithName
[2m[36m(pid=48957)[0m     @     0x5594bb49a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48957)[0m     @     0x5594bb40f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48957)[0m     @     0x5594bb499baf _PyEval_EvalCodeWithName
[2m[36m(pid=48957)[0m     @     0x5594bb49a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48957)[0m     @     0x5594bb40f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48957)[0m     @     0x5594bb499baf _PyEval_EvalCodeWithName
[2m[36m(pid=48957)[0m     @     0x5594bb49a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48957)[0m     @     0x5594bb40f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48957)[0m     @     0x5594bb499baf _PyEval_EvalCodeWithName
[2m[36m(pid=48957)[0m     @     0x5594bb49a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48957)[0m     @     0x5594bb40f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48891)[0m     @     0x7fa4b7c814f5 at::Tensor::copy_()
[2m[36m(pid=48891)[0m     @     0x7fa4bdd2c79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48891)[0m     @     0x556fa03d9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48891)[0m     @     0x556fa0334b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48891)[0m     @     0x556fa03bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48891)[0m     @     0x556fa03c0a20 method_vectorcall
[2m[36m(pid=48891)[0m     @     0x556fa0334bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48891)[0m     @     0x556fa03bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48891)[0m     @     0x556fa03c0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48891)[0m     @     0x556fa0335689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48891)[0m     @     0x556fa03bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48891)[0m     @     0x556fa03c0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48891)[0m     @     0x556fa0335689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48891)[0m     @     0x556fa03bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48891)[0m     @     0x556fa03c0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48891)[0m     @     0x556fa0335689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48891)[0m     @     0x556fa03bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48891)[0m     @     0x556fa03c0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48891)[0m     @     0x556fa0335689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48898)[0m     @     0x7ee8965e24f5 at::Tensor::copy_()
[2m[36m(pid=48898)[0m     @     0x7ee898ab58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48898)[0m     @     0x7ee8965e24f5 at::Tensor::copy_()
[2m[36m(pid=48898)[0m     @     0x7ee89c68d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48898)[0m     @     0x56542b0b2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48898)[0m     @     0x56542b00db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48898)[0m     @     0x56542b098baf _PyEval_EvalCodeWithName
[2m[36m(pid=48898)[0m     @     0x56542b099a20 method_vectorcall
[2m[36m(pid=48898)[0m     @     0x56542b00dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48898)[0m     @     0x56542b098baf _PyEval_EvalCodeWithName
[2m[36m(pid=48898)[0m     @     0x56542b099643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48898)[0m     @     0x56542b00e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48898)[0m     @     0x56542b098baf _PyEval_EvalCodeWithName
[2m[36m(pid=48898)[0m     @     0x56542b099643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48898)[0m     @     0x56542b00e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48898)[0m     @     0x56542b098baf _PyEval_EvalCodeWithName
[2m[36m(pid=48898)[0m     @     0x56542b099643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48898)[0m     @     0x56542b00e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48883)[0m     @     0x7ef3d799f4f5 at::Tensor::copy_()
[2m[36m(pid=48883)[0m     @     0x7ef3dda4a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48883)[0m     @     0x55f18e99bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48883)[0m     @     0x55f18e8f6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48883)[0m     @     0x55f18e981baf _PyEval_EvalCodeWithName
[2m[36m(pid=48883)[0m     @     0x55f18e982a20 method_vectorcall
[2m[36m(pid=48883)[0m     @     0x55f18e8f6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48883)[0m     @     0x55f18e981baf _PyEval_EvalCodeWithName
[2m[36m(pid=48883)[0m     @     0x55f18e982643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48883)[0m     @     0x55f18e8f7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48883)[0m     @     0x55f18e981baf _PyEval_EvalCodeWithName
[2m[36m(pid=48883)[0m     @     0x55f18e982643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48883)[0m     @     0x55f18e8f7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48883)[0m     @     0x55f18e981baf _PyEval_EvalCodeWithName
[2m[36m(pid=48883)[0m     @     0x55f18e982643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48883)[0m     @     0x55f18e8f7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48883)[0m     @     0x55f18e981baf _PyEval_EvalCodeWithName
[2m[36m(pid=48883)[0m     @     0x55f18e982643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48883)[0m     @     0x55f18e8f7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49012)[0m     @     0x7f12546e54f5 at::Tensor::copy_()
[2m[36m(pid=49012)[0m     @     0x7f1256bb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=49012)[0m     @     0x7f12546e54f5 at::Tensor::copy_()
[2m[36m(pid=49012)[0m     @     0x7f125a79079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=49012)[0m     @     0x55e9758f9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=49012)[0m     @     0x55e975854b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49012)[0m     @     0x55e9758dfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=49012)[0m     @     0x55e9758e0a20 method_vectorcall
[2m[36m(pid=49012)[0m     @     0x55e975854bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49012)[0m     @     0x55e9758dfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=49012)[0m     @     0x55e9758e0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49012)[0m     @     0x55e975855689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49012)[0m     @     0x55e9758dfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=49012)[0m     @     0x55e9758e0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49012)[0m     @     0x55e975855689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49012)[0m     @     0x55e9758dfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=49012)[0m     @     0x55e9758e0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49012)[0m     @     0x55e975855689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49012)[0m     @     0x55e9758dfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=49012)[0m     @     0x55e9758e0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49012)[0m     @     0x55e975855689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48897)[0m     @     0x7f02755cb4f5 at::Tensor::copy_()
[2m[36m(pid=48897)[0m     @     0x7f0277a9e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48897)[0m     @     0x7f02755cb4f5 at::Tensor::copy_()
[2m[36m(pid=48897)[0m     @     0x7f027b67679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48897)[0m     @     0x5559bf738fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48897)[0m     @     0x5559bf693b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48897)[0m     @     0x5559bf71ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48897)[0m     @     0x5559bf71fa20 method_vectorcall
[2m[36m(pid=48897)[0m     @     0x5559bf693bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48897)[0m     @     0x5559bf71ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48897)[0m     @     0x5559bf71f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48897)[0m     @     0x5559bf694689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48897)[0m     @     0x5559bf71ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48897)[0m     @     0x5559bf71f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48897)[0m     @     0x5559bf694689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48897)[0m     @     0x5559bf71ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48897)[0m     @     0x5559bf71f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48897)[0m     @     0x5559bf694689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48897)[0m     @     0x5559bf71ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48897)[0m     @     0x5559bf71f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48897)[0m     @     0x5559bf694689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48908)[0m     @     0x7f8ca92bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48908)[0m     @     0x7f8ca6dea4f5 at::Tensor::copy_()
[2m[36m(pid=48908)[0m     @     0x7f8cace9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48908)[0m     @     0x5626a922dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48908)[0m     @     0x5626a9188b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48908)[0m     @     0x5626a9213baf _PyEval_EvalCodeWithName
[2m[36m(pid=48908)[0m     @     0x5626a9214a20 method_vectorcall
[2m[36m(pid=48908)[0m     @     0x5626a9188bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48908)[0m     @     0x5626a9213baf _PyEval_EvalCodeWithName
[2m[36m(pid=48908)[0m     @     0x5626a9214643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48908)[0m     @     0x5626a9189689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48908)[0m     @     0x5626a9213baf _PyEval_EvalCodeWithName
[2m[36m(pid=48908)[0m     @     0x5626a9214643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48908)[0m     @     0x5626a9189689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48908)[0m     @     0x5626a9213baf _PyEval_EvalCodeWithName
[2m[36m(pid=48908)[0m     @     0x5626a9214643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48908)[0m     @     0x5626a9189689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48908)[0m     @     0x5626a9213baf _PyEval_EvalCodeWithName
[2m[36m(pid=48908)[0m     @     0x5626a9214643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48908)[0m     @     0x5626a9189689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49015)[0m     @     0x7f9520ab58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=49015)[0m     @     0x7f951e5e24f5 at::Tensor::copy_()
[2m[36m(pid=49015)[0m     @     0x7f952468d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=49015)[0m     @     0x55f27955dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=49015)[0m     @     0x55f2794b8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49015)[0m     @     0x55f279543baf _PyEval_EvalCodeWithName
[2m[36m(pid=49015)[0m     @     0x55f279544a20 method_vectorcall
[2m[36m(pid=49015)[0m     @     0x55f2794b8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49015)[0m     @     0x55f279543baf _PyEval_EvalCodeWithName
[2m[36m(pid=49015)[0m     @     0x55f279544643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49015)[0m     @     0x55f2794b9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49015)[0m     @     0x55f279543baf _PyEval_EvalCodeWithName
[2m[36m(pid=49015)[0m     @     0x55f279544643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49015)[0m     @     0x55f2794b9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49015)[0m     @     0x55f279543baf _PyEval_EvalCodeWithName
[2m[36m(pid=49015)[0m     @     0x55f279544643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49015)[0m     @     0x55f2794b9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49015)[0m     @     0x55f279543baf _PyEval_EvalCodeWithName
[2m[36m(pid=49015)[0m     @     0x55f279544643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49015)[0m     @     0x55f2794b9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48984)[0m     @     0x7f37360ba4f5 at::Tensor::copy_()
[2m[36m(pid=48984)[0m     @     0x7f373c16579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48984)[0m     @     0x556812abdfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48984)[0m     @     0x556812a18b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48984)[0m     @     0x556812aa3baf _PyEval_EvalCodeWithName
[2m[36m(pid=48984)[0m     @     0x556812aa4a20 method_vectorcall
[2m[36m(pid=48984)[0m     @     0x556812a18bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48984)[0m     @     0x556812aa3baf _PyEval_EvalCodeWithName
[2m[36m(pid=48984)[0m     @     0x556812aa4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48984)[0m     @     0x556812a19689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48984)[0m     @     0x556812aa3baf _PyEval_EvalCodeWithName
[2m[36m(pid=48984)[0m     @     0x556812aa4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48984)[0m     @     0x556812a19689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48984)[0m     @     0x556812aa3baf _PyEval_EvalCodeWithName
[2m[36m(pid=48984)[0m     @     0x556812aa4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48984)[0m     @     0x556812a19689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48984)[0m     @     0x556812aa3baf _PyEval_EvalCodeWithName
[2m[36m(pid=48984)[0m     @     0x556812aa4643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48984)[0m     @     0x556812a19689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49018)[0m     @     0x7fa33d8124f5 at::Tensor::copy_()
[2m[36m(pid=49018)[0m     @     0x7fa3438bd79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=49018)[0m     @     0x5562b167afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=49018)[0m     @     0x5562b15d5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49018)[0m     @     0x5562b1660baf _PyEval_EvalCodeWithName
[2m[36m(pid=49018)[0m     @     0x5562b1661a20 method_vectorcall
[2m[36m(pid=49018)[0m     @     0x5562b15d5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49018)[0m     @     0x5562b1660baf _PyEval_EvalCodeWithName
[2m[36m(pid=49018)[0m     @     0x5562b1661643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49018)[0m     @     0x5562b15d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49018)[0m     @     0x5562b1660baf _PyEval_EvalCodeWithName
[2m[36m(pid=49018)[0m     @     0x5562b1661643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49018)[0m     @     0x5562b15d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49018)[0m     @     0x5562b1660baf _PyEval_EvalCodeWithName
[2m[36m(pid=49018)[0m     @     0x5562b1661643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49018)[0m     @     0x5562b15d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49018)[0m     @     0x5562b1660baf _PyEval_EvalCodeWithName
[2m[36m(pid=49018)[0m     @     0x5562b1661643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=49018)[0m     @     0x5562b15d6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48958)[0m     @     0x7fbee860b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48958)[0m     @     0x7fbee61384f5 at::Tensor::copy_()
[2m[36m(pid=48958)[0m     @     0x7fbeec1e379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48958)[0m     @     0x55a5b1bc4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48958)[0m     @     0x55a5b1b1fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48958)[0m     @     0x55a5b1baabaf _PyEval_EvalCodeWithName
[2m[36m(pid=48958)[0m     @     0x55a5b1baba20 method_vectorcall
[2m[36m(pid=48958)[0m     @     0x55a5b1b1fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48958)[0m     @     0x55a5b1baabaf _PyEval_EvalCodeWithName
[2m[36m(pid=48958)[0m     @     0x55a5b1bab643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48958)[0m     @     0x55a5b1b20689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48958)[0m     @     0x55a5b1baabaf _PyEval_EvalCodeWithName
[2m[36m(pid=48958)[0m     @     0x55a5b1bab643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48958)[0m     @     0x55a5b1b20689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48958)[0m     @     0x55a5b1baabaf _PyEval_EvalCodeWithName
[2m[36m(pid=48958)[0m     @     0x55a5b1bab643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48958)[0m     @     0x55a5b1b20689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48958)[0m     @     0x55a5b1baabaf _PyEval_EvalCodeWithName
[2m[36m(pid=48958)[0m     @     0x55a5b1bab643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48958)[0m     @     0x55a5b1b20689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48950)[0m     @     0x7fbc471fa8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48950)[0m     @     0x7fbc44d274f5 at::Tensor::copy_()
[2m[36m(pid=48950)[0m     @     0x7fbc4add279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48950)[0m     @     0x558a0d9a3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48950)[0m     @     0x558a0d8feb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48950)[0m     @     0x558a0d989baf _PyEval_EvalCodeWithName
[2m[36m(pid=48950)[0m     @     0x558a0d98aa20 method_vectorcall
[2m[36m(pid=48950)[0m     @     0x558a0d8febfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48950)[0m     @     0x558a0d989baf _PyEval_EvalCodeWithName
[2m[36m(pid=48950)[0m     @     0x558a0d98a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48950)[0m     @     0x558a0d8ff689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48950)[0m     @     0x558a0d989baf _PyEval_EvalCodeWithName
[2m[36m(pid=48950)[0m     @     0x558a0d98a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48950)[0m     @     0x558a0d8ff689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48950)[0m     @     0x558a0d989baf _PyEval_EvalCodeWithName
[2m[36m(pid=48950)[0m     @     0x558a0d98a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48950)[0m     @     0x558a0d8ff689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48950)[0m     @     0x558a0d989baf _PyEval_EvalCodeWithName
[2m[36m(pid=48950)[0m     @     0x558a0d98a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48950)[0m     @     0x558a0d8ff689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48969)[0m     @     0x7f6f4fe114f5 at::Tensor::copy_()
[2m[36m(pid=48969)[0m     @     0x7f6f55ebc79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48969)[0m     @     0x5573e1a06fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48969)[0m     @     0x5573e1961b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48969)[0m     @     0x5573e19ecbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48969)[0m     @     0x5573e19eda20 method_vectorcall
[2m[36m(pid=48969)[0m     @     0x5573e1961bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48969)[0m     @     0x5573e19ecbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48969)[0m     @     0x5573e19ed643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48969)[0m     @     0x5573e1962689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48969)[0m     @     0x5573e19ecbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48969)[0m     @     0x5573e19ed643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48969)[0m     @     0x5573e1962689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48969)[0m     @     0x5573e19ecbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48969)[0m     @     0x5573e19ed643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48969)[0m     @     0x5573e1962689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48969)[0m     @     0x5573e19ecbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48969)[0m     @     0x5573e19ed643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48969)[0m     @     0x5573e1962689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48972)[0m     @     0x7fa61e8504f5 at::Tensor::copy_()
[2m[36m(pid=48972)[0m     @     0x7fa6248fb79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48972)[0m     @     0x560d34008fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48972)[0m     @     0x560d33f63b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48972)[0m     @     0x560d33feebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48972)[0m     @     0x560d33fefa20 method_vectorcall
[2m[36m(pid=48972)[0m     @     0x560d33f63bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48972)[0m     @     0x560d33feebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48972)[0m     @     0x560d33fef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48972)[0m     @     0x560d33f64689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48972)[0m     @     0x560d33feebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48972)[0m     @     0x560d33fef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48972)[0m     @     0x560d33f64689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48972)[0m     @     0x560d33feebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48972)[0m     @     0x560d33fef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48972)[0m     @     0x560d33f64689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48972)[0m     @     0x560d33feebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48972)[0m     @     0x560d33fef643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48972)[0m     @     0x560d33f64689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48988)[0m     @     0x555a14d03baf _PyEval_EvalCodeWithName
[2m[36m(pid=48988)[0m     @     0x555a14d04643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48988)[0m     @     0x555a14c79689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48988)[0m     @     0x555a14d03baf _PyEval_EvalCodeWithName
[2m[36m(pid=48988)[0m     @     0x555a14d04643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48988)[0m     @     0x555a14c79689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48965)[0m     @     0x7fb90c0f74f5 at::Tensor::copy_()
[2m[36m(pid=48965)[0m     @     0x7fb9121a279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48965)[0m     @     0x5621e8f74fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48965)[0m     @     0x5621e8ecfb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48965)[0m     @     0x5621e8f5abaf _PyEval_EvalCodeWithName
[2m[36m(pid=48965)[0m     @     0x5621e8f5ba20 method_vectorcall
[2m[36m(pid=48965)[0m     @     0x5621e8ecfbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48965)[0m     @     0x5621e8f5abaf _PyEval_EvalCodeWithName
[2m[36m(pid=48965)[0m     @     0x5621e8f5b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48965)[0m     @     0x5621e8ed0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48965)[0m     @     0x5621e8f5abaf _PyEval_EvalCodeWithName
[2m[36m(pid=48965)[0m     @     0x5621e8f5b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48965)[0m     @     0x5621e8ed0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48965)[0m     @     0x5621e8f5abaf _PyEval_EvalCodeWithName
[2m[36m(pid=48965)[0m     @     0x5621e8f5b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48965)[0m     @     0x5621e8ed0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48965)[0m     @     0x5621e8f5abaf _PyEval_EvalCodeWithName
[2m[36m(pid=48965)[0m     @     0x5621e8f5b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48965)[0m     @     0x5621e8ed0689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48882)[0m     @     0x7fc8ad5cb4f5 at::Tensor::copy_()
[2m[36m(pid=48882)[0m     @     0x7fc8b367679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48882)[0m     @     0x55b4d46a6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48882)[0m     @     0x55b4d4601b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48882)[0m     @     0x55b4d468cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48882)[0m     @     0x55b4d468da20 method_vectorcall
[2m[36m(pid=48882)[0m     @     0x55b4d4601bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48882)[0m     @     0x55b4d468cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48882)[0m     @     0x55b4d468d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48882)[0m     @     0x55b4d4602689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48882)[0m     @     0x55b4d468cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48882)[0m     @     0x55b4d468d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48882)[0m     @     0x55b4d4602689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48882)[0m     @     0x55b4d468cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48882)[0m     @     0x55b4d468d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48882)[0m     @     0x55b4d4602689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48882)[0m     @     0x55b4d468cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48882)[0m     @     0x55b4d468d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48882)[0m     @     0x55b4d4602689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48906)[0m     @     0x7eec257604f5 at::Tensor::copy_()
[2m[36m(pid=48906)[0m     @     0x7eec2b80b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48906)[0m     @     0x56071a8bffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48906)[0m     @     0x56071a81ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48906)[0m     @     0x56071a8a5baf _PyEval_EvalCodeWithName
[2m[36m(pid=48906)[0m     @     0x56071a8a6a20 method_vectorcall
[2m[36m(pid=48906)[0m     @     0x56071a81abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48906)[0m     @     0x56071a8a5baf _PyEval_EvalCodeWithName
[2m[36m(pid=48906)[0m     @     0x56071a8a6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48906)[0m     @     0x56071a81b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48906)[0m     @     0x56071a8a5baf _PyEval_EvalCodeWithName
[2m[36m(pid=48906)[0m     @     0x56071a8a6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48906)[0m     @     0x56071a81b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48906)[0m     @     0x56071a8a5baf _PyEval_EvalCodeWithName
[2m[36m(pid=48906)[0m     @     0x56071a8a6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48906)[0m     @     0x56071a81b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48906)[0m     @     0x56071a8a5baf _PyEval_EvalCodeWithName
[2m[36m(pid=48906)[0m     @     0x56071a8a6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48906)[0m     @     0x56071a81b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48913)[0m     @     0x7f2c70ccf5a4 at::native::copy_()
[2m[36m(pid=48913)[0m     @     0x7f2c713ba4f5 at::Tensor::copy_()
[2m[36m(pid=48913)[0m     @     0x7f2c7388d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48913)[0m     @     0x7f2c713ba4f5 at::Tensor::copy_()
[2m[36m(pid=48948)[0m     @     0x7ede7a6d25a4 at::native::copy_()
[2m[36m(pid=48948)[0m     @     0x7ede7adbd4f5 at::Tensor::copy_()
[2m[36m(pid=48948)[0m     @     0x7ede7d2908de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48948)[0m     @     0x7ede7adbd4f5 at::Tensor::copy_()
[2m[36m(pid=48916)[0m     @     0x7f8e996b38de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48916)[0m     @     0x7f8e971e04f5 at::Tensor::copy_()
[2m[36m(pid=48916)[0m     @     0x7f8e9d28b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48916)[0m     @     0x5617ba75bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48916)[0m     @     0x5617ba6b6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48916)[0m     @     0x5617ba741baf _PyEval_EvalCodeWithName
[2m[36m(pid=48916)[0m     @     0x5617ba742a20 method_vectorcall
[2m[36m(pid=48916)[0m     @     0x5617ba6b6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48916)[0m     @     0x5617ba741baf _PyEval_EvalCodeWithName
[2m[36m(pid=48916)[0m     @     0x5617ba742643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48916)[0m     @     0x5617ba6b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48916)[0m     @     0x5617ba741baf _PyEval_EvalCodeWithName
[2m[36m(pid=48916)[0m     @     0x5617ba742643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48916)[0m     @     0x5617ba6b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48916)[0m     @     0x5617ba741baf _PyEval_EvalCodeWithName
[2m[36m(pid=48916)[0m     @     0x5617ba742643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48916)[0m     @     0x5617ba6b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48916)[0m     @     0x5617ba741baf _PyEval_EvalCodeWithName
[2m[36m(pid=48916)[0m     @     0x5617ba742643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48916)[0m     @     0x5617ba6b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48896)[0m     @     0x7f4965d3c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48896)[0m     @     0x7f49638694f5 at::Tensor::copy_()
[2m[36m(pid=48896)[0m     @     0x7f496991479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48896)[0m     @     0x55f3c9b4bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48896)[0m     @     0x55f3c9aa6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48896)[0m     @     0x55f3c9b31baf _PyEval_EvalCodeWithName
[2m[36m(pid=48896)[0m     @     0x55f3c9b32a20 method_vectorcall
[2m[36m(pid=48896)[0m     @     0x55f3c9aa6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48896)[0m     @     0x55f3c9b31baf _PyEval_EvalCodeWithName
[2m[36m(pid=48896)[0m     @     0x55f3c9b32643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48896)[0m     @     0x55f3c9aa7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48896)[0m     @     0x55f3c9b31baf _PyEval_EvalCodeWithName
[2m[36m(pid=48896)[0m     @     0x55f3c9b32643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48896)[0m     @     0x55f3c9aa7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48896)[0m     @     0x55f3c9b31baf _PyEval_EvalCodeWithName
[2m[36m(pid=48896)[0m     @     0x55f3c9b32643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48896)[0m     @     0x55f3c9aa7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48896)[0m     @     0x55f3c9b31baf _PyEval_EvalCodeWithName
[2m[36m(pid=48896)[0m     @     0x55f3c9b32643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48896)[0m     @     0x55f3c9aa7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48920)[0m     @     0x7f7a0731e8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48920)[0m     @     0x7f7a04e4b4f5 at::Tensor::copy_()
[2m[36m(pid=48920)[0m     @     0x7f7a0aef679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48920)[0m     @     0x55ce37dc8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48920)[0m     @     0x55ce37d23b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48920)[0m     @     0x55ce37daebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48920)[0m     @     0x55ce37dafa20 method_vectorcall
[2m[36m(pid=48920)[0m     @     0x55ce37d23bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48920)[0m     @     0x55ce37daebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48920)[0m     @     0x55ce37daf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48920)[0m     @     0x55ce37d24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48920)[0m     @     0x55ce37daebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48920)[0m     @     0x55ce37daf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48920)[0m     @     0x55ce37d24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48920)[0m     @     0x55ce37daebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48920)[0m     @     0x55ce37daf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48920)[0m     @     0x55ce37d24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48920)[0m     @     0x55ce37daebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48920)[0m     @     0x55ce37daf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48920)[0m     @     0x55ce37d24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48953)[0m     @     0x7fb223e514f5 at::Tensor::copy_()
[2m[36m(pid=48953)[0m     @     0x7fb229efc79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48953)[0m     @     0x555cc88d0fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48953)[0m     @     0x555cc882bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48953)[0m     @     0x555cc88b6baf _PyEval_EvalCodeWithName
[2m[36m(pid=48953)[0m     @     0x555cc88b7a20 method_vectorcall
[2m[36m(pid=48953)[0m     @     0x555cc882bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48953)[0m     @     0x555cc88b6baf _PyEval_EvalCodeWithName
[2m[36m(pid=48953)[0m     @     0x555cc88b7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48953)[0m     @     0x555cc882c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48953)[0m     @     0x555cc88b6baf _PyEval_EvalCodeWithName
[2m[36m(pid=48953)[0m     @     0x555cc88b7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48953)[0m     @     0x555cc882c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48953)[0m     @     0x555cc88b6baf _PyEval_EvalCodeWithName
[2m[36m(pid=48953)[0m     @     0x555cc88b7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48953)[0m     @     0x555cc882c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48953)[0m     @     0x555cc88b6baf _PyEval_EvalCodeWithName
[2m[36m(pid=48953)[0m     @     0x555cc88b7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48953)[0m     @     0x555cc882c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48884)[0m     @     0x7f28a72424f5 at::Tensor::copy_()
[2m[36m(pid=48884)[0m     @     0x7f28a97158de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48884)[0m     @     0x7f28a72424f5 at::Tensor::copy_()
[2m[36m(pid=48884)[0m     @     0x7f28ad2ed79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48884)[0m     @     0x55eb123e3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48884)[0m     @     0x55eb1233eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48884)[0m     @     0x55eb123c9baf _PyEval_EvalCodeWithName
[2m[36m(pid=48884)[0m     @     0x55eb123caa20 method_vectorcall
[2m[36m(pid=48884)[0m     @     0x55eb1233ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48884)[0m     @     0x55eb123c9baf _PyEval_EvalCodeWithName
[2m[36m(pid=48884)[0m     @     0x55eb123ca643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48884)[0m     @     0x55eb1233f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48884)[0m     @     0x55eb123c9baf _PyEval_EvalCodeWithName
[2m[36m(pid=48884)[0m     @     0x55eb123ca643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48884)[0m     @     0x55eb1233f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48884)[0m     @     0x55eb123c9baf _PyEval_EvalCodeWithName
[2m[36m(pid=48884)[0m     @     0x55eb123ca643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48884)[0m     @     0x55eb1233f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48884)[0m     @     0x55eb123c9baf _PyEval_EvalCodeWithName
[2m[36m(pid=48884)[0m     @     0x55eb123ca643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48884)[0m     @     0x55eb1233f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48960)[0m     @     0x7fab9cd9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48960)[0m     @     0x555ee2986fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48960)[0m     @     0x555ee28e1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48960)[0m     @     0x555ee296cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48960)[0m     @     0x555ee296da20 method_vectorcall
[2m[36m(pid=48960)[0m     @     0x555ee28e1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48960)[0m     @     0x555ee296cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48960)[0m     @     0x555ee296d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48960)[0m     @     0x555ee28e2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48960)[0m     @     0x555ee296cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48960)[0m     @     0x555ee296d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48960)[0m     @     0x555ee28e2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48960)[0m     @     0x555ee296cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48960)[0m     @     0x555ee296d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48960)[0m     @     0x555ee28e2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48960)[0m     @     0x555ee296cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48960)[0m     @     0x555ee296d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48960)[0m     @     0x555ee28e2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48942)[0m     @     0x7fafff45f4f5 at::Tensor::copy_()
[2m[36m(pid=48942)[0m     @     0x7fb0019328de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48901)[0m     @     0x7f31b50a44f5 at::Tensor::copy_()
[2m[36m(pid=48901)[0m     @     0x7f31bb14f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48901)[0m     @     0x55a7cf87ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48901)[0m     @     0x55a7cf7dab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48901)[0m     @     0x55a7cf865baf _PyEval_EvalCodeWithName
[2m[36m(pid=48901)[0m     @     0x55a7cf866a20 method_vectorcall
[2m[36m(pid=48901)[0m     @     0x55a7cf7dabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48901)[0m     @     0x55a7cf865baf _PyEval_EvalCodeWithName
[2m[36m(pid=48901)[0m     @     0x55a7cf866643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48901)[0m     @     0x55a7cf7db689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48901)[0m     @     0x55a7cf865baf _PyEval_EvalCodeWithName
[2m[36m(pid=48901)[0m     @     0x55a7cf866643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48901)[0m     @     0x55a7cf7db689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48901)[0m     @     0x55a7cf865baf _PyEval_EvalCodeWithName
[2m[36m(pid=48901)[0m     @     0x55a7cf866643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48901)[0m     @     0x55a7cf7db689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48901)[0m     @     0x55a7cf865baf _PyEval_EvalCodeWithName
[2m[36m(pid=48901)[0m     @     0x55a7cf866643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48901)[0m     @     0x55a7cf7db689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48966)[0m     @     0x55b3e3394643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48966)[0m     @     0x55b3e3309689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48966)[0m     @     0x55b3e3393baf _PyEval_EvalCodeWithName
[2m[36m(pid=48966)[0m     @     0x55b3e3394643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48966)[0m     @     0x55b3e3309689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48966)[0m     @     0x55b3e3393baf _PyEval_EvalCodeWithName
[2m[36m(pid=48966)[0m     @     0x55b3e3394643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48966)[0m     @     0x55b3e3309689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48924)[0m     @     0x7f176141579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48924)[0m     @     0x556ed7f1cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48924)[0m     @     0x556ed7e77b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48924)[0m     @     0x556ed7f02baf _PyEval_EvalCodeWithName
[2m[36m(pid=48924)[0m     @     0x556ed7f03a20 method_vectorcall
[2m[36m(pid=48924)[0m     @     0x556ed7e77bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48924)[0m     @     0x556ed7f02baf _PyEval_EvalCodeWithName
[2m[36m(pid=48924)[0m     @     0x556ed7f03643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48924)[0m     @     0x556ed7e78689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48924)[0m     @     0x556ed7f02baf _PyEval_EvalCodeWithName
[2m[36m(pid=48924)[0m     @     0x556ed7f03643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48924)[0m     @     0x556ed7e78689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48924)[0m     @     0x556ed7f02baf _PyEval_EvalCodeWithName
[2m[36m(pid=48924)[0m     @     0x556ed7f03643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48924)[0m     @     0x556ed7e78689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48924)[0m     @     0x556ed7f02baf _PyEval_EvalCodeWithName
[2m[36m(pid=48924)[0m     @     0x556ed7f03643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48924)[0m     @     0x556ed7e78689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48914)[0m     @     0x7f6f7928b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48914)[0m     @     0x55e43ff24fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48914)[0m     @     0x55e43fe7fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48914)[0m     @     0x55e43ff0abaf _PyEval_EvalCodeWithName
[2m[36m(pid=48914)[0m     @     0x55e43ff0ba20 method_vectorcall
[2m[36m(pid=48914)[0m     @     0x55e43fe7fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48914)[0m     @     0x55e43ff0abaf _PyEval_EvalCodeWithName
[2m[36m(pid=48914)[0m     @     0x55e43ff0b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48914)[0m     @     0x55e43fe80689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48914)[0m     @     0x55e43ff0abaf _PyEval_EvalCodeWithName
[2m[36m(pid=48914)[0m     @     0x55e43ff0b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48914)[0m     @     0x55e43fe80689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48914)[0m     @     0x55e43ff0abaf _PyEval_EvalCodeWithName
[2m[36m(pid=48914)[0m     @     0x55e43ff0b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48914)[0m     @     0x55e43fe80689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48914)[0m     @     0x55e43ff0abaf _PyEval_EvalCodeWithName
[2m[36m(pid=48914)[0m     @     0x55e43ff0b643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48914)[0m     @     0x55e43fe80689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48881)[0m     @     0x55da20de9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48881)[0m     @     0x55da20d5e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48881)[0m     @     0x55da20de8baf _PyEval_EvalCodeWithName
[2m[36m(pid=48881)[0m     @     0x55da20de9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48881)[0m     @     0x55da20d5e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48881)[0m     @     0x55da20de8baf _PyEval_EvalCodeWithName
[2m[36m(pid=48881)[0m     @     0x55da20de9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48881)[0m     @     0x55da20d5e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48881)[0m     @     0x55da20de8baf _PyEval_EvalCodeWithName
[2m[36m(pid=48881)[0m     @     0x55da20de9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48881)[0m     @     0x55da20d5e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48947)[0m     @     0x7fc1df9cc4f5 at::Tensor::copy_()
[2m[36m(pid=48947)[0m     @     0x7fc1e5a7779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48947)[0m     @     0x563c2a55ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48947)[0m     @     0x563c2a4bab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48947)[0m     @     0x563c2a545baf _PyEval_EvalCodeWithName
[2m[36m(pid=48947)[0m     @     0x563c2a546a20 method_vectorcall
[2m[36m(pid=48947)[0m     @     0x563c2a4babfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48947)[0m     @     0x563c2a545baf _PyEval_EvalCodeWithName
[2m[36m(pid=48947)[0m     @     0x563c2a546643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48947)[0m     @     0x563c2a4bb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48947)[0m     @     0x563c2a545baf _PyEval_EvalCodeWithName
[2m[36m(pid=48947)[0m     @     0x563c2a546643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48947)[0m     @     0x563c2a4bb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48947)[0m     @     0x563c2a545baf _PyEval_EvalCodeWithName
[2m[36m(pid=48947)[0m     @     0x563c2a546643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48947)[0m     @     0x563c2a4bb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48947)[0m     @     0x563c2a545baf _PyEval_EvalCodeWithName
[2m[36m(pid=48947)[0m     @     0x563c2a546643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48947)[0m     @     0x563c2a4bb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48902)[0m     @     0x7f7baa30b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48902)[0m     @     0x55a109fb7fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48902)[0m     @     0x55a109f12b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48902)[0m     @     0x55a109f9dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48902)[0m     @     0x55a109f9ea20 method_vectorcall
[2m[36m(pid=48902)[0m     @     0x55a109f12bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48902)[0m     @     0x55a109f9dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48902)[0m     @     0x55a109f9e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48902)[0m     @     0x55a109f13689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48902)[0m     @     0x55a109f9dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48902)[0m     @     0x55a109f9e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48902)[0m     @     0x55a109f13689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48902)[0m     @     0x55a109f9dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48902)[0m     @     0x55a109f9e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48902)[0m     @     0x55a109f13689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48902)[0m     @     0x55a109f9dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48902)[0m     @     0x55a109f9e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48902)[0m     @     0x55a109f13689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48943)[0m     @     0x7f1f6a27a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48943)[0m     @     0x556f2e7aafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48943)[0m     @     0x556f2e705b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48943)[0m     @     0x556f2e790baf _PyEval_EvalCodeWithName
[2m[36m(pid=48943)[0m     @     0x556f2e791a20 method_vectorcall
[2m[36m(pid=48943)[0m     @     0x556f2e705bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48943)[0m     @     0x556f2e790baf _PyEval_EvalCodeWithName
[2m[36m(pid=48943)[0m     @     0x556f2e791643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48943)[0m     @     0x556f2e706689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48943)[0m     @     0x556f2e790baf _PyEval_EvalCodeWithName
[2m[36m(pid=48943)[0m     @     0x556f2e791643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48943)[0m     @     0x556f2e706689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48943)[0m     @     0x556f2e790baf _PyEval_EvalCodeWithName
[2m[36m(pid=48943)[0m     @     0x556f2e791643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48943)[0m     @     0x556f2e706689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48943)[0m     @     0x556f2e790baf _PyEval_EvalCodeWithName
[2m[36m(pid=48943)[0m     @     0x556f2e791643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48943)[0m     @     0x556f2e706689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48999)[0m     @     0x7f7c8cccf5a4 at::native::copy_()
[2m[36m(pid=48999)[0m     @     0x7f7c8d3ba4f5 at::Tensor::copy_()
[2m[36m(pid=48964)[0m     @     0x7f67a963179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48964)[0m     @     0x5567ea4e8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48964)[0m     @     0x5567ea443b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48964)[0m     @     0x5567ea4cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48964)[0m     @     0x5567ea4cfa20 method_vectorcall
[2m[36m(pid=48964)[0m     @     0x5567ea443bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48964)[0m     @     0x5567ea4cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48964)[0m     @     0x5567ea4cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48964)[0m     @     0x5567ea444689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48964)[0m     @     0x5567ea4cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48964)[0m     @     0x5567ea4cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48964)[0m     @     0x5567ea444689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48964)[0m     @     0x5567ea4cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48964)[0m     @     0x5567ea4cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48964)[0m     @     0x5567ea444689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48964)[0m     @     0x5567ea4cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=48964)[0m     @     0x5567ea4cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48964)[0m     @     0x5567ea444689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48894)[0m     @     0x7fc822aa74f5 at::Tensor::copy_()
[2m[36m(pid=48894)[0m     @     0x7fc828b5279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48894)[0m     @     0x556b3614bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48894)[0m     @     0x556b360a6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48894)[0m     @     0x556b36131baf _PyEval_EvalCodeWithName
[2m[36m(pid=48894)[0m     @     0x556b36132a20 method_vectorcall
[2m[36m(pid=48894)[0m     @     0x556b360a6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48894)[0m     @     0x556b36131baf _PyEval_EvalCodeWithName
[2m[36m(pid=48894)[0m     @     0x556b36132643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48894)[0m     @     0x556b360a7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48894)[0m     @     0x556b36131baf _PyEval_EvalCodeWithName
[2m[36m(pid=48894)[0m     @     0x556b36132643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48894)[0m     @     0x556b360a7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48894)[0m     @     0x556b36131baf _PyEval_EvalCodeWithName
[2m[36m(pid=48894)[0m     @     0x556b36132643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48894)[0m     @     0x556b360a7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48894)[0m     @     0x556b36131baf _PyEval_EvalCodeWithName
[2m[36m(pid=48894)[0m     @     0x556b36132643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48894)[0m     @     0x556b360a7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48915)[0m     @     0x55a8738ab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48915)[0m     @     0x55a873935baf _PyEval_EvalCodeWithName
[2m[36m(pid=48915)[0m     @     0x55a873936643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48915)[0m     @     0x55a8738ab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48915)[0m     @     0x55a873935baf _PyEval_EvalCodeWithName
[2m[36m(pid=48915)[0m     @     0x55a873936643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48915)[0m     @     0x55a8738ab689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48945)[0m     @     0x7f88a23e879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48945)[0m     @     0x564dd34a7fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48945)[0m     @     0x564dd3402b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48945)[0m     @     0x564dd348dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48945)[0m     @     0x564dd348ea20 method_vectorcall
[2m[36m(pid=48945)[0m     @     0x564dd3402bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48945)[0m     @     0x564dd348dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48945)[0m     @     0x564dd348e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48945)[0m     @     0x564dd3403689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48945)[0m     @     0x564dd348dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48945)[0m     @     0x564dd348e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48945)[0m     @     0x564dd3403689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48945)[0m     @     0x564dd348dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48945)[0m     @     0x564dd348e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48945)[0m     @     0x564dd3403689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48945)[0m     @     0x564dd348dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48945)[0m     @     0x564dd348e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48945)[0m     @     0x564dd3403689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48892)[0m     @     0x5580f4746baf _PyEval_EvalCodeWithName
[2m[36m(pid=48892)[0m     @     0x5580f4747643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48892)[0m     @     0x5580f46bc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48892)[0m     @     0x5580f4746baf _PyEval_EvalCodeWithName
[2m[36m(pid=48892)[0m     @     0x5580f4747643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48892)[0m     @     0x5580f46bc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48993)[0m     @     0x7eea860b08de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48993)[0m     @     0x7eea83bdd4f5 at::Tensor::copy_()
[2m[36m(pid=48993)[0m     @     0x7eea89c8879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48993)[0m     @     0x55df31487fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48993)[0m     @     0x55df313e2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48993)[0m     @     0x55df3146dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48993)[0m     @     0x55df3146ea20 method_vectorcall
[2m[36m(pid=48993)[0m     @     0x55df313e2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48993)[0m     @     0x55df3146dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48993)[0m     @     0x55df3146e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48993)[0m     @     0x55df313e3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48993)[0m     @     0x55df3146dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48993)[0m     @     0x55df3146e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48993)[0m     @     0x55df313e3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48993)[0m     @     0x55df3146dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48993)[0m     @     0x55df3146e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48993)[0m     @     0x55df313e3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48993)[0m     @     0x55df3146dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48993)[0m     @     0x55df3146e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48993)[0m     @     0x55df313e3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48954)[0m     @     0x7f03d95cb4f5 at::Tensor::copy_()
[2m[36m(pid=48954)[0m     @     0x7f03df67679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48954)[0m     @     0x55712b746fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48954)[0m     @     0x55712b6a1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48954)[0m     @     0x55712b72cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48954)[0m     @     0x55712b72da20 method_vectorcall
[2m[36m(pid=48954)[0m     @     0x55712b6a1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48954)[0m     @     0x55712b72cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48954)[0m     @     0x55712b72d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48954)[0m     @     0x55712b6a2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48954)[0m     @     0x55712b72cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48954)[0m     @     0x55712b72d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48954)[0m     @     0x55712b6a2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48954)[0m     @     0x55712b72cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48954)[0m     @     0x55712b72d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48954)[0m     @     0x55712b6a2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48954)[0m     @     0x55712b72cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48954)[0m     @     0x55712b72d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48954)[0m     @     0x55712b6a2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48955)[0m     @     0x7f5373efa4f5 at::Tensor::copy_()
[2m[36m(pid=48955)[0m     @     0x7f53763cd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48955)[0m     @     0x7f5373efa4f5 at::Tensor::copy_()
[2m[36m(pid=48955)[0m     @     0x7f5379fa579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48955)[0m     @     0x5625e439dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48955)[0m     @     0x5625e42f8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48955)[0m     @     0x5625e4383baf _PyEval_EvalCodeWithName
[2m[36m(pid=48955)[0m     @     0x5625e4384a20 method_vectorcall
[2m[36m(pid=48955)[0m     @     0x5625e42f8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48955)[0m     @     0x5625e4383baf _PyEval_EvalCodeWithName
[2m[36m(pid=48955)[0m     @     0x5625e4384643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48955)[0m     @     0x5625e42f9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48955)[0m     @     0x5625e4383baf _PyEval_EvalCodeWithName
[2m[36m(pid=48955)[0m     @     0x5625e4384643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48955)[0m     @     0x5625e42f9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48955)[0m     @     0x5625e4383baf _PyEval_EvalCodeWithName
[2m[36m(pid=48955)[0m     @     0x5625e4384643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48955)[0m     @     0x5625e42f9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48955)[0m     @     0x5625e4383baf _PyEval_EvalCodeWithName
[2m[36m(pid=48955)[0m     @     0x5625e4384643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48955)[0m     @     0x5625e42f9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48895)[0m     @     0x7ef6f89414f5 at::Tensor::copy_()
[2m[36m(pid=48895)[0m     @     0x7ef6fe9ec79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48895)[0m     @     0x561030017fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48895)[0m     @     0x56102ff72b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48895)[0m     @     0x56102fffdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48895)[0m     @     0x56102fffea20 method_vectorcall
[2m[36m(pid=48895)[0m     @     0x56102ff72bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48895)[0m     @     0x56102fffdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48895)[0m     @     0x56102fffe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48895)[0m     @     0x56102ff73689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48895)[0m     @     0x56102fffdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48895)[0m     @     0x56102fffe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48895)[0m     @     0x56102ff73689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48895)[0m     @     0x56102fffdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48895)[0m     @     0x56102fffe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48895)[0m     @     0x56102ff73689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48895)[0m     @     0x56102fffdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48895)[0m     @     0x56102fffe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48895)[0m     @     0x56102ff73689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48898)[0m     @     0x56542b098baf _PyEval_EvalCodeWithName
[2m[36m(pid=48898)[0m     @     0x56542b099643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48898)[0m     @     0x56542b00e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48913)[0m     @     0x7f2c7746579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48913)[0m     @     0x5625fc46ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48913)[0m     @     0x5625fc3cab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48913)[0m     @     0x5625fc455baf _PyEval_EvalCodeWithName
[2m[36m(pid=48913)[0m     @     0x5625fc456a20 method_vectorcall
[2m[36m(pid=48913)[0m     @     0x5625fc3cabfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48913)[0m     @     0x5625fc455baf _PyEval_EvalCodeWithName
[2m[36m(pid=48913)[0m     @     0x5625fc456643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48913)[0m     @     0x5625fc3cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48913)[0m     @     0x5625fc455baf _PyEval_EvalCodeWithName
[2m[36m(pid=48913)[0m     @     0x5625fc456643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48913)[0m     @     0x5625fc3cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48913)[0m     @     0x5625fc455baf _PyEval_EvalCodeWithName
[2m[36m(pid=48913)[0m     @     0x5625fc456643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48913)[0m     @     0x5625fc3cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48913)[0m     @     0x5625fc455baf _PyEval_EvalCodeWithName
[2m[36m(pid=48913)[0m     @     0x5625fc456643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48913)[0m     @     0x5625fc3cb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48948)[0m     @     0x7ede80e6879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48948)[0m     @     0x564630307fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48948)[0m     @     0x564630262b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48948)[0m     @     0x5646302edbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48948)[0m     @     0x5646302eea20 method_vectorcall
[2m[36m(pid=48948)[0m     @     0x564630262bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48948)[0m     @     0x5646302edbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48948)[0m     @     0x5646302ee643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48948)[0m     @     0x564630263689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48948)[0m     @     0x5646302edbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48948)[0m     @     0x5646302ee643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48948)[0m     @     0x564630263689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48948)[0m     @     0x5646302edbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48948)[0m     @     0x5646302ee643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48948)[0m     @     0x564630263689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48948)[0m     @     0x5646302edbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48948)[0m     @     0x5646302ee643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48948)[0m     @     0x564630263689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48900)[0m     @     0x7fa504c11ad3 at::TensorIterator::for_each()
[2m[36m(pid=48900)[0m     @     0x7fa504c11d91 at::TensorIterator::for_each()
[2m[36m(pid=48900)[0m     @     0x7fa5054f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48900)[0m     @     0x7fa505517c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48942)[0m     @     0x7fafff45f4f5 at::Tensor::copy_()
[2m[36m(pid=48942)[0m     @     0x7fb00550a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48942)[0m     @     0x557454a6cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48942)[0m     @     0x5574549c7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48942)[0m     @     0x557454a52baf _PyEval_EvalCodeWithName
[2m[36m(pid=48942)[0m     @     0x557454a53a20 method_vectorcall
[2m[36m(pid=48942)[0m     @     0x5574549c7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48942)[0m     @     0x557454a52baf _PyEval_EvalCodeWithName
[2m[36m(pid=48942)[0m     @     0x557454a53643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48942)[0m     @     0x5574549c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48942)[0m     @     0x557454a52baf _PyEval_EvalCodeWithName
[2m[36m(pid=48942)[0m     @     0x557454a53643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48942)[0m     @     0x5574549c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48942)[0m     @     0x557454a52baf _PyEval_EvalCodeWithName
[2m[36m(pid=48942)[0m     @     0x557454a53643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48942)[0m     @     0x5574549c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48942)[0m     @     0x557454a52baf _PyEval_EvalCodeWithName
[2m[36m(pid=48942)[0m     @     0x557454a53643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48942)[0m     @     0x5574549c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48952)[0m     @     0x7f7bc1440ad3 at::TensorIterator::for_each()
[2m[36m(pid=48952)[0m     @     0x7f7bc1440d91 at::TensorIterator::for_each()
[2m[36m(pid=48952)[0m     @     0x7f7bc1d23b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=48952)[0m     @     0x7f7bc1d46c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=48999)[0m     @     0x7f7c8f88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48999)[0m     @     0x7f7c8d3ba4f5 at::Tensor::copy_()
[2m[36m(pid=48999)[0m     @     0x7f7c9346579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48999)[0m     @     0x55daabd47fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48999)[0m     @     0x55daabca2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48999)[0m     @     0x55daabd2dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48999)[0m     @     0x55daabd2ea20 method_vectorcall
[2m[36m(pid=48999)[0m     @     0x55daabca2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48999)[0m     @     0x55daabd2dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48999)[0m     @     0x55daabd2e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48999)[0m     @     0x55daabca3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48999)[0m     @     0x55daabd2dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48999)[0m     @     0x55daabd2e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48999)[0m     @     0x55daabca3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48999)[0m     @     0x55daabd2dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48999)[0m     @     0x55daabd2e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48999)[0m     @     0x55daabca3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48999)[0m     @     0x55daabd2dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48999)[0m     @     0x55daabd2e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48999)[0m     @     0x55daabca3689 _PyEval_EvalFrameDefault.cold.2792
2020-11-05 10:45:37,002	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff252160a301000000.
2020-11-05 10:45:37,003	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff091d563401000000.
[2m[36m(pid=48900)[0m     @     0x7fa5049b9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48900)[0m     @     0x7fa5049b7388 at::native::copy_impl()
[2m[36m(pid=48900)[0m     @     0x7fa5049b95a4 at::native::copy_()
[2m[36m(pid=48900)[0m     @     0x7fa5050a44f5 at::Tensor::copy_()
[2m[36m(pid=48900)[0m     @     0x7fa5075778de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48900)[0m     @     0x7fa5050a44f5 at::Tensor::copy_()
[2m[36m(pid=48900)[0m     @     0x7fa50b14f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48900)[0m     @     0x556d6df59fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48900)[0m     @     0x556d6deb4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48900)[0m     @     0x556d6df3fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48900)[0m     @     0x556d6df40a20 method_vectorcall
[2m[36m(pid=48900)[0m     @     0x556d6deb4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48900)[0m     @     0x556d6df3fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48900)[0m     @     0x556d6df40643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48900)[0m     @     0x556d6deb5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48900)[0m     @     0x556d6df3fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48900)[0m     @     0x556d6df40643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48900)[0m     @     0x556d6deb5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48900)[0m     @     0x556d6df3fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48900)[0m     @     0x556d6df40643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48900)[0m     @     0x556d6deb5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48900)[0m     @     0x556d6df3fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=48900)[0m     @     0x556d6df40643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48900)[0m     @     0x556d6deb5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48952)[0m     @     0x7f7bc11e8a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=48952)[0m     @     0x7f7bc11e6388 at::native::copy_impl()
[2m[36m(pid=48952)[0m     @     0x7f7bc11e85a4 at::native::copy_()
[2m[36m(pid=48952)[0m     @     0x7f7bc18d34f5 at::Tensor::copy_()
[2m[36m(pid=48952)[0m     @     0x7f7bc3da68de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=48952)[0m     @     0x7f7bc18d34f5 at::Tensor::copy_()
[2m[36m(pid=48952)[0m     @     0x7f7bc797e79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=48952)[0m     @     0x55aa845aafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=48952)[0m     @     0x55aa84505b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48952)[0m     @     0x55aa84590baf _PyEval_EvalCodeWithName
[2m[36m(pid=48952)[0m     @     0x55aa84591a20 method_vectorcall
[2m[36m(pid=48952)[0m     @     0x55aa84505bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48952)[0m     @     0x55aa84590baf _PyEval_EvalCodeWithName
[2m[36m(pid=48952)[0m     @     0x55aa84591643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48952)[0m     @     0x55aa84506689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48952)[0m     @     0x55aa84590baf _PyEval_EvalCodeWithName
[2m[36m(pid=48952)[0m     @     0x55aa84591643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48952)[0m     @     0x55aa84506689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48952)[0m     @     0x55aa84590baf _PyEval_EvalCodeWithName
[2m[36m(pid=48952)[0m     @     0x55aa84591643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48952)[0m     @     0x55aa84506689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=48952)[0m     @     0x55aa84590baf _PyEval_EvalCodeWithName
[2m[36m(pid=48952)[0m     @     0x55aa84591643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=48952)[0m     @     0x55aa84506689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=49025)[0m E1105 10:45:37.000128 49025 50141 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=1f6f5417a7b065f9091d563401000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=091d563401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}
[2m[36m(pid=49025)[0m E1105 10:45:37.000286 49025 50141 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=e76b5820fbdeb0f2091d563401000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=091d563401000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}
[2m[36m(pid=49025)[0m E1105 10:45:37.000424 49025 50141 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=set_weights, function_hash=}, task_id=3e4916e36cb3ce60252160a301000000, task_name=RolloutWorker.set_weights(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=252160a301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=0}
[2m[36m(pid=49025)[0m E1105 10:45:37.000492 49025 50141 task_manager.cc:323] Task failed: IOError: 14: Socket closed: Type=ACTOR_TASK, Language=PYTHON, Resources: {}, function_descriptor={type=PythonFunctionDescriptor, module_name=ray.rllib.evaluation.rollout_worker, class_name=RolloutWorker, function_name=par_iter_init, function_hash=}, task_id=c2d663ba592886f5252160a301000000, task_name=RolloutWorker.par_iter_init(), job_id=01000000, num_args=2, num_returns=2, actor_task_spec={actor_id=252160a301000000, actor_caller_id=ffffffffffffffffdf5a1a8201000000, actor_counter=1}
2020-11-05 10:45:37,031	ERROR trial_runner.py:567 -- Trial PPO_jss_env_0580d_00000: Error processing event.
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py", line 515, in _process_trial
    result = self.trial_executor.fetch_result(trial)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py", line 488, in fetch_result
    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/worker.py", line 1428, in get
    raise value.as_instanceof_cause()
ray.exceptions.RayTaskError: [36mray::PPO.train()[39m (pid=49025, ip=172.17.0.4)
  File "python/ray/_raylet.pyx", line 484, in ray._raylet.execute_task
  File "python/ray/_raylet.pyx", line 438, in ray._raylet.execute_task.function_executor
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 516, in train
    raise e
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 505, in train
    result = Trainable.train(self)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py", line 336, in train
    result = self.step()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py", line 134, in step
    res = next(self.train_exec_impl)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 756, in __next__
    return next(self.built_iterator)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 876, in apply_flatten
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 828, in add_wait_hooks
    item = next(it)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 466, in base_iterator
    actor_set.init_actors()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 1238, in init_actors
    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
== Status ==
Memory usage on this node: 24.0/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/558.01 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_0580d_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_0580d_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_0580d_00000_0_2020-11-05_10-45-29/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

2020-11-05 10:45:37,039	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffa97540c201000000.
2020-11-05 10:45:37,039	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffbdff035801000000.
2020-11-05 10:45:37,039	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff31c3fed901000000.
2020-11-05 10:45:37,040	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffe0497dac01000000.
2020-11-05 10:45:37,040	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff9f3cc57a01000000.
2020-11-05 10:45:37,040	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff90aded9101000000.
== Status ==
Memory usage on this node: 23.8/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/558.01 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_0580d_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_0580d_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_0580d_00000_0_2020-11-05_10-45-29/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

Traceback (most recent call last):
  File "train.py", line 74, in <module>
    train_func()
  File "train.py", line 56, in train_func
    analysis = tune.run(PPOTrainer, config=config, stop=stop, name="ppo-jss")
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py", line 427, in run
    raise TuneError("Trials did not complete", incomplete_trials)
ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_0580d_00000])
2020-11-05 10:45:37,051	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffc2621d1401000000.
2020-11-05 10:45:37,052	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff4100f4fd01000000.
2020-11-05 10:45:37,052	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff56c9ec1501000000.
2020-11-05 10:45:37,053	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff0314ce3001000000.
2020-11-05 10:45:37,053	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff821ddf4301000000.
2020-11-05 10:45:37,053	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff43fb47bd01000000.
