2020-11-05 10:36:53,082	INFO services.py:1164 -- View the Ray dashboard at [1m[32mhttp://127.0.0.1:8265[39m[22m
== Status ==
Memory usage on this node: 12.7/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 80/80 CPUs, 1/1 GPUs, 0.0/558.15 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 RUNNING)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_d27b6_00000 | RUNNING  |       |
+-------------------------+----------+-------+


[2m[36m(pid=28642)[0m 2020-11-05 10:36:55,900	INFO trainer.py:616 -- Current log_level is WARN. For more information, set 'log_level': 'INFO' / 'DEBUG' or use the -v and -vv flags.
[2m[36m(pid=28642)[0m /root/miniconda3/lib/python3.8/site-packages/torch/cuda/__init__.py:125: UserWarning: 
[2m[36m(pid=28642)[0m GeForce RTX 2080 Ti with CUDA capability sm_75 is not compatible with the current PyTorch installation.
[2m[36m(pid=28642)[0m The current PyTorch install supports CUDA capabilities sm_37 sm_50 sm_60 sm_61 sm_70 compute_37.
[2m[36m(pid=28642)[0m If you want to use the GeForce RTX 2080 Ti GPU with PyTorch, please check the instructions at https://pytorch.org/get-started/locally/
[2m[36m(pid=28642)[0m 
[2m[36m(pid=28642)[0m   warnings.warn(incompatible_device_warn.format(device_name, capability, " ".join(arch_list), device_name))
[2m[36m(pid=28604)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28604)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28604)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28602)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28602)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28602)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28602)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28602)[0m *** SIGSEGV (@0x0) received by PID 28602 (TID 0x7f919a448700) from PID 0; stack trace: ***
[2m[36m(pid=28643)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28643)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28643)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28643)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28643)[0m *** SIGSEGV (@0x0) received by PID 28643 (TID 0x7f1429d3f700) from PID 0; stack trace: ***
[2m[36m(pid=28621)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28621)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28621)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28621)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28621)[0m *** SIGSEGV (@0x0) received by PID 28621 (TID 0x7f767a05e700) from PID 0; stack trace: ***
[2m[36m(pid=28597)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28597)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28597)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28597)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28597)[0m *** SIGSEGV (@0x0) received by PID 28597 (TID 0x7fced4dc4700) from PID 0; stack trace: ***
[2m[36m(pid=28591)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28591)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28591)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28591)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28591)[0m *** SIGSEGV (@0x0) received by PID 28591 (TID 0x7f13cdd21700) from PID 0; stack trace: ***
[2m[36m(pid=28591)[0m     @     0x7f13cd8fa390 (unknown)
[2m[36m(pid=28591)[0m     @     0x7ee4cd7f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28591)[0m     @     0x7ee4ccf247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28600)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28600)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28600)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28600)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28600)[0m *** SIGSEGV (@0x0) received by PID 28600 (TID 0x7f4634903700) from PID 0; stack trace: ***
[2m[36m(pid=28600)[0m     @     0x7f46344dc390 (unknown)
[2m[36m(pid=28600)[0m     @     0x7f17343e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28600)[0m     @     0x7f1733b0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28603)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28603)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28603)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28603)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28603)[0m *** SIGSEGV (@0x0) received by PID 28603 (TID 0x7f85b3380700) from PID 0; stack trace: ***
[2m[36m(pid=28603)[0m     @     0x7f85b2f59390 (unknown)
[2m[36m(pid=28603)[0m     @     0x7f56b2ee6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28603)[0m     @     0x7f56b26117db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28530)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28530)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28530)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28530)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28530)[0m *** SIGSEGV (@0x0) received by PID 28530 (TID 0x7fae4fe49700) from PID 0; stack trace: ***
[2m[36m(pid=28530)[0m     @     0x7fae4fa22390 (unknown)
[2m[36m(pid=28530)[0m     @     0x7f7f4f8def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28578)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28578)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28578)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28578)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28578)[0m *** SIGSEGV (@0x0) received by PID 28578 (TID 0x7f644b7e4700) from PID 0; stack trace: ***
[2m[36m(pid=28578)[0m     @     0x7f644b3bd390 (unknown)
[2m[36m(pid=28578)[0m     @     0x7f354b229f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28578)[0m     @     0x7f354a9547db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28629)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28629)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28629)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28629)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28629)[0m *** SIGSEGV (@0x0) received by PID 28629 (TID 0x7f1f103f8700) from PID 0; stack trace: ***
[2m[36m(pid=28629)[0m     @     0x7f1f0ffd1390 (unknown)
[2m[36m(pid=28598)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28598)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28598)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28598)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28598)[0m *** SIGSEGV (@0x0) received by PID 28598 (TID 0x7f275a807700) from PID 0; stack trace: ***
[2m[36m(pid=28598)[0m     @     0x7f275a3e0390 (unknown)
[2m[36m(pid=28598)[0m     @     0x7ef85a34bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28598)[0m     @     0x7ef859a767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28623)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28623)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28623)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28623)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28623)[0m *** SIGSEGV (@0x0) received by PID 28623 (TID 0x7fe993e52700) from PID 0; stack trace: ***
[2m[36m(pid=28623)[0m     @     0x7fe993a2b390 (unknown)
[2m[36m(pid=28623)[0m     @     0x7fba93751f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28623)[0m     @     0x7fba92e7c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28624)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28624)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28624)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28624)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28624)[0m *** SIGSEGV (@0x0) received by PID 28624 (TID 0x7f400c2cb700) from PID 0; stack trace: ***
[2m[36m(pid=28624)[0m     @     0x7f400bea4390 (unknown)
[2m[36m(pid=28624)[0m     @     0x7f110be0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28624)[0m     @     0x7f110b5367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28595)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28595)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28595)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28595)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28595)[0m *** SIGSEGV (@0x0) received by PID 28595 (TID 0x7f6db8823700) from PID 0; stack trace: ***
[2m[36m(pid=28595)[0m     @     0x7f6db83fc390 (unknown)
[2m[36m(pid=28604)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28604)[0m *** SIGSEGV (@0x0) received by PID 28604 (TID 0x7f93f8b24700) from PID 0; stack trace: ***
[2m[36m(pid=28604)[0m     @     0x7f93f86fd390 (unknown)
[2m[36m(pid=28604)[0m     @     0x7f64f85f4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28604)[0m     @     0x7f64f7d1f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28602)[0m     @     0x7f919a021390 (unknown)
[2m[36m(pid=28602)[0m     @     0x7f6299e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28602)[0m     @     0x7f629954f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28643)[0m     @     0x7f1429918390 (unknown)
[2m[36m(pid=28643)[0m     @     0x7ee5297f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28643)[0m     @     0x7ee528f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28643)[0m     @     0x7ee528f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28621)[0m     @     0x7f7679c37390 (unknown)
[2m[36m(pid=28621)[0m     @     0x7f4779becf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28621)[0m     @     0x7f47793177db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28621)[0m     @     0x7f477931a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28597)[0m     @     0x7fced499d390 (unknown)
[2m[36m(pid=28597)[0m     @     0x7f9fd4774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28597)[0m     @     0x7f9fd3e9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28597)[0m     @     0x7f9fd3ea28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28591)[0m     @     0x7ee4ccf278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28600)[0m     @     0x7f1733b118f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28603)[0m     @     0x7f56b26148f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28530)[0m     @     0x7f7f4f0097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28578)[0m     @     0x7f354a9578f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28629)[0m     @     0x7ef00fe0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28629)[0m     @     0x7ef00f5367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28598)[0m     @     0x7ef859a798f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28623)[0m     @     0x7fba92e7f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28624)[0m     @     0x7f110b5398f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28595)[0m     @     0x7f3eb83a3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28595)[0m     @     0x7f3eb7ace7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28587)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28587)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28587)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28587)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28587)[0m *** SIGSEGV (@0x0) received by PID 28587 (TID 0x7fbbaba5f700) from PID 0; stack trace: ***
[2m[36m(pid=28587)[0m     @     0x7fbbab638390 (unknown)
[2m[36m(pid=28587)[0m     @     0x7f8caac15f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28587)[0m     @     0x7f8caa3407db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28534)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28534)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28534)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28534)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28534)[0m *** SIGSEGV (@0x0) received by PID 28534 (TID 0x7f22703dd700) from PID 0; stack trace: ***
[2m[36m(pid=28534)[0m     @     0x7f226ffb6390 (unknown)
[2m[36m(pid=28534)[0m     @     0x7ef36feb6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28534)[0m     @     0x7ef36f5e17db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28534)[0m     @     0x7ef36f5e48f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28540)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28540)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28540)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28540)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28540)[0m *** SIGSEGV (@0x0) received by PID 28540 (TID 0x7f2c2b14a700) from PID 0; stack trace: ***
[2m[36m(pid=28540)[0m     @     0x7f2c2ad23390 (unknown)
[2m[36m(pid=28540)[0m     @     0x7efd2accff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28540)[0m     @     0x7efd2a3fa7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28540)[0m     @     0x7efd2a3fd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28617)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28617)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28617)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28617)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28617)[0m *** SIGSEGV (@0x0) received by PID 28617 (TID 0x7f2907d66700) from PID 0; stack trace: ***
[2m[36m(pid=28617)[0m     @     0x7f290793f390 (unknown)
[2m[36m(pid=28617)[0m     @     0x7efa078def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28617)[0m     @     0x7efa070097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28617)[0m     @     0x7efa0700c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28617)[0m     @     0x7efa0700cad3 at::TensorIterator::for_each()
[2m[36m(pid=28617)[0m     @     0x7efa0700cd91 at::TensorIterator::for_each()
[2m[36m(pid=28617)[0m     @     0x7efa078efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28617)[0m     @     0x7efa07912c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28604)[0m     @     0x7f64f7d228f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28604)[0m     @     0x7f64f7d22ad3 at::TensorIterator::for_each()
[2m[36m(pid=28604)[0m     @     0x7f64f7d22d91 at::TensorIterator::for_each()
[2m[36m(pid=28604)[0m     @     0x7f64f8605b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28604)[0m     @     0x7f64f8628c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28604)[0m     @     0x7f64f7acaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28604)[0m     @     0x7f64f7ac8388 at::native::copy_impl()
[2m[36m(pid=28604)[0m     @     0x7f64f7aca5a4 at::native::copy_()
[2m[36m(pid=28602)[0m     @     0x7f62995528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28602)[0m     @     0x7f6299552ad3 at::TensorIterator::for_each()
[2m[36m(pid=28602)[0m     @     0x7f6299552d91 at::TensorIterator::for_each()
[2m[36m(pid=28602)[0m     @     0x7f6299e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28602)[0m     @     0x7f6299e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28602)[0m     @     0x7f62992faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28602)[0m     @     0x7f62992f8388 at::native::copy_impl()
[2m[36m(pid=28602)[0m     @     0x7f62992fa5a4 at::native::copy_()
[2m[36m(pid=28602)[0m     @     0x7f62999e54f5 at::Tensor::copy_()
[2m[36m(pid=28602)[0m     @     0x7f629beb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28643)[0m     @     0x7ee528f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=28643)[0m     @     0x7ee528f27d91 at::TensorIterator::for_each()
[2m[36m(pid=28643)[0m     @     0x7ee52980ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28643)[0m     @     0x7ee52982dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28643)[0m     @     0x7ee528ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28643)[0m     @     0x7ee528ccd388 at::native::copy_impl()
[2m[36m(pid=28643)[0m     @     0x7ee528ccf5a4 at::native::copy_()
[2m[36m(pid=28643)[0m     @     0x7ee5293ba4f5 at::Tensor::copy_()
[2m[36m(pid=28643)[0m     @     0x7ee52b88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28643)[0m     @     0x7ee5293ba4f5 at::Tensor::copy_()
[2m[36m(pid=28643)[0m     @     0x7ee52f46579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28643)[0m     @     0x55dda9051fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28643)[0m     @     0x55dda8facb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28643)[0m     @     0x55dda9037baf _PyEval_EvalCodeWithName
[2m[36m(pid=28643)[0m     @     0x55dda9038a20 method_vectorcall
[2m[36m(pid=28643)[0m     @     0x55dda8facbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28643)[0m     @     0x55dda9037baf _PyEval_EvalCodeWithName
[2m[36m(pid=28643)[0m     @     0x55dda9038643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28643)[0m     @     0x55dda8fad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28643)[0m     @     0x55dda9037baf _PyEval_EvalCodeWithName
[2m[36m(pid=28643)[0m     @     0x55dda9038643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28643)[0m     @     0x55dda8fad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28643)[0m     @     0x55dda9037baf _PyEval_EvalCodeWithName
[2m[36m(pid=28643)[0m     @     0x55dda9038643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28643)[0m     @     0x55dda8fad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28643)[0m     @     0x55dda9037baf _PyEval_EvalCodeWithName
[2m[36m(pid=28643)[0m     @     0x55dda9038643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28634)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28634)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28634)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28634)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28634)[0m *** SIGSEGV (@0x0) received by PID 28634 (TID 0x7feb371c1700) from PID 0; stack trace: ***
[2m[36m(pid=28634)[0m     @     0x7feb36d9a390 (unknown)
[2m[36m(pid=28634)[0m     @     0x7fbc36cfcf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28634)[0m     @     0x7fbc364277db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28592)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28592)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28592)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28592)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28592)[0m *** SIGSEGV (@0x0) received by PID 28592 (TID 0x7f8dfe47e700) from PID 0; stack trace: ***
[2m[36m(pid=28592)[0m     @     0x7f8dfe057390 (unknown)
[2m[36m(pid=28592)[0m     @     0x7f5efde24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28592)[0m     @     0x7f5efd54f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28632)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28632)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28632)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28632)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28632)[0m *** SIGSEGV (@0x0) received by PID 28632 (TID 0x7f1076227700) from PID 0; stack trace: ***
[2m[36m(pid=28632)[0m     @     0x7f1075e00390 (unknown)
[2m[36m(pid=28632)[0m     @     0x7ee175da4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28632)[0m     @     0x7ee1754cf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28632)[0m     @     0x7ee1754d28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28632)[0m     @     0x7ee1754d2ad3 at::TensorIterator::for_each()
[2m[36m(pid=28621)[0m     @     0x7f477931aad3 at::TensorIterator::for_each()
[2m[36m(pid=28621)[0m     @     0x7f477931ad91 at::TensorIterator::for_each()
[2m[36m(pid=28621)[0m     @     0x7f4779bfdb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28621)[0m     @     0x7f4779c20c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28621)[0m     @     0x7f47790c2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28621)[0m     @     0x7f47790c0388 at::native::copy_impl()
[2m[36m(pid=28621)[0m     @     0x7f47790c25a4 at::native::copy_()
[2m[36m(pid=28621)[0m     @     0x7f47797ad4f5 at::Tensor::copy_()
[2m[36m(pid=28621)[0m     @     0x7f477bc808de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28621)[0m     @     0x7f47797ad4f5 at::Tensor::copy_()
[2m[36m(pid=28621)[0m     @     0x7f477f85879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28621)[0m     @     0x556757397fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28621)[0m     @     0x5567572f2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28621)[0m     @     0x55675737dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28621)[0m     @     0x55675737ea20 method_vectorcall
[2m[36m(pid=28621)[0m     @     0x5567572f2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28621)[0m     @     0x55675737dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28621)[0m     @     0x55675737e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28621)[0m     @     0x5567572f3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28621)[0m     @     0x55675737dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28621)[0m     @     0x55675737e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28621)[0m     @     0x5567572f3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28621)[0m     @     0x55675737dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28621)[0m     @     0x55675737e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28621)[0m     @     0x5567572f3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28621)[0m     @     0x55675737dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28621)[0m     @     0x55675737e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28621)[0m     @     0x5567572f3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28597)[0m     @     0x7f9fd3ea2ad3 at::TensorIterator::for_each()
[2m[36m(pid=28597)[0m     @     0x7f9fd3ea2d91 at::TensorIterator::for_each()
[2m[36m(pid=28597)[0m     @     0x7f9fd4785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28597)[0m     @     0x7f9fd47a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28597)[0m     @     0x7f9fd3c4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28597)[0m     @     0x7f9fd3c48388 at::native::copy_impl()
[2m[36m(pid=28597)[0m     @     0x7f9fd3c4a5a4 at::native::copy_()
[2m[36m(pid=28597)[0m     @     0x7f9fd43354f5 at::Tensor::copy_()
[2m[36m(pid=28597)[0m     @     0x7f9fd68088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28597)[0m     @     0x7f9fd43354f5 at::Tensor::copy_()
[2m[36m(pid=28597)[0m     @     0x7f9fda3e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28597)[0m     @     0x55781f1e4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28597)[0m     @     0x55781f13fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28597)[0m     @     0x55781f1cabaf _PyEval_EvalCodeWithName
[2m[36m(pid=28597)[0m     @     0x55781f1cba20 method_vectorcall
[2m[36m(pid=28597)[0m     @     0x55781f13fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28597)[0m     @     0x55781f1cabaf _PyEval_EvalCodeWithName
[2m[36m(pid=28597)[0m     @     0x55781f1cb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28597)[0m     @     0x55781f140689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28597)[0m     @     0x55781f1cabaf _PyEval_EvalCodeWithName
[2m[36m(pid=28597)[0m     @     0x55781f1cb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28597)[0m     @     0x55781f140689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28551)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28551)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28551)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28551)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28551)[0m *** SIGSEGV (@0x0) received by PID 28551 (TID 0x7fb579e9a700) from PID 0; stack trace: ***
[2m[36m(pid=28551)[0m     @     0x7fb579a73390 (unknown)
[2m[36m(pid=28551)[0m     @     0x7f8679701f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28551)[0m     @     0x7f8678e2c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28551)[0m     @     0x7f8678e2f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28551)[0m     @     0x7f8678e2fad3 at::TensorIterator::for_each()
[2m[36m(pid=28591)[0m     @     0x7ee4ccf27ad3 at::TensorIterator::for_each()
[2m[36m(pid=28591)[0m     @     0x7ee4ccf27d91 at::TensorIterator::for_each()
[2m[36m(pid=28591)[0m     @     0x7ee4cd80ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28591)[0m     @     0x7ee4cd82dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28591)[0m     @     0x7ee4ccccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28591)[0m     @     0x7ee4ccccd388 at::native::copy_impl()
[2m[36m(pid=28591)[0m     @     0x7ee4ccccf5a4 at::native::copy_()
[2m[36m(pid=28591)[0m     @     0x7ee4cd3ba4f5 at::Tensor::copy_()
[2m[36m(pid=28591)[0m     @     0x7ee4cf88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28591)[0m     @     0x7ee4cd3ba4f5 at::Tensor::copy_()
[2m[36m(pid=28620)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28620)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28620)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28620)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28620)[0m *** SIGSEGV (@0x0) received by PID 28620 (TID 0x7f8f5bf02700) from PID 0; stack trace: ***
[2m[36m(pid=28620)[0m     @     0x7f8f5badb390 (unknown)
[2m[36m(pid=28620)[0m     @     0x7f605ba88f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28620)[0m     @     0x7f605b1b37db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28620)[0m     @     0x7f605b1b68f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28600)[0m     @     0x7f1733b11ad3 at::TensorIterator::for_each()
[2m[36m(pid=28600)[0m     @     0x7f1733b11d91 at::TensorIterator::for_each()
[2m[36m(pid=28600)[0m     @     0x7f17343f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28600)[0m     @     0x7f1734417c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28600)[0m     @     0x7f17338b9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28600)[0m     @     0x7f17338b7388 at::native::copy_impl()
[2m[36m(pid=28600)[0m     @     0x7f17338b95a4 at::native::copy_()
[2m[36m(pid=28600)[0m     @     0x7f1733fa44f5 at::Tensor::copy_()
[2m[36m(pid=28600)[0m     @     0x7f17364778de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28600)[0m     @     0x7f1733fa44f5 at::Tensor::copy_()
[2m[36m(pid=28600)[0m     @     0x7f173a04f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28600)[0m     @     0x559516737fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28600)[0m     @     0x559516692b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28529)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28529)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28529)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28529)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28529)[0m *** SIGSEGV (@0x0) received by PID 28529 (TID 0x7faef110e700) from PID 0; stack trace: ***
[2m[36m(pid=28529)[0m     @     0x7faef0ce7390 (unknown)
[2m[36m(pid=28529)[0m     @     0x7f7ff0bd1f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28529)[0m     @     0x7f7ff02fc7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28529)[0m     @     0x7f7ff02ff8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28511)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28511)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28511)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28511)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28511)[0m *** SIGSEGV (@0x0) received by PID 28511 (TID 0x7f5b43eb7700) from PID 0; stack trace: ***
[2m[36m(pid=28511)[0m     @     0x7f5b43a90390 (unknown)
[2m[36m(pid=28511)[0m     @     0x7f2c41940f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28511)[0m     @     0x7f2c4106b7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28511)[0m     @     0x7f2c4106e8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28511)[0m     @     0x7f2c4106ead3 at::TensorIterator::for_each()
[2m[36m(pid=28637)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28637)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28637)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28637)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28637)[0m *** SIGSEGV (@0x0) received by PID 28637 (TID 0x7ff6468a2700) from PID 0; stack trace: ***
[2m[36m(pid=28637)[0m     @     0x7ff64647b390 (unknown)
[2m[36m(pid=28637)[0m     @     0x7fc74634bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28637)[0m     @     0x7fc745a767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28637)[0m     @     0x7fc745a798f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28603)[0m     @     0x7f56b2614ad3 at::TensorIterator::for_each()
[2m[36m(pid=28603)[0m     @     0x7f56b2614d91 at::TensorIterator::for_each()
[2m[36m(pid=28603)[0m     @     0x7f56b2ef7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28603)[0m     @     0x7f56b2f1ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28603)[0m     @     0x7f56b23bca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28603)[0m     @     0x7f56b23ba388 at::native::copy_impl()
[2m[36m(pid=28603)[0m     @     0x7f56b23bc5a4 at::native::copy_()
[2m[36m(pid=28603)[0m     @     0x7f56b2aa74f5 at::Tensor::copy_()
[2m[36m(pid=28603)[0m     @     0x7f56b4f7a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28603)[0m     @     0x7f56b2aa74f5 at::Tensor::copy_()
[2m[36m(pid=28603)[0m     @     0x7f56b8b5279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28603)[0m     @     0x563a8824bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28603)[0m     @     0x563a881a6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28603)[0m     @     0x563a88231baf _PyEval_EvalCodeWithName
[2m[36m(pid=28603)[0m     @     0x563a88232a20 method_vectorcall
[2m[36m(pid=28603)[0m     @     0x563a881a6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28603)[0m     @     0x563a88231baf _PyEval_EvalCodeWithName
[2m[36m(pid=28603)[0m     @     0x563a88232643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28603)[0m     @     0x563a881a7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28603)[0m     @     0x563a88231baf _PyEval_EvalCodeWithName
[2m[36m(pid=28603)[0m     @     0x563a88232643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28603)[0m     @     0x563a881a7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28603)[0m     @     0x563a88231baf _PyEval_EvalCodeWithName
[2m[36m(pid=28603)[0m     @     0x563a88232643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28603)[0m     @     0x563a881a7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28603)[0m     @     0x563a88231baf _PyEval_EvalCodeWithName
[2m[36m(pid=28603)[0m     @     0x563a88232643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28603)[0m     @     0x563a881a7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28628)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28628)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28628)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28628)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28628)[0m *** SIGSEGV (@0x0) received by PID 28628 (TID 0x7f4676ba2700) from PID 0; stack trace: ***
[2m[36m(pid=28628)[0m     @     0x7f467677b390 (unknown)
[2m[36m(pid=28628)[0m     @     0x7f17764f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28628)[0m     @     0x7f1775c247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28628)[0m     @     0x7f1775c278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28628)[0m     @     0x7f1775c27ad3 at::TensorIterator::for_each()
[2m[36m(pid=28530)[0m     @     0x7f7f4f00c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28530)[0m     @     0x7f7f4f00cad3 at::TensorIterator::for_each()
[2m[36m(pid=28530)[0m     @     0x7f7f4f00cd91 at::TensorIterator::for_each()
[2m[36m(pid=28530)[0m     @     0x7f7f4f8efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28530)[0m     @     0x7f7f4f912c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28530)[0m     @     0x7f7f4edb4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28530)[0m     @     0x7f7f4edb2388 at::native::copy_impl()
[2m[36m(pid=28530)[0m     @     0x7f7f4edb45a4 at::native::copy_()
[2m[36m(pid=28530)[0m     @     0x7f7f4f49f4f5 at::Tensor::copy_()
[2m[36m(pid=28530)[0m     @     0x7f7f519728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28530)[0m     @     0x7f7f4f49f4f5 at::Tensor::copy_()
[2m[36m(pid=28530)[0m     @     0x7f7f5554a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28530)[0m     @     0x556e0156cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28530)[0m     @     0x556e014c7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28530)[0m     @     0x556e01552baf _PyEval_EvalCodeWithName
[2m[36m(pid=28530)[0m     @     0x556e01553a20 method_vectorcall
[2m[36m(pid=28530)[0m     @     0x556e014c7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28530)[0m     @     0x556e01552baf _PyEval_EvalCodeWithName
[2m[36m(pid=28530)[0m     @     0x556e01553643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28530)[0m     @     0x556e014c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28530)[0m     @     0x556e01552baf _PyEval_EvalCodeWithName
[2m[36m(pid=28530)[0m     @     0x556e01553643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28530)[0m     @     0x556e014c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28578)[0m     @     0x7f354a957ad3 at::TensorIterator::for_each()
[2m[36m(pid=28578)[0m     @     0x7f354a957d91 at::TensorIterator::for_each()
[2m[36m(pid=28578)[0m     @     0x7f354b23ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28578)[0m     @     0x7f354b25dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28578)[0m     @     0x7f354a6ffa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28578)[0m     @     0x7f354a6fd388 at::native::copy_impl()
[2m[36m(pid=28578)[0m     @     0x7f354a6ff5a4 at::native::copy_()
[2m[36m(pid=28578)[0m     @     0x7f354adea4f5 at::Tensor::copy_()
[2m[36m(pid=28578)[0m     @     0x7f354d2bd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28578)[0m     @     0x7f354adea4f5 at::Tensor::copy_()
[2m[36m(pid=28578)[0m     @     0x7f3550e9579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28578)[0m     @     0x55d0d6940fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28578)[0m     @     0x55d0d689bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28578)[0m     @     0x55d0d6926baf _PyEval_EvalCodeWithName
[2m[36m(pid=28578)[0m     @     0x55d0d6927a20 method_vectorcall
[2m[36m(pid=28578)[0m     @     0x55d0d689bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28578)[0m     @     0x55d0d6926baf _PyEval_EvalCodeWithName
[2m[36m(pid=28578)[0m     @     0x55d0d6927643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28578)[0m     @     0x55d0d689c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28578)[0m     @     0x55d0d6926baf _PyEval_EvalCodeWithName
[2m[36m(pid=28578)[0m     @     0x55d0d6927643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28578)[0m     @     0x55d0d689c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28578)[0m     @     0x55d0d6926baf _PyEval_EvalCodeWithName
[2m[36m(pid=28578)[0m     @     0x55d0d6927643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28578)[0m     @     0x55d0d689c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28578)[0m     @     0x55d0d6926baf _PyEval_EvalCodeWithName
[2m[36m(pid=28578)[0m     @     0x55d0d6927643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28578)[0m     @     0x55d0d689c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28526)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28526)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28526)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28526)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28526)[0m *** SIGSEGV (@0x0) received by PID 28526 (TID 0x7f791c2ee700) from PID 0; stack trace: ***
[2m[36m(pid=28526)[0m     @     0x7f791bec7390 (unknown)
[2m[36m(pid=28526)[0m     @     0x7f4a1be0bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28526)[0m     @     0x7f4a1b5367db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28526)[0m     @     0x7f4a1b5398f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28526)[0m     @     0x7f4a1b539ad3 at::TensorIterator::for_each()
[2m[36m(pid=28629)[0m     @     0x7ef00f5398f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28629)[0m     @     0x7ef00f539ad3 at::TensorIterator::for_each()
[2m[36m(pid=28629)[0m     @     0x7ef00f539d91 at::TensorIterator::for_each()
[2m[36m(pid=28629)[0m     @     0x7ef00fe1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28629)[0m     @     0x7ef00fe3fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28629)[0m     @     0x7ef00f2e1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28629)[0m     @     0x7ef00f2df388 at::native::copy_impl()
[2m[36m(pid=28629)[0m     @     0x7ef00f2e15a4 at::native::copy_()
[2m[36m(pid=28629)[0m     @     0x7ef00f9cc4f5 at::Tensor::copy_()
[2m[36m(pid=28629)[0m     @     0x7ef011e9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28629)[0m     @     0x7ef00f9cc4f5 at::Tensor::copy_()
[2m[36m(pid=28629)[0m     @     0x7ef015a7779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28629)[0m     @     0x5623659b7fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28598)[0m     @     0x7ef859a79ad3 at::TensorIterator::for_each()
[2m[36m(pid=28598)[0m     @     0x7ef859a79d91 at::TensorIterator::for_each()
[2m[36m(pid=28598)[0m     @     0x7ef85a35cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28598)[0m     @     0x7ef85a37fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28598)[0m     @     0x7ef859821a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28598)[0m     @     0x7ef85981f388 at::native::copy_impl()
[2m[36m(pid=28598)[0m     @     0x7ef8598215a4 at::native::copy_()
[2m[36m(pid=28598)[0m     @     0x7ef859f0c4f5 at::Tensor::copy_()
[2m[36m(pid=28598)[0m     @     0x7ef85c3df8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28598)[0m     @     0x7ef859f0c4f5 at::Tensor::copy_()
[2m[36m(pid=28598)[0m     @     0x7ef85ffb779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28598)[0m     @     0x560ee1716fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28598)[0m     @     0x560ee1671b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28598)[0m     @     0x560ee16fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28598)[0m     @     0x560ee16fda20 method_vectorcall
[2m[36m(pid=28598)[0m     @     0x560ee1671bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28598)[0m     @     0x560ee16fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28598)[0m     @     0x560ee16fd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28598)[0m     @     0x560ee1672689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28598)[0m     @     0x560ee16fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28598)[0m     @     0x560ee16fd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28598)[0m     @     0x560ee1672689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28598)[0m     @     0x560ee16fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28598)[0m     @     0x560ee16fd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28598)[0m     @     0x560ee1672689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28598)[0m     @     0x560ee16fcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28598)[0m     @     0x560ee16fd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28598)[0m     @     0x560ee1672689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28627)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28627)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28627)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28627)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28627)[0m *** SIGSEGV (@0x0) received by PID 28627 (TID 0x7f01d0ab8700) from PID 0; stack trace: ***
[2m[36m(pid=28627)[0m     @     0x7f01d0691390 (unknown)
[2m[36m(pid=28627)[0m     @     0x7ed2d03e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28627)[0m     @     0x7ed2cfb0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28627)[0m     @     0x7ed2cfb118f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28627)[0m     @     0x7ed2cfb11ad3 at::TensorIterator::for_each()
[2m[36m(pid=28627)[0m     @     0x7ed2cfb11d91 at::TensorIterator::for_each()
[2m[36m(pid=28627)[0m     @     0x7ed2d03f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28630)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28630)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28630)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28630)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28630)[0m *** SIGSEGV (@0x0) received by PID 28630 (TID 0x7f6a0c737700) from PID 0; stack trace: ***
[2m[36m(pid=28630)[0m     @     0x7f6a0c310390 (unknown)
[2m[36m(pid=28630)[0m     @     0x7f3b0c290f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28630)[0m     @     0x7f3b0b9bb7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28630)[0m     @     0x7f3b0b9be8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28630)[0m     @     0x7f3b0b9bead3 at::TensorIterator::for_each()
[2m[36m(pid=28531)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28531)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28531)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28531)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28531)[0m *** SIGSEGV (@0x0) received by PID 28531 (TID 0x7f0092b68700) from PID 0; stack trace: ***
[2m[36m(pid=28531)[0m     @     0x7f0092741390 (unknown)
[2m[36m(pid=28531)[0m     @     0x7ed1924f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28531)[0m     @     0x7ed191c247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28531)[0m     @     0x7ed191c278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28613)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28613)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28613)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28613)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28613)[0m *** SIGSEGV (@0x0) received by PID 28613 (TID 0x7f043ffd5700) from PID 0; stack trace: ***
[2m[36m(pid=28613)[0m     @     0x7f043fbae390 (unknown)
[2m[36m(pid=28613)[0m     @     0x7ed53faf5f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28613)[0m     @     0x7ed53f2207db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28613)[0m     @     0x7ed53f2238f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28613)[0m     @     0x7ed53f223ad3 at::TensorIterator::for_each()
[2m[36m(pid=28613)[0m     @     0x7ed53f223d91 at::TensorIterator::for_each()
[2m[36m(pid=28613)[0m     @     0x7ed53fb06b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28613)[0m     @     0x7ed53fb29c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28623)[0m     @     0x7fba92e7fad3 at::TensorIterator::for_each()
[2m[36m(pid=28623)[0m     @     0x7fba92e7fd91 at::TensorIterator::for_each()
[2m[36m(pid=28623)[0m     @     0x7fba93762b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28623)[0m     @     0x7fba93785c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28623)[0m     @     0x7fba92c27a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28623)[0m     @     0x7fba92c25388 at::native::copy_impl()
[2m[36m(pid=28623)[0m     @     0x7fba92c275a4 at::native::copy_()
[2m[36m(pid=28623)[0m     @     0x7fba933124f5 at::Tensor::copy_()
[2m[36m(pid=28623)[0m     @     0x7fba957e58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28623)[0m     @     0x7fba933124f5 at::Tensor::copy_()
[2m[36m(pid=28623)[0m     @     0x7fba993bd79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28623)[0m     @     0x563af2de7fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28623)[0m     @     0x563af2d42b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28623)[0m     @     0x563af2dcdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28623)[0m     @     0x563af2dcea20 method_vectorcall
[2m[36m(pid=28623)[0m     @     0x563af2d42bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28623)[0m     @     0x563af2dcdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28623)[0m     @     0x563af2dce643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28623)[0m     @     0x563af2d43689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28623)[0m     @     0x563af2dcdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28623)[0m     @     0x563af2dce643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28623)[0m     @     0x563af2d43689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28623)[0m     @     0x563af2dcdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28623)[0m     @     0x563af2dce643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28623)[0m     @     0x563af2d43689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28623)[0m     @     0x563af2dcdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28623)[0m     @     0x563af2dce643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28623)[0m     @     0x563af2d43689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28624)[0m     @     0x7f110b539ad3 at::TensorIterator::for_each()
[2m[36m(pid=28624)[0m     @     0x7f110b539d91 at::TensorIterator::for_each()
[2m[36m(pid=28624)[0m     @     0x7f110be1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28624)[0m     @     0x7f110be3fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28624)[0m     @     0x7f110b2e1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28624)[0m     @     0x7f110b2df388 at::native::copy_impl()
[2m[36m(pid=28624)[0m     @     0x7f110b2e15a4 at::native::copy_()
[2m[36m(pid=28624)[0m     @     0x7f110b9cc4f5 at::Tensor::copy_()
[2m[36m(pid=28624)[0m     @     0x7f110de9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28624)[0m     @     0x7f110b9cc4f5 at::Tensor::copy_()
[2m[36m(pid=28624)[0m     @     0x7f1111a7779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28624)[0m     @     0x5583990eefd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28624)[0m     @     0x558399049b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28624)[0m     @     0x5583990d4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28624)[0m     @     0x5583990d5a20 method_vectorcall
[2m[36m(pid=28624)[0m     @     0x558399049bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28624)[0m     @     0x5583990d4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28624)[0m     @     0x5583990d5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28624)[0m     @     0x55839904a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28624)[0m     @     0x5583990d4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28624)[0m     @     0x5583990d5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28624)[0m     @     0x55839904a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28624)[0m     @     0x5583990d4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28624)[0m     @     0x5583990d5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28624)[0m     @     0x55839904a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28624)[0m     @     0x5583990d4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28624)[0m     @     0x5583990d5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28624)[0m     @     0x55839904a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28512)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28512)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28512)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28512)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28512)[0m *** SIGSEGV (@0x0) received by PID 28512 (TID 0x7f4b922df700) from PID 0; stack trace: ***
[2m[36m(pid=28512)[0m     @     0x7f4b91eb8390 (unknown)
[2m[36m(pid=28512)[0m     @     0x7f1c91d1df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28512)[0m     @     0x7f1c914487db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28512)[0m     @     0x7f1c9144b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28512)[0m     @     0x7f1c9144bad3 at::TensorIterator::for_each()
[2m[36m(pid=28547)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28547)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28547)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28547)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28547)[0m *** SIGSEGV (@0x0) received by PID 28547 (TID 0x7f1f439cd700) from PID 0; stack trace: ***
[2m[36m(pid=28547)[0m     @     0x7f1f435a6390 (unknown)
[2m[36m(pid=28547)[0m     @     0x7ef04354df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28547)[0m     @     0x7ef042c787db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28547)[0m     @     0x7ef042c7b8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28547)[0m     @     0x7ef042c7bad3 at::TensorIterator::for_each()
[2m[36m(pid=28547)[0m     @     0x7ef042c7bd91 at::TensorIterator::for_each()
[2m[36m(pid=28547)[0m     @     0x7ef04355eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28527)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28527)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28527)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28527)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28527)[0m *** SIGSEGV (@0x0) received by PID 28527 (TID 0x7fca2c8fa700) from PID 0; stack trace: ***
[2m[36m(pid=28527)[0m     @     0x7fca2c4d3390 (unknown)
[2m[36m(pid=28527)[0m     @     0x7f9b2c3e3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28527)[0m     @     0x7f9b2bb0e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28527)[0m     @     0x7f9b2bb118f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28527)[0m     @     0x7f9b2bb11ad3 at::TensorIterator::for_each()
[2m[36m(pid=28527)[0m     @     0x7f9b2bb11d91 at::TensorIterator::for_each()
[2m[36m(pid=28527)[0m     @     0x7f9b2c3f4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28539)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28539)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28539)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28539)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28539)[0m *** SIGSEGV (@0x0) received by PID 28539 (TID 0x7f2d82273700) from PID 0; stack trace: ***
[2m[36m(pid=28539)[0m     @     0x7f2d81e4c390 (unknown)
[2m[36m(pid=28539)[0m     @     0x7efe81d8df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28539)[0m     @     0x7efe814b87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28539)[0m     @     0x7efe814bb8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28539)[0m     @     0x7efe814bbad3 at::TensorIterator::for_each()
[2m[36m(pid=28539)[0m     @     0x7efe814bbd91 at::TensorIterator::for_each()
[2m[36m(pid=28577)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28577)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28577)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28577)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28577)[0m *** SIGSEGV (@0x0) received by PID 28577 (TID 0x7f44a1a70700) from PID 0; stack trace: ***
[2m[36m(pid=28577)[0m     @     0x7f44a1649390 (unknown)
[2m[36m(pid=28577)[0m     @     0x7f15a15e4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28577)[0m     @     0x7f15a0d0f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28577)[0m     @     0x7f15a0d128f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28577)[0m     @     0x7f15a0d12ad3 at::TensorIterator::for_each()
[2m[36m(pid=28577)[0m     @     0x7f15a0d12d91 at::TensorIterator::for_each()
[2m[36m(pid=28577)[0m     @     0x7f15a15f5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28577)[0m     @     0x7f15a1618c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28544)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28544)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28544)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28544)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28544)[0m *** SIGSEGV (@0x0) received by PID 28544 (TID 0x7effcdb69700) from PID 0; stack trace: ***
[2m[36m(pid=28544)[0m     @     0x7effcd742390 (unknown)
[2m[36m(pid=28544)[0m     @     0x7ed0cd6b4f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28544)[0m     @     0x7ed0ccddf7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28544)[0m     @     0x7ed0ccde28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28544)[0m     @     0x7ed0ccde2ad3 at::TensorIterator::for_each()
[2m[36m(pid=28543)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28543)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28543)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28543)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28543)[0m *** SIGSEGV (@0x0) received by PID 28543 (TID 0x7f1bbef9c700) from PID 0; stack trace: ***
[2m[36m(pid=28543)[0m     @     0x7f1bbeb75390 (unknown)
[2m[36m(pid=28543)[0m     @     0x7eecbe9ccf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28543)[0m     @     0x7eecbe0f77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28543)[0m     @     0x7eecbe0fa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28543)[0m     @     0x7eecbe0faad3 at::TensorIterator::for_each()
[2m[36m(pid=28523)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28523)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28523)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28523)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28523)[0m *** SIGSEGV (@0x0) received by PID 28523 (TID 0x7ffb138ea700) from PID 0; stack trace: ***
[2m[36m(pid=28523)[0m     @     0x7ffb134c3390 (unknown)
[2m[36m(pid=28523)[0m     @     0x7fcc1346af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28523)[0m     @     0x7fcc12b957db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28523)[0m     @     0x7fcc12b988f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28523)[0m     @     0x7fcc12b98ad3 at::TensorIterator::for_each()
[2m[36m(pid=28625)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28625)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28625)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28625)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28625)[0m *** SIGSEGV (@0x0) received by PID 28625 (TID 0x7fc5b6bf6700) from PID 0; stack trace: ***
[2m[36m(pid=28625)[0m     @     0x7fc5b67cf390 (unknown)
[2m[36m(pid=28625)[0m     @     0x7f96b657cf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28625)[0m     @     0x7f96b5ca77db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28625)[0m     @     0x7f96b5caa8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28625)[0m     @     0x7f96b5caaad3 at::TensorIterator::for_each()
[2m[36m(pid=28625)[0m     @     0x7f96b5caad91 at::TensorIterator::for_each()
[2m[36m(pid=28625)[0m     @     0x7f96b658db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28595)[0m     @     0x7f3eb7ad18f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28595)[0m     @     0x7f3eb7ad1ad3 at::TensorIterator::for_each()
[2m[36m(pid=28595)[0m     @     0x7f3eb7ad1d91 at::TensorIterator::for_each()
[2m[36m(pid=28595)[0m     @     0x7f3eb83b4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28595)[0m     @     0x7f3eb83d7c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28595)[0m     @     0x7f3eb7879a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28595)[0m     @     0x7f3eb7877388 at::native::copy_impl()
[2m[36m(pid=28595)[0m     @     0x7f3eb78795a4 at::native::copy_()
[2m[36m(pid=28595)[0m     @     0x7f3eb7f644f5 at::Tensor::copy_()
[2m[36m(pid=28516)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28516)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28516)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28516)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28516)[0m *** SIGSEGV (@0x0) received by PID 28516 (TID 0x7f1508df8700) from PID 0; stack trace: ***
[2m[36m(pid=28516)[0m     @     0x7f15089d1390 (unknown)
[2m[36m(pid=28516)[0m     @     0x7ee608774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28516)[0m     @     0x7ee607e9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28520)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28520)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28520)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28520)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28520)[0m *** SIGSEGV (@0x0) received by PID 28520 (TID 0x7f1536947700) from PID 0; stack trace: ***
[2m[36m(pid=28520)[0m     @     0x7f1536520390 (unknown)
[2m[36m(pid=28520)[0m     @     0x7ee636193f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28520)[0m     @     0x7ee6358be7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28520)[0m     @     0x7ee6358c18f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28601)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28601)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28601)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28601)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28601)[0m *** SIGSEGV (@0x0) received by PID 28601 (TID 0x7f4d57c5a700) from PID 0; stack trace: ***
[2m[36m(pid=28601)[0m     @     0x7f4d57833390 (unknown)
[2m[36m(pid=28601)[0m     @     0x7f1e577cef90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28601)[0m     @     0x7f1e56ef97db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28601)[0m     @     0x7f1e56efc8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28601)[0m     @     0x7f1e56efcad3 at::TensorIterator::for_each()
[2m[36m(pid=28589)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28589)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28589)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28589)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28589)[0m *** SIGSEGV (@0x0) received by PID 28589 (TID 0x7f80b09ec700) from PID 0; stack trace: ***
[2m[36m(pid=28589)[0m     @     0x7f80b05c5390 (unknown)
[2m[36m(pid=28589)[0m     @     0x7f51b0536f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28521)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28521)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28521)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28521)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28521)[0m *** SIGSEGV (@0x0) received by PID 28521 (TID 0x7ffb2e8df700) from PID 0; stack trace: ***
[2m[36m(pid=28521)[0m     @     0x7ffb2e4b8390 (unknown)
[2m[36m(pid=28521)[0m     @     0x7fcc2e34bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28521)[0m     @     0x7fcc2da767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28521)[0m     @     0x7fcc2da798f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28521)[0m     @     0x7fcc2da79ad3 at::TensorIterator::for_each()
[2m[36m(pid=28593)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28593)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28593)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28593)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28593)[0m *** SIGSEGV (@0x0) received by PID 28593 (TID 0x7f19654b6700) from PID 0; stack trace: ***
[2m[36m(pid=28593)[0m     @     0x7f196508f390 (unknown)
[2m[36m(pid=28593)[0m     @     0x7eea65023f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28645)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28645)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28645)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28645)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28645)[0m *** SIGSEGV (@0x0) received by PID 28645 (TID 0x7f07a1db3700) from PID 0; stack trace: ***
[2m[36m(pid=28645)[0m     @     0x7f07a198c390 (unknown)
[2m[36m(pid=28645)[0m     @     0x7ed8a17f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28645)[0m     @     0x7ed8a0f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28645)[0m     @     0x7ed8a0f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28645)[0m     @     0x7ed8a0f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=28639)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28639)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28639)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28639)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28639)[0m *** SIGSEGV (@0x0) received by PID 28639 (TID 0x7f7b8dac8700) from PID 0; stack trace: ***
[2m[36m(pid=28639)[0m     @     0x7f7b8d6a1390 (unknown)
[2m[36m(pid=28639)[0m     @     0x7f4c8d634f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28639)[0m     @     0x7f4c8cd5f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28639)[0m     @     0x7f4c8cd628f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28532)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28532)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28532)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28532)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28532)[0m *** SIGSEGV (@0x0) received by PID 28532 (TID 0x7f8670b0c700) from PID 0; stack trace: ***
[2m[36m(pid=28532)[0m     @     0x7f86706e5390 (unknown)
[2m[36m(pid=28532)[0m     @     0x7f5770563f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28532)[0m     @     0x7f576fc8e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28532)[0m     @     0x7f576fc918f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28532)[0m     @     0x7f576fc91ad3 at::TensorIterator::for_each()
[2m[36m(pid=28510)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28510)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28510)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28510)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28510)[0m *** SIGSEGV (@0x0) received by PID 28510 (TID 0x7fedb1bf3700) from PID 0; stack trace: ***
[2m[36m(pid=28510)[0m     @     0x7fedb17cc390 (unknown)
[2m[36m(pid=28510)[0m     @     0x7fbeb14dff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28510)[0m     @     0x7fbeb0c0a7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28510)[0m     @     0x7fbeb0c0d8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28510)[0m     @     0x7fbeb0c0dad3 at::TensorIterator::for_each()
[2m[36m(pid=28528)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28528)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28528)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28528)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28528)[0m *** SIGSEGV (@0x0) received by PID 28528 (TID 0x7f7b26f86700) from PID 0; stack trace: ***
[2m[36m(pid=28528)[0m     @     0x7f7b26b5f390 (unknown)
[2m[36m(pid=28528)[0m     @     0x7f4c26a21f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28528)[0m     @     0x7f4c2614c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28528)[0m     @     0x7f4c2614f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28649)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28649)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28649)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28649)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28649)[0m *** SIGSEGV (@0x0) received by PID 28649 (TID 0x7fae14b3e700) from PID 0; stack trace: ***
[2m[36m(pid=28649)[0m     @     0x7fae14717390 (unknown)
[2m[36m(pid=28649)[0m     @     0x7f7f14339f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28649)[0m     @     0x7f7f13a647db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28649)[0m     @     0x7f7f13a678f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28649)[0m     @     0x7f7f13a67ad3 at::TensorIterator::for_each()
[2m[36m(pid=28650)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28650)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28650)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28650)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28650)[0m *** SIGSEGV (@0x0) received by PID 28650 (TID 0x7f44a418e700) from PID 0; stack trace: ***
[2m[36m(pid=28650)[0m     @     0x7f44a3d67390 (unknown)
[2m[36m(pid=28650)[0m     @     0x7f15a3cf9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28650)[0m     @     0x7f15a34247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28650)[0m     @     0x7f15a34278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28594)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28594)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28594)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28594)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28594)[0m *** SIGSEGV (@0x0) received by PID 28594 (TID 0x7f43e8ce8700) from PID 0; stack trace: ***
[2m[36m(pid=28594)[0m     @     0x7f43e88c1390 (unknown)
[2m[36m(pid=28594)[0m     @     0x7f14e8774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28594)[0m     @     0x7f14e7e9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28594)[0m     @     0x7f14e7ea28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28513)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28513)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28513)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28513)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28513)[0m *** SIGSEGV (@0x0) received by PID 28513 (TID 0x7f98a1fbe700) from PID 0; stack trace: ***
[2m[36m(pid=28513)[0m     @     0x7f98a1b97390 (unknown)
[2m[36m(pid=28513)[0m     @     0x7f69a1a01f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28513)[0m     @     0x7f69a112c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28513)[0m     @     0x7f69a112f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28513)[0m     @     0x7f69a112fad3 at::TensorIterator::for_each()
[2m[36m(pid=28513)[0m     @     0x7f69a112fd91 at::TensorIterator::for_each()
[2m[36m(pid=28513)[0m     @     0x7f69a1a12b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28513)[0m     @     0x7f69a1a35c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28590)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28590)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28590)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28590)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28590)[0m *** SIGSEGV (@0x0) received by PID 28590 (TID 0x7fb174dde700) from PID 0; stack trace: ***
[2m[36m(pid=28590)[0m     @     0x7fb1749b7390 (unknown)
[2m[36m(pid=28590)[0m     @     0x7f8274774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28590)[0m     @     0x7f8273e9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28590)[0m     @     0x7f8273ea28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28519)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28519)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28519)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28519)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28519)[0m *** SIGSEGV (@0x0) received by PID 28519 (TID 0x7f1c07cf2700) from PID 0; stack trace: ***
[2m[36m(pid=28519)[0m     @     0x7f1c078cb390 (unknown)
[2m[36m(pid=28519)[0m     @     0x7eed06c15f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28519)[0m     @     0x7eed063407db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28519)[0m     @     0x7eed063438f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28519)[0m     @     0x7eed06343ad3 at::TensorIterator::for_each()
[2m[36m(pid=28519)[0m     @     0x7eed06343d91 at::TensorIterator::for_each()
[2m[36m(pid=28519)[0m     @     0x7eed06c26b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28615)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28615)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28615)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28615)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28615)[0m *** SIGSEGV (@0x0) received by PID 28615 (TID 0x7f0f5fa22700) from PID 0; stack trace: ***
[2m[36m(pid=28615)[0m     @     0x7f0f5f5fb390 (unknown)
[2m[36m(pid=28615)[0m     @     0x7ee05f58df90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28615)[0m     @     0x7ee05ecb87db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28615)[0m     @     0x7ee05ecbb8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28615)[0m     @     0x7ee05ecbbad3 at::TensorIterator::for_each()
[2m[36m(pid=28515)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28515)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28515)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28515)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28515)[0m *** SIGSEGV (@0x0) received by PID 28515 (TID 0x7f2432c01700) from PID 0; stack trace: ***
[2m[36m(pid=28515)[0m     @     0x7f24327da390 (unknown)
[2m[36m(pid=28515)[0m     @     0x7ef5324f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28515)[0m     @     0x7ef531c247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28515)[0m     @     0x7ef531c278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28586)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28586)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28586)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28586)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28586)[0m *** SIGSEGV (@0x0) received by PID 28586 (TID 0x7f9f6744a700) from PID 0; stack trace: ***
[2m[36m(pid=28586)[0m     @     0x7f9f67023390 (unknown)
[2m[36m(pid=28586)[0m     @     0x7f7066faff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28586)[0m     @     0x7f70666da7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28586)[0m     @     0x7f70666dd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28586)[0m     @     0x7f70666ddad3 at::TensorIterator::for_each()
[2m[36m(pid=28586)[0m     @     0x7f70666ddd91 at::TensorIterator::for_each()
[2m[36m(pid=28599)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28599)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28599)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28599)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28599)[0m *** SIGSEGV (@0x0) received by PID 28599 (TID 0x7ff8775b4700) from PID 0; stack trace: ***
[2m[36m(pid=28599)[0m     @     0x7ff87718d390 (unknown)
[2m[36m(pid=28599)[0m     @     0x7fc977124f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28599)[0m     @     0x7fc97684f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28599)[0m     @     0x7fc9768528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28599)[0m     @     0x7fc976852ad3 at::TensorIterator::for_each()
[2m[36m(pid=28599)[0m     @     0x7fc976852d91 at::TensorIterator::for_each()
[2m[36m(pid=28599)[0m     @     0x7fc977135b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28599)[0m     @     0x7fc977158c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28548)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28548)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28548)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28548)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28548)[0m *** SIGSEGV (@0x0) received by PID 28548 (TID 0x7f34c65e7700) from PID 0; stack trace: ***
[2m[36m(pid=28548)[0m     @     0x7f34c61c0390 (unknown)
[2m[36m(pid=28548)[0m     @     0x7f05c613af90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28548)[0m     @     0x7f05c58657db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28548)[0m     @     0x7f05c58688f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28525)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28525)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28525)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28525)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28525)[0m *** SIGSEGV (@0x0) received by PID 28525 (TID 0x7f88f35c7700) from PID 0; stack trace: ***
[2m[36m(pid=28525)[0m     @     0x7f88f31a0390 (unknown)
[2m[36m(pid=28525)[0m     @     0x7f59f30d6f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28525)[0m     @     0x7f59f28017db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28525)[0m     @     0x7f59f28048f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28525)[0m     @     0x7f59f2804ad3 at::TensorIterator::for_each()
[2m[36m(pid=28525)[0m     @     0x7f59f2804d91 at::TensorIterator::for_each()
[2m[36m(pid=28525)[0m     @     0x7f59f30e7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28537)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28537)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28537)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28537)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28537)[0m *** SIGSEGV (@0x0) received by PID 28537 (TID 0x7ff588772700) from PID 0; stack trace: ***
[2m[36m(pid=28537)[0m     @     0x7ff58834b390 (unknown)
[2m[36m(pid=28537)[0m     @     0x7fc688136f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28537)[0m     @     0x7fc6878617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28537)[0m     @     0x7fc6878648f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28537)[0m     @     0x7fc687864ad3 at::TensorIterator::for_each()
[2m[36m(pid=28537)[0m     @     0x7fc687864d91 at::TensorIterator::for_each()
[2m[36m(pid=28537)[0m     @     0x7fc688147b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28580)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28580)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28580)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28580)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28580)[0m *** SIGSEGV (@0x0) received by PID 28580 (TID 0x7f776e3bf700) from PID 0; stack trace: ***
[2m[36m(pid=28580)[0m     @     0x7f776df98390 (unknown)
[2m[36m(pid=28580)[0m     @     0x7f486de24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28580)[0m     @     0x7f486d54f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28580)[0m     @     0x7f486d5528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28580)[0m     @     0x7f486d552ad3 at::TensorIterator::for_each()
[2m[36m(pid=28580)[0m     @     0x7f486d552d91 at::TensorIterator::for_each()
[2m[36m(pid=28580)[0m     @     0x7f486de35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28596)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28596)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28596)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28596)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28596)[0m *** SIGSEGV (@0x0) received by PID 28596 (TID 0x7f3301aef700) from PID 0; stack trace: ***
[2m[36m(pid=28596)[0m     @     0x7f33016c8390 (unknown)
[2m[36m(pid=28596)[0m     @     0x7f0401674f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28596)[0m     @     0x7f0400d9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28596)[0m     @     0x7f0400da28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28596)[0m     @     0x7f0400da2ad3 at::TensorIterator::for_each()
[2m[36m(pid=28514)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28514)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28514)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28514)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28514)[0m *** SIGSEGV (@0x0) received by PID 28514 (TID 0x7f9e9a31d700) from PID 0; stack trace: ***
[2m[36m(pid=28514)[0m     @     0x7f9e99ef6390 (unknown)
[2m[36m(pid=28514)[0m     @     0x7f6f99e24f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28514)[0m     @     0x7f6f9954f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28514)[0m     @     0x7f6f995528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28514)[0m     @     0x7f6f99552ad3 at::TensorIterator::for_each()
[2m[36m(pid=28514)[0m     @     0x7f6f99552d91 at::TensorIterator::for_each()
[2m[36m(pid=28588)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28588)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28588)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28588)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28588)[0m *** SIGSEGV (@0x0) received by PID 28588 (TID 0x7f2d3fe78700) from PID 0; stack trace: ***
[2m[36m(pid=28588)[0m     @     0x7f2d3fa51390 (unknown)
[2m[36m(pid=28588)[0m     @     0x7efe3f751f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28588)[0m     @     0x7efe3ee7c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28588)[0m     @     0x7efe3ee7f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28588)[0m     @     0x7efe3ee7fad3 at::TensorIterator::for_each()
[2m[36m(pid=28581)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28581)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28581)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28581)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28581)[0m *** SIGSEGV (@0x0) received by PID 28581 (TID 0x7f5aaa853700) from PID 0; stack trace: ***
[2m[36m(pid=28581)[0m     @     0x7f5aaa42c390 (unknown)
[2m[36m(pid=28581)[0m     @     0x7f2baa34bf90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28581)[0m     @     0x7f2ba9a767db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28581)[0m     @     0x7f2ba9a798f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28581)[0m     @     0x7f2ba9a79ad3 at::TensorIterator::for_each()
[2m[36m(pid=28581)[0m     @     0x7f2ba9a79d91 at::TensorIterator::for_each()
[2m[36m(pid=28581)[0m     @     0x7f2baa35cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28581)[0m     @     0x7f2baa37fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28579)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28579)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28579)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28579)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28579)[0m *** SIGSEGV (@0x0) received by PID 28579 (TID 0x7f729f5bd700) from PID 0; stack trace: ***
[2m[36m(pid=28579)[0m     @     0x7f729f196390 (unknown)
[2m[36m(pid=28579)[0m     @     0x7f439f124f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28579)[0m     @     0x7f439e84f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28579)[0m     @     0x7f439e8528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28579)[0m     @     0x7f439e852ad3 at::TensorIterator::for_each()
[2m[36m(pid=28524)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28524)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28524)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28524)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28524)[0m *** SIGSEGV (@0x0) received by PID 28524 (TID 0x7f1dfbe63700) from PID 0; stack trace: ***
[2m[36m(pid=28524)[0m     @     0x7f1dfba3c390 (unknown)
[2m[36m(pid=28524)[0m     @     0x7eeefb751f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28524)[0m     @     0x7eeefae7c7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28524)[0m     @     0x7eeefae7f8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28524)[0m     @     0x7eeefae7fad3 at::TensorIterator::for_each()
[2m[36m(pid=28524)[0m     @     0x7eeefae7fd91 at::TensorIterator::for_each()
[2m[36m(pid=28524)[0m     @     0x7eeefb762b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28574)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28574)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28574)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28574)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28574)[0m *** SIGSEGV (@0x0) received by PID 28574 (TID 0x7f124d91f700) from PID 0; stack trace: ***
[2m[36m(pid=28574)[0m     @     0x7f124d4f8390 (unknown)
[2m[36m(pid=28574)[0m     @     0x7ee34d4a3f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28574)[0m     @     0x7ee34cbce7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28574)[0m     @     0x7ee34cbd18f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28611)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28611)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28611)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28611)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28611)[0m *** SIGSEGV (@0x0) received by PID 28611 (TID 0x7f4ad7538700) from PID 0; stack trace: ***
[2m[36m(pid=28611)[0m     @     0x7f4ad7111390 (unknown)
[2m[36m(pid=28611)[0m     @     0x7f1bd70b7f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28611)[0m     @     0x7f1bd67e27db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28611)[0m     @     0x7f1bd67e58f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28611)[0m     @     0x7f1bd67e5ad3 at::TensorIterator::for_each()
[2m[36m(pid=28611)[0m     @     0x7f1bd67e5d91 at::TensorIterator::for_each()
[2m[36m(pid=28611)[0m     @     0x7f1bd70c8b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28605)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28605)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28605)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28605)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28605)[0m *** SIGSEGV (@0x0) received by PID 28605 (TID 0x7fc682029700) from PID 0; stack trace: ***
[2m[36m(pid=28605)[0m     @     0x7fc681c02390 (unknown)
[2m[36m(pid=28605)[0m     @     0x7f9781b9ff90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28605)[0m     @     0x7f97812ca7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28605)[0m     @     0x7f97812cd8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28608)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28608)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28608)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28608)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28608)[0m *** SIGSEGV (@0x0) received by PID 28608 (TID 0x7fbb64cdf700) from PID 0; stack trace: ***
[2m[36m(pid=28608)[0m     @     0x7fbb648b8390 (unknown)
[2m[36m(pid=28608)[0m     @     0x7f8c64774f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28608)[0m     @     0x7f8c63e9f7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28608)[0m     @     0x7f8c63ea28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28608)[0m     @     0x7f8c63ea2ad3 at::TensorIterator::for_each()
[2m[36m(pid=28608)[0m     @     0x7f8c63ea2d91 at::TensorIterator::for_each()
[2m[36m(pid=28517)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28517)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28517)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28517)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28517)[0m *** SIGSEGV (@0x0) received by PID 28517 (TID 0x7fa809ccd700) from PID 0; stack trace: ***
[2m[36m(pid=28517)[0m     @     0x7fa8098a6390 (unknown)
[2m[36m(pid=28517)[0m     @     0x7f79097f9f90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28517)[0m     @     0x7f7908f247db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28517)[0m     @     0x7f7908f278f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28517)[0m     @     0x7f7908f27ad3 at::TensorIterator::for_each()
[2m[36m(pid=28517)[0m     @     0x7f7908f27d91 at::TensorIterator::for_each()
[2m[36m(pid=28575)[0m /root/miniconda3/lib/python3.8/site-packages/ray/rllib/utils/torch_ops.py:65: UserWarning: The given NumPy array is not writeable, and PyTorch does not support non-writeable tensors. This means you can write to the underlying (supposedly non-writeable) NumPy array using the tensor. You may want to copy the array to protect its data or make it writeable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1595629401015/work/torch/csrc/utils/tensor_numpy.cpp:141.)
[2m[36m(pid=28575)[0m   tensor = torch.from_numpy(np.asarray(item))
[2m[36m(pid=28575)[0m *** Aborted at 1604572621 (unix time) try "date -d @1604572621" if you are using GNU date ***
[2m[36m(pid=28575)[0m PC: @                0x0 (unknown)
[2m[36m(pid=28575)[0m *** SIGSEGV (@0x0) received by PID 28575 (TID 0x7f7fa8768700) from PID 0; stack trace: ***
[2m[36m(pid=28575)[0m     @     0x7f7fa8341390 (unknown)
[2m[36m(pid=28575)[0m     @     0x7f50a82def90 _ZN3c1012function_refIFvPPcPKllEE11callback_fnIZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNSA_L11copy_kernelERNS8_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNSA_L11copy_kernelESD_bENKSE_clEvENKSF_clEvEUlNS8_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvSD_OT0_OT1_EUlS2_S4_lE0_EEvlS2_S4_l
[2m[36m(pid=28575)[0m     @     0x7f50a7a097db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28575)[0m     @     0x7f50a7a0c8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28575)[0m     @     0x7f50a7a0cad3 at::TensorIterator::for_each()
[2m[36m(pid=28575)[0m     @     0x7f50a7a0cd91 at::TensorIterator::for_each()
[2m[36m(pid=28575)[0m     @     0x7f50a82efb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28575)[0m     @     0x7f50a8312c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28587)[0m     @     0x7f8caa3438f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28587)[0m     @     0x7f8caa343ad3 at::TensorIterator::for_each()
[2m[36m(pid=28534)[0m     @     0x7ef36f5e4ad3 at::TensorIterator::for_each()
[2m[36m(pid=28534)[0m     @     0x7ef36f5e4d91 at::TensorIterator::for_each()
[2m[36m(pid=28540)[0m     @     0x7efd2a3fdad3 at::TensorIterator::for_each()
[2m[36m(pid=28540)[0m     @     0x7efd2a3fdd91 at::TensorIterator::for_each()
[2m[36m(pid=28540)[0m     @     0x7efd2ace0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28540)[0m     @     0x7efd2ad03c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28617)[0m     @     0x7efa06db4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28617)[0m     @     0x7efa06db2388 at::native::copy_impl()
[2m[36m(pid=28617)[0m     @     0x7efa06db45a4 at::native::copy_()
[2m[36m(pid=28604)[0m     @     0x7f64f81b54f5 at::Tensor::copy_()
[2m[36m(pid=28604)[0m     @     0x7f64fa6888de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28604)[0m     @     0x7f64f81b54f5 at::Tensor::copy_()
[2m[36m(pid=28604)[0m     @     0x7f64fe26079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28604)[0m     @     0x560ce9aeffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28604)[0m     @     0x560ce9a4ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28604)[0m     @     0x560ce9ad5baf _PyEval_EvalCodeWithName
[2m[36m(pid=28604)[0m     @     0x560ce9ad6a20 method_vectorcall
[2m[36m(pid=28604)[0m     @     0x560ce9a4abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28604)[0m     @     0x560ce9ad5baf _PyEval_EvalCodeWithName
[2m[36m(pid=28604)[0m     @     0x560ce9ad6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28604)[0m     @     0x560ce9a4b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28604)[0m     @     0x560ce9ad5baf _PyEval_EvalCodeWithName
[2m[36m(pid=28604)[0m     @     0x560ce9ad6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28604)[0m     @     0x560ce9a4b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28604)[0m     @     0x560ce9ad5baf _PyEval_EvalCodeWithName
[2m[36m(pid=28602)[0m     @     0x7f62999e54f5 at::Tensor::copy_()
[2m[36m(pid=28602)[0m     @     0x7f629fa9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28602)[0m     @     0x5602ade60fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28602)[0m     @     0x5602addbbb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28602)[0m     @     0x5602ade46baf _PyEval_EvalCodeWithName
[2m[36m(pid=28602)[0m     @     0x5602ade47a20 method_vectorcall
[2m[36m(pid=28602)[0m     @     0x5602addbbbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28602)[0m     @     0x5602ade46baf _PyEval_EvalCodeWithName
[2m[36m(pid=28602)[0m     @     0x5602ade47643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28602)[0m     @     0x5602addbc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28602)[0m     @     0x5602ade46baf _PyEval_EvalCodeWithName
[2m[36m(pid=28602)[0m     @     0x5602ade47643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28602)[0m     @     0x5602addbc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28602)[0m     @     0x5602ade46baf _PyEval_EvalCodeWithName
[2m[36m(pid=28602)[0m     @     0x5602ade47643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28602)[0m     @     0x5602addbc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28602)[0m     @     0x5602ade46baf _PyEval_EvalCodeWithName
[2m[36m(pid=28602)[0m     @     0x5602ade47643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28602)[0m     @     0x5602addbc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28643)[0m     @     0x55dda8fad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28634)[0m     @     0x7fbc3642a8f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28634)[0m     @     0x7fbc3642aad3 at::TensorIterator::for_each()
[2m[36m(pid=28592)[0m     @     0x7f5efd5528f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28592)[0m     @     0x7f5efd552ad3 at::TensorIterator::for_each()
[2m[36m(pid=28632)[0m     @     0x7ee1754d2d91 at::TensorIterator::for_each()
[2m[36m(pid=28632)[0m     @     0x7ee175db5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28632)[0m     @     0x7ee175dd8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28632)[0m     @     0x7ee17527aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28632)[0m     @     0x7ee175278388 at::native::copy_impl()
[2m[36m(pid=28597)[0m     @     0x55781f1cabaf _PyEval_EvalCodeWithName
[2m[36m(pid=28597)[0m     @     0x55781f1cb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28597)[0m     @     0x55781f140689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28597)[0m     @     0x55781f1cabaf _PyEval_EvalCodeWithName
[2m[36m(pid=28597)[0m     @     0x55781f1cb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28597)[0m     @     0x55781f140689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28551)[0m     @     0x7f8678e2fd91 at::TensorIterator::for_each()
[2m[36m(pid=28551)[0m     @     0x7f8679712b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28551)[0m     @     0x7f8679735c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28591)[0m     @     0x7ee4d346579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28591)[0m     @     0x55f453f01fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28591)[0m     @     0x55f453e5cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28591)[0m     @     0x55f453ee7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28591)[0m     @     0x55f453ee8a20 method_vectorcall
[2m[36m(pid=28591)[0m     @     0x55f453e5cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28591)[0m     @     0x55f453ee7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28591)[0m     @     0x55f453ee8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28591)[0m     @     0x55f453e5d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28591)[0m     @     0x55f453ee7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28591)[0m     @     0x55f453ee8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28591)[0m     @     0x55f453e5d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28591)[0m     @     0x55f453ee7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28591)[0m     @     0x55f453ee8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28591)[0m     @     0x55f453e5d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28591)[0m     @     0x55f453ee7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28591)[0m     @     0x55f453ee8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28591)[0m     @     0x55f453e5d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28620)[0m     @     0x7f605b1b6ad3 at::TensorIterator::for_each()
[2m[36m(pid=28620)[0m     @     0x7f605b1b6d91 at::TensorIterator::for_each()
[2m[36m(pid=28620)[0m     @     0x7f605ba99b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28620)[0m     @     0x7f605babcc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28600)[0m     @     0x55951671dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28600)[0m     @     0x55951671ea20 method_vectorcall
[2m[36m(pid=28600)[0m     @     0x559516692bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28600)[0m     @     0x55951671dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28600)[0m     @     0x55951671e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28600)[0m     @     0x559516693689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28600)[0m     @     0x55951671dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28600)[0m     @     0x55951671e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28600)[0m     @     0x559516693689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28600)[0m     @     0x55951671dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28600)[0m     @     0x55951671e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28600)[0m     @     0x559516693689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28600)[0m     @     0x55951671dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28600)[0m     @     0x55951671e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28600)[0m     @     0x559516693689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28529)[0m     @     0x7f7ff02ffad3 at::TensorIterator::for_each()
[2m[36m(pid=28529)[0m     @     0x7f7ff02ffd91 at::TensorIterator::for_each()
[2m[36m(pid=28529)[0m     @     0x7f7ff0be2b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28529)[0m     @     0x7f7ff0c05c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28511)[0m     @     0x7f2c4106ed91 at::TensorIterator::for_each()
[2m[36m(pid=28511)[0m     @     0x7f2c41951b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28511)[0m     @     0x7f2c41974c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28637)[0m     @     0x7fc745a79ad3 at::TensorIterator::for_each()
[2m[36m(pid=28637)[0m     @     0x7fc745a79d91 at::TensorIterator::for_each()
[2m[36m(pid=28637)[0m     @     0x7fc74635cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28637)[0m     @     0x7fc74637fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28628)[0m     @     0x7f1775c27d91 at::TensorIterator::for_each()
[2m[36m(pid=28628)[0m     @     0x7f177650ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28628)[0m     @     0x7f177652dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28628)[0m     @     0x7f17759cfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28628)[0m     @     0x7f17759cd388 at::native::copy_impl()
[2m[36m(pid=28530)[0m     @     0x556e01552baf _PyEval_EvalCodeWithName
[2m[36m(pid=28530)[0m     @     0x556e01553643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28530)[0m     @     0x556e014c8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28530)[0m     @     0x556e01552baf _PyEval_EvalCodeWithName
[2m[36m(pid=28530)[0m     @     0x556e01553643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28530)[0m     @     0x556e014c8689 _PyEval_EvalFrameDefault.cold.2792
2020-11-05 10:37:01,531	WARNING worker.py:945 -- The driver may not be able to keep up with the stdout/stderr of the workers. To avoid forwarding logs to the driver, use 'ray.init(log_to_driver=False)'.
[2m[36m(pid=28526)[0m     @     0x7f4a1b539d91 at::TensorIterator::for_each()
[2m[36m(pid=28526)[0m     @     0x7f4a1be1cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28526)[0m     @     0x7f4a1be3fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28526)[0m     @     0x7f4a1b2e1a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28629)[0m     @     0x562365912b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28629)[0m     @     0x56236599dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28629)[0m     @     0x56236599ea20 method_vectorcall
[2m[36m(pid=28629)[0m     @     0x562365912bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28629)[0m     @     0x56236599dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28629)[0m     @     0x56236599e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28629)[0m     @     0x562365913689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28629)[0m     @     0x56236599dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28629)[0m     @     0x56236599e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28629)[0m     @     0x562365913689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28629)[0m     @     0x56236599dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28629)[0m     @     0x56236599e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28629)[0m     @     0x562365913689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28629)[0m     @     0x56236599dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28629)[0m     @     0x56236599e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28629)[0m     @     0x562365913689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28627)[0m     @     0x7ed2d0417c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28627)[0m     @     0x7ed2cf8b9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28627)[0m     @     0x7ed2cf8b7388 at::native::copy_impl()
[2m[36m(pid=28627)[0m     @     0x7ed2cf8b95a4 at::native::copy_()
[2m[36m(pid=28630)[0m     @     0x7f3b0b9bed91 at::TensorIterator::for_each()
[2m[36m(pid=28630)[0m     @     0x7f3b0c2a1b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28531)[0m     @     0x7ed191c27ad3 at::TensorIterator::for_each()
[2m[36m(pid=28531)[0m     @     0x7ed191c27d91 at::TensorIterator::for_each()
[2m[36m(pid=28531)[0m     @     0x7ed19250ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28531)[0m     @     0x7ed19252dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28613)[0m     @     0x7ed53efcba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28613)[0m     @     0x7ed53efc9388 at::native::copy_impl()
[2m[36m(pid=28613)[0m     @     0x7ed53efcb5a4 at::native::copy_()
[2m[36m(pid=28512)[0m     @     0x7f1c9144bd91 at::TensorIterator::for_each()
[2m[36m(pid=28512)[0m     @     0x7f1c91d2eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28512)[0m     @     0x7f1c91d51c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28512)[0m     @     0x7f1c911f3a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28512)[0m     @     0x7f1c911f1388 at::native::copy_impl()
[2m[36m(pid=28512)[0m     @     0x7f1c911f35a4 at::native::copy_()
[2m[36m(pid=28547)[0m     @     0x7ef043581c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28547)[0m     @     0x7ef042a23a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28547)[0m     @     0x7ef042a21388 at::native::copy_impl()
[2m[36m(pid=28547)[0m     @     0x7ef042a235a4 at::native::copy_()
[2m[36m(pid=28527)[0m     @     0x7f9b2c417c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28527)[0m     @     0x7f9b2b8b9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28527)[0m     @     0x7f9b2b8b7388 at::native::copy_impl()
[2m[36m(pid=28527)[0m     @     0x7f9b2b8b95a4 at::native::copy_()
[2m[36m(pid=28527)[0m     @     0x7f9b2bfa44f5 at::Tensor::copy_()
[2m[36m(pid=28539)[0m     @     0x7efe81d9eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28539)[0m     @     0x7efe81dc1c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28539)[0m     @     0x7efe81263a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28539)[0m     @     0x7efe81261388 at::native::copy_impl()
[2m[36m(pid=28539)[0m     @     0x7efe812635a4 at::native::copy_()
[2m[36m(pid=28577)[0m     @     0x7f15a0abaa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28577)[0m     @     0x7f15a0ab8388 at::native::copy_impl()
[2m[36m(pid=28577)[0m     @     0x7f15a0aba5a4 at::native::copy_()
[2m[36m(pid=28577)[0m     @     0x7f15a11a54f5 at::Tensor::copy_()
[2m[36m(pid=28544)[0m     @     0x7ed0ccde2d91 at::TensorIterator::for_each()
[2m[36m(pid=28544)[0m     @     0x7ed0cd6c5b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28544)[0m     @     0x7ed0cd6e8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28544)[0m     @     0x7ed0ccb8aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28544)[0m     @     0x7ed0ccb88388 at::native::copy_impl()
[2m[36m(pid=28543)[0m     @     0x7eecbe0fad91 at::TensorIterator::for_each()
[2m[36m(pid=28543)[0m     @     0x7eecbe9ddb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28543)[0m     @     0x7eecbea00c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28543)[0m     @     0x7eecbdea2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28543)[0m     @     0x7eecbdea0388 at::native::copy_impl()
[2m[36m(pid=28543)[0m     @     0x7eecbdea25a4 at::native::copy_()
[2m[36m(pid=28523)[0m     @     0x7fcc12b98d91 at::TensorIterator::for_each()
[2m[36m(pid=28523)[0m     @     0x7fcc1347bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28523)[0m     @     0x7fcc1349ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28523)[0m     @     0x7fcc12940a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28523)[0m     @     0x7fcc1293e388 at::native::copy_impl()
[2m[36m(pid=28625)[0m     @     0x7f96b65b0c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28625)[0m     @     0x7f96b5a52a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28625)[0m     @     0x7f96b5a50388 at::native::copy_impl()
[2m[36m(pid=28625)[0m     @     0x7f96b5a525a4 at::native::copy_()
[2m[36m(pid=28625)[0m     @     0x7f96b613d4f5 at::Tensor::copy_()
[2m[36m(pid=28595)[0m     @     0x7f3eba4378de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28595)[0m     @     0x7f3eb7f644f5 at::Tensor::copy_()
[2m[36m(pid=28595)[0m     @     0x7f3ebe00f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28595)[0m     @     0x55abb5ec8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28595)[0m     @     0x55abb5e23b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28595)[0m     @     0x55abb5eaebaf _PyEval_EvalCodeWithName
[2m[36m(pid=28595)[0m     @     0x55abb5eafa20 method_vectorcall
[2m[36m(pid=28595)[0m     @     0x55abb5e23bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28595)[0m     @     0x55abb5eaebaf _PyEval_EvalCodeWithName
[2m[36m(pid=28595)[0m     @     0x55abb5eaf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28595)[0m     @     0x55abb5e24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28595)[0m     @     0x55abb5eaebaf _PyEval_EvalCodeWithName
[2m[36m(pid=28595)[0m     @     0x55abb5eaf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28595)[0m     @     0x55abb5e24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28595)[0m     @     0x55abb5eaebaf _PyEval_EvalCodeWithName
[2m[36m(pid=28595)[0m     @     0x55abb5eaf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28595)[0m     @     0x55abb5e24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28595)[0m     @     0x55abb5eaebaf _PyEval_EvalCodeWithName
[2m[36m(pid=28595)[0m     @     0x55abb5eaf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28595)[0m     @     0x55abb5e24689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28516)[0m     @     0x7ee607ea28f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28516)[0m     @     0x7ee607ea2ad3 at::TensorIterator::for_each()
[2m[36m(pid=28516)[0m     @     0x7ee607ea2d91 at::TensorIterator::for_each()
[2m[36m(pid=28516)[0m     @     0x7ee608785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28520)[0m     @     0x7ee6358c1ad3 at::TensorIterator::for_each()
[2m[36m(pid=28520)[0m     @     0x7ee6358c1d91 at::TensorIterator::for_each()
[2m[36m(pid=28520)[0m     @     0x7ee6361a4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28520)[0m     @     0x7ee6361c7c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28601)[0m     @     0x7f1e56efcd91 at::TensorIterator::for_each()
[2m[36m(pid=28601)[0m     @     0x7f1e577dfb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28601)[0m     @     0x7f1e57802c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28601)[0m     @     0x7f1e56ca4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28601)[0m     @     0x7f1e56ca2388 at::native::copy_impl()
[2m[36m(pid=28589)[0m     @     0x7f51afc617db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28589)[0m     @     0x7f51afc648f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28589)[0m     @     0x7f51afc64ad3 at::TensorIterator::for_each()
[2m[36m(pid=28521)[0m     @     0x7fcc2da79d91 at::TensorIterator::for_each()
[2m[36m(pid=28521)[0m     @     0x7fcc2e35cb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28521)[0m     @     0x7fcc2e37fc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28521)[0m     @     0x7fcc2d821a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28521)[0m     @     0x7fcc2d81f388 at::native::copy_impl()
[2m[36m(pid=28593)[0m     @     0x7eea6474e7db _ZN3c1012function_refIFvPPcPKlllEE11callback_fnIZN2at14TensorIterator8for_eachENS0_IFvS2_S4_lEEElEUlS2_S4_llE_EEvlS2_S4_ll
[2m[36m(pid=28593)[0m     @     0x7eea647518f7 at::TensorIterator::serial_for_each()
[2m[36m(pid=28593)[0m     @     0x7eea64751ad3 at::TensorIterator::for_each()
[2m[36m(pid=28593)[0m     @     0x7eea64751d91 at::TensorIterator::for_each()
[2m[36m(pid=28645)[0m     @     0x7ed8a0f27d91 at::TensorIterator::for_each()
[2m[36m(pid=28645)[0m     @     0x7ed8a180ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28645)[0m     @     0x7ed8a182dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28645)[0m     @     0x7ed8a0ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28645)[0m     @     0x7ed8a0ccd388 at::native::copy_impl()
[2m[36m(pid=28645)[0m     @     0x7ed8a0ccf5a4 at::native::copy_()
[2m[36m(pid=28639)[0m     @     0x7f4c8cd62ad3 at::TensorIterator::for_each()
[2m[36m(pid=28639)[0m     @     0x7f4c8cd62d91 at::TensorIterator::for_each()
[2m[36m(pid=28532)[0m     @     0x7f576fc91d91 at::TensorIterator::for_each()
[2m[36m(pid=28532)[0m     @     0x7f5770574b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28532)[0m     @     0x7f5770597c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28532)[0m     @     0x7f576fa39a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28532)[0m     @     0x7f576fa37388 at::native::copy_impl()
[2m[36m(pid=28532)[0m     @     0x7f576fa395a4 at::native::copy_()
[2m[36m(pid=28510)[0m     @     0x7fbeb0c0dd91 at::TensorIterator::for_each()
[2m[36m(pid=28510)[0m     @     0x7fbeb14f0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28510)[0m     @     0x7fbeb1513c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28510)[0m     @     0x7fbeb09b5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28510)[0m     @     0x7fbeb09b3388 at::native::copy_impl()
[2m[36m(pid=28528)[0m     @     0x7f4c2614fad3 at::TensorIterator::for_each()
[2m[36m(pid=28528)[0m     @     0x7f4c2614fd91 at::TensorIterator::for_each()
[2m[36m(pid=28528)[0m     @     0x7f4c26a32b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28649)[0m     @     0x7f7f13a67d91 at::TensorIterator::for_each()
[2m[36m(pid=28649)[0m     @     0x7f7f1434ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28649)[0m     @     0x7f7f1436dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28649)[0m     @     0x7f7f1380fa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28649)[0m     @     0x7f7f1380d388 at::native::copy_impl()
[2m[36m(pid=28650)[0m     @     0x7f15a3427ad3 at::TensorIterator::for_each()
[2m[36m(pid=28650)[0m     @     0x7f15a3427d91 at::TensorIterator::for_each()
[2m[36m(pid=28650)[0m     @     0x7f15a3d0ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28650)[0m     @     0x7f15a3d2dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28594)[0m     @     0x7f14e7ea2ad3 at::TensorIterator::for_each()
[2m[36m(pid=28594)[0m     @     0x7f14e7ea2d91 at::TensorIterator::for_each()
[2m[36m(pid=28594)[0m     @     0x7f14e8785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28594)[0m     @     0x7f14e87a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28594)[0m     @     0x7f14e7c4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28594)[0m     @     0x7f14e7c48388 at::native::copy_impl()
[2m[36m(pid=28513)[0m     @     0x7f69a0ed7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28513)[0m     @     0x7f69a0ed5388 at::native::copy_impl()
[2m[36m(pid=28513)[0m     @     0x7f69a0ed75a4 at::native::copy_()
[2m[36m(pid=28590)[0m     @     0x7f8273ea2ad3 at::TensorIterator::for_each()
[2m[36m(pid=28590)[0m     @     0x7f8273ea2d91 at::TensorIterator::for_each()
[2m[36m(pid=28590)[0m     @     0x7f8274785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28590)[0m     @     0x7f82747a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28519)[0m     @     0x7eed06c49c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28519)[0m     @     0x7eed060eba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28519)[0m     @     0x7eed060e9388 at::native::copy_impl()
[2m[36m(pid=28519)[0m     @     0x7eed060eb5a4 at::native::copy_()
[2m[36m(pid=28615)[0m     @     0x7ee05ecbbd91 at::TensorIterator::for_each()
[2m[36m(pid=28615)[0m     @     0x7ee05f59eb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28615)[0m     @     0x7ee05f5c1c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28615)[0m     @     0x7ee05ea63a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28615)[0m     @     0x7ee05ea61388 at::native::copy_impl()
[2m[36m(pid=28515)[0m     @     0x7ef531c27ad3 at::TensorIterator::for_each()
[2m[36m(pid=28515)[0m     @     0x7ef531c27d91 at::TensorIterator::for_each()
[2m[36m(pid=28515)[0m     @     0x7ef53250ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28515)[0m     @     0x7ef53252dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28586)[0m     @     0x7f7066fc0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28586)[0m     @     0x7f7066fe3c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28586)[0m     @     0x7f7066485a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28586)[0m     @     0x7f7066483388 at::native::copy_impl()
[2m[36m(pid=28599)[0m     @     0x7fc9765faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28599)[0m     @     0x7fc9765f8388 at::native::copy_impl()
[2m[36m(pid=28599)[0m     @     0x7fc9765fa5a4 at::native::copy_()
[2m[36m(pid=28548)[0m     @     0x7f05c5868ad3 at::TensorIterator::for_each()
[2m[36m(pid=28525)[0m     @     0x7f59f310ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28525)[0m     @     0x7f59f25aca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28525)[0m     @     0x7f59f25aa388 at::native::copy_impl()
[2m[36m(pid=28525)[0m     @     0x7f59f25ac5a4 at::native::copy_()
[2m[36m(pid=28537)[0m     @     0x7fc68816ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28537)[0m     @     0x7fc68760ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28537)[0m     @     0x7fc68760a388 at::native::copy_impl()
[2m[36m(pid=28537)[0m     @     0x7fc68760c5a4 at::native::copy_()
[2m[36m(pid=28580)[0m     @     0x7f486de58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28580)[0m     @     0x7f486d2faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28580)[0m     @     0x7f486d2f8388 at::native::copy_impl()
[2m[36m(pid=28596)[0m     @     0x7f0400da2d91 at::TensorIterator::for_each()
[2m[36m(pid=28596)[0m     @     0x7f0401685b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28596)[0m     @     0x7f04016a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28596)[0m     @     0x7f0400b4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28596)[0m     @     0x7f0400b48388 at::native::copy_impl()
[2m[36m(pid=28514)[0m     @     0x7f6f99e35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28514)[0m     @     0x7f6f99e58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28514)[0m     @     0x7f6f992faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28514)[0m     @     0x7f6f992f8388 at::native::copy_impl()
[2m[36m(pid=28588)[0m     @     0x7efe3ee7fd91 at::TensorIterator::for_each()
[2m[36m(pid=28588)[0m     @     0x7efe3f762b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28588)[0m     @     0x7efe3f785c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28581)[0m     @     0x7f2ba9821a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28581)[0m     @     0x7f2ba981f388 at::native::copy_impl()
[2m[36m(pid=28581)[0m     @     0x7f2ba98215a4 at::native::copy_()
[2m[36m(pid=28579)[0m     @     0x7f439e852d91 at::TensorIterator::for_each()
[2m[36m(pid=28579)[0m     @     0x7f439f135b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28579)[0m     @     0x7f439f158c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28524)[0m     @     0x7eeefb785c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28524)[0m     @     0x7eeefac27a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28524)[0m     @     0x7eeefac25388 at::native::copy_impl()
[2m[36m(pid=28524)[0m     @     0x7eeefac275a4 at::native::copy_()
[2m[36m(pid=28574)[0m     @     0x7ee34cbd1ad3 at::TensorIterator::for_each()
[2m[36m(pid=28574)[0m     @     0x7ee34cbd1d91 at::TensorIterator::for_each()
[2m[36m(pid=28574)[0m     @     0x7ee34d4b4b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28574)[0m     @     0x7ee34d4d7c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28611)[0m     @     0x7f1bd70ebc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28611)[0m     @     0x7f1bd658da93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28611)[0m     @     0x7f1bd658b388 at::native::copy_impl()
[2m[36m(pid=28611)[0m     @     0x7f1bd658d5a4 at::native::copy_()
[2m[36m(pid=28605)[0m     @     0x7f97812cdad3 at::TensorIterator::for_each()
[2m[36m(pid=28605)[0m     @     0x7f97812cdd91 at::TensorIterator::for_each()
[2m[36m(pid=28605)[0m     @     0x7f9781bb0b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28605)[0m     @     0x7f9781bd3c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28605)[0m     @     0x7f9781075a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28605)[0m     @     0x7f9781073388 at::native::copy_impl()
[2m[36m(pid=28608)[0m     @     0x7f8c64785b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28608)[0m     @     0x7f8c647a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28608)[0m     @     0x7f8c63c4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28608)[0m     @     0x7f8c63c48388 at::native::copy_impl()
[2m[36m(pid=28608)[0m     @     0x7f8c63c4a5a4 at::native::copy_()
[2m[36m(pid=28517)[0m     @     0x7f790980ab22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28517)[0m     @     0x7f790982dc1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28517)[0m     @     0x7f7908ccfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28517)[0m     @     0x7f7908ccd388 at::native::copy_impl()
[2m[36m(pid=28517)[0m     @     0x7f7908ccf5a4 at::native::copy_()
[2m[36m(pid=28575)[0m     @     0x7f50a77b4a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28575)[0m     @     0x7f50a77b2388 at::native::copy_impl()
[2m[36m(pid=28575)[0m     @     0x7f50a77b45a4 at::native::copy_()
[2m[36m(pid=28575)[0m     @     0x7f50a7e9f4f5 at::Tensor::copy_()
[2m[36m(pid=28587)[0m     @     0x7f8caa343d91 at::TensorIterator::for_each()
[2m[36m(pid=28587)[0m     @     0x7f8caac26b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28534)[0m     @     0x7ef36fec7b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28534)[0m     @     0x7ef36feeac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28534)[0m     @     0x7ef36f38ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28534)[0m     @     0x7ef36f38a388 at::native::copy_impl()
[2m[36m(pid=28540)[0m     @     0x7efd2a1a5a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28540)[0m     @     0x7efd2a1a3388 at::native::copy_impl()
[2m[36m(pid=28540)[0m     @     0x7efd2a1a55a4 at::native::copy_()
[2m[36m(pid=28540)[0m     @     0x7efd2a8904f5 at::Tensor::copy_()
[2m[36m(pid=28617)[0m     @     0x7efa0749f4f5 at::Tensor::copy_()
[2m[36m(pid=28617)[0m     @     0x7efa099728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28617)[0m     @     0x7efa0749f4f5 at::Tensor::copy_()
[2m[36m(pid=28617)[0m     @     0x7efa0d54a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28617)[0m     @     0x5602347f1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28617)[0m     @     0x56023474cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28617)[0m     @     0x5602347d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28617)[0m     @     0x5602347d8a20 method_vectorcall
[2m[36m(pid=28617)[0m     @     0x56023474cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28617)[0m     @     0x5602347d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28617)[0m     @     0x5602347d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28617)[0m     @     0x56023474d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28617)[0m     @     0x5602347d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28617)[0m     @     0x5602347d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28617)[0m     @     0x56023474d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28617)[0m     @     0x5602347d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28617)[0m     @     0x5602347d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28617)[0m     @     0x56023474d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28617)[0m     @     0x5602347d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28617)[0m     @     0x5602347d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28617)[0m     @     0x56023474d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28604)[0m     @     0x560ce9ad6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28604)[0m     @     0x560ce9a4b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28604)[0m     @     0x560ce9ad5baf _PyEval_EvalCodeWithName
[2m[36m(pid=28604)[0m     @     0x560ce9ad6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28604)[0m     @     0x560ce9a4b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28634)[0m     @     0x7fbc3642ad91 at::TensorIterator::for_each()
[2m[36m(pid=28634)[0m     @     0x7fbc36d0db22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28634)[0m     @     0x7fbc36d30c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28634)[0m     @     0x7fbc361d2a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28634)[0m     @     0x7fbc361d0388 at::native::copy_impl()
[2m[36m(pid=28634)[0m     @     0x7fbc361d25a4 at::native::copy_()
[2m[36m(pid=28592)[0m     @     0x7f5efd552d91 at::TensorIterator::for_each()
[2m[36m(pid=28592)[0m     @     0x7f5efde35b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28592)[0m     @     0x7f5efde58c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28592)[0m     @     0x7f5efd2faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28592)[0m     @     0x7f5efd2f8388 at::native::copy_impl()
[2m[36m(pid=28632)[0m     @     0x7ee17527a5a4 at::native::copy_()
[2m[36m(pid=28632)[0m     @     0x7ee1759654f5 at::Tensor::copy_()
[2m[36m(pid=28632)[0m     @     0x7ee177e388de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28551)[0m     @     0x7f8678bd7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28551)[0m     @     0x7f8678bd5388 at::native::copy_impl()
[2m[36m(pid=28551)[0m     @     0x7f8678bd75a4 at::native::copy_()
[2m[36m(pid=28551)[0m     @     0x7f86792c24f5 at::Tensor::copy_()
[2m[36m(pid=28551)[0m     @     0x7f867b7958de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28620)[0m     @     0x7f605af5ea93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28620)[0m     @     0x7f605af5c388 at::native::copy_impl()
[2m[36m(pid=28620)[0m     @     0x7f605af5e5a4 at::native::copy_()
[2m[36m(pid=28620)[0m     @     0x7f605b6494f5 at::Tensor::copy_()
[2m[36m(pid=28529)[0m     @     0x7f7ff00a7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28529)[0m     @     0x7f7ff00a5388 at::native::copy_impl()
[2m[36m(pid=28529)[0m     @     0x7f7ff00a75a4 at::native::copy_()
[2m[36m(pid=28529)[0m     @     0x7f7ff07924f5 at::Tensor::copy_()
[2m[36m(pid=28529)[0m     @     0x7f7ff2c658de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28511)[0m     @     0x7f2c40e16a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28511)[0m     @     0x7f2c40e14388 at::native::copy_impl()
[2m[36m(pid=28511)[0m     @     0x7f2c40e165a4 at::native::copy_()
[2m[36m(pid=28511)[0m     @     0x7f2c415014f5 at::Tensor::copy_()
[2m[36m(pid=28637)[0m     @     0x7fc745821a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28637)[0m     @     0x7fc74581f388 at::native::copy_impl()
[2m[36m(pid=28637)[0m     @     0x7fc7458215a4 at::native::copy_()
[2m[36m(pid=28637)[0m     @     0x7fc745f0c4f5 at::Tensor::copy_()
[2m[36m(pid=28637)[0m     @     0x7fc7483df8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28628)[0m     @     0x7f17759cf5a4 at::native::copy_()
[2m[36m(pid=28628)[0m     @     0x7f17760ba4f5 at::Tensor::copy_()
[2m[36m(pid=28628)[0m     @     0x7f177858d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28526)[0m     @     0x7f4a1b2df388 at::native::copy_impl()
[2m[36m(pid=28526)[0m     @     0x7f4a1b2e15a4 at::native::copy_()
[2m[36m(pid=28526)[0m     @     0x7f4a1b9cc4f5 at::Tensor::copy_()
[2m[36m(pid=28526)[0m     @     0x7f4a1de9f8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28627)[0m     @     0x7ed2cffa44f5 at::Tensor::copy_()
[2m[36m(pid=28627)[0m     @     0x7ed2d24778de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28627)[0m     @     0x7ed2cffa44f5 at::Tensor::copy_()
[2m[36m(pid=28627)[0m     @     0x7ed2d604f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28627)[0m     @     0x563c89151fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28627)[0m     @     0x563c890acb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28627)[0m     @     0x563c89137baf _PyEval_EvalCodeWithName
[2m[36m(pid=28627)[0m     @     0x563c89138a20 method_vectorcall
[2m[36m(pid=28627)[0m     @     0x563c890acbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28627)[0m     @     0x563c89137baf _PyEval_EvalCodeWithName
[2m[36m(pid=28627)[0m     @     0x563c89138643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28627)[0m     @     0x563c890ad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28627)[0m     @     0x563c89137baf _PyEval_EvalCodeWithName
[2m[36m(pid=28627)[0m     @     0x563c89138643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28627)[0m     @     0x563c890ad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28627)[0m     @     0x563c89137baf _PyEval_EvalCodeWithName
[2m[36m(pid=28630)[0m     @     0x7f3b0c2c4c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28630)[0m     @     0x7f3b0b766a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28531)[0m     @     0x7ed1919cfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28531)[0m     @     0x7ed1919cd388 at::native::copy_impl()
[2m[36m(pid=28531)[0m     @     0x7ed1919cf5a4 at::native::copy_()
[2m[36m(pid=28531)[0m     @     0x7ed1920ba4f5 at::Tensor::copy_()
[2m[36m(pid=28613)[0m     @     0x7ed53f6b64f5 at::Tensor::copy_()
[2m[36m(pid=28613)[0m     @     0x7ed541b898de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28613)[0m     @     0x7ed53f6b64f5 at::Tensor::copy_()
[2m[36m(pid=28613)[0m     @     0x7ed54576179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28613)[0m     @     0x5561a3214fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28613)[0m     @     0x5561a316fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28613)[0m     @     0x5561a31fabaf _PyEval_EvalCodeWithName
[2m[36m(pid=28613)[0m     @     0x5561a31fba20 method_vectorcall
[2m[36m(pid=28613)[0m     @     0x5561a316fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28613)[0m     @     0x5561a31fabaf _PyEval_EvalCodeWithName
[2m[36m(pid=28613)[0m     @     0x5561a31fb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28613)[0m     @     0x5561a3170689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28613)[0m     @     0x5561a31fabaf _PyEval_EvalCodeWithName
[2m[36m(pid=28613)[0m     @     0x5561a31fb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28613)[0m     @     0x5561a3170689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28613)[0m     @     0x5561a31fabaf _PyEval_EvalCodeWithName
[2m[36m(pid=28613)[0m     @     0x5561a31fb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28613)[0m     @     0x5561a3170689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28613)[0m     @     0x5561a31fabaf _PyEval_EvalCodeWithName
[2m[36m(pid=28613)[0m     @     0x5561a31fb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28613)[0m     @     0x5561a3170689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28512)[0m     @     0x7f1c918de4f5 at::Tensor::copy_()
[2m[36m(pid=28512)[0m     @     0x7f1c93db18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28547)[0m     @     0x7ef04310e4f5 at::Tensor::copy_()
[2m[36m(pid=28547)[0m     @     0x7ef0455e18de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28547)[0m     @     0x7ef04310e4f5 at::Tensor::copy_()
[2m[36m(pid=28547)[0m     @     0x7ef0491b979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28527)[0m     @     0x7f9b2e4778de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28527)[0m     @     0x7f9b2bfa44f5 at::Tensor::copy_()
[2m[36m(pid=28527)[0m     @     0x7f9b3204f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28527)[0m     @     0x562d796b8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28527)[0m     @     0x562d79613b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28527)[0m     @     0x562d7969ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=28527)[0m     @     0x562d7969fa20 method_vectorcall
[2m[36m(pid=28527)[0m     @     0x562d79613bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28527)[0m     @     0x562d7969ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=28527)[0m     @     0x562d7969f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28527)[0m     @     0x562d79614689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28527)[0m     @     0x562d7969ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=28527)[0m     @     0x562d7969f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28527)[0m     @     0x562d79614689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28527)[0m     @     0x562d7969ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=28527)[0m     @     0x562d7969f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28527)[0m     @     0x562d79614689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28527)[0m     @     0x562d7969ebaf _PyEval_EvalCodeWithName
[2m[36m(pid=28527)[0m     @     0x562d7969f643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28527)[0m     @     0x562d79614689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28539)[0m     @     0x7efe8194e4f5 at::Tensor::copy_()
[2m[36m(pid=28539)[0m     @     0x7efe83e218de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28539)[0m     @     0x7efe8194e4f5 at::Tensor::copy_()
[2m[36m(pid=28577)[0m     @     0x7f15a36788de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28577)[0m     @     0x7f15a11a54f5 at::Tensor::copy_()
[2m[36m(pid=28577)[0m     @     0x7f15a725079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28577)[0m     @     0x55979629cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28577)[0m     @     0x5597961f7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28577)[0m     @     0x559796282baf _PyEval_EvalCodeWithName
[2m[36m(pid=28577)[0m     @     0x559796283a20 method_vectorcall
[2m[36m(pid=28577)[0m     @     0x5597961f7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28577)[0m     @     0x559796282baf _PyEval_EvalCodeWithName
[2m[36m(pid=28577)[0m     @     0x559796283643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28577)[0m     @     0x5597961f8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28577)[0m     @     0x559796282baf _PyEval_EvalCodeWithName
[2m[36m(pid=28577)[0m     @     0x559796283643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28577)[0m     @     0x5597961f8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28577)[0m     @     0x559796282baf _PyEval_EvalCodeWithName
[2m[36m(pid=28577)[0m     @     0x559796283643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28577)[0m     @     0x5597961f8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28577)[0m     @     0x559796282baf _PyEval_EvalCodeWithName
[2m[36m(pid=28577)[0m     @     0x559796283643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28577)[0m     @     0x5597961f8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28544)[0m     @     0x7ed0ccb8a5a4 at::native::copy_()
[2m[36m(pid=28544)[0m     @     0x7ed0cd2754f5 at::Tensor::copy_()
[2m[36m(pid=28544)[0m     @     0x7ed0cf7488de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28543)[0m     @     0x7eecbe58d4f5 at::Tensor::copy_()
[2m[36m(pid=28543)[0m     @     0x7eecc0a608de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28523)[0m     @     0x7fcc129405a4 at::native::copy_()
[2m[36m(pid=28523)[0m     @     0x7fcc1302b4f5 at::Tensor::copy_()
[2m[36m(pid=28523)[0m     @     0x7fcc154fe8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28625)[0m     @     0x7f96b86108de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28625)[0m     @     0x7f96b613d4f5 at::Tensor::copy_()
[2m[36m(pid=28625)[0m     @     0x7f96bc1e879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28625)[0m     @     0x55e2580e8fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28625)[0m     @     0x55e258043b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28625)[0m     @     0x55e2580cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=28625)[0m     @     0x55e2580cfa20 method_vectorcall
[2m[36m(pid=28625)[0m     @     0x55e258043bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28625)[0m     @     0x55e2580cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=28625)[0m     @     0x55e2580cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28625)[0m     @     0x55e258044689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28625)[0m     @     0x55e2580cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=28625)[0m     @     0x55e2580cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28625)[0m     @     0x55e258044689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28625)[0m     @     0x55e2580cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=28625)[0m     @     0x55e2580cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28625)[0m     @     0x55e258044689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28625)[0m     @     0x55e2580cebaf _PyEval_EvalCodeWithName
[2m[36m(pid=28625)[0m     @     0x55e2580cf643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28625)[0m     @     0x55e258044689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28516)[0m     @     0x7ee6087a8c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28516)[0m     @     0x7ee607c4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28516)[0m     @     0x7ee607c48388 at::native::copy_impl()
[2m[36m(pid=28520)[0m     @     0x7ee635669a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28520)[0m     @     0x7ee635667388 at::native::copy_impl()
[2m[36m(pid=28520)[0m     @     0x7ee6356695a4 at::native::copy_()
[2m[36m(pid=28601)[0m     @     0x7f1e56ca45a4 at::native::copy_()
[2m[36m(pid=28601)[0m     @     0x7f1e5738f4f5 at::Tensor::copy_()
[2m[36m(pid=28601)[0m     @     0x7f1e598628de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28589)[0m     @     0x7f51afc64d91 at::TensorIterator::for_each()
[2m[36m(pid=28589)[0m     @     0x7f51b0547b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28589)[0m     @     0x7f51b056ac1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28521)[0m     @     0x7fcc2d8215a4 at::native::copy_()
[2m[36m(pid=28521)[0m     @     0x7fcc2df0c4f5 at::Tensor::copy_()
[2m[36m(pid=28521)[0m     @     0x7fcc303df8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28593)[0m     @     0x7eea65034b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28593)[0m     @     0x7eea65057c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28593)[0m     @     0x7eea644f9a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28593)[0m     @     0x7eea644f7388 at::native::copy_impl()
[2m[36m(pid=28645)[0m     @     0x7ed8a13ba4f5 at::Tensor::copy_()
[2m[36m(pid=28645)[0m     @     0x7ed8a388d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28639)[0m     @     0x7f4c8d645b22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28639)[0m     @     0x7f4c8d668c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28639)[0m     @     0x7f4c8cb0aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28639)[0m     @     0x7f4c8cb08388 at::native::copy_impl()
[2m[36m(pid=28532)[0m     @     0x7f57701244f5 at::Tensor::copy_()
[2m[36m(pid=28532)[0m     @     0x7f57725f78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28532)[0m     @     0x7f57701244f5 at::Tensor::copy_()
[2m[36m(pid=28510)[0m     @     0x7fbeb09b55a4 at::native::copy_()
[2m[36m(pid=28510)[0m     @     0x7fbeb10a04f5 at::Tensor::copy_()
[2m[36m(pid=28510)[0m     @     0x7fbeb35738de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28528)[0m     @     0x7f4c26a55c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28649)[0m     @     0x7f7f1380f5a4 at::native::copy_()
[2m[36m(pid=28649)[0m     @     0x7f7f13efa4f5 at::Tensor::copy_()
[2m[36m(pid=28649)[0m     @     0x7f7f163cd8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28650)[0m     @     0x7f15a31cfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28650)[0m     @     0x7f15a31cd388 at::native::copy_impl()
[2m[36m(pid=28650)[0m     @     0x7f15a31cf5a4 at::native::copy_()
[2m[36m(pid=28594)[0m     @     0x7f14e7c4a5a4 at::native::copy_()
[2m[36m(pid=28594)[0m     @     0x7f14e83354f5 at::Tensor::copy_()
[2m[36m(pid=28513)[0m     @     0x7f69a15c24f5 at::Tensor::copy_()
[2m[36m(pid=28513)[0m     @     0x7f69a3a958de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28513)[0m     @     0x7f69a15c24f5 at::Tensor::copy_()
[2m[36m(pid=28513)[0m     @     0x7f69b877179f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28513)[0m     @     0x55ed8c4bcfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28513)[0m     @     0x55ed8c417b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28513)[0m     @     0x55ed8c4a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=28513)[0m     @     0x55ed8c4a3a20 method_vectorcall
[2m[36m(pid=28513)[0m     @     0x55ed8c417bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28513)[0m     @     0x55ed8c4a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=28513)[0m     @     0x55ed8c4a3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28513)[0m     @     0x55ed8c418689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28513)[0m     @     0x55ed8c4a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=28513)[0m     @     0x55ed8c4a3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28513)[0m     @     0x55ed8c418689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28513)[0m     @     0x55ed8c4a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=28513)[0m     @     0x55ed8c4a3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28513)[0m     @     0x55ed8c418689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28513)[0m     @     0x55ed8c4a2baf _PyEval_EvalCodeWithName
[2m[36m(pid=28513)[0m     @     0x55ed8c4a3643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28513)[0m     @     0x55ed8c418689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28590)[0m     @     0x7f8273c4aa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28590)[0m     @     0x7f8273c48388 at::native::copy_impl()
[2m[36m(pid=28590)[0m     @     0x7f8273c4a5a4 at::native::copy_()
[2m[36m(pid=28590)[0m     @     0x7f82743354f5 at::Tensor::copy_()
[2m[36m(pid=28519)[0m     @     0x7eed067d64f5 at::Tensor::copy_()
[2m[36m(pid=28519)[0m     @     0x7eed08ca98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28519)[0m     @     0x7eed067d64f5 at::Tensor::copy_()
[2m[36m(pid=28519)[0m     @     0x7eed0c47779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28519)[0m     @     0x55c7b7f75fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28519)[0m     @     0x55c7b7ed0b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28519)[0m     @     0x55c7b7f5bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28519)[0m     @     0x55c7b7f5ca20 method_vectorcall
[2m[36m(pid=28519)[0m     @     0x55c7b7ed0bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28519)[0m     @     0x55c7b7f5bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28519)[0m     @     0x55c7b7f5c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28519)[0m     @     0x55c7b7ed1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28519)[0m     @     0x55c7b7f5bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28519)[0m     @     0x55c7b7f5c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28615)[0m     @     0x7ee05ea635a4 at::native::copy_()
[2m[36m(pid=28615)[0m     @     0x7ee05f14e4f5 at::Tensor::copy_()
[2m[36m(pid=28615)[0m     @     0x7ee0616218de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28515)[0m     @     0x7ef5319cfa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28515)[0m     @     0x7ef5319cd388 at::native::copy_impl()
[2m[36m(pid=28515)[0m     @     0x7ef5319cf5a4 at::native::copy_()
[2m[36m(pid=28586)[0m     @     0x7f70664855a4 at::native::copy_()
[2m[36m(pid=28586)[0m     @     0x7f7066b704f5 at::Tensor::copy_()
[2m[36m(pid=28586)[0m     @     0x7f70690438de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28586)[0m     @     0x7f7066b704f5 at::Tensor::copy_()
[2m[36m(pid=28586)[0m     @     0x7f706cc1b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28586)[0m     @     0x556b9bcb0fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28586)[0m     @     0x556b9bc0bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28586)[0m     @     0x556b9bc96baf _PyEval_EvalCodeWithName
[2m[36m(pid=28586)[0m     @     0x556b9bc97a20 method_vectorcall
[2m[36m(pid=28599)[0m     @     0x7fc976ce54f5 at::Tensor::copy_()
[2m[36m(pid=28599)[0m     @     0x7fc9791b88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28599)[0m     @     0x7fc976ce54f5 at::Tensor::copy_()
[2m[36m(pid=28599)[0m     @     0x7fc97cd9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28599)[0m     @     0x55f62179efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28599)[0m     @     0x55f6216f9b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28599)[0m     @     0x55f621784baf _PyEval_EvalCodeWithName
[2m[36m(pid=28599)[0m     @     0x55f621785a20 method_vectorcall
[2m[36m(pid=28599)[0m     @     0x55f6216f9bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28599)[0m     @     0x55f621784baf _PyEval_EvalCodeWithName
[2m[36m(pid=28599)[0m     @     0x55f621785643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28599)[0m     @     0x55f6216fa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28599)[0m     @     0x55f621784baf _PyEval_EvalCodeWithName
[2m[36m(pid=28599)[0m     @     0x55f621785643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28599)[0m     @     0x55f6216fa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28599)[0m     @     0x55f621784baf _PyEval_EvalCodeWithName
[2m[36m(pid=28599)[0m     @     0x55f621785643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28599)[0m     @     0x55f6216fa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28599)[0m     @     0x55f621784baf _PyEval_EvalCodeWithName
[2m[36m(pid=28599)[0m     @     0x55f621785643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28599)[0m     @     0x55f6216fa689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28548)[0m     @     0x7f05c5868d91 at::TensorIterator::for_each()
[2m[36m(pid=28548)[0m     @     0x7f05c614bb22 _ZN2at6native12_GLOBAL__N_114cpu_kernel_vecILb1EZZZNS1_L11copy_kernelERNS_14TensorIteratorEbENKUlvE3_clEvENKUlvE2_clEvEUlfE_ZZZNS1_L11copy_kernelES4_bENKS5_clEvENKS6_clEvEUlNS_6vec25612_GLOBAL__N_16Vec256IfEEE0_EEvS4_OT0_OT1_
[2m[36m(pid=28548)[0m     @     0x7f05c616ec1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28548)[0m     @     0x7f05c5610a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28525)[0m     @     0x7f59f2c974f5 at::Tensor::copy_()
[2m[36m(pid=28525)[0m     @     0x7f59f516a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28525)[0m     @     0x7f59f2c974f5 at::Tensor::copy_()
[2m[36m(pid=28525)[0m     @     0x7f59f8d4279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28525)[0m     @     0x55bd8dfc3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28525)[0m     @     0x55bd8df1eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28525)[0m     @     0x55bd8dfa9baf _PyEval_EvalCodeWithName
[2m[36m(pid=28525)[0m     @     0x55bd8dfaaa20 method_vectorcall
[2m[36m(pid=28525)[0m     @     0x55bd8df1ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28525)[0m     @     0x55bd8dfa9baf _PyEval_EvalCodeWithName
[2m[36m(pid=28525)[0m     @     0x55bd8dfaa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28525)[0m     @     0x55bd8df1f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28525)[0m     @     0x55bd8dfa9baf _PyEval_EvalCodeWithName
[2m[36m(pid=28525)[0m     @     0x55bd8dfaa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28525)[0m     @     0x55bd8df1f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28525)[0m     @     0x55bd8dfa9baf _PyEval_EvalCodeWithName
[2m[36m(pid=28525)[0m     @     0x55bd8dfaa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28537)[0m     @     0x7fc687cf74f5 at::Tensor::copy_()
[2m[36m(pid=28537)[0m     @     0x7fc68a1ca8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28537)[0m     @     0x7fc687cf74f5 at::Tensor::copy_()
[2m[36m(pid=28537)[0m     @     0x7fc68dda279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28537)[0m     @     0x55f285a37fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28537)[0m     @     0x55f285992b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28537)[0m     @     0x55f285a1dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28537)[0m     @     0x55f285a1ea20 method_vectorcall
[2m[36m(pid=28537)[0m     @     0x55f285992bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28580)[0m     @     0x7f486d2fa5a4 at::native::copy_()
[2m[36m(pid=28580)[0m     @     0x7f486d9e54f5 at::Tensor::copy_()
[2m[36m(pid=28580)[0m     @     0x7f486feb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28580)[0m     @     0x7f486d9e54f5 at::Tensor::copy_()
[2m[36m(pid=28580)[0m     @     0x7f4873a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28580)[0m     @     0x5642b5e66fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28580)[0m     @     0x5642b5dc1b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28580)[0m     @     0x5642b5e4cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28580)[0m     @     0x5642b5e4da20 method_vectorcall
[2m[36m(pid=28580)[0m     @     0x5642b5dc1bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28580)[0m     @     0x5642b5e4cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28596)[0m     @     0x7f0400b4a5a4 at::native::copy_()
[2m[36m(pid=28596)[0m     @     0x7f04012354f5 at::Tensor::copy_()
[2m[36m(pid=28596)[0m     @     0x7f04037088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28514)[0m     @     0x7f6f992fa5a4 at::native::copy_()
[2m[36m(pid=28514)[0m     @     0x7f6f999e54f5 at::Tensor::copy_()
[2m[36m(pid=28514)[0m     @     0x7f6f9beb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28514)[0m     @     0x7f6f999e54f5 at::Tensor::copy_()
[2m[36m(pid=28514)[0m     @     0x7f6f9fa9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28588)[0m     @     0x7efe3ec27a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28588)[0m     @     0x7efe3ec25388 at::native::copy_impl()
[2m[36m(pid=28588)[0m     @     0x7efe3ec275a4 at::native::copy_()
[2m[36m(pid=28588)[0m     @     0x7efe3f3124f5 at::Tensor::copy_()
[2m[36m(pid=28581)[0m     @     0x7f2ba9f0c4f5 at::Tensor::copy_()
[2m[36m(pid=28581)[0m     @     0x7f2bac3df8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28581)[0m     @     0x7f2ba9f0c4f5 at::Tensor::copy_()
[2m[36m(pid=28581)[0m     @     0x7f2baffb779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28581)[0m     @     0x55862eca1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28581)[0m     @     0x55862ebfcb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28581)[0m     @     0x55862ec87baf _PyEval_EvalCodeWithName
[2m[36m(pid=28581)[0m     @     0x55862ec88a20 method_vectorcall
[2m[36m(pid=28581)[0m     @     0x55862ebfcbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28581)[0m     @     0x55862ec87baf _PyEval_EvalCodeWithName
[2m[36m(pid=28581)[0m     @     0x55862ec88643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28581)[0m     @     0x55862ebfd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28581)[0m     @     0x55862ec87baf _PyEval_EvalCodeWithName
[2m[36m(pid=28581)[0m     @     0x55862ec88643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28581)[0m     @     0x55862ebfd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28581)[0m     @     0x55862ec87baf _PyEval_EvalCodeWithName
[2m[36m(pid=28581)[0m     @     0x55862ec88643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28581)[0m     @     0x55862ebfd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28581)[0m     @     0x55862ec87baf _PyEval_EvalCodeWithName
[2m[36m(pid=28581)[0m     @     0x55862ec88643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28581)[0m     @     0x55862ebfd689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28579)[0m     @     0x7f439e5faa93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28579)[0m     @     0x7f439e5f8388 at::native::copy_impl()
[2m[36m(pid=28579)[0m     @     0x7f439e5fa5a4 at::native::copy_()
[2m[36m(pid=28579)[0m     @     0x7f439ece54f5 at::Tensor::copy_()
[2m[36m(pid=28579)[0m     @     0x7f43a11b88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28524)[0m     @     0x7eeefb3124f5 at::Tensor::copy_()
[2m[36m(pid=28524)[0m     @     0x7eeefd7e58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28524)[0m     @     0x7eeefb3124f5 at::Tensor::copy_()
[2m[36m(pid=28524)[0m     @     0x7eef013bd79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28524)[0m     @     0x555a07ef5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28524)[0m     @     0x555a07e50b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28524)[0m     @     0x555a07edbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28524)[0m     @     0x555a07edca20 method_vectorcall
[2m[36m(pid=28524)[0m     @     0x555a07e50bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28524)[0m     @     0x555a07edbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28524)[0m     @     0x555a07edc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28524)[0m     @     0x555a07e51689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28524)[0m     @     0x555a07edbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28524)[0m     @     0x555a07edc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28524)[0m     @     0x555a07e51689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28574)[0m     @     0x7ee34c979a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28574)[0m     @     0x7ee34c977388 at::native::copy_impl()
[2m[36m(pid=28574)[0m     @     0x7ee34c9795a4 at::native::copy_()
[2m[36m(pid=28611)[0m     @     0x7f1bd6c784f5 at::Tensor::copy_()
[2m[36m(pid=28611)[0m     @     0x7f1bd914b8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28611)[0m     @     0x7f1bd6c784f5 at::Tensor::copy_()
[2m[36m(pid=28611)[0m     @     0x7f1bdcd2379f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28611)[0m     @     0x5606269d4fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28611)[0m     @     0x56062692fb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28611)[0m     @     0x5606269babaf _PyEval_EvalCodeWithName
[2m[36m(pid=28611)[0m     @     0x5606269bba20 method_vectorcall
[2m[36m(pid=28611)[0m     @     0x56062692fbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28611)[0m     @     0x5606269babaf _PyEval_EvalCodeWithName
[2m[36m(pid=28611)[0m     @     0x5606269bb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28611)[0m     @     0x560626930689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28605)[0m     @     0x7f97810755a4 at::native::copy_()
[2m[36m(pid=28605)[0m     @     0x7f97817604f5 at::Tensor::copy_()
[2m[36m(pid=28608)[0m     @     0x7f8c643354f5 at::Tensor::copy_()
[2m[36m(pid=28608)[0m     @     0x7f8c668088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28608)[0m     @     0x7f8c643354f5 at::Tensor::copy_()
[2m[36m(pid=28608)[0m     @     0x7f8c6a3e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28608)[0m     @     0x55f4950cefd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28517)[0m     @     0x7f79093ba4f5 at::Tensor::copy_()
[2m[36m(pid=28517)[0m     @     0x7f790b88d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28517)[0m     @     0x7f79093ba4f5 at::Tensor::copy_()
[2m[36m(pid=28575)[0m     @     0x7f50aa3728de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28575)[0m     @     0x7f50a7e9f4f5 at::Tensor::copy_()
[2m[36m(pid=28575)[0m     @     0x7f50adf4a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28575)[0m     @     0x561394b77fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28575)[0m     @     0x561394ad2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28575)[0m     @     0x561394b5dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28575)[0m     @     0x561394b5ea20 method_vectorcall
[2m[36m(pid=28575)[0m     @     0x561394ad2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28575)[0m     @     0x561394b5dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28575)[0m     @     0x561394b5e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28575)[0m     @     0x561394ad3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28575)[0m     @     0x561394b5dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28575)[0m     @     0x561394b5e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28587)[0m     @     0x7f8caac49c1d at::native::(anonymous namespace)::copy_kernel()
[2m[36m(pid=28587)[0m     @     0x7f8caa0eba93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28587)[0m     @     0x7f8caa0e9388 at::native::copy_impl()
[2m[36m(pid=28534)[0m     @     0x7ef36f38c5a4 at::native::copy_()
[2m[36m(pid=28534)[0m     @     0x7ef36fa774f5 at::Tensor::copy_()
[2m[36m(pid=28534)[0m     @     0x7ef371f4a8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28540)[0m     @     0x7efd2cd638de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28540)[0m     @     0x7efd2a8904f5 at::Tensor::copy_()
[2m[36m(pid=28540)[0m     @     0x7efd3093b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28540)[0m     @     0x558518d52fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28540)[0m     @     0x558518cadb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28540)[0m     @     0x558518d38baf _PyEval_EvalCodeWithName
[2m[36m(pid=28540)[0m     @     0x558518d39a20 method_vectorcall
[2m[36m(pid=28540)[0m     @     0x558518cadbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28540)[0m     @     0x558518d38baf _PyEval_EvalCodeWithName
[2m[36m(pid=28540)[0m     @     0x558518d39643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28540)[0m     @     0x558518cae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28540)[0m     @     0x558518d38baf _PyEval_EvalCodeWithName
[2m[36m(pid=28540)[0m     @     0x558518d39643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28540)[0m     @     0x558518cae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28540)[0m     @     0x558518d38baf _PyEval_EvalCodeWithName
[2m[36m(pid=28540)[0m     @     0x558518d39643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28540)[0m     @     0x558518cae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28540)[0m     @     0x558518d38baf _PyEval_EvalCodeWithName
[2m[36m(pid=28540)[0m     @     0x558518d39643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28540)[0m     @     0x558518cae689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28634)[0m     @     0x7fbc368bd4f5 at::Tensor::copy_()
[2m[36m(pid=28634)[0m     @     0x7fbc38d908de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28592)[0m     @     0x7f5efd2fa5a4 at::native::copy_()
[2m[36m(pid=28592)[0m     @     0x7f5efd9e54f5 at::Tensor::copy_()
[2m[36m(pid=28592)[0m     @     0x7f5effeb88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28632)[0m     @     0x7ee1759654f5 at::Tensor::copy_()
[2m[36m(pid=28632)[0m     @     0x7ee17ba1079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28632)[0m     @     0x564a702befd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28632)[0m     @     0x564a70219b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28632)[0m     @     0x564a702a4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28632)[0m     @     0x564a702a5a20 method_vectorcall
[2m[36m(pid=28632)[0m     @     0x564a70219bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28632)[0m     @     0x564a702a4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28632)[0m     @     0x564a702a5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28632)[0m     @     0x564a7021a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28632)[0m     @     0x564a702a4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28632)[0m     @     0x564a702a5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28632)[0m     @     0x564a7021a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28632)[0m     @     0x564a702a4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28632)[0m     @     0x564a702a5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28632)[0m     @     0x564a7021a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28632)[0m     @     0x564a702a4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28632)[0m     @     0x564a702a5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28632)[0m     @     0x564a7021a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28551)[0m     @     0x7f86792c24f5 at::Tensor::copy_()
[2m[36m(pid=28551)[0m     @     0x7f867f36d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28551)[0m     @     0x564aa35a6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28551)[0m     @     0x564aa3501b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28551)[0m     @     0x564aa358cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28551)[0m     @     0x564aa358da20 method_vectorcall
[2m[36m(pid=28551)[0m     @     0x564aa3501bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28551)[0m     @     0x564aa358cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28551)[0m     @     0x564aa358d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28551)[0m     @     0x564aa3502689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28551)[0m     @     0x564aa358cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28551)[0m     @     0x564aa358d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28551)[0m     @     0x564aa3502689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28551)[0m     @     0x564aa358cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28551)[0m     @     0x564aa358d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28551)[0m     @     0x564aa3502689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28551)[0m     @     0x564aa358cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28551)[0m     @     0x564aa358d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28551)[0m     @     0x564aa3502689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28620)[0m     @     0x7f605db1c8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28620)[0m     @     0x7f605b6494f5 at::Tensor::copy_()
[2m[36m(pid=28620)[0m     @     0x7f60616f479f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28620)[0m     @     0x55da38713fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28620)[0m     @     0x55da3866eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28620)[0m     @     0x55da386f9baf _PyEval_EvalCodeWithName
[2m[36m(pid=28620)[0m     @     0x55da386faa20 method_vectorcall
[2m[36m(pid=28620)[0m     @     0x55da3866ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28620)[0m     @     0x55da386f9baf _PyEval_EvalCodeWithName
[2m[36m(pid=28620)[0m     @     0x55da386fa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28620)[0m     @     0x55da3866f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28620)[0m     @     0x55da386f9baf _PyEval_EvalCodeWithName
[2m[36m(pid=28620)[0m     @     0x55da386fa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28620)[0m     @     0x55da3866f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28620)[0m     @     0x55da386f9baf _PyEval_EvalCodeWithName
[2m[36m(pid=28620)[0m     @     0x55da386fa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28620)[0m     @     0x55da3866f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28620)[0m     @     0x55da386f9baf _PyEval_EvalCodeWithName
[2m[36m(pid=28620)[0m     @     0x55da386fa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28620)[0m     @     0x55da3866f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28529)[0m     @     0x7f7ff07924f5 at::Tensor::copy_()
[2m[36m(pid=28529)[0m     @     0x7f7ff683d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28529)[0m     @     0x55f122ffefd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28529)[0m     @     0x55f122f59b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28529)[0m     @     0x55f122fe4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28529)[0m     @     0x55f122fe5a20 method_vectorcall
[2m[36m(pid=28529)[0m     @     0x55f122f59bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28529)[0m     @     0x55f122fe4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28529)[0m     @     0x55f122fe5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28529)[0m     @     0x55f122f5a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28529)[0m     @     0x55f122fe4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28529)[0m     @     0x55f122fe5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28529)[0m     @     0x55f122f5a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28529)[0m     @     0x55f122fe4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28529)[0m     @     0x55f122fe5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28529)[0m     @     0x55f122f5a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28529)[0m     @     0x55f122fe4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28529)[0m     @     0x55f122fe5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28529)[0m     @     0x55f122f5a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28511)[0m     @     0x7f2c439d48de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28511)[0m     @     0x7f2c415014f5 at::Tensor::copy_()
[2m[36m(pid=28511)[0m     @     0x7f2c6e2ae79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28511)[0m     @     0x5619e385bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28511)[0m     @     0x5619e37b6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28511)[0m     @     0x5619e3841baf _PyEval_EvalCodeWithName
[2m[36m(pid=28511)[0m     @     0x5619e3842a20 method_vectorcall
[2m[36m(pid=28511)[0m     @     0x5619e37b6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28511)[0m     @     0x5619e3841baf _PyEval_EvalCodeWithName
[2m[36m(pid=28511)[0m     @     0x5619e3842643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28511)[0m     @     0x5619e37b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28511)[0m     @     0x5619e3841baf _PyEval_EvalCodeWithName
[2m[36m(pid=28511)[0m     @     0x5619e3842643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28511)[0m     @     0x5619e37b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28511)[0m     @     0x5619e3841baf _PyEval_EvalCodeWithName
[2m[36m(pid=28511)[0m     @     0x5619e3842643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28511)[0m     @     0x5619e37b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28511)[0m     @     0x5619e3841baf _PyEval_EvalCodeWithName
[2m[36m(pid=28511)[0m     @     0x5619e3842643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28511)[0m     @     0x5619e37b7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28628)[0m     @     0x7f17760ba4f5 at::Tensor::copy_()
[2m[36m(pid=28628)[0m     @     0x7f177c16579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28628)[0m     @     0x55ad8e93ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28628)[0m     @     0x55ad8e89ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28628)[0m     @     0x55ad8e925baf _PyEval_EvalCodeWithName
[2m[36m(pid=28628)[0m     @     0x55ad8e926a20 method_vectorcall
[2m[36m(pid=28628)[0m     @     0x55ad8e89abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28628)[0m     @     0x55ad8e925baf _PyEval_EvalCodeWithName
[2m[36m(pid=28628)[0m     @     0x55ad8e926643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28628)[0m     @     0x55ad8e89b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28628)[0m     @     0x55ad8e925baf _PyEval_EvalCodeWithName
[2m[36m(pid=28628)[0m     @     0x55ad8e926643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28628)[0m     @     0x55ad8e89b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28628)[0m     @     0x55ad8e925baf _PyEval_EvalCodeWithName
[2m[36m(pid=28628)[0m     @     0x55ad8e926643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28628)[0m     @     0x55ad8e89b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28628)[0m     @     0x55ad8e925baf _PyEval_EvalCodeWithName
[2m[36m(pid=28628)[0m     @     0x55ad8e926643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28628)[0m     @     0x55ad8e89b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28526)[0m     @     0x7f4a1b9cc4f5 at::Tensor::copy_()
[2m[36m(pid=28526)[0m     @     0x7f4a21a7779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28526)[0m     @     0x5611b41f6fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28526)[0m     @     0x5611b4151b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28526)[0m     @     0x5611b41dcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28526)[0m     @     0x5611b41dda20 method_vectorcall
[2m[36m(pid=28526)[0m     @     0x5611b4151bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28526)[0m     @     0x5611b41dcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28526)[0m     @     0x5611b41dd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28526)[0m     @     0x5611b4152689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28526)[0m     @     0x5611b41dcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28526)[0m     @     0x5611b41dd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28526)[0m     @     0x5611b4152689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28526)[0m     @     0x5611b41dcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28526)[0m     @     0x5611b41dd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28526)[0m     @     0x5611b4152689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28526)[0m     @     0x5611b41dcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28526)[0m     @     0x5611b41dd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28526)[0m     @     0x5611b4152689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28627)[0m     @     0x563c89138643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28627)[0m     @     0x563c890ad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28627)[0m     @     0x563c89137baf _PyEval_EvalCodeWithName
[2m[36m(pid=28627)[0m     @     0x563c89138643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28627)[0m     @     0x563c890ad689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28630)[0m     @     0x7f3b0b764388 at::native::copy_impl()
[2m[36m(pid=28630)[0m     @     0x7f3b0b7665a4 at::native::copy_()
[2m[36m(pid=28531)[0m     @     0x7ed19458d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28531)[0m     @     0x7ed1920ba4f5 at::Tensor::copy_()
[2m[36m(pid=28531)[0m     @     0x7ed19816579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28531)[0m     @     0x55f56dcc5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28531)[0m     @     0x55f56dc20b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28531)[0m     @     0x55f56dcabbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28531)[0m     @     0x55f56dcaca20 method_vectorcall
[2m[36m(pid=28531)[0m     @     0x55f56dc20bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28531)[0m     @     0x55f56dcabbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28531)[0m     @     0x55f56dcac643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28531)[0m     @     0x55f56dc21689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28531)[0m     @     0x55f56dcabbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28531)[0m     @     0x55f56dcac643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28531)[0m     @     0x55f56dc21689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28531)[0m     @     0x55f56dcabbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28531)[0m     @     0x55f56dcac643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28531)[0m     @     0x55f56dc21689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28531)[0m     @     0x55f56dcabbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28531)[0m     @     0x55f56dcac643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28531)[0m     @     0x55f56dc21689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28512)[0m     @     0x7f1c918de4f5 at::Tensor::copy_()
[2m[36m(pid=28512)[0m     @     0x7f1c9798979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28512)[0m     @     0x55ae52ac5fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28512)[0m     @     0x55ae52a20b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28512)[0m     @     0x55ae52aabbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28512)[0m     @     0x55ae52aaca20 method_vectorcall
[2m[36m(pid=28512)[0m     @     0x55ae52a20bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28512)[0m     @     0x55ae52aabbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28512)[0m     @     0x55ae52aac643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28512)[0m     @     0x55ae52a21689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28512)[0m     @     0x55ae52aabbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28512)[0m     @     0x55ae52aac643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28512)[0m     @     0x55ae52a21689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28512)[0m     @     0x55ae52aabbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28512)[0m     @     0x55ae52aac643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28512)[0m     @     0x55ae52a21689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28512)[0m     @     0x55ae52aabbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28512)[0m     @     0x55ae52aac643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28512)[0m     @     0x55ae52a21689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28547)[0m     @     0x55ac2caaafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28547)[0m     @     0x55ac2ca05b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28547)[0m     @     0x55ac2ca90baf _PyEval_EvalCodeWithName
[2m[36m(pid=28547)[0m     @     0x55ac2ca91a20 method_vectorcall
[2m[36m(pid=28547)[0m     @     0x55ac2ca05bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28547)[0m     @     0x55ac2ca90baf _PyEval_EvalCodeWithName
[2m[36m(pid=28547)[0m     @     0x55ac2ca91643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28547)[0m     @     0x55ac2ca06689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28547)[0m     @     0x55ac2ca90baf _PyEval_EvalCodeWithName
[2m[36m(pid=28547)[0m     @     0x55ac2ca91643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28547)[0m     @     0x55ac2ca06689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28547)[0m     @     0x55ac2ca90baf _PyEval_EvalCodeWithName
[2m[36m(pid=28547)[0m     @     0x55ac2ca91643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28547)[0m     @     0x55ac2ca06689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28547)[0m     @     0x55ac2ca90baf _PyEval_EvalCodeWithName
[2m[36m(pid=28547)[0m     @     0x55ac2ca91643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28547)[0m     @     0x55ac2ca06689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28539)[0m     @     0x7efe879f979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28539)[0m     @     0x55fba96c2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28539)[0m     @     0x55fba961db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28539)[0m     @     0x55fba96a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=28539)[0m     @     0x55fba96a9a20 method_vectorcall
[2m[36m(pid=28539)[0m     @     0x55fba961dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28539)[0m     @     0x55fba96a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=28539)[0m     @     0x55fba96a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28539)[0m     @     0x55fba961e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28539)[0m     @     0x55fba96a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=28539)[0m     @     0x55fba96a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28539)[0m     @     0x55fba961e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28539)[0m     @     0x55fba96a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=28539)[0m     @     0x55fba96a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28539)[0m     @     0x55fba961e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28539)[0m     @     0x55fba96a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=28539)[0m     @     0x55fba96a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28539)[0m     @     0x55fba961e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28544)[0m     @     0x7ed0cd2754f5 at::Tensor::copy_()
[2m[36m(pid=28544)[0m     @     0x7ed0d332079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28544)[0m     @     0x561e9fe59fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28544)[0m     @     0x561e9fdb4b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28544)[0m     @     0x561e9fe3fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28544)[0m     @     0x561e9fe40a20 method_vectorcall
[2m[36m(pid=28544)[0m     @     0x561e9fdb4bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28544)[0m     @     0x561e9fe3fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28544)[0m     @     0x561e9fe40643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28544)[0m     @     0x561e9fdb5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28544)[0m     @     0x561e9fe3fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28544)[0m     @     0x561e9fe40643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28544)[0m     @     0x561e9fdb5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28544)[0m     @     0x561e9fe3fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28544)[0m     @     0x561e9fe40643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28544)[0m     @     0x561e9fdb5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28544)[0m     @     0x561e9fe3fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28544)[0m     @     0x561e9fe40643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28544)[0m     @     0x561e9fdb5689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28543)[0m     @     0x7eecbe58d4f5 at::Tensor::copy_()
[2m[36m(pid=28543)[0m     @     0x7eecc463879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28543)[0m     @     0x555922980fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28543)[0m     @     0x5559228dbb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28543)[0m     @     0x555922966baf _PyEval_EvalCodeWithName
[2m[36m(pid=28543)[0m     @     0x555922967a20 method_vectorcall
[2m[36m(pid=28543)[0m     @     0x5559228dbbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28543)[0m     @     0x555922966baf _PyEval_EvalCodeWithName
[2m[36m(pid=28543)[0m     @     0x555922967643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28543)[0m     @     0x5559228dc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28543)[0m     @     0x555922966baf _PyEval_EvalCodeWithName
[2m[36m(pid=28543)[0m     @     0x555922967643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28543)[0m     @     0x5559228dc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28543)[0m     @     0x555922966baf _PyEval_EvalCodeWithName
[2m[36m(pid=28543)[0m     @     0x555922967643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28543)[0m     @     0x5559228dc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28543)[0m     @     0x555922966baf _PyEval_EvalCodeWithName
[2m[36m(pid=28543)[0m     @     0x555922967643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28543)[0m     @     0x5559228dc689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28523)[0m     @     0x7fcc1302b4f5 at::Tensor::copy_()
[2m[36m(pid=28523)[0m     @     0x7fcc190d679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28523)[0m     @     0x561a1182ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28523)[0m     @     0x561a1178ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28523)[0m     @     0x561a11815baf _PyEval_EvalCodeWithName
[2m[36m(pid=28523)[0m     @     0x561a11816a20 method_vectorcall
[2m[36m(pid=28523)[0m     @     0x561a1178abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28523)[0m     @     0x561a11815baf _PyEval_EvalCodeWithName
[2m[36m(pid=28523)[0m     @     0x561a11816643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28523)[0m     @     0x561a1178b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28523)[0m     @     0x561a11815baf _PyEval_EvalCodeWithName
[2m[36m(pid=28523)[0m     @     0x561a11816643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28523)[0m     @     0x561a1178b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28523)[0m     @     0x561a11815baf _PyEval_EvalCodeWithName
[2m[36m(pid=28523)[0m     @     0x561a11816643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28523)[0m     @     0x561a1178b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28523)[0m     @     0x561a11815baf _PyEval_EvalCodeWithName
[2m[36m(pid=28523)[0m     @     0x561a11816643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28523)[0m     @     0x561a1178b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28516)[0m     @     0x7ee607c4a5a4 at::native::copy_()
[2m[36m(pid=28516)[0m     @     0x7ee6083354f5 at::Tensor::copy_()
[2m[36m(pid=28516)[0m     @     0x7ee60a8088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28516)[0m     @     0x7ee6083354f5 at::Tensor::copy_()
[2m[36m(pid=28516)[0m     @     0x7ee60e3e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28516)[0m     @     0x55ef0715dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28516)[0m     @     0x55ef070b8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28516)[0m     @     0x55ef07143baf _PyEval_EvalCodeWithName
[2m[36m(pid=28516)[0m     @     0x55ef07144a20 method_vectorcall
[2m[36m(pid=28516)[0m     @     0x55ef070b8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28516)[0m     @     0x55ef07143baf _PyEval_EvalCodeWithName
[2m[36m(pid=28516)[0m     @     0x55ef07144643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28516)[0m     @     0x55ef070b9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28516)[0m     @     0x55ef07143baf _PyEval_EvalCodeWithName
[2m[36m(pid=28516)[0m     @     0x55ef07144643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28516)[0m     @     0x55ef070b9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28516)[0m     @     0x55ef07143baf _PyEval_EvalCodeWithName
[2m[36m(pid=28516)[0m     @     0x55ef07144643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28516)[0m     @     0x55ef070b9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28516)[0m     @     0x55ef07143baf _PyEval_EvalCodeWithName
[2m[36m(pid=28516)[0m     @     0x55ef07144643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28516)[0m     @     0x55ef070b9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28520)[0m     @     0x7ee635d544f5 at::Tensor::copy_()
[2m[36m(pid=28520)[0m     @     0x7ee6382278de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28520)[0m     @     0x7ee635d544f5 at::Tensor::copy_()
[2m[36m(pid=28520)[0m     @     0x7ee63bdff79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28520)[0m     @     0x562e983b9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28520)[0m     @     0x562e98314b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28520)[0m     @     0x562e9839fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28520)[0m     @     0x562e983a0a20 method_vectorcall
[2m[36m(pid=28520)[0m     @     0x562e98314bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28520)[0m     @     0x562e9839fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28520)[0m     @     0x562e983a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28520)[0m     @     0x562e98315689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28520)[0m     @     0x562e9839fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28520)[0m     @     0x562e983a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28520)[0m     @     0x562e98315689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28520)[0m     @     0x562e9839fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28520)[0m     @     0x562e983a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28520)[0m     @     0x562e98315689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28520)[0m     @     0x562e9839fbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28520)[0m     @     0x562e983a0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28520)[0m     @     0x562e98315689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28601)[0m     @     0x7f1e5738f4f5 at::Tensor::copy_()
[2m[36m(pid=28601)[0m     @     0x7f1e5d43a79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28601)[0m     @     0x561f042bbfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28601)[0m     @     0x561f04216b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28601)[0m     @     0x561f042a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=28601)[0m     @     0x561f042a2a20 method_vectorcall
[2m[36m(pid=28601)[0m     @     0x561f04216bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28601)[0m     @     0x561f042a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=28601)[0m     @     0x561f042a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28601)[0m     @     0x561f04217689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28601)[0m     @     0x561f042a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=28601)[0m     @     0x561f042a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28601)[0m     @     0x561f04217689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28601)[0m     @     0x561f042a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=28601)[0m     @     0x561f042a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28601)[0m     @     0x561f04217689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28601)[0m     @     0x561f042a1baf _PyEval_EvalCodeWithName
[2m[36m(pid=28601)[0m     @     0x561f042a2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28601)[0m     @     0x561f04217689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28589)[0m     @     0x7f51afa0ca93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28589)[0m     @     0x7f51afa0a388 at::native::copy_impl()
[2m[36m(pid=28589)[0m     @     0x7f51afa0c5a4 at::native::copy_()
[2m[36m(pid=28589)[0m     @     0x7f51b00f74f5 at::Tensor::copy_()
[2m[36m(pid=28521)[0m     @     0x7fcc2df0c4f5 at::Tensor::copy_()
[2m[36m(pid=28521)[0m     @     0x7fcc33fb779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28521)[0m     @     0x562f04ad1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28521)[0m     @     0x562f04a2cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28521)[0m     @     0x562f04ab7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28521)[0m     @     0x562f04ab8a20 method_vectorcall
[2m[36m(pid=28521)[0m     @     0x562f04a2cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28521)[0m     @     0x562f04ab7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28521)[0m     @     0x562f04ab8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28521)[0m     @     0x562f04a2d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28521)[0m     @     0x562f04ab7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28521)[0m     @     0x562f04ab8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28521)[0m     @     0x562f04a2d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28521)[0m     @     0x562f04ab7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28521)[0m     @     0x562f04ab8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28521)[0m     @     0x562f04a2d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28521)[0m     @     0x562f04ab7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28521)[0m     @     0x562f04ab8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28521)[0m     @     0x562f04a2d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28593)[0m     @     0x7eea644f95a4 at::native::copy_()
[2m[36m(pid=28593)[0m     @     0x7eea64be44f5 at::Tensor::copy_()
[2m[36m(pid=28593)[0m     @     0x7eea670b78de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28593)[0m     @     0x7eea64be44f5 at::Tensor::copy_()
[2m[36m(pid=28645)[0m     @     0x7ed8a13ba4f5 at::Tensor::copy_()
[2m[36m(pid=28645)[0m     @     0x7ed8a746579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28645)[0m     @     0x5555f4feffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28645)[0m     @     0x5555f4f4ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28645)[0m     @     0x5555f4fd5baf _PyEval_EvalCodeWithName
[2m[36m(pid=28645)[0m     @     0x5555f4fd6a20 method_vectorcall
[2m[36m(pid=28645)[0m     @     0x5555f4f4abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28645)[0m     @     0x5555f4fd5baf _PyEval_EvalCodeWithName
[2m[36m(pid=28645)[0m     @     0x5555f4fd6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28645)[0m     @     0x5555f4f4b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28645)[0m     @     0x5555f4fd5baf _PyEval_EvalCodeWithName
[2m[36m(pid=28645)[0m     @     0x5555f4fd6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28645)[0m     @     0x5555f4f4b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28645)[0m     @     0x5555f4fd5baf _PyEval_EvalCodeWithName
[2m[36m(pid=28645)[0m     @     0x5555f4fd6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28645)[0m     @     0x5555f4f4b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28645)[0m     @     0x5555f4fd5baf _PyEval_EvalCodeWithName
[2m[36m(pid=28645)[0m     @     0x5555f4fd6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28645)[0m     @     0x5555f4f4b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28639)[0m     @     0x7f4c8cb0a5a4 at::native::copy_()
[2m[36m(pid=28639)[0m     @     0x7f4c8d1f54f5 at::Tensor::copy_()
[2m[36m(pid=28639)[0m     @     0x7f4c8f6c88de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28639)[0m     @     0x7f4c8d1f54f5 at::Tensor::copy_()
[2m[36m(pid=28532)[0m     @     0x7f57761cf79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28532)[0m     @     0x55697af42fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28532)[0m     @     0x55697ae9db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28532)[0m     @     0x55697af28baf _PyEval_EvalCodeWithName
[2m[36m(pid=28532)[0m     @     0x55697af29a20 method_vectorcall
[2m[36m(pid=28532)[0m     @     0x55697ae9dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28532)[0m     @     0x55697af28baf _PyEval_EvalCodeWithName
[2m[36m(pid=28532)[0m     @     0x55697af29643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28532)[0m     @     0x55697ae9e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28532)[0m     @     0x55697af28baf _PyEval_EvalCodeWithName
[2m[36m(pid=28532)[0m     @     0x55697af29643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28532)[0m     @     0x55697ae9e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28532)[0m     @     0x55697af28baf _PyEval_EvalCodeWithName
[2m[36m(pid=28532)[0m     @     0x55697af29643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28532)[0m     @     0x55697ae9e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28532)[0m     @     0x55697af28baf _PyEval_EvalCodeWithName
[2m[36m(pid=28532)[0m     @     0x55697af29643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28532)[0m     @     0x55697ae9e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28510)[0m     @     0x7fbeb10a04f5 at::Tensor::copy_()
[2m[36m(pid=28510)[0m     @     0x7fbeb714b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28510)[0m     @     0x558792a17fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28510)[0m     @     0x558792972b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28510)[0m     @     0x5587929fdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28510)[0m     @     0x5587929fea20 method_vectorcall
[2m[36m(pid=28510)[0m     @     0x558792972bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28510)[0m     @     0x5587929fdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28510)[0m     @     0x5587929fe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28510)[0m     @     0x558792973689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28510)[0m     @     0x5587929fdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28510)[0m     @     0x5587929fe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28510)[0m     @     0x558792973689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28510)[0m     @     0x5587929fdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28510)[0m     @     0x5587929fe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28510)[0m     @     0x558792973689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28510)[0m     @     0x5587929fdbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28510)[0m     @     0x5587929fe643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28510)[0m     @     0x558792973689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28528)[0m     @     0x7f4c25ef7a93 at::native::DispatchStub<>::operator()<>()
[2m[36m(pid=28528)[0m     @     0x7f4c25ef5388 at::native::copy_impl()
[2m[36m(pid=28528)[0m     @     0x7f4c25ef75a4 at::native::copy_()
[2m[36m(pid=28649)[0m     @     0x7f7f13efa4f5 at::Tensor::copy_()
[2m[36m(pid=28649)[0m     @     0x7f7f19fa579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28649)[0m     @     0x55ff9175dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28649)[0m     @     0x55ff916b8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28649)[0m     @     0x55ff91743baf _PyEval_EvalCodeWithName
[2m[36m(pid=28649)[0m     @     0x55ff91744a20 method_vectorcall
[2m[36m(pid=28649)[0m     @     0x55ff916b8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28649)[0m     @     0x55ff91743baf _PyEval_EvalCodeWithName
[2m[36m(pid=28649)[0m     @     0x55ff91744643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28649)[0m     @     0x55ff916b9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28649)[0m     @     0x55ff91743baf _PyEval_EvalCodeWithName
[2m[36m(pid=28649)[0m     @     0x55ff91744643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28649)[0m     @     0x55ff916b9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28649)[0m     @     0x55ff91743baf _PyEval_EvalCodeWithName
[2m[36m(pid=28649)[0m     @     0x55ff91744643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28649)[0m     @     0x55ff916b9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28649)[0m     @     0x55ff91743baf _PyEval_EvalCodeWithName
[2m[36m(pid=28649)[0m     @     0x55ff91744643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28649)[0m     @     0x55ff916b9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28650)[0m     @     0x7f15a38ba4f5 at::Tensor::copy_()
[2m[36m(pid=28650)[0m     @     0x7f15a5d8d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28650)[0m     @     0x7f15a38ba4f5 at::Tensor::copy_()
[2m[36m(pid=28650)[0m     @     0x7f15a996579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28650)[0m     @     0x5582b6f51fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28650)[0m     @     0x5582b6eacb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28650)[0m     @     0x5582b6f37baf _PyEval_EvalCodeWithName
[2m[36m(pid=28650)[0m     @     0x5582b6f38a20 method_vectorcall
[2m[36m(pid=28650)[0m     @     0x5582b6eacbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28650)[0m     @     0x5582b6f37baf _PyEval_EvalCodeWithName
[2m[36m(pid=28650)[0m     @     0x5582b6f38643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28650)[0m     @     0x5582b6ead689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28650)[0m     @     0x5582b6f37baf _PyEval_EvalCodeWithName
[2m[36m(pid=28650)[0m     @     0x5582b6f38643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28650)[0m     @     0x5582b6ead689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28650)[0m     @     0x5582b6f37baf _PyEval_EvalCodeWithName
[2m[36m(pid=28650)[0m     @     0x5582b6f38643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28650)[0m     @     0x5582b6ead689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28650)[0m     @     0x5582b6f37baf _PyEval_EvalCodeWithName
[2m[36m(pid=28650)[0m     @     0x5582b6f38643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28650)[0m     @     0x5582b6ead689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28594)[0m     @     0x7f14ea8088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28594)[0m     @     0x7f14e83354f5 at::Tensor::copy_()
[2m[36m(pid=28594)[0m     @     0x7f14ee3e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28594)[0m     @     0x557c8bd16fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28594)[0m     @     0x557c8bc71b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28594)[0m     @     0x557c8bcfcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28594)[0m     @     0x557c8bcfda20 method_vectorcall
[2m[36m(pid=28594)[0m     @     0x557c8bc71bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28594)[0m     @     0x557c8bcfcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28594)[0m     @     0x557c8bcfd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28594)[0m     @     0x557c8bc72689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28594)[0m     @     0x557c8bcfcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28594)[0m     @     0x557c8bcfd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28594)[0m     @     0x557c8bc72689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28594)[0m     @     0x557c8bcfcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28594)[0m     @     0x557c8bcfd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28594)[0m     @     0x557c8bc72689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28594)[0m     @     0x557c8bcfcbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28594)[0m     @     0x557c8bcfd643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28594)[0m     @     0x557c8bc72689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28590)[0m     @     0x7f82768088de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28590)[0m     @     0x7f82743354f5 at::Tensor::copy_()
[2m[36m(pid=28590)[0m     @     0x7f827a3e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28590)[0m     @     0x564d5c0d9fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28590)[0m     @     0x564d5c034b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28590)[0m     @     0x564d5c0bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28590)[0m     @     0x564d5c0c0a20 method_vectorcall
[2m[36m(pid=28590)[0m     @     0x564d5c034bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28590)[0m     @     0x564d5c0bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28590)[0m     @     0x564d5c0c0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28590)[0m     @     0x564d5c035689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28590)[0m     @     0x564d5c0bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28590)[0m     @     0x564d5c0c0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28590)[0m     @     0x564d5c035689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28590)[0m     @     0x564d5c0bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28590)[0m     @     0x564d5c0c0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28590)[0m     @     0x564d5c035689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28590)[0m     @     0x564d5c0bfbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28590)[0m     @     0x564d5c0c0643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28590)[0m     @     0x564d5c035689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28519)[0m     @     0x55c7b7ed1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28519)[0m     @     0x55c7b7f5bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28519)[0m     @     0x55c7b7f5c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28519)[0m     @     0x55c7b7ed1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28519)[0m     @     0x55c7b7f5bbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28519)[0m     @     0x55c7b7f5c643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28519)[0m     @     0x55c7b7ed1689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28615)[0m     @     0x7ee05f14e4f5 at::Tensor::copy_()
[2m[36m(pid=28615)[0m     @     0x7ee0651f979f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28615)[0m     @     0x56305ad8cfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28615)[0m     @     0x56305ace7b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28615)[0m     @     0x56305ad72baf _PyEval_EvalCodeWithName
[2m[36m(pid=28615)[0m     @     0x56305ad73a20 method_vectorcall
[2m[36m(pid=28615)[0m     @     0x56305ace7bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28615)[0m     @     0x56305ad72baf _PyEval_EvalCodeWithName
[2m[36m(pid=28615)[0m     @     0x56305ad73643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28615)[0m     @     0x56305ace8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28615)[0m     @     0x56305ad72baf _PyEval_EvalCodeWithName
[2m[36m(pid=28615)[0m     @     0x56305ad73643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28615)[0m     @     0x56305ace8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28615)[0m     @     0x56305ad72baf _PyEval_EvalCodeWithName
[2m[36m(pid=28615)[0m     @     0x56305ad73643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28615)[0m     @     0x56305ace8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28615)[0m     @     0x56305ad72baf _PyEval_EvalCodeWithName
[2m[36m(pid=28615)[0m     @     0x56305ad73643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28615)[0m     @     0x56305ace8689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28515)[0m     @     0x7ef5320ba4f5 at::Tensor::copy_()
[2m[36m(pid=28515)[0m     @     0x7ef53458d8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28515)[0m     @     0x7ef5320ba4f5 at::Tensor::copy_()
[2m[36m(pid=28515)[0m     @     0x7ef53816579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28515)[0m     @     0x55e0128eafd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28515)[0m     @     0x55e012845b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28515)[0m     @     0x55e0128d0baf _PyEval_EvalCodeWithName
[2m[36m(pid=28515)[0m     @     0x55e0128d1a20 method_vectorcall
[2m[36m(pid=28515)[0m     @     0x55e012845bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28515)[0m     @     0x55e0128d0baf _PyEval_EvalCodeWithName
[2m[36m(pid=28515)[0m     @     0x55e0128d1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28515)[0m     @     0x55e012846689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28515)[0m     @     0x55e0128d0baf _PyEval_EvalCodeWithName
[2m[36m(pid=28515)[0m     @     0x55e0128d1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28515)[0m     @     0x55e012846689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28515)[0m     @     0x55e0128d0baf _PyEval_EvalCodeWithName
[2m[36m(pid=28515)[0m     @     0x55e0128d1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28515)[0m     @     0x55e012846689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28515)[0m     @     0x55e0128d0baf _PyEval_EvalCodeWithName
[2m[36m(pid=28515)[0m     @     0x55e0128d1643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28515)[0m     @     0x55e012846689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28586)[0m     @     0x556b9bc0bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28586)[0m     @     0x556b9bc96baf _PyEval_EvalCodeWithName
[2m[36m(pid=28586)[0m     @     0x556b9bc97643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28586)[0m     @     0x556b9bc0c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28586)[0m     @     0x556b9bc96baf _PyEval_EvalCodeWithName
[2m[36m(pid=28586)[0m     @     0x556b9bc97643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28586)[0m     @     0x556b9bc0c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28586)[0m     @     0x556b9bc96baf _PyEval_EvalCodeWithName
[2m[36m(pid=28586)[0m     @     0x556b9bc97643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28586)[0m     @     0x556b9bc0c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28586)[0m     @     0x556b9bc96baf _PyEval_EvalCodeWithName
[2m[36m(pid=28586)[0m     @     0x556b9bc97643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28586)[0m     @     0x556b9bc0c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28548)[0m     @     0x7f05c560e388 at::native::copy_impl()
[2m[36m(pid=28548)[0m     @     0x7f05c56105a4 at::native::copy_()
[2m[36m(pid=28548)[0m     @     0x7f05c5cfb4f5 at::Tensor::copy_()
[2m[36m(pid=28525)[0m     @     0x55bd8df1f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28525)[0m     @     0x55bd8dfa9baf _PyEval_EvalCodeWithName
[2m[36m(pid=28525)[0m     @     0x55bd8dfaa643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28525)[0m     @     0x55bd8df1f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28537)[0m     @     0x55f285a1dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28537)[0m     @     0x55f285a1e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28537)[0m     @     0x55f285993689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28537)[0m     @     0x55f285a1dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28537)[0m     @     0x55f285a1e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28537)[0m     @     0x55f285993689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28537)[0m     @     0x55f285a1dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28537)[0m     @     0x55f285a1e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28537)[0m     @     0x55f285993689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28537)[0m     @     0x55f285a1dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28537)[0m     @     0x55f285a1e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28537)[0m     @     0x55f285993689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28580)[0m     @     0x5642b5e4d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28580)[0m     @     0x5642b5dc2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28580)[0m     @     0x5642b5e4cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28580)[0m     @     0x5642b5e4d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28580)[0m     @     0x5642b5dc2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28580)[0m     @     0x5642b5e4cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28580)[0m     @     0x5642b5e4d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28580)[0m     @     0x5642b5dc2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28580)[0m     @     0x5642b5e4cbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28580)[0m     @     0x5642b5e4d643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28580)[0m     @     0x5642b5dc2689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28596)[0m     @     0x7f04012354f5 at::Tensor::copy_()
[2m[36m(pid=28596)[0m     @     0x7f04072e079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28596)[0m     @     0x56137eaadfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28596)[0m     @     0x56137ea08b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28596)[0m     @     0x56137ea93baf _PyEval_EvalCodeWithName
[2m[36m(pid=28596)[0m     @     0x56137ea94a20 method_vectorcall
[2m[36m(pid=28596)[0m     @     0x56137ea08bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28596)[0m     @     0x56137ea93baf _PyEval_EvalCodeWithName
[2m[36m(pid=28596)[0m     @     0x56137ea94643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28596)[0m     @     0x56137ea09689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28596)[0m     @     0x56137ea93baf _PyEval_EvalCodeWithName
[2m[36m(pid=28596)[0m     @     0x56137ea94643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28596)[0m     @     0x56137ea09689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28596)[0m     @     0x56137ea93baf _PyEval_EvalCodeWithName
[2m[36m(pid=28596)[0m     @     0x56137ea94643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28596)[0m     @     0x56137ea09689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28596)[0m     @     0x56137ea93baf _PyEval_EvalCodeWithName
[2m[36m(pid=28596)[0m     @     0x56137ea94643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28596)[0m     @     0x56137ea09689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28514)[0m     @     0x56289bd6afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28514)[0m     @     0x56289bcc5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28514)[0m     @     0x56289bd50baf _PyEval_EvalCodeWithName
[2m[36m(pid=28514)[0m     @     0x56289bd51a20 method_vectorcall
[2m[36m(pid=28514)[0m     @     0x56289bcc5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28514)[0m     @     0x56289bd50baf _PyEval_EvalCodeWithName
[2m[36m(pid=28514)[0m     @     0x56289bd51643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28514)[0m     @     0x56289bcc6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28514)[0m     @     0x56289bd50baf _PyEval_EvalCodeWithName
[2m[36m(pid=28514)[0m     @     0x56289bd51643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28514)[0m     @     0x56289bcc6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28514)[0m     @     0x56289bd50baf _PyEval_EvalCodeWithName
[2m[36m(pid=28514)[0m     @     0x56289bd51643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28514)[0m     @     0x56289bcc6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28514)[0m     @     0x56289bd50baf _PyEval_EvalCodeWithName
[2m[36m(pid=28514)[0m     @     0x56289bd51643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28514)[0m     @     0x56289bcc6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28588)[0m     @     0x7efe417e58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28588)[0m     @     0x7efe3f3124f5 at::Tensor::copy_()
[2m[36m(pid=28588)[0m     @     0x7efe453bd79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28588)[0m     @     0x55e2afff1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28588)[0m     @     0x55e2aff4cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28588)[0m     @     0x55e2affd7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28588)[0m     @     0x55e2affd8a20 method_vectorcall
[2m[36m(pid=28588)[0m     @     0x55e2aff4cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28588)[0m     @     0x55e2affd7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28588)[0m     @     0x55e2affd8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28588)[0m     @     0x55e2aff4d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28588)[0m     @     0x55e2affd7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28588)[0m     @     0x55e2affd8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28588)[0m     @     0x55e2aff4d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28588)[0m     @     0x55e2affd7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28588)[0m     @     0x55e2affd8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28588)[0m     @     0x55e2aff4d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28588)[0m     @     0x55e2affd7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28588)[0m     @     0x55e2affd8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28588)[0m     @     0x55e2aff4d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28579)[0m     @     0x7f439ece54f5 at::Tensor::copy_()
[2m[36m(pid=28579)[0m     @     0x7f43a4d9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28579)[0m     @     0x5644b7fbffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28579)[0m     @     0x5644b7f1ab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28579)[0m     @     0x5644b7fa5baf _PyEval_EvalCodeWithName
[2m[36m(pid=28579)[0m     @     0x5644b7fa6a20 method_vectorcall
[2m[36m(pid=28579)[0m     @     0x5644b7f1abfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28579)[0m     @     0x5644b7fa5baf _PyEval_EvalCodeWithName
[2m[36m(pid=28579)[0m     @     0x5644b7fa6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28579)[0m     @     0x5644b7f1b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28579)[0m     @     0x5644b7fa5baf _PyEval_EvalCodeWithName
[2m[36m(pid=28579)[0m     @     0x5644b7fa6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28579)[0m     @     0x5644b7f1b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28579)[0m     @     0x5644b7fa5baf _PyEval_EvalCodeWithName
[2m[36m(pid=28579)[0m     @     0x5644b7fa6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28579)[0m     @     0x5644b7f1b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28579)[0m     @     0x5644b7fa5baf _PyEval_EvalCodeWithName
[2m[36m(pid=28579)[0m     @     0x5644b7fa6643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28579)[0m     @     0x5644b7f1b689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28524)[0m     @     0x555a07edbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28524)[0m     @     0x555a07edc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28524)[0m     @     0x555a07e51689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28524)[0m     @     0x555a07edbbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28524)[0m     @     0x555a07edc643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28524)[0m     @     0x555a07e51689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28574)[0m     @     0x7ee34d0644f5 at::Tensor::copy_()
[2m[36m(pid=28574)[0m     @     0x7ee34f5378de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28574)[0m     @     0x7ee34d0644f5 at::Tensor::copy_()
[2m[36m(pid=28574)[0m     @     0x7ee35310f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28574)[0m     @     0x5556bff4bfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28574)[0m     @     0x5556bfea6b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28574)[0m     @     0x5556bff31baf _PyEval_EvalCodeWithName
[2m[36m(pid=28574)[0m     @     0x5556bff32a20 method_vectorcall
[2m[36m(pid=28574)[0m     @     0x5556bfea6bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28574)[0m     @     0x5556bff31baf _PyEval_EvalCodeWithName
[2m[36m(pid=28574)[0m     @     0x5556bff32643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28574)[0m     @     0x5556bfea7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28574)[0m     @     0x5556bff31baf _PyEval_EvalCodeWithName
[2m[36m(pid=28574)[0m     @     0x5556bff32643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28574)[0m     @     0x5556bfea7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28574)[0m     @     0x5556bff31baf _PyEval_EvalCodeWithName
[2m[36m(pid=28574)[0m     @     0x5556bff32643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28574)[0m     @     0x5556bfea7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28574)[0m     @     0x5556bff31baf _PyEval_EvalCodeWithName
[2m[36m(pid=28574)[0m     @     0x5556bff32643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28574)[0m     @     0x5556bfea7689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28611)[0m     @     0x5606269babaf _PyEval_EvalCodeWithName
[2m[36m(pid=28611)[0m     @     0x5606269bb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28611)[0m     @     0x560626930689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28611)[0m     @     0x5606269babaf _PyEval_EvalCodeWithName
[2m[36m(pid=28611)[0m     @     0x5606269bb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28611)[0m     @     0x560626930689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28611)[0m     @     0x5606269babaf _PyEval_EvalCodeWithName
[2m[36m(pid=28611)[0m     @     0x5606269bb643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28611)[0m     @     0x560626930689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28605)[0m     @     0x7f9783c338de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28605)[0m     @     0x7f97817604f5 at::Tensor::copy_()
[2m[36m(pid=28605)[0m     @     0x7f978780b79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28605)[0m     @     0x55ef7cb7dfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28605)[0m     @     0x55ef7cad8b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28605)[0m     @     0x55ef7cb63baf _PyEval_EvalCodeWithName
[2m[36m(pid=28605)[0m     @     0x55ef7cb64a20 method_vectorcall
[2m[36m(pid=28605)[0m     @     0x55ef7cad8bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28605)[0m     @     0x55ef7cb63baf _PyEval_EvalCodeWithName
[2m[36m(pid=28605)[0m     @     0x55ef7cb64643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28605)[0m     @     0x55ef7cad9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28605)[0m     @     0x55ef7cb63baf _PyEval_EvalCodeWithName
[2m[36m(pid=28605)[0m     @     0x55ef7cb64643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28605)[0m     @     0x55ef7cad9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28605)[0m     @     0x55ef7cb63baf _PyEval_EvalCodeWithName
[2m[36m(pid=28605)[0m     @     0x55ef7cb64643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28605)[0m     @     0x55ef7cad9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28605)[0m     @     0x55ef7cb63baf _PyEval_EvalCodeWithName
[2m[36m(pid=28605)[0m     @     0x55ef7cb64643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28605)[0m     @     0x55ef7cad9689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28608)[0m     @     0x55f495029b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28608)[0m     @     0x55f4950b4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28608)[0m     @     0x55f4950b5a20 method_vectorcall
[2m[36m(pid=28608)[0m     @     0x55f495029bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28608)[0m     @     0x55f4950b4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28608)[0m     @     0x55f4950b5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28608)[0m     @     0x55f49502a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28608)[0m     @     0x55f4950b4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28608)[0m     @     0x55f4950b5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28608)[0m     @     0x55f49502a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28608)[0m     @     0x55f4950b4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28608)[0m     @     0x55f4950b5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28608)[0m     @     0x55f49502a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28608)[0m     @     0x55f4950b4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28608)[0m     @     0x55f4950b5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28608)[0m     @     0x55f49502a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28517)[0m     @     0x7f790f46579f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28517)[0m     @     0x55cf5575ffd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28517)[0m     @     0x55cf556bab08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28517)[0m     @     0x55cf55745baf _PyEval_EvalCodeWithName
[2m[36m(pid=28517)[0m     @     0x55cf55746a20 method_vectorcall
[2m[36m(pid=28517)[0m     @     0x55cf556babfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28517)[0m     @     0x55cf55745baf _PyEval_EvalCodeWithName
[2m[36m(pid=28517)[0m     @     0x55cf55746643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28517)[0m     @     0x55cf556bb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28517)[0m     @     0x55cf55745baf _PyEval_EvalCodeWithName
[2m[36m(pid=28517)[0m     @     0x55cf55746643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28517)[0m     @     0x55cf556bb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28517)[0m     @     0x55cf55745baf _PyEval_EvalCodeWithName
[2m[36m(pid=28517)[0m     @     0x55cf55746643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28517)[0m     @     0x55cf556bb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28517)[0m     @     0x55cf55745baf _PyEval_EvalCodeWithName
[2m[36m(pid=28517)[0m     @     0x55cf55746643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28517)[0m     @     0x55cf556bb689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28575)[0m     @     0x561394ad3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28575)[0m     @     0x561394b5dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28575)[0m     @     0x561394b5e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28575)[0m     @     0x561394ad3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28575)[0m     @     0x561394b5dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28575)[0m     @     0x561394b5e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28575)[0m     @     0x561394ad3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28587)[0m     @     0x7f8caa0eb5a4 at::native::copy_()
[2m[36m(pid=28587)[0m     @     0x7f8caa7d64f5 at::Tensor::copy_()
[2m[36m(pid=28587)[0m     @     0x7f8cacca98de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28587)[0m     @     0x7f8caa7d64f5 at::Tensor::copy_()
[2m[36m(pid=28587)[0m     @     0x7f8cb047779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28587)[0m     @     0x555af810efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28587)[0m     @     0x555af8069b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28587)[0m     @     0x555af80f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28587)[0m     @     0x555af80f5a20 method_vectorcall
[2m[36m(pid=28587)[0m     @     0x555af8069bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28587)[0m     @     0x555af80f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28587)[0m     @     0x555af80f5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28587)[0m     @     0x555af806a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28587)[0m     @     0x555af80f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28587)[0m     @     0x555af80f5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28587)[0m     @     0x555af806a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28587)[0m     @     0x555af80f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28587)[0m     @     0x555af80f5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28587)[0m     @     0x555af806a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28587)[0m     @     0x555af80f4baf _PyEval_EvalCodeWithName
[2m[36m(pid=28587)[0m     @     0x555af80f5643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28587)[0m     @     0x555af806a689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28534)[0m     @     0x7ef36fa774f5 at::Tensor::copy_()
[2m[36m(pid=28534)[0m     @     0x7ef375b2279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28534)[0m     @     0x55e566653fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28534)[0m     @     0x55e5665aeb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28534)[0m     @     0x55e566639baf _PyEval_EvalCodeWithName
[2m[36m(pid=28534)[0m     @     0x55e56663aa20 method_vectorcall
[2m[36m(pid=28534)[0m     @     0x55e5665aebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28534)[0m     @     0x55e566639baf _PyEval_EvalCodeWithName
[2m[36m(pid=28534)[0m     @     0x55e56663a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28534)[0m     @     0x55e5665af689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28534)[0m     @     0x55e566639baf _PyEval_EvalCodeWithName
[2m[36m(pid=28534)[0m     @     0x55e56663a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28534)[0m     @     0x55e5665af689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28534)[0m     @     0x55e566639baf _PyEval_EvalCodeWithName
[2m[36m(pid=28534)[0m     @     0x55e56663a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28534)[0m     @     0x55e5665af689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28534)[0m     @     0x55e566639baf _PyEval_EvalCodeWithName
[2m[36m(pid=28534)[0m     @     0x55e56663a643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28534)[0m     @     0x55e5665af689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28634)[0m     @     0x7fbc368bd4f5 at::Tensor::copy_()
[2m[36m(pid=28634)[0m     @     0x7fbc3c96879f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28634)[0m     @     0x559527287fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28634)[0m     @     0x5595271e2b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28634)[0m     @     0x55952726dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28634)[0m     @     0x55952726ea20 method_vectorcall
[2m[36m(pid=28634)[0m     @     0x5595271e2bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28634)[0m     @     0x55952726dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28634)[0m     @     0x55952726e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28634)[0m     @     0x5595271e3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28634)[0m     @     0x55952726dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28634)[0m     @     0x55952726e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28634)[0m     @     0x5595271e3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28634)[0m     @     0x55952726dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28634)[0m     @     0x55952726e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28634)[0m     @     0x5595271e3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28634)[0m     @     0x55952726dbaf _PyEval_EvalCodeWithName
[2m[36m(pid=28634)[0m     @     0x55952726e643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28634)[0m     @     0x5595271e3689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28592)[0m     @     0x7f5efd9e54f5 at::Tensor::copy_()
[2m[36m(pid=28592)[0m     @     0x7f5f03a9079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28592)[0m     @     0x55cfd7ea2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28592)[0m     @     0x55cfd7dfdb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28592)[0m     @     0x55cfd7e88baf _PyEval_EvalCodeWithName
[2m[36m(pid=28592)[0m     @     0x55cfd7e89a20 method_vectorcall
[2m[36m(pid=28592)[0m     @     0x55cfd7dfdbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28592)[0m     @     0x55cfd7e88baf _PyEval_EvalCodeWithName
[2m[36m(pid=28592)[0m     @     0x55cfd7e89643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28592)[0m     @     0x55cfd7dfe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28592)[0m     @     0x55cfd7e88baf _PyEval_EvalCodeWithName
[2m[36m(pid=28592)[0m     @     0x55cfd7e89643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28592)[0m     @     0x55cfd7dfe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28592)[0m     @     0x55cfd7e88baf _PyEval_EvalCodeWithName
[2m[36m(pid=28592)[0m     @     0x55cfd7e89643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28592)[0m     @     0x55cfd7dfe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28592)[0m     @     0x55cfd7e88baf _PyEval_EvalCodeWithName
[2m[36m(pid=28592)[0m     @     0x55cfd7e89643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28592)[0m     @     0x55cfd7dfe689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28630)[0m     @     0x7f3b0be514f5 at::Tensor::copy_()
[2m[36m(pid=28630)[0m     @     0x7f3b0e3248de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28630)[0m     @     0x7f3b0be514f5 at::Tensor::copy_()
[2m[36m(pid=28630)[0m     @     0x7f3b11efc79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28589)[0m     @     0x7f51b25ca8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28589)[0m     @     0x7f51b00f74f5 at::Tensor::copy_()
[2m[36m(pid=28589)[0m     @     0x7f51b61a279f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28589)[0m     @     0x5598682f1fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28589)[0m     @     0x55986824cb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28589)[0m     @     0x5598682d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28589)[0m     @     0x5598682d8a20 method_vectorcall
[2m[36m(pid=28589)[0m     @     0x55986824cbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28589)[0m     @     0x5598682d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28589)[0m     @     0x5598682d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28589)[0m     @     0x55986824d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28589)[0m     @     0x5598682d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28589)[0m     @     0x5598682d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28589)[0m     @     0x55986824d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28589)[0m     @     0x5598682d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28589)[0m     @     0x5598682d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28589)[0m     @     0x55986824d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28589)[0m     @     0x5598682d7baf _PyEval_EvalCodeWithName
[2m[36m(pid=28589)[0m     @     0x5598682d8643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28589)[0m     @     0x55986824d689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28593)[0m     @     0x7eea6ac8f79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28593)[0m     @     0x558d0e8ebfd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28593)[0m     @     0x558d0e846b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28593)[0m     @     0x558d0e8d1baf _PyEval_EvalCodeWithName
[2m[36m(pid=28593)[0m     @     0x558d0e8d2a20 method_vectorcall
[2m[36m(pid=28593)[0m     @     0x558d0e846bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28593)[0m     @     0x558d0e8d1baf _PyEval_EvalCodeWithName
[2m[36m(pid=28593)[0m     @     0x558d0e8d2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28593)[0m     @     0x558d0e847689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28593)[0m     @     0x558d0e8d1baf _PyEval_EvalCodeWithName
[2m[36m(pid=28593)[0m     @     0x558d0e8d2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28593)[0m     @     0x558d0e847689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28593)[0m     @     0x558d0e8d1baf _PyEval_EvalCodeWithName
[2m[36m(pid=28593)[0m     @     0x558d0e8d2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28593)[0m     @     0x558d0e847689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28593)[0m     @     0x558d0e8d1baf _PyEval_EvalCodeWithName
[2m[36m(pid=28593)[0m     @     0x558d0e8d2643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28593)[0m     @     0x558d0e847689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28639)[0m     @     0x7f4c932a079f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28639)[0m     @     0x5588fa7f0fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28639)[0m     @     0x5588fa74bb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28639)[0m     @     0x5588fa7d6baf _PyEval_EvalCodeWithName
[2m[36m(pid=28639)[0m     @     0x5588fa7d7a20 method_vectorcall
[2m[36m(pid=28639)[0m     @     0x5588fa74bbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28639)[0m     @     0x5588fa7d6baf _PyEval_EvalCodeWithName
[2m[36m(pid=28639)[0m     @     0x5588fa7d7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28639)[0m     @     0x5588fa74c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28639)[0m     @     0x5588fa7d6baf _PyEval_EvalCodeWithName
[2m[36m(pid=28639)[0m     @     0x5588fa7d7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28639)[0m     @     0x5588fa74c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28639)[0m     @     0x5588fa7d6baf _PyEval_EvalCodeWithName
[2m[36m(pid=28639)[0m     @     0x5588fa7d7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28639)[0m     @     0x5588fa74c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28639)[0m     @     0x5588fa7d6baf _PyEval_EvalCodeWithName
[2m[36m(pid=28639)[0m     @     0x5588fa7d7643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28639)[0m     @     0x5588fa74c689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28528)[0m     @     0x7f4c265e24f5 at::Tensor::copy_()
[2m[36m(pid=28528)[0m     @     0x7f4c28ab58de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28528)[0m     @     0x7f4c265e24f5 at::Tensor::copy_()
[2m[36m(pid=28528)[0m     @     0x7f4c2c68d79f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28528)[0m     @     0x561cb628efd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28528)[0m     @     0x561cb61e9b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28528)[0m     @     0x561cb6274baf _PyEval_EvalCodeWithName
[2m[36m(pid=28528)[0m     @     0x561cb6275a20 method_vectorcall
[2m[36m(pid=28528)[0m     @     0x561cb61e9bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28528)[0m     @     0x561cb6274baf _PyEval_EvalCodeWithName
[2m[36m(pid=28528)[0m     @     0x561cb6275643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28528)[0m     @     0x561cb61ea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28528)[0m     @     0x561cb6274baf _PyEval_EvalCodeWithName
[2m[36m(pid=28528)[0m     @     0x561cb6275643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28528)[0m     @     0x561cb61ea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28528)[0m     @     0x561cb6274baf _PyEval_EvalCodeWithName
[2m[36m(pid=28528)[0m     @     0x561cb6275643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28528)[0m     @     0x561cb61ea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28528)[0m     @     0x561cb6274baf _PyEval_EvalCodeWithName
[2m[36m(pid=28528)[0m     @     0x561cb6275643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28528)[0m     @     0x561cb61ea689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28548)[0m     @     0x7f05c81ce8de torch::autograd::VariableType::(anonymous namespace)::copy_()
[2m[36m(pid=28548)[0m     @     0x7f05c5cfb4f5 at::Tensor::copy_()
[2m[36m(pid=28548)[0m     @     0x7f05cbda679f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28548)[0m     @     0x5592335c2fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28548)[0m     @     0x55923351db08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28548)[0m     @     0x5592335a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=28548)[0m     @     0x5592335a9a20 method_vectorcall
[2m[36m(pid=28548)[0m     @     0x55923351dbfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28548)[0m     @     0x5592335a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=28548)[0m     @     0x5592335a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28548)[0m     @     0x55923351e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28548)[0m     @     0x5592335a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=28548)[0m     @     0x5592335a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28548)[0m     @     0x55923351e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28548)[0m     @     0x5592335a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=28548)[0m     @     0x5592335a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28548)[0m     @     0x55923351e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28548)[0m     @     0x5592335a8baf _PyEval_EvalCodeWithName
[2m[36m(pid=28548)[0m     @     0x5592335a9643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28548)[0m     @     0x55923351e689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28637)[0m     @     0x7fc745f0c4f5 at::Tensor::copy_()
[2m[36m(pid=28637)[0m     @     0x7fc74bfb779f torch::autograd::THPVariable_copy_()
[2m[36m(pid=28637)[0m     @     0x55b02024afd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28637)[0m     @     0x55b0201a5b08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28637)[0m     @     0x55b020230baf _PyEval_EvalCodeWithName
[2m[36m(pid=28637)[0m     @     0x55b020231a20 method_vectorcall
[2m[36m(pid=28637)[0m     @     0x55b0201a5bfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28637)[0m     @     0x55b020230baf _PyEval_EvalCodeWithName
[2m[36m(pid=28637)[0m     @     0x55b020231643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28637)[0m     @     0x55b0201a6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28637)[0m     @     0x55b020230baf _PyEval_EvalCodeWithName
[2m[36m(pid=28637)[0m     @     0x55b020231643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28637)[0m     @     0x55b0201a6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28637)[0m     @     0x55b020230baf _PyEval_EvalCodeWithName
[2m[36m(pid=28637)[0m     @     0x55b020231643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28637)[0m     @     0x55b0201a6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28637)[0m     @     0x55b020230baf _PyEval_EvalCodeWithName
[2m[36m(pid=28637)[0m     @     0x55b020231643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28637)[0m     @     0x55b0201a6689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28630)[0m     @     0x55f64c9d3fd7 method_vectorcall_VARARGS_KEYWORDS
[2m[36m(pid=28630)[0m     @     0x55f64c92eb08 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28630)[0m     @     0x55f64c9b9baf _PyEval_EvalCodeWithName
[2m[36m(pid=28630)[0m     @     0x55f64c9baa20 method_vectorcall
[2m[36m(pid=28630)[0m     @     0x55f64c92ebfd _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28630)[0m     @     0x55f64c9b9baf _PyEval_EvalCodeWithName
[2m[36m(pid=28630)[0m     @     0x55f64c9ba643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28630)[0m     @     0x55f64c92f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28630)[0m     @     0x55f64c9b9baf _PyEval_EvalCodeWithName
[2m[36m(pid=28630)[0m     @     0x55f64c9ba643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28630)[0m     @     0x55f64c92f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28630)[0m     @     0x55f64c9b9baf _PyEval_EvalCodeWithName
[2m[36m(pid=28630)[0m     @     0x55f64c9ba643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28630)[0m     @     0x55f64c92f689 _PyEval_EvalFrameDefault.cold.2792
[2m[36m(pid=28630)[0m     @     0x55f64c9b9baf _PyEval_EvalCodeWithName
[2m[36m(pid=28630)[0m     @     0x55f64c9ba643 _PyFunction_Vectorcall.localalias.353
[2m[36m(pid=28630)[0m     @     0x55f64c92f689 _PyEval_EvalFrameDefault.cold.2792
2020-11-05 10:37:01,723	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff43fb47bd01000000.
2020-11-05 10:37:01,723	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffbdff035801000000.
2020-11-05 10:37:01,726	ERROR trial_runner.py:567 -- Trial PPO_jss_env_d27b6_00000: Error processing event.
Traceback (most recent call last):
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trial_runner.py", line 515, in _process_trial
    result = self.trial_executor.fetch_result(trial)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/ray_trial_executor.py", line 488, in fetch_result
    result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/worker.py", line 1428, in get
    raise value.as_instanceof_cause()
ray.exceptions.RayTaskError: [36mray::PPO.train()[39m (pid=28642, ip=172.17.0.4)
  File "python/ray/_raylet.pyx", line 484, in ray._raylet.execute_task
  File "python/ray/_raylet.pyx", line 438, in ray._raylet.execute_task.function_executor
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 516, in train
    raise e
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer.py", line 505, in train
    result = Trainable.train(self)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/trainable.py", line 336, in train
    result = self.step()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/rllib/agents/trainer_template.py", line 134, in step
    res = next(self.train_exec_impl)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 756, in __next__
    return next(self.built_iterator)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 843, in apply_filter
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 876, in apply_flatten
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 828, in add_wait_hooks
    item = next(it)
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 783, in apply_foreach
    for item in it:
  [Previous line repeated 1 more time]
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 466, in base_iterator
    actor_set.init_actors()
  File "/root/miniconda3/lib/python3.8/site-packages/ray/util/iter.py", line 1238, in init_actors
    ray.get([a.par_iter_init.remote(self.transforms) for a in self.actors])
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
== Status ==
Memory usage on this node: 24.5/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/558.15 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_d27b6_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_d27b6_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_d27b6_00000_0_2020-11-05_10-36-54/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

2020-11-05 10:37:01,734	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff0314ce3001000000.
2020-11-05 10:37:01,735	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff31c3fed901000000.
2020-11-05 10:37:01,735	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff4100f4fd01000000.
2020-11-05 10:37:01,735	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffa97540c201000000.
2020-11-05 10:37:01,735	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffe0497dac01000000.
== Status ==
Memory usage on this node: 24.3/754.6 GiB
Using FIFO scheduling algorithm.
Resources requested: 0/80 CPUs, 0/1 GPUs, 0.0/558.15 GiB heap, 0.0/128.52 GiB objects (0/1.0 accelerator_type:RTX)
Result logdir: /root/ray_results/ppo-jss
Number of trials: 1 (1 ERROR)
+-------------------------+----------+-------+
| Trial name              | status   | loc   |
|-------------------------+----------+-------|
| PPO_jss_env_d27b6_00000 | ERROR    |       |
+-------------------------+----------+-------+
Number of errored trials: 1
+-------------------------+--------------+-----------------------------------------------------------------------------------+
| Trial name              |   # failures | error file                                                                        |
|-------------------------+--------------+-----------------------------------------------------------------------------------|
| PPO_jss_env_d27b6_00000 |            1 | /root/ray_results/ppo-jss/PPO_jss_env_d27b6_00000_0_2020-11-05_10-36-54/error.txt |
+-------------------------+--------------+-----------------------------------------------------------------------------------+

2020-11-05 10:37:01,746	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff252160a301000000.
2020-11-05 10:37:01,746	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff821ddf4301000000.
2020-11-05 10:37:01,746	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff90aded9101000000.
2020-11-05 10:37:01,746	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff59d91ef301000000.
2020-11-05 10:37:01,767	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff7ef9157101000000.
2020-11-05 10:37:01,767	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff4e242e9f01000000.
2020-11-05 10:37:01,768	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff8168b55d01000000.
2020-11-05 10:37:01,768	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff091d563401000000.
2020-11-05 10:37:01,768	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff9d526f0201000000.
2020-11-05 10:37:01,778	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffff358dd45601000000.
Traceback (most recent call last):
  File "train.py", line 74, in <module>
    train_func()
  File "train.py", line 56, in train_func
    analysis = tune.run(PPOTrainer, config=config, stop=stop, name="ppo-jss")
  File "/root/miniconda3/lib/python3.8/site-packages/ray/tune/tune.py", line 427, in run
    raise TuneError("Trials did not complete", incomplete_trials)
ray.tune.error.TuneError: ('Trials did not complete', [PPO_jss_env_d27b6_00000])
2020-11-05 10:37:01,789	WARNING worker.py:1072 -- A worker died or was killed while executing task ffffffffffffffffc2621d1401000000.
